{
    "4BtnDialog": {
        "comments": [
            "{ Description: Draws a message dialog with up to 4 buttons and 3 lines",
            "\tof text and returns the number of the button that was pressed. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ The return value for this module is in the range of",
            "\t1 to 4 and identifies which button has been pressed. If one of the",
            "\tbuttons is labeled \"Cancel\", pressing <ESC> will cause the number of",
            "\tthe \"Cancel\" button to be returned. For any optional parameter that is",
            "\tto be set, all optional parameters preceding the desired one must be",
            "\tpresent, although they may be invalid. }"
        ],
        "snippets": [
            "System.4BtnDialog(",
            "\tIcon, { Optional. Any image value for the (41 x 41) icon to display in",
            "\t\tthe dialog. Set to \"Invalid\" to display only text with no icon.",
            "\t\tpredefined icons include: \\System\\Question_icon, \\System\\Error_icon,",
            "\t\tand \\System\\Warning_icon. }",
            "\tBtn1Label, { Required. Any text expression for the label on the first",
            "\t\tbutton. }",
            "\tBtn2Label, { An optional parameter giving any text expression for the",
            "\t\tlabel on the second button. If invalid, the button will be omitted. }",
            "\tBtn3Label, { An optional parameter giving any text expression for the",
            "\t\tlabel on the third button. If invalid, the button will be omitted. }",
            "\tBtn4Label, { An optional parameter giving any text expression for the",
            "\t\tlabel on the fourth button. If invalid, the button will be omitted. }",
            "\tText1, { An optional parameter giving any text expression for the",
            "\t\tfirst line of text to display. }",
            "\tText2, { An optional parameter giving any text expression for the",
            "\t\tsecond line of text to display. }",
            "\tText3, { A parameter giving any text expression for the third line of",
            "\t\ttext to display. Must be given as Invalid if there is to be no third",
            "\t\tline. }",
            "\tOpen, { An optional parameter that is any logical expression. If TRUE",
            "\t\t(non-0) the dialog will be open. If FALSE (0), it will be closed. The",
            "\t\tdefault is TRUE. Open will be set to FALSE after the dialog has been",
            "\t\tacknowledged. }",
            "\tModal, { An optional parameter that is any logical expression. If true",
            "\t\t(non-0), the dialog is modal A modal dialog is always displayed on top",
            "\t\tof the calling window and prevents further interaction with that",
            "\t\twindow. , if false (0) it is non-modal. This parameter will override",
            "\t\tthe System NoModal flag. If it is omitted, the NoModal flag will",
            "\t\tprevail. If the NoModal flag is also omitted, the dialog will default",
            "\t\tto being modal. }",
            "\tBoldFirst, { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0) the first line of text in the dialog will appear in",
            "\t\tboldface type. If false (0), it will not be bolded. The default is",
            "\t\tfalse. }",
            "\tTitle, { An optional parameter that is any text expression that gives",
            "\t\tthe title to appear in the window's title bar. }",
            "\tXPosPtr, { Optional pointer to a variable that stores the x-coordinate",
            "\t\tof the upper left of the dialog, relative to the current monitor. This",
            "\t\tparameter affects the position when the dialog opens, after which it",
            "\t\tis used only to return the current position of the dialog as placed by",
            "\t\tthe user. }",
            "\tYPosPtr, { Optional pointer to a variable that stores the y-coordinate",
            "\t\tof the upper left of the dialog, relative to the current monitor. This",
            "\t\tparameter affects the position when the dialog opens, after which it",
            "\t\tis used only to return the current position of the dialog as placed by",
            "\t\tthe user. }",
            "\tCloseButton, { An optional parameter that is the index of the button",
            "\t\tto which the title bar close button should be mapped (from 1 to 4). If",
            "\t\tCloseBtn is invalid, then the title bar close button is mapped to the",
            "\t\tfirst button with the same text as the CancelLabel or CloseLabel",
            "\t\tapplication properties. If no buttons match these labels, then \"0\" is",
            "\t\treturned when the dialog is closed using the title bar close button. }",
            "\tDefFocus, { An optional parameter that is the index of the button that",
            "\t\tshould have the focus when the dialog opens (from 1 to 4). If DefFocus",
            "\t\tis invalid, the first button has the focus when the dialog opens. }",
            "\tHelpFileName, { An optional parameter that is the name of the help",
            "\t\tfile containing the help topic for this dialog (as identified in the",
            "\t\tHelpContextID parameter). If HelpFileName or HelpContextID are",
            "\t\tinvalid, then the default is as per the Window function. }",
            "\tHelpContextID { An optional parameter that is the numeric context ID",
            "\t\tidentifying the help topic for this dialog (within the help file",
            "\t\tidentified in the HelpFileName parameter). If HelpFileName or",
            "\t\tHelpContextID are invalid, then the default is as per the Window",
            "\t\tfunction. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Abs": {
        "comments": [],
        "snippets": [],
        "is_steady_state": false,
        "is_script": false
    },
    "AbsTime": {
        "comments": [
            "{ Description: Absolute time. This function returns true when a",
            "\tmultiple of a fixed time has been reached. }",
            "{ The AbsTime function is designed to allow events to be scheduled at",
            "\tregular time intervals in real time. It is reset automatically when it",
            "\tappears in a true action trigger (IF), or when it appears in a",
            "\tfunction that resets its parameters. The parameters are relative to",
            "\tlocal time. If attempting to schedule an event for the same time",
            "\tacross servers in multiple time zones, the offset should be an",
            "\texpression relative to each time zone. Note that the behavior will",
            "\tdiffer depending on whether you use this function in a script code",
            "\tmodule or in a tag expression. In script code, the function will be",
            "\treset as described, and will wait for the next trigger to occur. In a",
            "\ttag expression, this function will not be reset after triggering.",
            "\tBecause AbsTime is ultimately based on midnight January 1st, 1970 (a",
            "\tThursday), it is possible in theory to use it for a weekly time",
            "\tinterval, with an appropriate offset for the day of the week starting",
            "\tfrom Thursday. In practice, TimeArrived may be more appropriate for a",
            "\tweekly trigger. VTScada includes an application property at the \\Code",
            "\tlevel named SecondFlasher. The value of this property changes from 0",
            "\tto 1 once a second, as near as possible to the change of the second.",
            "\tIn most cases, it is better to watch for the change of \\SecondFlasher",
            "\tthan to burden the system with an additional function to calculate",
            "\tone-second intervals. }"
        ],
        "snippets": [
            "AbsTime(",
            "\tEnable, { Required Boolean. Any expression giving the condition that",
            "\t\tallows the timer to operate. When this parameter is true (i.e. not 0),",
            "\t\tthe timer is \"running\". When this parameter is false (i.e. 0), the",
            "\t\ttimer stops and the function has a value of false. }",
            "\tInterval, { Required. Any numeric expression giving the time in",
            "\t\tseconds between the absolute time periods. This parameter must be",
            "\t\tstrictly greater than 0, otherwise the function value will be invalid.",
            "\t\t}",
            "\tOffset { Required. Offset is any numeric expression giving the time in",
            "\t\tseconds to shift the absolute time from multiples of the Interval",
            "\t\ttime. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "AcceptSecurityContext": {
        "comments": [
            "{ Description: Accepts a Kerberos security context from a client and",
            "\treturns the user principal name (UPN) from the context, along with any",
            "\toutput to be returned to the client for mutual authentication. }",
            "{ Used to validate a security context from a VIC. }"
        ],
        "snippets": [
            "AcceptSecurityContext(",
            "\tInputBuffer, { Required. The security context from a client }",
            "\tUserName, { Required. A variable that will receive the UPNformat",
            "\t\tusername of the user that created the context if the context is",
            "\t\tsuccessfully validated. }",
            "\tOutputBuffer { Required. Any security context response to be returned",
            "\t\tto a client. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Accumulate": {
        "comments": [
            "{ Description: Adds a tag and a value to be counted for that tag, to a",
            "\tnamed accumulator. }",
            "{ The Accumulate function always returns Invalid. It may be called in",
            "\tsteady state (for concise code), or as a subroutine call in a script",
            "\tto save RAM. This function is part of the HierarchicalAccumulator",
            "\tmodule, so must always be called as shown in the format. You will need",
            "\tthis function if creating a new type of tag, which also contains its",
            "\town built-in alarms. You may create an accumulator for any property of",
            "\tyour tag. The accumulator enables a fresh count to be generated at",
            "\tdifferent levels in a tag tree, and as tags are moved or disabled.",
            "\tAccess to the accumulation of active and unacknowledged alarms is",
            "\tprovided by the Alarm Manager's GetContainerNumUnacked and",
            "\tGetContainerNumActive functions. To access accumulations of your own",
            "\tcreation, use the \\HierarchicalAccumulator.GetValue function. }"
        ],
        "snippets": [
            "\\HierarchicalAccumulator.Accumulate(",
            "\tTagObj, { Required. The tag object that is contributing to the count }",
            "\tAccumulatorName, { Required. The name of the accumulator that the tag",
            "\t\tis contributing to. For example, two accumulator names in use by the",
            "\t\tAlarm Manager are, \"AlarmUnacked\" and \"AlarmActive\". If creating your",
            "\t\town accumulator, you may use any name you wish. }",
            "\tValue, { Required. The current value to count for the",
            "\t\tTagObj\\LocalUniqueID. Commonly a 1 or 0. }",
            "\tLocalUniqueID { Optional. If one tag contains items to be accumulated,",
            "\t\tuse this field to provide a locally unique identifier for each.",
            "\t\tExample: for accumulation of active alarms in Analog Status tag, this",
            "\t\tparameter will be \"Hi\" or \"Lo\", depending on which built-in alarm is",
            "\t\tbeing counted. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Ack": {
        "comments": [
            "{ Description: Will acknowledge an alarm. }"
        ],
        "snippets": [
            "\\AlarmManager.Ack(",
            "\tAlarmName, { Required. Unique name for the alarm. Typically the unique",
            "\t\tID, which can be obtained using GetAlarmName . If there are multiple",
            "\t\tbuilt-in alarms in a tag, the convention is to concatenate the",
            "\t\tUniqueID with a separator and a unique integer or string per alarm.",
            "\t\tFor example, Concat(Root\\UniqueID, \\AlarmSeparatorString, 0). }",
            "\tEventTime, { Optional UTC timestamp of the value. Defaults to the",
            "\t\tcurrent time. }",
            "\tAccountID, { Optional text. The name of the operator who acknowledged",
            "\t\tthe alarm. If invalid, the logged-in user (according to the Security",
            "\t\tManager) will be used. }",
            "\tDevice, { Optional text. Name of the client device that sent the",
            "\t\tacknowledgment. }",
            "\tRecordGUID, { Optional text. Acknowledge only this specific record.",
            "\t\tSee: Alarm API Structure Definitions }",
            "\tCustom, { Optional. A structure of custom fields to log. }",
            "\tMachineID, { Optional. The machine ID of the workstation linked with",
            "\t\tthis acknowledgement. }",
            "\tFromPLC { Optional. Used only with PLCAlarm tag. True when the Ack",
            "\t\ttook place in the PLC. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AckAllAlarms": {
        "comments": [
            "{ Description: Will acknowledge all unacknowledged alarms available to",
            "\tthe current user. }",
            "{ To confirm the acknowledgment of alarms use AckAllAlarmsPlusDlg }"
        ],
        "snippets": [
            "\\AlarmManager.AckAllAlarms(",
            "\tIgnoreSession { Required Boolean. True to ignore any filtering based",
            "\t\ton the calling module's session. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AckAllAlarmsPlusDlg": {
        "comments": [
            "{ Description: Will acknowledge all unacknowledged alarms available to",
            "\tthe current user after confirmation }",
            "{ This does what AckAllAlarms does but it includes a call to ask the",
            "\tuser, thus changing the behavior from a synchronous call to a",
            "\tasynchronous call. }"
        ],
        "snippets": [
            "\\AlarmManager.AckAllAlarmsPlusDlg(",
            "\tTestButton { Optional Boolean. Should be valid only when you are",
            "\t\tcalling this function from a test. A value of 0 simulates cancel. 1",
            "\t\tsimulates OK. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Acknowledge": {
        "comments": [
            "{ Description: Will acknowledge an alarm. }",
            "{ This subroutine's primary responsibility is to send RPC messages to",
            "\tother workstations. DoAcknowledge does the actual work of",
            "\tacknowledging. When an acknowledgment is done, the only field that",
            "\twill change is status. To change any other field, a custom",
            "\tDoAcknowledge that is aware of the structure of alarms within the",
            "\tapplication must be written. }"
        ],
        "snippets": [
            "\\AlarmManager\\Acknowledge(",
            "\tAlarmName, { Required. The name of the alarm (not the alarm object",
            "\t\tvalue that was passed to the Register subroutine) that will be",
            "\t\tacknowledged }",
            "\tEventTime, { Optional. Timestamp to use when adding this event to the",
            "\t\talarm lists. Defaults to CurrentTime() }",
            "\tOperator { Optional text. The name of the operator who acknowledged",
            "\t\tthe alarm. If invalid, the logged-in user (according to the Security",
            "\t\tManager) will be used. If the Security Manger user is empty, then the",
            "\t\tapplication property, \"LoggedOffLabel\" will be used. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ACos": {
        "comments": [
            "{ Description: Calculates the trigonometric arc cosine in radians. }",
            "{ The returned angle is in radians. To convert an angle from radians",
            "\tto degrees, divide by \\Pi / 180 or (approximately) 0.0174533. \\Pi is a",
            "\tdefined constant in VTScada. This function does calculations with",
            "\tdouble-precision floating point values and does not support 64-bit",
            "\tintegers computations. }"
        ],
        "snippets": [
            "ACos(",
            "\tX { Required. Any numeric expression in the range -1 to +1. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "AcquireLock": {
        "comments": [
            "{ Description: Subroutine to acquire an exclusive lock on reading /",
            "\twriting working copy files across all applications. }",
            "{ This function should be called before performing any modification of",
            "\tany applicationâs working copy. The output of this function is a",
            "\tsemaphore that guarantees exclusive access to the working copy until",
            "\tit is released. Note that the caller must wait for the semaphore to",
            "\tbecome TRUE (1), which indicates that the lock is held. A lock",
            "\tgathered by AcquireLock should be released by calling ReleaseLock. It",
            "\tis automatically released when the variable used to collect the",
            "\tsemaphore is released during calling object destruction. This module",
            "\tlaunches a destructor module so that if the caller to this module",
            "\tstops, the destructor will continue to run until ReleaseLock is called",
            "\tor one of the parameters becomes invalid. Because this lock prevents",
            "\tany other access to the working copy, you should minimize the length",
            "\tof time it will be held. }"
        ],
        "snippets": [
            "System.Acquirelock(",
            "\tWritePermission, { Required. Any BOOLEAN expression. Set TRUE if the",
            "\t\towner intends to perform writes or FALSE for read-only access. }",
            "\tOwner, { Required. The instance of the lock owner. }",
            "\tSemaphorePtr, { Required. A pointer that will be set TRUE when the",
            "\t\tsemaphore is granted. }",
            "\tWritingUserID { Optional. User ID for the user acquiring the lock.",
            "\t\tShould be used if the user is going to make working copy changes and",
            "\t\tnot commit them within the lock, so that the correct User ID is",
            "\t\tassigned to the changes when they are committed. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Active": {
        "comments": [
            "{ Description: Tells the Alarm Manager to activate an alarm. This",
            "\tsubroutine will activate an alarm and signal it as unacknowledged. }",
            "{ The Active subroutine always returns \"0\". }"
        ],
        "snippets": [
            "\\AlarmManager\\Active(",
            "\tAlarmObject, { Required. Object Value for the alarm that was passed to",
            "\t\tthe active Register subroutine. }",
            "\tEventTime { Optional, Timestamp to use when adding this event to the",
            "\t\talarm lists. Defaults to CurrentTime() }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ActiveCode": {
        "comments": [
            "{ Description: ActiveCode returns the code value of the active",
            "\tstatement in the given module instance. }",
            "{ Seldom (if ever) used when adding features to modern VTScada",
            "\tapplications. A code value is a combination of module, state and",
            "\tstatement that is the active statement in the given module instance",
            "\t(object value). }"
        ],
        "snippets": [
            "ActiveCode(",
            "\tObject { Required. Any object expression to be monitored in the module",
            "\t\tinstance. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ActiveState": {
        "comments": [
            "{ Description: ActiveState returns the code value of the active state",
            "\tin the given module instance. }",
            "{ Seldom (if ever) used when adding features to modern VTScada",
            "\tapplications. A code value is a combination of module and state that",
            "\tis the active statement in the given module instance (object value). }"
        ],
        "snippets": [],
        "is_steady_state": true,
        "is_script": true
    },
    "ActiveWindow": {
        "comments": [
            "{ Description: ActiveWindow returns the object value of the root",
            "\tmodule instance in the current active window. }"
        ],
        "snippets": [
            "ActiveWindow();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ActiveX": {
        "comments": [
            "{ Description: Instantiates an ActiveX object. An ActiveX object is",
            "\ttreated as a COM client interface that requires a client window area",
            "\tin which to draw. }",
            "{ If the statement succeeds, a COM client interface is returned,",
            "\tallowing subsequent access to the object. If it fails, Invalid is",
            "\treturned. There are two significant parametric differences between an",
            "\tActiveX function and a COMClient function. Firstly, the ActiveX",
            "\tfunction requires a client window in which to draw. Secondly, there is",
            "\tno ObjectContext parameter. ActiveX objects are only instantiated in",
            "\tprocess, as they require direct GDI access to process resources [such",
            "\tas the client window area]. A window in VTScada acts as a container",
            "\tfor ActiveX objects, in the true OLE definitions of the OC96",
            "\tspecification. This architecture provides a container enumerator so",
            "\tthat an ActiveX object can interact with other ActiveX objects in the",
            "\tsame container. Like the COMClient function, this function returns an",
            "\topaque COM Client Interface handle, through which subsequent object",
            "\tmanipulations are performed. Refer to the documentation for the",
            "\tActiveX object you are creating for properties, methods, and events.",
            "\tUnlike the COMClient function, this statement may be only be used as a",
            "\tsteady-state statement. The ActiveX object will only remain",
            "\tinstantiated while the steady-state statement is still running (i.e. a",
            "\tchange of state or destruction of the module instance which is running",
            "\tthe statement will cause the ActiveX object to be destroyed). Any",
            "\tvariables that hold a handle to the COM Client Interface will be",
            "\tinvalidated at that time. When an ActiveX control is running in a thin",
            "\tclient session, numeric values are limited to double floating-point",
            "\tvalues, whereas an ActiveX control running on the server can use full",
            "\t64-bit integers. Therefore numeric values with a magnitude over",
            "\t9007199254740992 may lose precision when passed into or out of an",
            "\tActiveX control. Within an Anywhere Client session, this function does",
            "\tnothing. }"
        ],
        "snippets": [
            "ActiveX(",
            "\tX0, Y0, X1, Y1, { Required These are the numeric coordinates of the",
            "\t\tclient window area in which the COM object is to draw itself. }",
            "\tObjectIdentifier, { Required. Specifies a unique identifier for the",
            "\t\tobject that is to be instantiated. It may take one of the following",
            "\t\tforms: â¢ A text string representing a ProgID (e.g.",
            "\t\t\"Excel.Application\"). â¢ A textual GUID in registry format (e.g.",
            "\t\t\"{000208-0000-0000-C000-000000000046}\"). Note that the curly braces",
            "\t\tare compulsory. â¢ A binary GUID (e.g. the result from \"GetGUID(1,",
            "\t\t00020812-0000-0000-C000-000000000046)\"). }",
            "\tEventSearchScope, { Optional. May be any expression that yields a",
            "\t\tmodule value or object value. This parameter specifies the scope in",
            "\t\twhich to search for event subroutines. Needed only if you wish to",
            "\t\thandle events from the COM object. If missing or invalid, the COM",
            "\t\tevents will not be enabled. }",
            "\tEventParent, { Optional Any expression yielding an object value. If",
            "\t\tpresent, specifies the context that is used to resolve scope for event",
            "\t\tsubroutines. May be any expression that yields an object value.",
            "\t\tDefaults to Self(). }",
            "\tEventCaller, { Optional. Any expression that yields an object value.",
            "\t\tIf present, this specifies an \"auxiliary\" context for event",
            "\t\tsubroutines. An event subroutine can retrieve this value using",
            "\t\tCaller(Self()) Defaults to Self(). }",
            "\tLicenseString { Optional. Used to provide a license key that will be",
            "\t\tpassed to the ActiveX control when instantiated, permitting the use of",
            "\t\tActiveX controls that require license data for activation. This will",
            "\t\twork for both server-instantiated ActiveX controls and those that are",
            "\t\tremotely called by a VIC. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "AddAccount": {
        "comments": [
            "{ Description: Creates a new account (either a user account or a",
            "\trole). }",
            "{ To use this API, the calling code must be running in a security",
            "\tsession that has Manager privilege. Adding an account is an",
            "\tasynchronous operation. If the asynchronous operation was not",
            "\tattempted, due to detection of an error, the return value will be",
            "\tInvalid. If the asynchronous operation is attempted, the return value",
            "\twill be an object value. The object value will become Invalid when the",
            "\tasynchronous operation completes. At that time (or when the method",
            "\treturns Invalid), the value addressed by PtrReturnCode can be examined",
            "\tto determine the status of the operation. The contents of the value",
            "\taddressed by PtrReturnCode are undefined until the method returns",
            "\tInvalid. A single account can be added by supplying a single",
            "\tAccountData structure in NewAccountData. Multiple accounts can be",
            "\tadded in one operation by providing a single dimension array or",
            "\tdictionary of AccountData structures in NewAccountData. The result",
            "\tcode returned in the value addressed by PtrReturnCode will be a scalar",
            "\tvalue if a single structure was supplied in NewAccountData. If an",
            "\tarray of structures or a dictionary of structures was supplied, a",
            "\tsingle dimension array of the same size as NewAccountData will be",
            "\treturned in the value addressed by PtrReturnCode, each element",
            "\tcontaining the result code for the corresponding NewAccountData",
            "\telement. Adding an account requires a working copy write lock. If such",
            "\ta lock is held by the calling code, the HaveLock parameter must be set",
            "\tto TRUE. Otherwise omit this parameter or set it to FALSE. If the",
            "\tcalling code holds a read lock on the working copy, this must be",
            "\treleased before AddAccount can complete its operation. The AccountData",
            "\tstructure(s) provided must have the Username member set to a unique",
            "\tname. If the account being added is a user account (as opposed to a",
            "\trole), a password meeting application password strength settings must",
            "\tbe provided. On return the AccountID member of each AccountData",
            "\tstructure that was successfully processed will be set to a unique user",
            "\tID that will not change for the life of the account. The Password",
            "\tmember is not erased. It is strongly recommended that calling code",
            "\tensure that unencrypted passwords are destroyed as soon as possible",
            "\tafter completion of this operation. }"
        ],
        "snippets": [
            "\\SecurityManager.AddAccount(",
            "\tNewAccountData, { Required. An AccountData Structure , a single",
            "\t\tdimension array of AccountData structures or a dictionary of",
            "\t\tAccountData structures containing the data for the new account(s). }",
            "\tPtrReturnCode, { Optional. A pointer to a value that will contain one",
            "\t\tof the defined result codes at the conclusion of the operation. (",
            "\t\tSecurity Manager Return Codes ) }",
            "\tHaveLock { Optional. A Boolean value that indicates whether the",
            "\t\tworking copy lock is held by the calling code. Default FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AddCertificate": {
        "comments": [
            "{ Description: Returns a structure of information about a supplied",
            "\tX.509 certificate. }",
            "{ The certificate blob may be obtained from a number of different",
            "\tsources. For example, it may be transmitted over a communication",
            "\tprotocol, be the output of another certificate DAG or the contents of",
            "\ta certificate file (commonly .DER for DER-binary encoded certificates",
            "\tand .PFX for Personal Information Exchange certificates). For .PFX",
            "\tencoded certificates, set the isPFX Boolean and, optionally, provide",
            "\tthe password that was used to protect the private key when the PFX was",
            "\tcreated. For DER-binary encoded certificates, you can provide a",
            "\tseparate private key (stored in a VTScada crypto-key value -",
            "\tCryptographic Keys ) as the PrivateKey parameter. This must match the",
            "\tpublic key contained in the certificate blob, or the attempt to add",
            "\tthe certificate will fail. Using AddCertificate without a certificate",
            "\twill attempt to create the certificate store without adding a",
            "\tcertificate. }"
        ],
        "snippets": [
            "AddCertificate(",
            "\tMachineStore, { Required Boolean. If TRUE (non-zero) attempts to add",
            "\t\tthe certificates to a store in the Local Computer certificate hive. If",
            "\t\tFALSE (zero) attempts to add the certificate to a store in the Current",
            "\t\tUser certificate hive. }",
            "\tStoreName, { Required text. The name of the store to add the",
            "\t\tcertificate to. If it does not exist, it will be created. }",
            "\tCertificateBLOB, { Optional. A buffer holding a DER-binary encoded",
            "\t\tcertificate BLOB (binary large object) of the certificate to add. }",
            "\tisPFX, { Optional Boolean. TRUE (non-zero) if the certificate is in",
            "\t\tPersonal Information Exchange (PFX) format. FALSE if it is in",
            "\t\tDER-binary format. Default FALSE. }",
            "\tPFXPassword, { Optional text. Only required if the certificate is in",
            "\t\tPFX format and contains a private key. This is the password used to",
            "\t\tencrypt the private key when the PFX was created. }",
            "\tFriendlyName, { Optional text. The friendly name to be assigned to the",
            "\t\tcertificate. }",
            "\tPrivateKey { Optional. The private key to associate with the",
            "\t\tcertificate. This is only required if you need to associate a private",
            "\t\tkey with the certificate and one is not provided in a PFX format",
            "\t\tCertificateBlob. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AddConnection": {
        "comments": [
            "{ Description: Called to get the object value of an ODBC connection.",
            "\tIf the connection does not exist, then a new ODBC DSN connection will",
            "\tbe created and explicitly added to the ODBC Manager's internal list of",
            "\tDSN's }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager\\, as shown in \"Format\" above.",
            "\tThe only way to ensure that a long running (or faulty) query does",
            "\tterminate is to set appropriate values for both the parameters",
            "\tExecutionTimeout and UseDriverTimeout. Modules executing queries are",
            "\tdesigned to be run as launched modules and will remain active until",
            "\tcomplete. }"
        ],
        "snippets": [
            "\\ODBCManager.AddConnection(",
            "\tDSN, { Required. Text identifying the database to connect to. This can",
            "\t\tbe a DSN (data source name) or it could be a connection string",
            "\t\tcontaining a fileDSN parameter such as: \"filedsn =",
            "\t\tC:\\VTScada\\Access.dsn; dbq = c:\\testdb1.mdb\" }",
            "\tUserName, { Optional. An optional parameter providing the user name",
            "\t\tfor database access. If both the Username and Password are missing",
            "\t\tfrom the function call, a dialog box will prompt the operator to",
            "\t\tprovide values for these parameters. }",
            "\tPassword, { Optional parameter for providing the password, if",
            "\t\trequired, for database access. See note for UserName. }",
            "\tConnectTimeout, { Optional numeric parameter specifying the length of",
            "\t\ttime the module will wait for a valid database connection to be made.",
            "\t\tDefaults to 30 if missing or invalid }",
            "\tExecutionTimeout, { Optional parameter specifying in seconds, the",
            "\t\tlength of time the method will wait for a database command to execute.",
            "\t\tThe parameter, UseDriverTimeout must be true for this parameter to",
            "\t\thave any effect. Defaults to 60. }",
            "\tIdleTime, { Optional parameter specifying in seconds, the length of",
            "\t\ttime will wait with no database communication before closing the",
            "\t\tconnection. Defaults to 600 if missing or invalid }",
            "\tCheckBackupTime, { Optional numeric parameter specifying the length of",
            "\t\ttime between checks for cache files left behind failed log attempts.",
            "\t\tDefaults to 300 if missing or invalid }",
            "\tDisconnectOnError, { Optional Boolean parameter indicating whether the",
            "\t\tODBC connection should be terminated after any execution error occurs.",
            "\t\tDefaults to FALSE (0) if missing or invalid. }",
            "\tHandleError, { Optional parameter that can be any of: â¢ an error",
            "\t\thandle object, â¢ an array of errors, â¢ a Boolean value. TRUE to",
            "\t\tdisconnect or false to indicate no disconnect. Defaults to false,",
            "\t\tmeaning 'no disconnect'. }",
            "\tUseDriverTimeout, { Optional Boolean value which may be set to true if",
            "\t\tODBC driver in use supports timeouts. If so, then the execution",
            "\t\ttimeout limit (ExecutionTimeout) is handed to the ODBC functions.",
            "\t\tDefaults to FALSE (0) if missing or invalid. }",
            "\tMirrorToDisk, { Optional Boolean value. If true, this specifies that",
            "\t\tevery write should go to disk. Defaults to FALSE (0) if missing or",
            "\t\tinvalid. }",
            "\tDBType, { Optional numeric value, indicating the type of this DB",
            "\t\tconnection. Defaults to 0 if missing or invalid. DBType Meaning 0 MS",
            "\t\tSQL 1 MS Access 2 Oracle 3 MySQL 4 SyBase }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { PaceRecovery }",
            "\tPaceRecoveryRate, { Optional. Any numeric expression that will set the",
            "\t\ttime in seconds for recovery of logs. The preceding parameter,",
            "\t\tPaceRecovery must be set to true. Defaults to 0.1 if missing or",
            "\t\tinvalid. }",
            "\tRollbackOnConnect, { Optional. Any Boolean expression. If set to TRUE",
            "\t\t(non-zero) a rollback will be done on connect. Defaults to TRUE (1) if",
            "\t\tmissing or invalid. }",
            "\tReconnectDelay { Optional numeric expression to set the time to wait",
            "\t\tfor reconnect on a failed connect. Defaults to 5 if missing or",
            "\t\tinvalid. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "AddContributor": {
        "comments": [
            "{ Description: Adds a contributor to a container. }",
            "{ Used only when writing custom tags with code (as opposed to creating",
            "\tthem from Context tags). See: Containers, Contributors and Site Tags",
            "\tThis function can be called from the contributor. }"
        ],
        "snippets": [
            "\\AddContributor(",
            "\tHandleName, { Required. The name of the handle variable in the",
            "\t\tcontainer module. }",
            "\tArrayName, { Required. The name of the variable in the ContainerObj",
            "\t\tparameter, that holds an array of values to which the contributor is",
            "\t\tto be added. The ArrayName parameter may be invalid if there is no",
            "\t\tsuch array in the container. }",
            "\tCountName, { Required. The name of the variable in the ContainerObj",
            "\t\tparameter, that holds a count of the current number of this type of",
            "\t\tcontributor. CountName may be invalid if no such variable exists in",
            "\t\tthe ContainerObj. Not all contributors need to be counted. Note that",
            "\t\tCountIncrement determines the initial change in the count and the",
            "\t\tcontributor must maintain the count. }",
            "\tContainerObj, { Required. The object value of the container tag",
            "\t\tmodule. }",
            "\tContributorObj, { Required. The object value of the new contributor to",
            "\t\tadd to the container. }",
            "\tIndexAddress, { Required. The address pointer of the variable holding",
            "\t\tthe contributor index. }",
            "\tValue, { Required. May be Invalid. The current numeric value to set in",
            "\t\tthe container's ArrayName array. Value may be Invalid. Value may also",
            "\t\tbe updated at any time by the contributor by scoping into the",
            "\t\tArrayName array in the container, and setting the array element at the",
            "\t\tindex that will be set in the variable pointed to by IndexAddress. }",
            "\tCountIncrement, { Required. The numeric value that will be added to",
            "\t\tthe variable in the container that has the same name as CountName.",
            "\t\tCountIncrement's value is usually a \"1\" or a \"0\", indicating whether",
            "\t\tthe contributor is actively contributing its value. The contributor",
            "\t\twill increment or decrement the value of the CountName variable as the",
            "\t\tcorresponding state of the contributor changes. }",
            "\tContributorType { Optional string identifier. Using an alarm",
            "\t\tcontributor as an example, this is might be \"HH\", \"H\", \"LL\", \"L\", etc.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AddEditorText": {
        "comments": [
            "{ Description: Inserts a text string into a text editor. }",
            "{ The text will be broken into lines based on carriage returns or line",
            "\tfeeds or both. }"
        ],
        "snippets": [
            "AddEditorText(",
            "\tEditor, { Required. Any expression that evaluates to an editor value",
            "\t\tthat was created by the MakeEditor function. If this is not an editor",
            "\t\ttype value, then the function will do nothing. }",
            "\tText { Required. The text to insert into the text editor. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "AddEvent": {
        "comments": [
            "{ Description: This module is used specifically for logging messages",
            "\twhen a user has written a control value. }"
        ],
        "snippets": [
            "\\OperatorLog.AddEvent(",
            "\tTagName, { Required text. The name of the tag being affected. }",
            "\tNewValue, { Required. The new value of the tag. }",
            "\tUser, { Optional text. The full username of the operator }",
            "\tPriority, { Obsolete parameter. Use INVALID as a place holder. }",
            "\tArea, { Optional text. The area property of the tag. }",
            "\tOperatorNameFlag, { Optional Boolean. If TRUE and no user is",
            "\t\tspecified, the current operator name is logged. Defaults to TRUE. }",
            "\tReserved, { Obsolete parameter. Use 1 as a placeholder. }",
            "\tEvtOldValue, { Optional. The previous value of the tag. }",
            "\tUnits { Optional text. Units of the new value. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AddLock": {
        "comments": [
            "{ Description: Adds a Control Lock to a tag. }",
            "{ In order to lock the entire tag tree, a fictitious âRoot Tagâ is",
            "\tdeclared in ControlLockManager. This option is accessible only through",
            "\tcustom script using syntax similar to:",
            "\t\\ControlLockManager.AddLock(\\ControlLockManager.RootTagID, Level) The",
            "\tfictitious root tag's name and area can be changed by adding",
            "\tControlLockRootTagName and ControlLockRootTagArea properties. This",
            "\tchanges the Name and Area of the root tag in the Alarm List (Control",
            "\tLock List) widget. }"
        ],
        "snippets": [
            "\\ControlLockManager.AddLock(",
            "\tTagID, { Required text. The unique ID of tag to be locked.",
            "\t\t(TagObj.UniqueID) }",
            "\tLevel, { Required integer. The Lock Level (defaults to 1). }",
            "\tNote, { Optional text. A note to log with the lock. }",
            "\tCustom, { Optional. A structure of custom fields to log. This is",
            "\t\tanything that can be packed by Pack(). That is, numerics or strings,",
            "\t\tor any simple data structures that contain numerics or strings such as",
            "\t\tarrays, structures and dictionaries. }",
            "\tTimestamp, { Optional timestamp. UTC timestamp of this event. }",
            "\tSessionID, { Optional text. The ID of the session adding the lock. }",
            "\tAccountID, { Optional text. The AccountID of the user adding the lock.",
            "\t\t}",
            "\tMachineID, { Optional text. The workstation's MachineID, from which",
            "\t\tthe lock was created. }",
            "\tDevice { Optional text. The name of the client device. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AddModule": {
        "comments": [
            "{ Description: Adds a new module to an existing module and returns the",
            "\tvalue of the newly created module. }",
            "{ Seldom (if ever) used when adding features to modern VTScada",
            "\tapplications. }"
        ],
        "snippets": [
            "AddModule(",
            "\tParent, { Required Any expression that returns a module value.",
            "\t\tSpecifies the parent object of the new module. }",
            "\tName, { Required. Any text expression providing a name for the new",
            "\t\tmodule. }",
            "\tReserved, { Reserved for future use. Should be set to 0. }",
            "\tAttrib, { Required. Any numeric expression giving the module's",
            "\t\tattribute bits as follows: Attrib Bit No. Attribute 0 - No special",
            "\t\tattributes 1 0 Reserved - set to 0 2 1 Queued 4 2 Reserved - set to 0",
            "\t\t8 3 Reserved - set to 0 16 4 Reserved - set to 0 32 5 Reserved - set",
            "\t\tto 0 64 6 Reserved - set to 0 128 7 Reserved - set to 0 256 8 Reserved",
            "\t\t- set to 0 512 9 Protected }",
            "\t0, { 1 }",
            "\t2, { 4 }",
            "\t8, { 16 }",
            "\t32, { 64 }",
            "\t128, { 256 }",
            "\t512, { Class }",
            "\tVarTextSize, { Required. Any numeric expression giving the length of",
            "\t\tthe variable declaration for the new module (i.e. NewMod MODULE { a",
            "\t\tnew module }; ). }",
            "\tDocFileName { Required. Any text expression giving the file name of",
            "\t\tthe new module's definition document. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AddNote": {
        "comments": [
            "{ Description: Adds a note to a notebook tag }",
            "{ NotebookTagObject must be the object value of the Notebook tag you",
            "\twish to add a note to. This interface is not intended as a means of",
            "\tlogging frequent string values. It was designed for occasional notes",
            "\tentered by people. }"
        ],
        "snippets": [
            "NotebookTagObject.AddNote(",
            "\tTimestamp, { Required UTC timestamp of the note. }",
            "\tOperator, { Deprecated text. Only use this when converting legacy",
            "\t\tnotes. The name of the user who entered the note. }",
            "\tNote, { Required. A text string containing the note or a NoteStruct",
            "\t\tstructure. }",
            "\tResultPtr, { Optional. This pointer will be assigned TRUE if the note",
            "\t\tis added successfully, FALSE if it fails. }",
            "\tAccountID, { Optional string. The AccountID of the user who entered",
            "\t\tthe note. Defaults to the user who opened the dialog. }",
            "\tParentNoteStruct, { Optional structure. If the note is a comment for",
            "\t\tanother note, this must be set to the NoteStruct structure of the",
            "\t\tother note. }",
            "\tLegacyConvert { Optional boolean. Set to TRUE when converting legacy",
            "\t\tnotes. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AddOptional": {
        "comments": [
            "{ Description: Adds a new statement to an action script and returns",
            "\tits own error code. }",
            "{ Seldom (if ever) used when adding features to modern VTScada",
            "\tapplications. The function returns \"0\" if successful and a non-0 value",
            "\tif it fails. }"
        ],
        "snippets": [
            "AddOptional(",
            "\tNewStatement, { Required. Any expression that returns a statement",
            "\t\tvalue. This is the value of the new script statement to be added. }",
            "\tDestination, { Required. Any code value expression. Destination is the",
            "\t\taction that will receive NewStatement. }",
            "\tLocation, { Required. Any numeric expression giving the location of",
            "\t\tNewStatement within the script. }",
            "\tTextSize { Required. Any numeric expression giving the length of",
            "\t\tNewStatement's text in characters. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AddParameter": {
        "comments": [
            "{ Description: Adds an existing variable as a module parameter and",
            "\treturns the number of parameters in the module. }",
            "{ Seldom (if ever) used when adding features to modern VTScada",
            "\tapplications. The return value of AddParameter is the number of",
            "\tparameters in the module after the addition, or \"-1\" if it failed.",
            "\tCaution: Attempting to insert a variable in the parameter list twice",
            "\tmay result in undefined behavior. }"
        ],
        "snippets": [
            "AddParameter(",
            "\tVariable, { Required. Any expression that returns a variable value",
            "\t\tsuch as AddVariable(â¦). This variable will become a parameter in the",
            "\t\tmodule where it is defined. }",
            "\tPosition { Required. Any numeric expression giving the position in the",
            "\t\tparameter list where Variable will be inserted. Position 1 is the",
            "\t\tfirst parameter. Inserting a variable past the end of the list will",
            "\t\tappend the variable to the parameter list. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AddRead": {
        "comments": [
            "{ Description: Add a read request. }",
            "{ This module is called by a tag to add a request to read a specific",
            "\trange of memory and set the resulting read data into the variable",
            "\tpointed to by the third parameter. If using this function in custom",
            "\tcode, note that the AddRead must run on the current I/O server in",
            "\torder to retrieve data. An AddRead executing only on a client",
            "\tworkstation will subscribe to the data but not cause a read. The",
            "\tpointer (3rd parameter) may be a simple variable for one element read",
            "\tor an object reference. Use of an object for the Value parameter",
            "\tallows a synchronous way of reporting new data. The object must be a",
            "\tmodule with a subroutine named NewData. NewData will have the",
            "\tfollowing parameters: }"
        ],
        "snippets": [
            "VTSDriver\\AddRead(",
            "\tAddress, { Required. Any expression for the address from which to get",
            "\t\tthe data. }",
            "\tN, { Required. Any expression for the number of elements to retrieve.",
            "\t\t}",
            "\tValue, { Required. A pointer to the destination for the read data. }",
            "\tRate, { Required. Any numeric expression for the update rate, measured",
            "\t\tin seconds. }",
            "\tOriginalAddr, { For use only by the Driver Multiplexer. Set Invalid in",
            "\t\tall other instances. The original address string specified in the I/O",
            "\t\ttag before being parsed into an value that is fit for the Address",
            "\t\tparameter of AddRead. For example, the original address may be",
            "\t\t{40001}{42001}, but the address given to the subordinate driver would",
            "\t\tbe 40001. }",
            "\tDisablePolling, { Primarily for use by the Driver Multiplexer. In",
            "\t\tgeneral, should be set to Invalid for other drivers. Any numeric",
            "\t\texpression, setting a rate value for which Polling will be disabled.",
            "\t\tPolls will then only be performed by a call to Driver\\PollAll() or by",
            "\t\tsetting the Read moduleâs Trigger. }",
            "\tDeadbandValue { Optional numeric, applying to analog values only. Sets",
            "\t\ta minimum amount by which the unscaled values must change before a new",
            "\t\tvalue is reported to NewData. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AddressEntry": {
        "comments": [
            "{ Description: Checks whether the attached driver has an AddressAssist",
            "\tmodule and uses that if available. Otherwise, presents a standard edit",
            "\tfield into which the I/O address may be entered. }",
            "{ Similar to PAddressEntry. }"
        ],
        "snippets": [
            "\\DialogLibrary.AddressEntry(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the object and its label. The smaller of X1 and",
            "\t\tX2 will always be to the left }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the object. The smaller of Y1",
            "\t\tand Y2 will always be the top. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the object and its label opposite to X1. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of the top or bottom of the object, whichever is the opposite",
            "\t\tto Y1. }",
            "\tVar, { Variable to be set by AddressEntry }",
            "\tIODevice, { Any expression for the name of the I/O device driver being",
            "\t\tused. }",
            "\tSupportedData { A bitwise expression, indicating the data type. (See:",
            "\t\tBitwise Parameters & Operations ) Bit Meaning when set 0 Digital 1",
            "\t\tAnalog 2 Text }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "AddState": {
        "comments": [
            "{ Description: Adds a new state to an existing module and returns its",
            "\tstate value. }",
            "{ Seldom (if ever) used when adding features to modern VTScada",
            "\tapplications. }"
        ],
        "snippets": [
            "AddState(",
            "\tModule, { Required. Any expression that returns a module value. }",
            "\tName, { Required. Any text expression giving the name of the new",
            "\t\tstate. }",
            "\tReserved, { Reserved for future use. Should be set to 0. }",
            "\tSize { Required. Any numeric expression giving the length of the state",
            "\t\tdefinition text, measured in characters. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AddStatement": {
        "comments": [
            "{ Description: Adds a new statement to an existing state and returns",
            "\tits own error code. }",
            "{ Seldom (if ever) used when adding features to modern VTScada",
            "\tapplications. AddStatement does not affect the .SRC file. It affects",
            "\tthe expected location of items in the .SRC file. Both must be updated",
            "\tin unison. The return value is a #VTypeModStateStmnt code value if",
            "\tsuccessful and an error code if the function fails. AddStatement is",
            "\tdisabled in the run time version of VTScada where it will do nothing",
            "\tand return invalid. }"
        ],
        "snippets": [
            "AddStatement(",
            "\tStatement, { Required. Any expression that returns a statement value.",
            "\t\tCommonly generated with the Compile function. }",
            "\tDestination, { Required. Any expression that returns a code value.",
            "\t\tThis indicates where to insert the new statement. If no statement is",
            "\t\tpresent in the code value, the new statement will be appended. }",
            "\tTextSize { Required. Any numeric expression giving the length of the",
            "\t\tstatement text, measured in characters. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AddVariable": {
        "comments": [
            "{ Description: Adds a new variable to an existing module and returns",
            "\tits variable value. }",
            "{ Seldom (if ever) used when adding features to modern VTScada",
            "\tapplications. This function doesn't affect the .SRC file; it affects",
            "\tthe expected location of items in the .SRC file. Both must be updated",
            "\tin unison. The return value is the new variable added. If the variable",
            "\talready existed, it will remain unchanged and the return value will be",
            "\tInvalid. Bit 10 (1024) of the Attrib parameter specifies that the",
            "\tvariable is an instance variable. An instance variable is a temporary",
            "\tvariable that gets added to a single instance of a module, rather than",
            "\tall instances of a module. If you specify this bit, then you must have",
            "\tpassed an object (module instance) into the first parameter. Instance",
            "\tvariables cannot also have the attributes Shared, Persistent, Module,",
            "\tor Parameter. }"
        ],
        "snippets": [
            "AddVariable(",
            "\tModule, { Required. Any expression that returns a module value. }",
            "\tName, { Required. Any text expression that gives the name of the new",
            "\t\tvariable. }",
            "\tReserved, { Reserved for future use. Set to 0. }",
            "\tAttrib, { Required. Any numeric expression giving the variable",
            "\t\tattribute bits as follows: (See: Bitwise Parameters & Operations )",
            "\t\tAttrib Bit No. Attribute 1 0 Array 2 1 Shared 4 2 Persistent 8 3",
            "\t\tModule 16 4 Parameter 32 5 Constant 64 6 (Obsolete) Reserved - set to",
            "\t\t0 128 7 (Obsolete) Reserved - set to 0 256 8 Temporary * 512 9",
            "\t\tProtected 1024 10 Variable is an instance variable (see comments) A",
            "\t\tvariable cannot be both persistent and temporary, since a persistent",
            "\t\tvariable is stored on disk, and a temporary variable exists only while",
            "\t\tVTScada is running or until the application is recompiled. * Note:",
            "\t\tTemporary variables should be used only by advanced users, since",
            "\t\trecompiling the application destroys them. }",
            "\t1, { 2 }",
            "\t4, { 8 }",
            "\t16, { 32 }",
            "\t64, { 128 }",
            "\t256, { 512 }",
            "\t1024",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AdHocAlarm": {
        "comments": [
            "{ Description: Evaluates an ad hoc alarm }",
            "{ You should not call Commission() or EvaluateAlarm() on an ad hoc",
            "\talarm. You can call Ack() and SetShelved() on an ad hoc alarm. To",
            "\tactivate/trip an ad hoc alarm, call AdHocAlarm() with a value that",
            "\tmeets the alarm condition as defined by its Setpoint and Function. If",
            "\tyou activate a (non-trip) ad hoc alarm, you are responsible for",
            "\tclearing it by calling AdHocAlarm() with a value that doesn't meet the",
            "\talarm condition. If there is no known Setpoint, a Setpoint of 1 is",
            "\toften used, where a Value of 1 and 0 will activate and clear the alarm",
            "\trespectively. (Assuming the Function is ==) To activate, trip, clear",
            "\tand acknowledge a unique instance of an ad hoc alarm, you must refer",
            "\tto the alarm using the same Name. At a minimum, you need to configure",
            "\tName, Area, Description, Priority and Setpoint. Other alarm",
            "\tconfiguration options are available such as Function, Trip, OnDelay,",
            "\tDeadband, Units, Custom, etc. It is not necessary to set the AdHoc",
            "\tfield since that is set by AdHocAlarm(). The Name field must be unique",
            "\tamong all alarms, including ad hoc alarms. A FriendlyName should not",
            "\tbe specified for an ad hoc alarm since it is not logged or distributed",
            "\tto other servers. If the Name is the UniqueID of a tag, the current",
            "\tname of the tag will be shown on the Alarm Page. Otherwise, only the",
            "\tName field will be shown, not the FriendlyName. }"
        ],
        "snippets": [
            "\\AlarmManager\\AdHocAlarm(",
            "\tAlarmObj, { Required. The object value of the tag this alarm is for.",
            "\t\tThis is used to find the AlarmDatabase associated with the tag. If no",
            "\t\tAlarmDatabase is found within the scope of AlarmObj, it will default",
            "\t\tto using the SystemAlarmDB. Services may leave this parameter invalid.",
            "\t\t}",
            "\tCfgStructure, { Required. A structure of alarm configuration",
            "\t\tparameters. Normally obtained by a call to",
            "\t\t\\AlarmManager\\GetAlarmConfiguration. }",
            "\tValue, { Required. The new value to be checked against the alarm",
            "\t\tSetpoint. }",
            "\tTimestamp, { Optional UTC timestamp of the value. Defaults to the",
            "\t\tcurrent time. }",
            "\tAlarmDB { Optional name or object. The alarm database to be used for",
            "\t\tthis alarm. Not necessary if the alarm object is valid. Defaults to",
            "\t\tthe VTScada Alarm DB. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AdjustArray": {
        "comments": [
            "{ Description: Changes the array information for a variable. }",
            "{ Will work only with static arrays. }"
        ],
        "snippets": [
            "AdjustArray(",
            "\tVariable, { Required. Variable is any expression for the array to",
            "\t\tadjust. }",
            "\tNumDimensions, { Required. Any numeric expression that gives the",
            "\t\tnumber of dimensions for the variable's multidimensional array. }",
            "\tStart, { Required. Can be either a numeric expression or an array",
            "\t\tspecifying the start for each of the dimensions. If Start is a numeric",
            "\t\texpression, each of the dimensions will start at that value. If Start",
            "\t\tis an array, then the Nth element in the array will correspond to the",
            "\t\tstart of the Nth dimension (i.e. dimension 2 will start at start[2] ).",
            "\t\t}",
            "\tSize { Required. Can be either a numeric expression or an array",
            "\t\tspecifying the size of each of the dimensions. If Size is a numeric",
            "\t\texpression, each of the dimensions will be the size of that value. If",
            "\t\tSize is an array, then the Nth element in the array will correspond to",
            "\t\tthe size of the Nth dimension (i.e. dimension 2 will have a size of",
            "\t\tSize[2] ). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AdjustCode": {
        "comments": [
            "{ Description: Adjusts the offsets and sizes of items stored in the",
            "\t.RUN file within the document file. }",
            "{ Seldom (if ever) used when adding features to modern VTScada",
            "\tapplications. This statement enables you to adjust a .RUN file while",
            "\tVTScada is running. If a change is to be made to the .SRC file while",
            "\tthe application is running, this code change must also be written into",
            "\tthe .RUN file, so that the .RUN and .SRC files will remain",
            "\tsynchronized. AdjustCode essentially creates a space into which the",
            "\tapplicable information may be inserted. Offset is the point for the",
            "\tinsertion, and Size is the size of the inserted block. All code",
            "\toffsets that follow the inserted block are increased by Size to allow",
            "\tfor the new location of the old code, and all items that contain the",
            "\tnewly inserted block have their size increased by Size. For example,",
            "\tif the newly inserted block was going to have a variable definition",
            "\twritten to it, and it was contained inside of a module, the module's",
            "\tsize would increase by Size. Note that this function does not actually",
            "\twrite any changes into the file. Rather, it makes room for the changes",
            "\tto be written by another function. }"
        ],
        "snippets": [
            "AdjustCode(",
            "\tValue, { Required. The value must be a code value or a Variable. This",
            "\t\tidentifies the module, state, statement, or variable to adjust. }",
            "\tType, { Required. Any numeric expression that explicitly specifies the",
            "\t\tVTScada Value Types . }",
            "\tOffset, { Required. Any numeric expression that specifies the starting",
            "\t\tpoint for the code adjustment. }",
            "\tSize { Required. Any numeric expression giving the number of bytes by",
            "\t\twhich to shift all offset values following this entry in the .RUN",
            "\t\tfile. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AlarmCondition": {
        "comments": [
            "{ Description: Returns TRUE (1) if the monitored tag has an active",
            "\talarm. }",
            "{ This module is a member of the Function Library, and must therefore",
            "\tbe prefaced by \\FunctionLib as shown in the \"Format\" section. Monitors",
            "\tonly for active alarms. Trip alarms will not be reported. }"
        ],
        "snippets": [
            "\\FunctionLib.AlarmCondition(",
            "\tTagObject { A selected tag that is to be monitored for active alarms.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "AlarmUnAckCondition": {
        "comments": [
            "{ Description: Returns TRUE (1) if the monitored tag has an",
            "\tunacknowledged alarm. }",
            "{ This module is a member of the Function Library, and must therefore",
            "\tbe prefaced by \\FunctionLib as shown in the \"Format\" section. Monitors",
            "\tonly for unacknowledged alarms. Trip alarms will be reported. }"
        ],
        "snippets": [
            "\\FunctionLib.AlarmUnAckCondition(",
            "\tTagObject { A selected tag that is to be monitored for unacknowledged",
            "\t\talarms. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "AlignSelected": {
        "comments": [
            "{ Description: Aligns selected graphic objects. }",
            "{ This statement is used by the GUI tool bar alignment buttons. }"
        ],
        "snippets": [
            "AlignSelected(",
            "\tObject, { Required. Any object expression giving the module instance",
            "\t\twhere the selected objects are found. They will be aligned as",
            "\t\tspecified by the Mode and Side parameters (defined below). }",
            "\tMode { Required. Any numeric expression that specifies how the objects",
            "\t\twill be aligned. The possible values are provided in the following",
            "\t\ttable: Mode Alignment Type 0 Align 1 Stretch 2 Size 3 Space 4 Tile 5",
            "\t\tEqual space between }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AlternateLogoff": {
        "comments": [
            "{ Description: Synonym for LogOff(). }"
        ],
        "snippets": [
            "\\SecurityManager.AlternateLogoff();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AlternateLogon": {
        "comments": [
            "{ Description: Either creates, or attempts to sign in using an",
            "\talternate ID value. See comments. }",
            "{ This module call has two modes of operation. If the SecurityManager",
            "\tuser modification dialog is open and Logon is invalid or FALSE, the",
            "\tAltID string is interpreted as the Alternate ID value for the new or",
            "\texisting user account being configured. The intent here is for devices",
            "\tsuch as swipe card readers to be used to provide the alternate ID. If",
            "\tthe SecurityManager user modification dialog is not open or if Logon",
            "\tis TRUE, attempts to sign in the user whose AltID string matches the",
            "\tsupplied parameter. Returns TRUE if the accept / attempt action was",
            "\tsuccessful, otherwise returns FALSE. }"
        ],
        "snippets": [
            "\\SecurityManager\\AlternateLogon(",
            "\tAltID, { The plaintext alternate ID to use. }",
            "\tLogon { Flag, TRUE to stop set of AltID }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AMax": {
        "comments": [
            "{ Description: Array maximum. This function returns the maximum value",
            "\tin a sub-range of a numeric array. }",
            "{ AMax ignores invalid array entries. It only returns invalid if the",
            "\tarray subscript is invalid, N is invalid, or if all of the array",
            "\tentries in the specified range are invalid. If processing a",
            "\tmultidimensional array, the usual rules apply to decide which",
            "\tdimension should be examined. }"
        ],
        "snippets": [
            "AMax(",
            "\tArrayElem, { Required. A numeric array element. The subscript(s) for",
            "\t\tthe array may be any numeric expression, specifying the starting point",
            "\t\tfor the array maximum search. }",
            "\tN { Required. Any numeric expression giving the number of array",
            "\t\telements to use starting at the element given by the first parameter.",
            "\t\tIf N extends past the upper bound of the lowest array dimension, this",
            "\t\tcomputation will \"wrap-around\" and resume at element 0 until N",
            "\t\telements have been processed. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "AMin": {
        "comments": [
            "{ Description: Array minimum. This function returns the minimum value",
            "\tin a sub-range of a numeric array. }",
            "{ AMin ignores invalid array entries. The function only returns",
            "\tinvalid if the array subscript is invalid, N is invalid, or if all of",
            "\tthe array entries in the specified range are invalid. If processing a",
            "\tmultidimensional array, the usual rules apply to decide which",
            "\tdimension should be examined. }"
        ],
        "snippets": [
            "AMin(",
            "\tArrayElem, { Required A numeric array element. The subscript(s) for",
            "\t\tthe array may be any numeric expression, specifying the starting point",
            "\t\tfor the array minimum search. }",
            "\tN { Required Any numeric expression giving the number of array",
            "\t\telements to use, starting at the element given by the first parameter.",
            "\t\tIf N extends past the upper bound of the lowest array dimension, this",
            "\t\tcomputation will \"wrap-around\" and resume at element 0 until N",
            "\t\telements have been processed. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "And": {
        "comments": [
            "{ Description: Returns the bit-wise AND of its parameters. }",
            "{ This operation compares the bits of its parameters and returns a",
            "\tresult where each bit is only 1 if that bit in every included",
            "\tparameter is 1. If a bit in one or more parameter is 0, that bit will",
            "\tbe 0 in the result. This function takes signed 64-bit integers values.",
            "\tIf a number is passed outside the range of a signed 64-bit integer,",
            "\tthen the function will return invalid. If Value is invalid, the return",
            "\tvalue is invalid. When doing bitwise comparisons, always use AND",
            "\trather than &&. The double-ampersand operator does not make bitwise",
            "\tcomparisons. (See: Bitwise Parameters & Operations ) }"
        ],
        "snippets": [
            "And(",
            "\tParm1, Parm2[, Parm3 ...]) { Required. Any number of numeric",
            "\t\texpressions. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "AppIsRunning": {
        "comments": [
            "{ Description: Reports whether the application has been started and",
            "\tthe start-up process is complete. (All tags are running, etc.) }"
        ],
        "snippets": [
            "\\AppLayer.AppIsRunning();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "AppIsStarted": {
        "comments": [
            "{ Description: Returns TRUE if the application has been started. }"
        ],
        "snippets": [
            "\\AppLayer.AppIsStarted();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "AppIsStarting": {
        "comments": [
            "{ Description: Returns TRUE if the application is in the process of",
            "\tstarting. }"
        ],
        "snippets": [
            "\\AppLayer.AppIsStarting();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ApplyChangeSetFile": {
        "comments": [
            "{ Description: Apply a named ChangeSet to an application layer. }",
            "{ The act of applying a ChangeSet file may produce unexpected results.",
            "\tUse with caution. The Layer object can be acquired using",
            "\tGetAppInstance, GetLoadedAppInstance or GetOEMLayer. }"
        ],
        "snippets": [
            "Layer.ApplyChangeSetFile(",
            "\tUser, { Required. The account name, to which the changes will be",
            "\t\tattributed. }",
            "\tComment, { Required. A comment to be applied to the revision. }",
            "\tFileName, { Required. The full path to the ChangeSet file. }",
            "\tpError, { Required. A pointer to a value in which the status of the",
            "\t\toperation will be stored as a numeric value. Defined error codes are",
            "\t\tas follows: Code Meaning 0 Success / No errors 1 Unsupported file",
            "\t\tversion 2 Checksum error 3 File truncated }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\tSuppressError, { Optional Boolean. Set to TRUE if the error dialogs",
            "\t\tare to be suppressed. Defaults to FALSE. }",
            "\tRSema, { Optional repository semaphore. }",
            "\tSuperior { Optional Boolean. Set to TRUE if the ChangeSet's changes",
            "\t\tshould take precedence in the event of a conflict. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Arc": {
        "comments": [
            "{ Description: Draws an arc on the screen. }",
            "{ The Arc statement has been superseded by the GUIArc function and is",
            "\tmaintained for backwards compatibility only. The arc is drawn in a",
            "\tcounterclockwise direction from the Angle1 to Angle2. As of version",
            "\t11, this is now drawn in the same z-order as other graphics, making it",
            "\tsimilar to the z-graphics functions. }"
        ],
        "snippets": [
            "Arc(",
            "\tX, { Required. Any numeric expression giving the X coordinate of the",
            "\t\tcenter of the arc on the screen. }",
            "\tY, { Required. Any numeric expression giving the Y coordinate of the",
            "\t\tcenter of the arc on the screen. }",
            "\tRadius, { Required. Any numeric expression giving the radius of the",
            "\t\tarc specified in units of X screen coordinates. }",
            "\tAngle1, { Required. Any numeric expression giving the starting angle",
            "\t\tof the arc specified in radians. An angle of 0 lies on the X axis to",
            "\t\tthe right of the center of the arc. }",
            "\tAngle2, { Required. Any numeric expression giving the ending angle of",
            "\t\tthe arc specified in radians. }",
            "\tWidth, { Required. Any numeric expression giving the line width for",
            "\t\tthe arc. The width is specified in terms of X screen coordinates. Any",
            "\t\twidth less than 1 screen pixel is treated as a 1 pixel arc. }",
            "\tColor { Required. Any numeric expression giving one of the reserved",
            "\t\tVTScada Color Palette values for the arc. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ArrayDimensions": {
        "comments": [
            "{ Description: Returns the number of dimensions in an array. }",
            "{ The ArrayDimensions function is useful for writing intelligent",
            "\tparameterized modules. The module can determine how many dimensions",
            "\tthere are in an array that is passed to it. Note that ArrayDimensions",
            "\twill not drill down into nested array structures; that is to say, if a",
            "\t3 dimensional array is created, and a 2 dimensional array is stored in",
            "\teach of its elements, ArrayDimensions will return a value of 3, not 5.",
            "\tThis is because the data stored in different array elements does not",
            "\tneed to be of the same type - one element could contain an array while",
            "\tanother element could contain a simple value. }"
        ],
        "snippets": [
            "ArrayDimensions(",
            "\tArray { Required Any array variable. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ArrayOp1": {
        "comments": [
            "{ Description: Performs a mathematical operation on an array with",
            "\trespect to a scalar value. }",
            "{ The ArrayOp1 statement is useful for large amounts of repetitive",
            "\tcomputation. While this can be done by executing a script repeatedly",
            "\tusing WhileLoop, this ArrayOp1 statement is much faster. Complex",
            "\tcomputations may be broken down into a series of simple steps and",
            "\thandled by multiple ArrayOp1 and ArrayOp2 statements. If text arrays",
            "\tare used, each text value will be converted to a number before the",
            "\tnumerical operations are performed. The resulting array is converted",
            "\tback to text. All OpCodes support 64-bit integer and double precision",
            "\tfloating point calculations *except for OpCodes 18 to 28 and Opcode",
            "\t32. These operations only perform double precision floating point",
            "\tcalculations.* Mode 33 will compare for differences. It does a more",
            "\tthorough comparison than a simple A != B. For a multi-dimensional",
            "\tarray such as A[X][Y], only the right-most dimension is processed.",
            "\t([Y] in this example.) You must resort to loops to process the other",
            "\tarray dimensions. }"
        ],
        "snippets": [
            "ArrayOp1(",
            "\tArrayElem, { Required. Any array element giving the starting point for",
            "\t\tthe array operation. The subscript for the array may be any numeric",
            "\t\texpression. If processing a multidimensional array, only the",
            "\t\tright-most subscript is used. }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to compute. N will be limited to the minimum of N and the",
            "\t\tarray size. If the starting point given by the first parameter is not",
            "\t\tthe first element, and therefore N extends past the upper bound of the",
            "\t\tlowest array dimension, this computation will \"wrap-around\" and resume",
            "\t\tat the first element. Because N is automatically limited by the",
            "\t\tsmallest array dimension, no element will be processed twice. }",
            "\tScalar, { Required. Any numeric expression giving the scalar quantity",
            "\t\tused in the array computation. }",
            "\tOpCode { Required. Any numeric expression giving the operation number",
            "\t\tto perform as follows (note that A is the array element, and S is",
            "\t\tScalar): OpCode Operation OpCode Operation 0 A = S (S may be invalid)",
            "\t\t17 A = XOR(A,S) 1 A = A + S 18* A = Pow(S,A) 2 A = A - S 19* A =",
            "\t\tExp(S*A) 3 A = S - A 20* A = S * Log(A) 4 A = A * S 21* A = S * Ln(A)",
            "\t\t5 A = A / S 22* A = Sin(S * A) 6 A = S / A 23* A = Cos(S*A) 7 A = A %",
            "\t\tS 24* A = Tan (S*A) 8 A = Min(A,S) 25* A = S * ASin(A) 9 A = Max(A,S)",
            "\t\t26* A = S * ACos(A) 10 A = A < S 27* A = S * ATan(A) 11 A = A <= S 28*",
            "\t\tA = S * Sqrt(A) 12 A = A==S 29 A = S * Abs(A) 13 A = A >= S 30 A =",
            "\t\t(Index of A) + S 14 A = A > S 31 A = (Index of A) * S 15 A = AND(A,S)",
            "\t\t32* A = S * Round (A) 16 A = OR(A,S) 33 Valid(A) != Valid(S) ||",
            "\t\tPickValid(A != S, 0) }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ArrayOp2": {
        "comments": [
            "{ Description: Performs a mathematical operation on an array with",
            "\trespect to another array. }",
            "{ The ArrayOp2 statement is useful for large amounts of repetitive",
            "\tcomputation. While this can be done by executing a script repeatedly",
            "\tusing WhileLoop, the ArrayOp2 statement is much faster. Complex",
            "\tcomputations may be broken down into a series of simple steps and",
            "\thandled by multiple ArrayOp1 and ArrayOp2 statements. If text arrays",
            "\tare used, each text value will be converted to a number before the",
            "\tnumerical operations are performed. The resulting array is converted",
            "\tback to text. All OpCodes support 64-bit integer and double precision",
            "\tfloating point calculations *except for OpCodes 18 to 28 and Opcode",
            "\t32. These operations only perform double precision floating point",
            "\tcalculations.* Mode 33 will compare for differences. It does a more",
            "\tthorough comparison than a simple A != B. For a multi-dimensional",
            "\tarray such as A[X][Y], only the right-most dimension is processed.",
            "\t([Y] in this example.) You must resort to loops to process the other",
            "\tarray dimensions. }"
        ],
        "snippets": [
            "ArrayOp2(",
            "\tDestinationElement, { Required. Any array element giving the starting",
            "\t\tpoint for the array operation in the destination array. The subscript",
            "\t\tfor the array may be any numeric expression. If processing a",
            "\t\tmultidimensional array, only the right-most dimension is used. }",
            "\tSourceElement, { Required. Any array element giving the starting point",
            "\t\tfor the array operation in the source array. The subscript for the",
            "\t\tarray may be any numeric expression. }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to compute. N will be limited to the minimum of (N, Source",
            "\t\tlength, Destination length). If the starting point given by the first",
            "\t\tparameter is not the first element, and therefore N extends past the",
            "\t\tupper bound of the lowest array dimension, this computation will",
            "\t\t\"wrap-around\" and resume at the first element. Because N is",
            "\t\tautomatically limited by the smallest array dimension, no element will",
            "\t\tbe processed twice. }",
            "\tOpCode { Required. Any numeric expression giving the operation number",
            "\t\tto perform as follows (note that A is an element of Array1 and B is an",
            "\t\telement of Array2): OpCode Operation OpCode Operation 0 A = B 17 A =",
            "\t\tXOR(A,B) 1 A = A + B 18* A = Pow(B,A) 2 A = A - B 19* A = Exp(B*A) 3 A",
            "\t\t= B - A 20* A = B * Log(A) 4 A = A * B 21* A = B * Ln(A) 5 A = A / B",
            "\t\t22* A = Sin(B * A) 6 A = B / A 23* A = Cos(B * A) 7 A = A % B 24* A =",
            "\t\tTan (B * A) 8 A = Min(A,B) 25* A = B * ASin(A) 9 A = Max(A,B) 26* A =",
            "\t\tB * ACos(A) 10 A = A < B 27* A = B * ATan(A) 11 A = A <= B 28* A = B *",
            "\t\tSqrt(A) 12 A = A==B 29 A = B * Abs(A) 13 A = A >= B 30 A = (Index of",
            "\t\tA) + B 14 A = A > B 31 A = (Index of A) * B 15 A = AND (A,B) 32* A = B",
            "\t\t* Round(A) 16 A = OR(A,B) 33 Valid(A) != Valid(B) || PickValid(A != B,",
            "\t\t0) }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ArraySize": {
        "comments": [
            "{ Description: Returns the number of elements in an array dimension. }",
            "{ If Array is a variable rather than an array, return value will be",
            "\tinvalid. This function is useful for writing intelligent parameterized",
            "\tmodules. The module can determine how many elements there are in an",
            "\tarray that is passed to it. }"
        ],
        "snippets": [
            "ArraySize(",
            "\tArray, { Required. Any array variable. }",
            "\tDimension { Optional. Any numeric expression that gives the array",
            "\t\tdimension to measure starting at 0 (the left-most dimension in a",
            "\t\tmulti-dimensional array). Defaults to zero. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ArrayStart": {
        "comments": [
            "{ Description: Returns the index of the first element in an array",
            "\tdimension. }",
            "{ When creating arrays, it is recommended to always start all",
            "\tdimensions at 0. which is the default, and is how all arrays produced",
            "\tby VTScada APIs are constructed. You will not normally need to use",
            "\tthis function. If dealing with code where you cannot be sure of that,",
            "\tthe ArrayStart can help you discover the non-standard starting index.",
            "\t}"
        ],
        "snippets": [
            "ArrayStart(",
            "\tArray, { Required. Any array variable. }",
            "\tDimension { Required. Any numeric expression that gives the array",
            "\t\tdimension to examine. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ArrayToBuff": {
        "comments": [
            "{ Description: Returns a buffer containing the numeric data from an",
            "\tarray. }"
        ],
        "snippets": [
            "ArrayToBuff(",
            "\tArrayElem, { Required. Any array element giving the starting point for",
            "\t\tthe array conversion. The subscript for the array may be any numeric",
            "\t\texpression. If processing a multidimensional array, the usual rules",
            "\t\tapply to decide which dimension should be used. Note: The array must",
            "\t\tcontain numeric data only. }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to convert starting at the element given by the first",
            "\t\tparameter. If N extends past the upper bound of the lowest array",
            "\t\tdimension, this computation will \"wrap-around\" and resume at element",
            "\t\t0, until N elements have been processed. }",
            "\tOption, { Required. Any numeric expression that specifies the format",
            "\t\tof the buffer write, using the following table of formats: Note: For",
            "\t\tOptions 7 and 9, the data is written as appropriate binary format.",
            "\t\t(See: Bitwise Parameters & Operations ) Option Buffer Format 0",
            "\t\tUnsigned binary (low byte first) 1 Signed binary (low byte first) 2",
            "\t\tBCD (binary coded decimal - low byte first) 3 ASCII octal (high byte",
            "\t\tfirst) See comment: *1* 4 ASCII decimal (high byte first) See comment:",
            "\t\t*2* 5 ASCII hex (high byte first) See comment: *1* 6 ASCII floating",
            "\t\tpoint (high byte first) 7 IEEE float/double (low byte first) 8",
            "\t\t<obsolete> 9 Allen-Bradley PLC/3 floating point 10 VAX single",
            "\t\tprecision floating point For Option 0, ArrayToBuff takes the signed",
            "\t\tbit-equivalent 64-bit integers as inputs. This only matters for",
            "\t\tintegers larger than the largest 64-bit signed integer. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10, { Size }",
            "\tBinary types, { BCD }",
            "\tASCII types, { Float types }",
            "\tSkip, { Required. Any numeric expression giving the number of buffer",
            "\t\tbits/digits/bytes to skip after writing each non-floating point",
            "\t\telement. In binary modes, the following values are supported: 8, 16,",
            "\t\t32, and 64. For floating point types, this parameter must be set to 0.",
            "\t\t}",
            "\tBadData, { Optional. A parameter that designates how invalid data is",
            "\t\tto be handled, according to the following table. Defaults to 0 if",
            "\t\tmissing or invalid. BadData Invalid Data Type 0 Output to buffer as",
            "\t\tvalid 0s 1 Causes buffer to be invalid 2 Output to buffer as valid 0s",
            "\t\t}",
            "\t0, { 1 }",
            "\t2",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ArrayToDictionary": {
        "comments": [
            "{ Description: Returns a dictionary if given an array of key names and",
            "\ta matching array of values. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ Beware of the following edge cases: Behavior may be",
            "\tundefined if the same key is added twice. For example, with the",
            "\tdefault setting (CaseInsensitive==FALSE),",
            "\tArrayToDictionary(MakeArray(\"A\", \"a\"), MakeArray(1, 2)) gives",
            "\tDictionary(âAâ:2). The later value overwrites the earlier value.",
            "\tAssigning certain special characters may break the whole dictionary.",
            "\tFor example, ArrayToDictionary(MakeArray(\"A\", \"a\", ââ), MakeArray(1,",
            "\t2, 3)) returns a numeric value 3. A len(0) string is taken as Invalid,",
            "\tand is not allowed as key. As a result, the returned address is the",
            "\tdictionary itself instead of the dictionary[key], and the value is",
            "\tthen stored in the dictionary itself. The Value that should be",
            "\tassigned to dictionary[key] is then assigned to the dictionary itself",
            "\t(in our example, itâs 3). Dict[\"\"] has the same behavior as",
            "\tRootValue(Dict). ArrayToDictionary should detect a \"\" key and either",
            "\tfail entirely or leave out that item, and the behavior should be",
            "\tdocumented. }"
        ],
        "snippets": [
            "System.ArrayToDictionary(",
            "\tKeyArray, { A one-dimensional array of key names for the dictionary. }",
            "\tValues, { A single value or a one-dimensional array of values matching",
            "\t\tthe names in KeyArray. }",
            "\tCaseInsensitive { Optional Boolean. Set TRUE for a case sensitive",
            "\t\tdictionary. Defaults to TRUE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ASin": {
        "comments": [
            "{ Description: Returns the trigonometric arc sine in radians. }",
            "{ The returned angle is in radians. To convert an angle from radians",
            "\tto degrees, divide by \\pi/ 180 or (approximately) 0.0174533. (\\pi is a",
            "\tdefined constant in VTScada.) This function does calculations with",
            "\tdouble-precision floating point values and does not support 64-bit",
            "\tintegers computations. }"
        ],
        "snippets": [
            "ASin(",
            "\tX { Required. Any numeric expression in the range -1 to +1. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ATan": {
        "comments": [
            "{ Description: Returns the trigonometric arc tangent in radians. }",
            "{ The returned angle is in radians. To convert an angle from radians",
            "\tto degrees, divide by \\Pi / 180 or (approximately) 0.0174533. (\\Pi is",
            "\ta defined constant in VTScada.) This function does calculations with",
            "\tdouble-precision floating point values and does not support 64-bit",
            "\tintegers computations. }"
        ],
        "snippets": [
            "ATan(",
            "\tX { Required. Any numeric expression. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "AudioFileLength": {
        "comments": [
            "{ Description: Returns the length of a RIFF format Wave file in",
            "\tseconds. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ Returns invalid if the file does not exist, or if",
            "\tthe length cannot be determined. }"
        ],
        "snippets": [
            "System.AudioFileLength(",
            "\tFilename { Required. Any expression for the full name of a .wav file",
            "\t\tfor which you want to find the audio play length. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Authenticate": {
        "comments": [
            "{ Description: Authenticates the UserName, Password and Namespace of a",
            "\tuser. }",
            "{ If the authentication fails, a failure event is recorded in the",
            "\tsecurity event log and FALSE is returned. If the authentication",
            "\tsucceeds, TRUE is returned and the AccountID of the user is written",
            "\tinto the variable addressed by the PtrAccountID parameter. If",
            "\tPrivilege is valid, the Privilege is used in a SecurityCheck and the",
            "\tresult of the SecurityCheck is returned. }"
        ],
        "snippets": [
            "\\SecurityManager.Authenticate(",
            "\tUserName, { The username with which to authenticate. }",
            "\tPassword, { The password to validate against the given UserName. }",
            "\tNamespace, { Optional. The namespace of the user. Defaults to none. }",
            "\tPrivilege, { Optional. A privilege that the account must pass a",
            "\t\tSecurityCheck with. Defaults to none. }",
            "\tDevice, { Optional. Name of the device that is making the request.",
            "\t\tDefaults to none. Only used for security log messages. }",
            "\tDontLog, { Optional. A Boolean. If TRUE, the result of the",
            "\t\tAuthenticate request will not be logged in the security event log.",
            "\t\tDefaults to FALSE. }",
            "\tPtrAccountID { Optional. A pointer to a variable that the AccountID of",
            "\t\tthe user will be stored in. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "AValid": {
        "comments": [
            "{ Description: Returns the number of valid elements in an array",
            "\tsub-range. }",
            "{ AValid is not made invalid by invalid array entries. This function",
            "\tis useful in conjunction with the statistical array functions. }"
        ],
        "snippets": [
            "AValid(",
            "\tArrayElem, { Required. An array element. The subscript(s) for the",
            "\t\tarray may be any numeric expression and specify the starting point for",
            "\t\tthe array search. If processing a multidimensional array, the usual",
            "\t\trules apply to decide which dimension should be used. }",
            "\tN { Required. Any positive numeric expression giving the number of",
            "\t\tarray elements to use, starting at the element given by the first",
            "\t\tparameter. If N extends past the upper bound of the lowest array",
            "\t\tdimension, this computation will \"wrap-around\" and resume at element",
            "\t\t0, until N elements have been processed. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Ball": {
        "comments": [
            "{ Description: Draws a filled circle on the screen. }"
        ],
        "snippets": [
            "Ball(",
            "\tX, { Required. Any numeric expression giving the X coordinate of the",
            "\t\tcenter of the ball on the screen. }",
            "\tY, { Required. Any numeric expression giving the Y coordinate of the",
            "\t\tcenter of the ball on the screen. }",
            "\tRadius, { Required. Any numeric expression giving the radius of the",
            "\t\tball specified in units of X screen coordinates. }",
            "\tForeground, { Required. Any numeric expression giving the foreground",
            "\t\tVTScada Color Palette of the ball. }",
            "\tPattern, { Required. Any numeric expression giving the hatch pattern",
            "\t\tto use to fill the ball. The valid hatch style numbers are from 1 to",
            "\t\t25 inclusive. A Pattern of 1 is a solid ball (for other patterns,",
            "\t\tplease refer to Fill Patterns ). }",
            "\tBackground { Required. Any numeric expression giving the background",
            "\t\tVTScada Color Palette for the hatch pattern used to fill the ball.",
            "\t\tThis value is only significant if the Pattern parameter is not equal",
            "\t\tto 1 (solid). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Bar": {
        "comments": [
            "{ Description: Draws a filled bar on the screen. }"
        ],
        "snippets": [
            "Bar(",
            "\tX1, { Required. Any numeric expression giving the X coordinate one",
            "\t\tside of the bar on the screen (either left or right). }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate of",
            "\t\teither the top or bottom of the bar on the screen. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate of the",
            "\t\tside of the bar opposite to X1 on the screen (either left or right). }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate of",
            "\t\teither the top or bottom of the bar, whichever is the opposite to Y1.",
            "\t\t}",
            "\tForeground, { Required. Any numeric expression giving the foreground",
            "\t\tVTScada Color Palette of the bar. }",
            "\tPattern, { Required. Any numeric expression giving the hatch pattern",
            "\t\tto use to fill the bar. The valid hatch style numbers are from 1 to 25",
            "\t\tinclusive. A Pattern of 1 is a solid bar. For valid pattern numbers,",
            "\t\tplease refer to Fill Patterns ). }",
            "\tBackground { Required. Any numeric expression giving the background",
            "\t\tcolor for the hatch pattern used to fill the bar. This value is only",
            "\t\tsignificant if the Pattern parameter is not equal to 1 (solid). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Base64Decode": {
        "comments": [
            "{ Description: Performs a Base64 decode of a buffer. If neither of the",
            "\toptional parameters are present, this function is treated as a wrapper",
            "\tfor Base64Decoder. }",
            "{ This function complies with IETF RFC4648 and RFC2045 . Returns",
            "\tInvalid if the input buffer is invalid, or if IsMime is TRUE and the",
            "\tbuffer contains invalid characters as per RFC2045. Whitespace",
            "\tcharacters will be ignored rather than cause failure. }"
        ],
        "snippets": [
            "\\System.Base64Decode(",
            "\tBuffer, { Required. The encoded value. }",
            "\tOffset, { Optional numeric. Offset into the buffer, at which to start",
            "\t\tdecoding. Defaults to zero if invalid. }",
            "\tisMIME, { Optional Boolean. If TRUE, relaxes the constraint regarding",
            "\t\tcharacters that aren't in the base64 alphabet, per RFC2045. Defaults",
            "\t\tto FALSE if invalid. }",
            "\tURLSafe { Optional Boolean. If TRUE, an alphabet that is URL and",
            "\t\tfilename safe will be used. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Base64Decoder": {
        "comments": [
            "{ Description: Performs a Base64 decode of a buffer. }",
            "{ This function complies with IETF RFC4648 and RFC2045 . Returns",
            "\tInvalid if the input buffer is invalid. Whitespace characters will be",
            "\tignored rather than cause failure. }"
        ],
        "snippets": [
            "Base64Decoder(",
            "\tBuffer { Required. The encoded value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Base64Encode": {
        "comments": [
            "{ Description: Performs a Base64 encode of a buffer. If the optional",
            "\tparameter is not present, this function is treated as a wrapper for",
            "\tBase64Encoder. }",
            "{ none. }"
        ],
        "snippets": [
            "System.Base64Encode(",
            "\tBuffer, { Required. The information to be encoded. }",
            "\tURLSafe { Optional Boolean. If TRUE, an alphabet that is URL and",
            "\t\tfilename safe will be used. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Base64Encoder": {
        "comments": [
            "{ Description: Performs a Base64 encode of a buffer. }",
            "{ Whitespace characters will be ignored rather than cause failure. }"
        ],
        "snippets": [
            "Base64Encoder(",
            "\tBuffer { Required. The information to be encoded. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Beep": {
        "comments": [
            "{ Description: Causes a tone to sound on the computer's internal",
            "\tspeaker. }"
        ],
        "snippets": [
            "Beep(",
            "\tFrequency { Required. Any numeric expression giving the frequency to",
            "\t\tbe output to the speaker. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Bevel": {
        "comments": [
            "{ Description: Draws a titled beveled box. }"
        ],
        "snippets": [
            "System.Bevel(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the bevel. The smaller of X1 or X2 will always",
            "\t\tbe the left side. }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the bevel. The smaller of Y1 or",
            "\t\tY2 will always be the top edge. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the bevel opposite to X1. }",
            "\tY2, { Any numeric expression giving the Y coordinate on the screen of",
            "\t\tthe top or bottom of the bevel, whichever is the opposite to Y1. }",
            "\tTitle, { Optional. Any text expression to be used as a title embedded",
            "\t\tin the bevel. The default value is a null text string. }",
            "\tAlignTitle, { Optional. Any logical expression. If true (non-0) the",
            "\t\ttop of the title will be aligned with the top of the defined area, if",
            "\t\tfalse (0) the bevel will be aligned with the top of the area and the",
            "\t\ttitle will protrude past the top. The default value is true. }",
            "\tTitleBGColor, { Optional. Any numeric expression giving the index of",
            "\t\tthe VTScada Color Palette to display under the title. Note that this",
            "\t\twill affect the area immediately under the title (i.e. it does not",
            "\t\taffect the area inside the bevel). No default value is provided. }",
            "\tTitleFGColor, { Optional. Foreground (text) color for the title. }",
            "\tBevelColor { Optional. Color of the bevel line. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "BinaryToIP": {
        "comments": [
            "{ Description: Converts an IP address from binary notation to decimal.",
            "\t}",
            "{ This module is a member of the Function Library, and must therefore",
            "\tbe prefaced by \\FunctionLib as shown in the \"Format\" section. Note",
            "\tthat each group in the IP address output of BinaryToIP is padded with",
            "\tzeroes. }"
        ],
        "snippets": [
            "\\FunctionLib.BinaryToIP(",
            "\tValue { An internet protocol (IP) address, written as a four-byte",
            "\t\tbinary buffer. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "BinIP2Text": {
        "comments": [
            "{ Description: Returns a text representation of a specified binary IP",
            "\tin a printable format. }"
        ],
        "snippets": [
            "\\RPCManager\\BinIP2Text(",
            "\tBinIP { Required. The Binary representation of the IP to be converted",
            "\t\tto a printable format. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Bit": {
        "comments": [
            "{ Description: Returns the on/off status of a bit in a number. }"
        ],
        "snippets": [
            "Bit(",
            "\tValue, { Required. Any numeric expression giving the number containing",
            "\t\tthe bit to be tested. }",
            "\tBitNumber { Required. Any numeric expression in the range of 0 to 31",
            "\t\tgiving the bit number to be tested within the number specified by the",
            "\t\tValue parameter. Bit 0 is the least significant bit. Any value outside",
            "\t\tthe range of 0 to 31 will result in a false result for Bit. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "BitmapInfo": {
        "comments": [
            "{ Description: Returns information about an image. }"
        ],
        "snippets": [
            "BitmapInfo(",
            "\tBitmapVal { Required. Any expression that returns an image value such",
            "\t\tas MakeBitmap() }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Blend": {
        "comments": [
            "{ Description: Returns an aRGB color value that is a given percentage",
            "\tbetween two specified colors. }",
            "{ Returns an aRGB value for a color that is a blend of Color1 and",
            "\tColor2. By default, the values will be averaged, but any ratio between",
            "\tthe two colors can be specified. Blend is especially useful for",
            "\tcreating accent colors in dialog boxes. }"
        ],
        "snippets": [
            "System.ColorTools.Blend(",
            "\tColor1, { Required. Any text expression giving the aRGB value of the",
            "\t\tfirst color. }",
            "\tColor2, { Required. Any text expression giving the aRGB value of the",
            "\t\tsecond color. }",
            "\tRatio { Optional. Any numeric expression for a value between 0 and 1.",
            "\t\tThe larger the Ratio, the closer the resulting color will be to",
            "\t\tColor1. Default = 0.5 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "BlockDecrypt": {
        "comments": [
            "{ Description: Decrypts a value that was encrypted using the",
            "\tBlockEncrypt function. }"
        ],
        "snippets": [
            "System.BlockDecrypt(",
            "\tCipherValue, { Required. The string that was encrypted using the",
            "\t\tBlockEncrypt function }",
            "\tKey { Required string. The key value that was used for encryption. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BlockEncrypt": {
        "comments": [
            "{ Description: Uses encryption to encode a VTScada value into a Base64",
            "\tstring. }",
            "{ The resulting string will be different each time it is encoded, even",
            "\tif the same key is used. }"
        ],
        "snippets": [
            "System.BlockEncrypt(",
            "\tPlainValue, { Required. The information to be encoded. }",
            "\tKey, { Required string. The key value to be used for encryption. }",
            "\tSalt { Optional text. Defaults to a random GUID, but can be specified",
            "\t\tby the caller if required. Best practice is to use a per-record salt }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BlockWrite": {
        "comments": [
            "{ Description: Writes a block of data to a stream. }"
        ],
        "snippets": [
            "BlockWrite(",
            "\tDestinationStream, { Required. Any expression that returns a stream",
            "\t\tvalue. }",
            "\tSourceData, { Required. Any text or stream expression that specifies",
            "\t\tthe block of data to write to Stream. }",
            "\tByteLimit { Optional Any numeric expression giving the maximum number",
            "\t\tof bytes copied from a stream. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Boolean": {
        "comments": [
            "{ Description: Takes a valid Boolean test and returns the numeric",
            "\tequivalent. }"
        ],
        "snippets": [
            "System.Boolean(",
            "\tVariable { Required. The variable whose value is to be converted. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Box": {
        "comments": [
            "{ Description: Draws an empty box on the screen. }"
        ],
        "snippets": [
            "Box(",
            "\tX, { Required. Any numeric expression giving the X coordinate of one",
            "\t\tside of the box on the screen. The smaller of X1 and X2 will always be",
            "\t\tthe left side. }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate of",
            "\t\teither the top or bottom of the box on the screen. The smaller of Y1",
            "\t\tand Y2 will always be the top edge. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate of the",
            "\t\tside of the box opposite to X1 on the screen (either left or right)..",
            "\t\t}",
            "\tY2, { Required. Any numeric expression giving the Y coordinate of",
            "\t\teither the top or bottom of the box, whichever is the opposite to Y1.",
            "\t\t}",
            "\tStyle, { Required. Any numeric expression giving the line style for",
            "\t\tthe box wall. Valid line styles are from 1 to 10 inclusive. A line",
            "\t\tstyle of 1 is a solid line. }",
            "\tWidth, { Required. Any numeric expression giving the width of the box",
            "\t\twall in units of X screen coordinates. The width is always rounded to",
            "\t\tresult in an odd number of pixels on the screen. The minimum width",
            "\t\tdisplayed will be 1 pixel. }",
            "\tColor { Required. Any numeric expression giving the VTScada Color",
            "\t\tPalette of the box. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Brush": {
        "comments": [
            "{ Description: Returns a brush value. }"
        ],
        "snippets": [
            "Brush(",
            "\tForeground, { Required. Any numeric expression giving the foreground",
            "\t\tcolor of the brush pattern. Any of the following may be used: a",
            "\t\tpalette index color a system color -1 (transparent) an RGB string in",
            "\t\tthe format, \"<RRGGBB>\" }",
            "\tBackground, { Required. Any numeric expression giving the background",
            "\t\tcolor of the brush pattern. If there is a solid pattern, this",
            "\t\tparameter is ignored. Any of the following may be used: a palette",
            "\t\tindex color a system color -1 (transparent) an RGB string in the",
            "\t\tformat, \"<RRGGBB>\" }",
            "\tPattern { Required. Any numeric expression giving the hatch Fill",
            "\t\tPatterns to use. A 0 is an invisible pattern, and a 1 is a solid",
            "\t\tpattern. The maximum style value is 25. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Bubble": {
        "comments": [
            "{ Description: Starts a new child bubble and launches the given module",
            "\tinto a new script thread in that bubble. }",
            "{ The Bubble function only loads and launches modules into the new",
            "\tbubble. It will often be necessary to provide input data values to the",
            "\tnew bubble. These can be sent after the Bubble call using the",
            "\tBubbleSend function. Modules that are loaded into a child bubble are",
            "\tloaded independently, and therefore do not share \"Shared\" variables",
            "\twith the copy of the module that exists in the parent object. Bubbles",
            "\tmust refrain from setting retained values that could be set in another",
            "\tbubble. They must use SetInstanceName to give their object a unique",
            "\tname before setting any instance variables. At the same time, parent",
            "\tbubbles should refrain from writing to the retained variable using the",
            "\tdefault instance name in a module that could be loaded inside a child",
            "\tbubble. Otherwise, they risk corrupting the retained value, or loading",
            "\ta partially-written retained value The bubble will continue to exist",
            "\tfor as long as there are objects running within the bubble. After the",
            "\tlast object within the bubble in slain and all outstanding related",
            "\twork within the bubble is finished, the bubble will tear itself down.",
            "\tNote that slaying the object that started the bubble will not stop the",
            "\tbubble. The bubble must tear itself down, either on its own or upon",
            "\treceipt of a message from its parent bubble telling it to do so. The",
            "\tbubble handle returned by this function is not invalidated when the",
            "\tbubble tears itself down. If a parent bubble needs to know when a",
            "\tchild bubble is finished, then the child bubble should send the parent",
            "\tbubble a message before terminating. A parent bubble does not need to",
            "\tretrieve that message before the child bubble terminates. This is a",
            "\treason why the bubble handle is not invalidated when the child bubble",
            "\tfinishes, as the parent bubble may still need to retrieve one or more",
            "\tmessages via the child bubble handle. When ImportDictionary is not",
            "\tprovided, ModuleOrObject will only be successfully loaded into the",
            "\tbubble if it has no static references to external variables since it",
            "\tis loaded with no parent. When ImportDictionary is provided, any",
            "\tmodules that it fully imports (dictionary value TRUE or FALSE) cannot",
            "\tstatically reference any external variables that are not also being",
            "\timported, or else they will fail to load in the bubble. So, if you are",
            "\timporting ModuleA and it contains a reference to ModuleB, youâll need",
            "\tto import ModuleB. In order to do that, youâll also need to import all",
            "\tvariables that ModuleB references. Hence, even if your bubble only",
            "\tneeds to call one external module directly, you may need to import a",
            "\tnumber of modules and variables in order to be able to use that one",
            "\tmodule. }"
        ],
        "snippets": [
            "Bubble(",
            "\tBubbleName, { Required text. The name that is to be associated with",
            "\t\tthe bubble as well as the name given to the script thread that is",
            "\t\tstarted in the bubble. Displayed in the user interface of debugging",
            "\t\ttools. }",
            "\tModuleOrObject, { Required object. This is the root module that is",
            "\t\tloaded and launched into the bubble. It is always loaded and launched",
            "\t\twith no parent or caller. }",
            "\tImportDictionary { Optional dictionary. May be used to specify a",
            "\t\tsubset of variables or modules from the ModuleOrObject parameter that",
            "\t\twill be loaded, launched, or both, into the child bubble rather than",
            "\t\tloading and launching the entire module. This is of use when you want",
            "\t\tto share the same code between modules running inside and outside of",
            "\t\tthe child bubble. When an ImportDictionary is provided, the entire",
            "\t\tModule is not loaded into the bubble to be run. Instead, a copy of",
            "\t\tModuleOrObject is reconstructed in the bubble with none of its states",
            "\t\tand with only the subset of variables specified in the",
            "\t\tImportDictionary. This is then launched in the bubble. In this",
            "\t\tsituation, the root module is like a library of modules and objects",
            "\t\tthat you want to selectively import into the bubble, with the actual",
            "\t\tbubble worker module being one of the modules imported. The keys to",
            "\t\tthe dictionary are the names of variables in ModuleOrObject, and the",
            "\t\tvalues can be any one of the following: If the key specifies a",
            "\t\tvariable containing a module or object, then setting the value to",
            "\t\tFALSE means that the module will be fully loaded into the bubble and",
            "\t\tplaced in the corresponding variable, but it will not be launched. If",
            "\t\tthe key specifies a variable containing a module or object, then",
            "\t\tsetting the value to TRUE means that the module will be fully loaded",
            "\t\tinto the bubble and launched, with the object being placed in the",
            "\t\tcorresponding variable. If the key specifies a variable containing a",
            "\t\tmodule or object, then you can set the value to a nested",
            "\t\tImportDictionary. A nested ImportDictionary is the same as the",
            "\t\ttop-level one, except that it operates on the module or object",
            "\t\tspecified in the dictionary key. The resulting reconstructed object is",
            "\t\tplaced in the corresponding variable. If the dictionary value is",
            "\t\tInvalid, then any packable value is imported into the bubble and",
            "\t\tplaced in the corresponding variable. Note that static arrays are",
            "\t\tconverted to dynamic arrays as a part of the import process. Any local",
            "\t\tvariable in the object or module can be imported, regardless of",
            "\t\twhether it is protected. It is typical to have one fully loaded and",
            "\t\tlaunched module that will perform the work that the bubble has been",
            "\t\tcreated for. The other imported modules and variables would be common",
            "\t\tcode that the bubble worker module uses and which is also used outside",
            "\t\tthe bubble. Imported variables are populated inside the bubble in the",
            "\t\torder that they were added to the import dictionary. Therefore, if",
            "\t\t(for example) an imported and launched module has a Constructor that",
            "\t\treferences another imported module, you will need to add the other",
            "\t\tmodule to the import dictionary first so that it is ready to be used",
            "\t\twhen the Constructor runs. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BubbleList": {
        "comments": [
            "{ Description: Lists the running child bubbles of the current bubble.",
            "\t}",
            "{ It is possible for a parent bubble to be holding on to a bubble",
            "\thandle for a child bubble that has since stopped. (Refer to comments",
            "\twithin the Bubble function.) That bubble handle will not be included",
            "\tin the set of results returned by BubbleList. }"
        ],
        "snippets": [
            "BubbleList();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BubbleQueueLength": {
        "comments": [
            "{ Description: Reports the length of the queue of messages from the",
            "\tcurrent bubble's parent bubble or one of its children. }"
        ],
        "snippets": [
            "BubbleQueueLength(",
            "\tBubbleHandle, { Optional bubble handle as returned by the Bubble and",
            "\t\tBubbleList functions. Specifies the bubble where the message is being",
            "\t\treceived from. If Invalid or not provided, the message is being",
            "\t\treceived from the parent bubble. }",
            "\tQueueName { Optional text. The name of the queue that the message was",
            "\t\tqueued on. If not provided, it defaults to the empty string, ââ. Any",
            "\t\ttime you specify a new string, a new queue will be created internally.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "BubbleReceive": {
        "comments": [
            "{ Description: Receives a message from the given bubble. }",
            "{ Messages on a particular queue are received in the order that they",
            "\twere sent. This function is intended to be used in combination with",
            "\tBubbleQueueLength as follows: If BubbleQueueLength(ChildBubble,",
            "\t\"MyQueueName\") > 0; [ Message = BubbleReceive(ChildBubble,",
            "\t\"MyQueueName\"); { do something with Message } ] }"
        ],
        "snippets": [
            "BubbleRecieve(",
            "\tBubbleHandle, { Optional bubble handle as returned by the Bubble and",
            "\t\tBubbleList functions. Specifies the bubble where the message is being",
            "\t\treceived from. If Invalid or not provided, the message is being",
            "\t\treceived from the parent bubble. }",
            "\tQueueName { Optional text. The name of the queue that the message was",
            "\t\tqueued on. If not provided, it defaults to the empty string, ââ. Any",
            "\t\ttime you specify a new string, a new queue will be created internally.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BubbleSend": {
        "comments": [
            "{ Description: Sends a message to the given bubble. }",
            "{ Message contents are always deep-copied when they are sent.",
            "\tTherefore, changes to streams and data structures that have already",
            "\tbeen sent to another bubble will not be reflected in the copy in the",
            "\tother bubble. Messages on a particular queue will be received in the",
            "\torder that they are sent. Note that message queues live for the",
            "\tlifetime of a bubble, so it is best not to continually generate and",
            "\tsubsequently discard queue names, as that will cause growing memory",
            "\tconsumption. }"
        ],
        "snippets": [
            "BubbleSend(",
            "\tMessage, { Optional. Any packable value (including an array,",
            "\t\tdictionary, or structure) that will be sent to the destination bubble.",
            "\t\tIf not provided, an Invalid will be sent. }",
            "\tBubbleHandle, { Optional bubble handle as returned by the Bubble and",
            "\t\tBubbleList functions. Specifies the bubble where the message will be",
            "\t\tsent. If Invalid or not provided, the message will be sent to the",
            "\t\tparent bubble. }",
            "\tQueueName { Optional text. The name of the queue that the message will",
            "\t\tbe queued on. If not provided, it defaults to the empty string ââ. Any",
            "\t\ttime you specify a new string, a new queue will be created internally.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BuffOrder": {
        "comments": [
            "{ Description: Reverses the order of groups of bytes in a buffer, and",
            "\treturns a new (rearranged) buffer. }"
        ],
        "snippets": [
            "BuffOrder(",
            "\tBuffer, { Required. Any text or buffer expression to be reordered. }",
            "\tOffset, { Required. Any numeric expression giving the initial position",
            "\t\twithin the buffer for the ordering, starting at 0. Offset must be",
            "\t\tgreater than or equal to 0. }",
            "\tSize, { Required. Any numeric expression greater than 0, giving the",
            "\t\tsize of each group of bytes. Bytes within a group will remain in their",
            "\t\toriginal order. The portion of the original buffer that will be",
            "\t\tre-ordered must be evenly divisible into groups of Size. }",
            "\tIncrement, { Required. Any numeric expression greater than 0, giving",
            "\t\tthe number of groups of Size bytes to be reordered. Re-ordering is",
            "\t\tdone to the Size-groups within Increments, not across Increments. }",
            "\tN { Required. Any numeric expression giving the total number of",
            "\t\tIncrement-groups to reverse. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "BuffRead": {
        "comments": [
            "{ Description: Reads values from a formatted buffer and returns the",
            "\tnumber of values not read. }"
        ],
        "snippets": [
            "BuffRead(",
            "\tBuffer, { Required. Any text or buffer expression to read. }",
            "\tOffset, { Required. Any numeric expression giving the initial buffer",
            "\t\tposition for the read, starting at 0. }",
            "\tFormat, { Required. Any text expression giving the format of how the",
            "\t\tvalues (Vn parameters) are to be read. This format is similar, but not",
            "\t\tidentical, to the C language format string for the scanf function,",
            "\t\twhereby each of the % format specifications assigns a value to one of",
            "\t\tthe Vn parameters in the statement in the order in which each appears",
            "\t\tin the list. Note that like a standard text string, these format",
            "\t\tspecifiers must also be enclosed by double quotes. If a format",
            "\t\tspecification appears for which there are no remaining V parameters,",
            "\t\tthe format specification value is read and discarded. For the % format",
            "\t\tspecifications, the following form applies (where the [ ] indicates",
            "\t\toptional elements): %[*][width]type Whereâ¦ % Is a mandatory character",
            "\t\t* The optional asterisk causes the read to occur as per the format",
            "\t\tspecification, but suppresses any assignment to the Vn parameters.",
            "\t\twidth Width is optional, specifying the maximum number of characters",
            "\t\tto read. type The specifications for type are listed in the following",
            "\t\ttable: Format strings are case insensitive. Additionally, specifying a",
            "\t\tcharacter for a type that is not in this list results in all the",
            "\t\tcharacters following the % up to that point to be read exactly as they",
            "\t\tappear in the Format string and discarded. Type Meaning Nb Binary",
            "\t\tformat, where n is a number indicating the type of value (see below) c",
            "\t\tSingle ASCII character (byte) d Signed decimal 64-bit integer e Signed",
            "\t\texponential f Signed floating point g e or f formats i Signed decimal",
            "\t\tinteger l Line of characters terminated by a carriage return, line",
            "\t\tfeed, or both n Present offset in the buffer o Signed octal, 32-bit",
            "\t\tdefault* s Text string t Counted string u Unsigned decimal 64-bit",
            "\t\tinteger x Signed hex integer using \"abcdef\", 32-bit default* znnn",
            "\t\tEscape character where nnn is the 3-digit ASCII code %x and %o will",
            "\t\ttreat values as 32-bit integers by default unless the %ll modifier is",
            "\t\tused. %llx and %llo will read values in 64-bit. for %u, when reading",
            "\t\tan unsigned 64bit integer greater than 9223372036854775807 (the",
            "\t\tlargest signed 64bit integer), the value will be read in as the",
            "\t\tbit-equivalent signed 64bit integer. ( eg. 9223372036854775808 is read",
            "\t\tin as -9223372036854775808.) nb, Binary type For the format",
            "\t\tspecification of %nb, where n specifies the type of number, n must be",
            "\t\ta single digit from one of the following choices. All are",
            "\t\tlow-byte-first. n value Type 0 Byte 1 Short integer (2 bytes, low byte",
            "\t\tfirst) 2 Long integer (4 bytes, low bytes first) 3 IEEE single",
            "\t\tprecision float (4 bytes) 4 <obsolete> 5 IEEE double precision float",
            "\t\t(8 bytes) 6 <obsolete> 7 Binary unsigned short (2 bytes, low byte",
            "\t\tfirst) 8 Unsigned 32-bit integer 9 64-bit FileTime. This reads or",
            "\t\twrites a 64 bit time value in the Microsoft FileTime format. When",
            "\t\treading, the value is converted from the FileTime epoch and units (100",
            "\t\tnanosecond intervals since Jan 1, 1601) to the VTS epoch and units",
            "\t\t(seconds since 1/1/1970) any times earlier than this will result in a",
            "\t\tvalue of 0. When writing, the value is converted from the VTS epoch",
            "\t\tand units to the FileTime epoch and units. c, ASCII character type :",
            "\t\tUnlike BuffWrite this type deals with characters in a string; each",
            "\t\tcharacter being equal to one byte. Unlike the %s option, which reads",
            "\t\tonly up to the first white-space character, the %c option reads the",
            "\t\tnumber of characters/bytes specified by its width and is not",
            "\t\tterminated by any particular character. If no width is specified, a",
            "\t\tsingle character is read. d, Signed decimal integer e, Signed",
            "\t\texponential f, Signed floating point g, e or f formats i, Signed",
            "\t\tdecimal integer type: This option normally reads a decimal integer;",
            "\t\thowever, if a leading \"0b\" is encountered, the number will be",
            "\t\tinterpreted as binary. If a leading \"0\" (zero only) is encountered,",
            "\t\tthe number will be interpreted as octal. If a leading \"0x\" is",
            "\t\tencountered, the number will be interpreted as hexadecimal. For",
            "\t\tdecimal, values will be read as 64-bit integers, but hex, octal and",
            "\t\tbinary will be treated as 32-bit integers unless the %lli modifier is",
            "\t\tused, which will cause the %i format to treat hex, octal and binary as",
            "\t\t64-bit. l, Line of characters: This option reads a line of characters",
            "\t\tterminated by a carriage return, a line feed, or both (in either",
            "\t\torder). The carriage return and line feed will be discarded, and the",
            "\t\tnext character read will be the first character on the next line. The",
            "\t\tmaximum number of characters read is 2GiB (2^30 bytes) or less if the",
            "\t\twidth option is used. n, Buffer offset : This option does not read a",
            "\t\tvalue, but returns the present offset in Buffer and can be useful in",
            "\t\tsubsequent reads. o, Unsigned Octal s, Text string type: Text in the",
            "\t\tstring is read up until a white-space character is encountered, or the",
            "\t\tspecified width has been read, whichever is smaller. Square brackets",
            "\t\tenclosing a character, group of characters, or a caret and a group of",
            "\t\tcharacters used in the format string reads strings not delimited by",
            "\t\tspaces. This is a substitute for the %s format specification. The",
            "\t\tinput is read up to the first character that does not appear inside",
            "\t\tthe square brackets (note that this is case-sensitive). A dash may be",
            "\t\tused to specify a range of characters. For example, the following",
            "\t\tformat specifier: % [A-Fa-f] will read a string up to the first which",
            "\t\tis not an A, B, C, D, E, or F both upper and lower case. t, Counted",
            "\t\tstring type A counted string is encoded as a sequence of UTF-8",
            "\t\tcharacters without a null terminator and preceded by the length in",
            "\t\tbytes. The length in bytes is encoded as Int32, i.e. a \"%2b\". A value",
            "\t\tof â1 is used to indicate an invalid string, a value of 0 indicates a",
            "\t\tnull (\"\") string. Do not apply width or precision modifiers to a \"%t\"",
            "\t\tcounted string. The caret symbol ^. If the first character inside the",
            "\t\tsquare brackets is a caret ( ^ ), the read progresses up to, but not",
            "\t\tincluding, the first character that appears inside the square",
            "\t\tbrackets: %[^X-Z] This would read a string up to, but not including,",
            "\t\tthe first X, Y or Z (upper-case only); if the string were terminated",
            "\t\tby an X, the next character read would be that X. Inside the square",
            "\t\tbrackets, the backslash is used as an escape character - any character",
            "\t\tfollowing a backslash (such as a caret, dash, or backslash) is taken",
            "\t\tas that character without special meaning. For example: %[^X-Z\\^]",
            "\t\twould behave as described previously, except that the string would now",
            "\t\tbe read up to but not including the first X, Y, Z, or ^. Because",
            "\t\tformat specifications for the Vn parameters are indicated by a",
            "\t\tpercentage sign, to read (and discard) an actual percentage sign as",
            "\t\tpart of the text string, precede it with a backslash character (i.e.",
            "\t\t\\%). Also, since the backslash character is used in this manner, as",
            "\t\twell as with special control characters such as line feed, carriage",
            "\t\treturn and form feed, to read and discard a backslash, use two",
            "\t\tbackslash characters (i.e. \\\\). x, Hexadecimal characters: the %x",
            "\t\toption reads the number of characters/bytes specified by its width and",
            "\t\tis not terminated by any particular character. If no width is",
            "\t\tspecified, it will continue reading all bytes that can be recognized",
            "\t\tas hexadecimal characters. For example, given the string \"â¦= 3D\",",
            "\t\t%[^=]=%2x would read the hedadecimal value, 3D (decimal value, 61).",
            "\t\tznnn, Escape characters: This specifies an escape character that will",
            "\t\tbe thrown away when read, where nnn is a 3-digit number giving the",
            "\t\tASCII character code of the escape character. This option is generally",
            "\t\tused as the sole format specifier that reads an entire string, spaces",
            "\t\tincluded, discarding every single occurrence of an escape character,",
            "\t\tor the first occurrence of every pair of escape characters. For",
            "\t\texample, if the string to be read looked like: abXc dXXfghiXXXjXXXXkl",
            "\t\tmX Xn o and the format specifier indicated that the ASCII code for 'X'",
            "\t\t(88) was to be the escape code: %25z088 then the variable that this",
            "\t\twas read into would contain: abc dXfghiXjXXkl m n o Notice that for",
            "\t\teach occurrence of X, the character immediately following it is saved,",
            "\t\teven if it is itself an escape character. Then the next occurrence of",
            "\t\tthe escape character is discarded, with the character following it",
            "\t\tbeing saved, regardless of what it is, and so on. The width field",
            "\t\tspecifies the maximum number of bytes to place in the output string;",
            "\t\tif this number is smaller than the input string (less the offending",
            "\t\tescape characters), the string will be truncated. If no width is",
            "\t\tspecified, a single character will be read. Control characters: In",
            "\t\torder to encode certain control characters as part of the Format",
            "\t\tparameter, one of two methods may be used. The first is to use a",
            "\t\tbackslash character followed by one of the single character codes",
            "\t\tlisted below to produce the desired result. Please note that the",
            "\t\tletters must be lower case. Code Meaning \\b Backspace \\f Form Feed \\n",
            "\t\tLine Feed \\r Carriage Return \\t Horizontal Tab \\v Vertical Tab In",
            "\t\taddition to the predefined codes, an alternate form may be used: \\nnn:",
            "\t\twhere nnn is a three digit integer in the range of 0 to 255 specifying",
            "\t\ta certain ASCII character. If the number contains less than three",
            "\t\tdigits, the leading spaces must be padded with zeroes; this is not the",
            "\t\tcase with the previously listed single character control characters.",
            "\t\tFor example, to include the one byte ASCII character G in the output,",
            "\t\tyou could place its decimal equivalent of 71 in the Format string as",
            "\t\t\\071. }",
            "\tNb, { c }",
            "\td, { e }",
            "\tf, { g }",
            "\ti, { l }",
            "\tn, { o }",
            "\ts, { t }",
            "\tu, { x }",
            "\tznnn,",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t\\b, { \\f }",
            "\t\\n, { \\r }",
            "\t\\t, { \\v }",
            "\tV1, V2, â¦ { Required. Are the variables to be read in the form",
            "\t\tdescribed by the Format parameter. Expressions are not allowed. Each",
            "\t\tof the Vn parameters is read in the order in which each appears in the",
            "\t\tparameter list. V1 has the format given by the first % sequence in the",
            "\t\tFormat parameter, V2 has the second, and so on. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BuffStream": {
        "comments": [
            "{ Description: Returns an in-memory read/write (expanding) buffer",
            "\tstream. }"
        ],
        "snippets": [
            "BuffStream(",
            "\tBuffer { Required. Any text or buffer expression. This serves as the",
            "\t\tinitial content of the stream. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BuffToArray": {
        "comments": [
            "{ Description: Reads an array from a formatted buffer containing",
            "\tnumerical data and returns the number of elements read. }"
        ],
        "snippets": [
            "BuffToArray(",
            "\tArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe destination array where the data is to be stored. The subscript",
            "\t\tfor the array may be any numeric expression. }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to read, starting at the element given by the first",
            "\t\tparameter. If N extends past the upper bound of the array dimension,",
            "\t\tthis computation will \"wrap-around\" and resume at element 0, until N",
            "\t\telements have been processed. }",
            "\tBuffer, { Required. Any text or buffer expression to read. The data",
            "\t\tstored in the buffer must be numeric. }",
            "\tOffset, { Required. Any numeric expression giving the starting buffer",
            "\t\tposition for the read in characters (bytes), starting at 0. }",
            "\tOption { Required. Any numeric expression that specifies the format of",
            "\t\tthe buffer read. This can be one of: Option Buffer format 0 Unsigned",
            "\t\tbinary (low byte first)* 1 Signed binary (low byte first) 2 BCD",
            "\t\t(binary coded decimal) (low byte first) 3 ASCII octal (high byte",
            "\t\tfirst) 4 ASCII decimal (high byte first) 5 ASCII hex (high byte first)",
            "\t\t6 ASCII floating point (high byte first) 7 IEEE float/double (low byte",
            "\t\tfirst) 8 <obsolete> 9 Allen-BradleyÂ® PLC/3 floating point 10 VAX",
            "\t\tsingle precision floating point For Option 0, BuffToArray reads 64-bit",
            "\t\tunsigned integers from buffers and represents them in VTScada values",
            "\t\tas their signed 64-bit equivalents. This only matters for integers",
            "\t\tlarger than the largest 64-bit signed integer. For Options 7 and 9,",
            "\t\tthe data is read as appropriate binary format. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "BuffToHex": {
        "comments": [
            "{ Description: Given a text buffer, this function will treat the",
            "\tcontent as an arbitrary sequence of bytes and convert it to a readable",
            "\ttext buffer containing the sequence of hex numbers representing the",
            "\tbytes in the text buffer. }"
        ],
        "snippets": [
            "System.BuffToHex(",
            "\tBinaryBuffer { Required. The buffer that is to be converted to a",
            "\t\thexadecimal string. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BuffToParm": {
        "comments": [
            "{ Description: Convert buffer of numeric data to parameters. This",
            "\tfunction reads module parameters from a formatted buffer containing",
            "\tnumerical data and returns the number of data items read. }"
        ],
        "snippets": [
            "BuffToParm(",
            "\tObject, { Required. The object value of the module containing the",
            "\t\tdestination parameters. }",
            "\tIndex, { Required. Any numeric expression giving the first parameter",
            "\t\tto read, starting at 1. }",
            "\tBuffer, { Required. Any text or buffer expression to read. }",
            "\tOffset, { Required. Any numeric expression giving the starting buffer",
            "\t\tposition for the read in characters (bytes), starting at 0. }",
            "\tN, { Required. Any numeric expression giving the number of parameters",
            "\t\tto read from the buffer. If there are fewer actual parameters than N",
            "\t\tspecifies, this function continues to the last parameter and then",
            "\t\tstops. }",
            "\tOption, { Required. Any numeric expression that specifies the format",
            "\t\tof the buffer read. This can be one of: Option Buffer format 0",
            "\t\tUnsigned binary (low byte first) 1 Signed binary (low byte first) 2",
            "\t\tBCD (binary coded decimal) (low byte first) 3 ASCII octal (high byte",
            "\t\tfirst) 4 ASCII decimal (high byte first) 5 ASCII hex (high byte first)",
            "\t\t6 ASCII floating point (high byte first) 7 IEEE float/double (low byte",
            "\t\tfirst) 8 <obsolete> 9 Allen-BradleyÂ® PLC/3 floating point 10 VAX",
            "\t\tsingle precision floating point For Options 7 and 9, the data is read",
            "\t\tas appropriate binary format. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BuffToPointer": {
        "comments": [
            "{ Description: Converts a buffer of numeric data to array of pointers.",
            "\tThis function reads from a formatted buffer containing numeric data,",
            "\twrites to locations specified by an array of pointers, and returns the",
            "\tnumber of elements read. }"
        ],
        "snippets": [
            "BuffToPointer(",
            "\tArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe pointer array. The subscript for the array may be any numeric",
            "\t\texpression. }",
            "\tN, { Required. Any numeric expression giving the number of items to",
            "\t\tread. If N extends past the upper bound of the array dimension, this",
            "\t\tcomputation will \"wrap-around\" and resume at element 0, until N",
            "\t\telements have been processed. }",
            "\tBuffer, { Required. Any text or buffer expression to read. }",
            "\tOffset, { Required. Any numeric expression giving the starting buffer",
            "\t\tposition for the read in characters (bytes), starting at 0. }",
            "\tOption, { Required. Any numeric expression that specifies the format",
            "\t\tof the buffer read. This can be one of: Option Buffer Format 0",
            "\t\tUnsigned binary (low byte first) 1 Signed binary (low byte first) 2",
            "\t\tBCD (binary coded decimal) (low byte first) 3 ASCII octal (high byte",
            "\t\tfirst) 4 ASCII decimal (high byte first) 5 ASCII hex (high byte first)",
            "\t\t6 ASCII floating point (high byte first) 7 IEEE float/double (low byte",
            "\t\tfirst) 8 <obsolete> 9 Allen-BradleyÂ® PLC/3 floating point 10 VAX",
            "\t\tsingle precision floating point For Options 7 and 9, the data is read",
            "\t\tas appropriate binary format. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10, { Size }",
            "\tBinary types, { BCD }",
            "\tASCII types, { Float types }",
            "\tSkip { Required. Any numeric expression giving the number of buffer",
            "\t\tunits to skip after each element is read. In binary modes, the",
            "\t\tfollowing values are supported: 8, 16, 32, and 64. Units are bits for",
            "\t\tOptions 0 and 1, BCD digits for type 2, and characters or bytes for",
            "\t\tall others. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BuffWrite": {
        "comments": [
            "{ Description: Writes formatted values to a buffer and returns the",
            "\tnumber of values not written. }"
        ],
        "snippets": [
            "BuffWrite(",
            "\tBuffer, { Required. Any text or buffer expression to be written. The",
            "\t\tbuffer must already exist. Buffers are created by certain functions,",
            "\t\tsuch as ArrayToBuff or MakeBuff, or by assignment of a text string",
            "\t\tsuch as \"Hello.\" BuffWrite writes to an existing buffer, which is",
            "\t\tfaster than creating a new buffer. Writing to an empty buffer has no",
            "\t\teffect. }",
            "\tOffset, { Required. Any numeric expression giving the starting buffer",
            "\t\tposition in characters or bytes for the write, starting at 0. }",
            "\tFormat, { Required. Any text expression giving the format of how the",
            "\t\tvalues (Vn parameters) are to be written. This format is similar, but",
            "\t\tnot identical, to the C language format string for the printf",
            "\t\tfunction, whereby each of the Vn parameters in the statement is",
            "\t\tassigned to a % format specification in the order in which each",
            "\t\tappears in the list. Note that like a standard text string, these",
            "\t\tformat specifiers must also be enclosed by double quotes. If a format",
            "\t\tspecification appears for which there are no remaining V parameters,",
            "\t\tthe format specification characters themselves are output to the",
            "\t\tstream exactly as they appear in the Format. For the % format",
            "\t\tspecifications, the following form applies (where the [ ] indicates",
            "\t\toptional elements): %[-][+][SPACE][#][width][.precision]type where %",
            "\t\t(percent sign) is mandatory; - (minus sign) (optional) causes the data",
            "\t\tto be left justified within the field (for binary types b and ASCII",
            "\t\tcharacter types c, this option is ignored); + (plus sign) (optional)",
            "\t\tcauses positive numbers to be prefaced with a + sign (negative numbers",
            "\t\tare unaffected). This allows easy alignment of positive and negative",
            "\t\tnumbers in a printed column of numbers. For binary types b and",
            "\t\tnon-numerical types, this option is ignored; space represents the",
            "\t\tsingle space character, and is similar to the [ + ] option but places",
            "\t\ta single space rather than a plus sign in front of positive numbers",
            "\t\t(negative numbers are still unaffected). This allows alignment of a",
            "\t\tcolumn of numbers without having to show all signs. For binary types b",
            "\t\tand non-numerical types, this option is ignored; # (hash mark) When",
            "\t\tused with the o , x , or X format, the # flag prefixes any nonzero",
            "\t\toutput value with 0, 0x, or 0X, respectively. width is a number that",
            "\t\tspecifies the minimum number of characters to output. Numbers that",
            "\t\trequire more characters than specified by the width value are",
            "\t\ttruncated on output. If the number of characters in the number or",
            "\t\tstring is less than width, blanks will be added to the left or right,",
            "\t\tdepending upon whether the output is left or right justified (i.e.",
            "\t\twhether the [ - ] option has been specified) until the width is",
            "\t\treached. For binary types b and ASCII character types c, this option",
            "\t\tis ignored; precision has a different meaning for each of the type",
            "\t\toptions as follows: Integer types d, l, u, o, x, and X precision",
            "\t\tspecifies the minimum number of digits to output. If the number",
            "\t\tcontains fewer digits, leading zeroes will be added to the left of the",
            "\t\tnumber. If precision is 0, omitted, or if the decimal point appears",
            "\t\twithout a number following it, the precision defaults to 1. The number",
            "\t\tis not truncated. Floating point types e and E precision specifies the",
            "\t\tnumber of digits after the decimal point. The last digit is rounded.",
            "\t\tThe default precision in this case is 6. If the precision is 0 or if",
            "\t\tthe decimal point appears without a number following it, no decimal",
            "\t\tpoint appears in the output. Floating point type f precision specifies",
            "\t\tthe number of digits after the decimal point. The last digit is",
            "\t\trounded. The default precision is 0. If the precision is explicitly 0,",
            "\t\tno decimal point is output. If a decimal point is output, at least one",
            "\t\tdigit will be placed before the decimal point. Floating point types g",
            "\t\tand G precision specifies the maximum number of significant digits to",
            "\t\tbe output. If no precision is specified, all significant digits are",
            "\t\twritten. String type s precision specifies the maximum number of",
            "\t\tcharacters of the string to be output. If the string contains more",
            "\t\tcharacters than specified by the precision, the string is truncated",
            "\t\tand only the first characters are written. If the precision is not",
            "\t\tspecified, all of the string characters are output. Byte type c The",
            "\t\tprecision option is ignored. Binary type b The precision option is",
            "\t\tignored. type is mandatory. The type specification must be one of",
            "\t\tthose listed below. Note: The case of the letter is important.",
            "\t\tSpecifying a character for the type that is not in this list will",
            "\t\tresult in all the characters following the % up to that point to be",
            "\t\toutput exactly as they appear in the Format string. Type Meaning nb",
            "\t\tBinary format; where n is a number indicating the type of value (see",
            "\t\tbelow). c Single character (byte values from 0 to 255) d Signed",
            "\t\tdecimal 64-bit integer, 64-bit output by default e Signed exponential;",
            "\t\texponent key is \"e\". E Signed exponential; exponent key is \"E\". f",
            "\t\tSigned floating point. g e or f format, whichever is shorter. G E or f",
            "\t\tformat, whichever is shorter. h Handle to a window. i Signed decimal",
            "\t\t64-bit integer, 64-bit output by default o Unsigned octal integer.",
            "\t\tDefault 32-bit integer. Use %llo to output 64-bit value. p Pointer to",
            "\t\ta buffer. s Text string. t Writes a utf-8 string as used by OPC UA",
            "\t\tbinary TCP: a 32-bit signed count of the length (-1 for an invalid",
            "\t\tstring, 0 for an empty string), then the string u Unsigned decimal",
            "\t\t64-bit integer, 64-bit output by default x Unsigned hex integer using",
            "\t\t\"abcdef\". Default 32-bit integer. (See following note.) X Unsigned hex",
            "\t\tinteger using \"ABCDEF\". Default 32-bit integer. (See following note.)",
            "\t\tWhen writing negative values using either x or X format codes, the",
            "\t\toutput will use a minimum of 32 bits because that is the smallest",
            "\t\tpossible size to display the full information. Defining a format",
            "\t\tstring such as \"%4X\" will not reduce this to 16 bit output for",
            "\t\tnegative values. To output 64-bit values, use the modifier ll. %llx",
            "\t\tand %llX output 64-bit values. nb , Binary type For the format",
            "\t\tspecification of %nb, where n specifies the type of number, n must be",
            "\t\ta single digit from one of the following choices. All are",
            "\t\tlow-byte-first. n Value Type 0 Byte, unsigned 1 Signed short integer",
            "\t\t(2 bytes) 2 Signed long integer (4 bytes) 3 IEEE single precision",
            "\t\tfloat (4 bytes) 4 <obsolete> 5 IEEE double precision float (8 bytes) 6",
            "\t\t<obsolete> 7 Unsigned short integer (2 bytes) 8 Unsigned long integer",
            "\t\t(4 bytes) 9 Writes a time in Microsoft FILETIME format, which contains",
            "\t\ta 64-bit value representing the number of 100-nanosecond intervals",
            "\t\tsince January 1, 1601 (UTC). 10 Outputs signed 64-bit integers in",
            "\t\tbinary form. Note: Other options such as width and precision do not",
            "\t\tapply to the b type. c , Byte type: This type is not representative of",
            "\t\ta single character in a string, but rather, represents single bytes.",
            "\t\tInput values (the Vn parameter to which this format specification",
            "\t\tapplies) must be integers in the range of 0 to 255. Strings are not",
            "\t\tacceptable input values. Note that the %c format specifier behaves",
            "\t\tdifferently when used in an output statement such as BuffWrite than",
            "\t\twhen used in an input statement, such as BuffRead. Some UTF-8",
            "\t\tcharacters can require multiple bytes. Values from 0-127 are",
            "\t\tconsistent between the traditional ASCII encoding and the UTF-8",
            "\t\tencoding. d , Signed decimal 64-bit integer: e , Signed exponential:",
            "\t\tExponent key is \"e\" E , Signed exponential: Exponent key is \"E\" f ,",
            "\t\tSigned floating point g , e or f formats: Whichever is shorter G, E or",
            "\t\tF formats : Whichever is shorter h , Window handle type: This type is",
            "\t\tused for building structures to be handed to DLLs and should be used",
            "\t\tby advanced users only. p , Buffer pointer type: This type is also",
            "\t\tused for building structures to be handed to DLLs and should be used",
            "\t\tby advanced users only. s , Text string type: t , Writes a utf-8",
            "\t\tstring as used by OPC UA binary TCP: a 32-bit signed count of the",
            "\t\tlength (-1 for an invalid string, 0 for an empty string), then the",
            "\t\tstring u , Unsigned decimal 64-bit integer, x , Unsigned hex integer",
            "\t\tusing \"abcdef\": 32-bit value by default. Use modifier %llx for 64-bit",
            "\t\tvalue output. X , Unsigned hex integer using \"ABCDEF\": 32-bit value by",
            "\t\tdefault. Use modifier %llX for 64-bit value output. SWrite(Strm,",
            "\t\t\"%z92\", \"Something \\to\\ be escaped\"); Gives the output: Something",
            "\t\t\\\\to\\\\ be escaped Plain text Text in the Format parameter is written",
            "\t\texactly as it appears, with three exceptions: Percentage sign (%)",
            "\t\tBecause format specifications for the Vn parameters are indicated by a",
            "\t\tpercentage sign, to include an actual percentage sign as part of the",
            "\t\tFormat parameter, precede it with a backslash character (i.e. \\%).",
            "\t\tBackslash character (\\) Because this is used to indicate special",
            "\t\tcontrol characters such as line feed, carriage return, and form feed,",
            "\t\tto write a backslash as part of the Format parameter, use two",
            "\t\tbackslash characters (i.e. \\\\). Quotation marks (\") The entire test",
            "\t\tstring is delimited by quotation marks, so to include a set of",
            "\t\tquotation marks as part of the Format parameter, use a set of",
            "\t\tquotations marks (i.e. \"\"). Control characters In order to encode",
            "\t\tcertain control characters as part of the Format parameter, one of two",
            "\t\tmethods may be used. The first is to use a backslash character",
            "\t\tfollowed by one of the single character codes listed below to produce",
            "\t\tthe desired result (notice that the letters must be lower case): Code",
            "\t\tMeaning \\b Backspace \\f Form feed \\n Line feed \\r Carriage return \\t",
            "\t\tHorizontal tab \\v Vertical tab \\nnn In addition to the above",
            "\t\tpredefined codes, \\nnn may be used, where nnn is a three digit integer",
            "\t\tin the range of 0 to 255 specifying a certain ASCII character. If the",
            "\t\tnumber contains less than three digits, the leading spaces must be",
            "\t\tpadded with zeroes; this is not the case with the previously listed",
            "\t\tsingle character control characters. For example, to include the one",
            "\t\tbyte ASCII character G in the output, you could place its decimal",
            "\t\tequivalent of 71 in the Format string as \\071. znnn Escape character",
            "\t\twhere nnn is the 3-digit ASCII code For example: SWrite(Strm, \"%z92\",",
            "\t\t\"Something \\to\\ be escaped\"); Gives the output: Something \\\\to\\\\ be",
            "\t\tescaped Offset is any numeric expression giving the starting buffer",
            "\t\tposition in bytes for the write, starting at 0. }",
            "\tnb, { c }",
            "\td, { e }",
            "\tE, { f }",
            "\tg, { G }",
            "\th, { i }",
            "\to, { p }",
            "\ts, { t }",
            "\tu, { x }",
            "\tX,",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10,",
            "\t\\b, { \\f }",
            "\t\\n, { \\r }",
            "\t\\t { \\v }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BuildDelete": {
        "comments": [
            "{ Description: Builds SQL Delete statements based on arrays of field",
            "\tnames and values. Made to be called as a subroutine only. }"
        ],
        "snippets": [
            "\\ODBCManager.BuildDelete(",
            "\tTableName, { Required. Any text expression for the table name to",
            "\t\tdelete records from. }",
            "\tWhereFields, { Required. May be a simple value or a one-dimensional",
            "\t\tarray. Provides the field names for the WHERE selection clause }",
            "\tWhereOperators, { Required. May be a simple value or a one-dimensional",
            "\t\tarray. Provides the operators for the WHERE selection clause }",
            "\tWhereValues, { Required. Any SQL data type. May be a simple value or a",
            "\t\tone-dimensional array. Values for the WHERE selection clause }",
            "\tWhereSQLDataTypes, { Required. Values indicating the data type of the",
            "\t\tinsert values. Should be a simple value or an array matching the",
            "\t\tWhereFields parameter. Refer to Data Type Codes used in the ODBC",
            "\t\tManager for a list of the value codes. }",
            "\tWhereAND, { Required. Any expression that evaluates to a Boolean true",
            "\t\tor false. If set to true (non-zero) then the components of the WHERE",
            "\t\tclauses are to be ANDed together. If false (0) an OR is used between",
            "\t\tthe sub clauses. }",
            "\tdbType, { Required numeric value, indicating the type of this DB",
            "\t\tconnection. DBType Meaning 0 MS SQL 1 MS Access 2 Oracle 3 MySQL 4",
            "\t\tSyBase }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BuildFullName": {
        "comments": [
            "{ Description: If a namespace and namespace delimiter are being used,",
            "\treturns the full, namespace-qualified name of the specified account. }",
            "{ If the configuration setting NameSpaceDelimiter is valid, returns",
            "\tthe full, namespace-qualified name of the specified account. If the",
            "\tGroupName parameter is Invalid or not specified, or if the account is",
            "\ta member of the root namespace, or the configuration setting",
            "\tNameSpaceDelimiter is Invalid, the return value is the account name,",
            "\tas passed in. }"
        ],
        "snippets": [
            "\\SecurityManager.BuildFullName(",
            "\tAccountName, { The name of an account to generate the full name for. }",
            "\tGroupName { The name of a namespace (group) to use when building the",
            "\t\tfull name. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BuildInsert": {
        "comments": [
            "{ Description: Builds SQL Insert statements based on arrays of field",
            "\tnames and values. Made to be called as a subroutine only. }"
        ],
        "snippets": [
            "\\ODBCManager.BuildInsert(",
            "\tTableName, { Required. The name of the table into which data will be",
            "\t\tinserted. }",
            "\tInsertFields, { Required. May be a simple value or a one-dimensional",
            "\t\tarray. Field names matching the InsertValues array of data to be",
            "\t\tinserted }",
            "\tInsertValues, { Required. Any SQL data type. May be a simple value or",
            "\t\ta one-dimensional array. Provides the new value(s) for the fields in",
            "\t\tthe matching InsertFields parameter. }",
            "\tSQLDataTypes, { Required. Values indicating the data type of the",
            "\t\tinsert values. Should be a simple value or an array matching the",
            "\t\tInsertFields parameter. Refer to Data Type Codes used in the ODBC",
            "\t\tManager for a list of the codes. }",
            "\tdbType, { Required numeric value, indicating the type of this DB",
            "\t\tconnection. DBType Meaning 0 MS SQL 1 MS Access 2 Oracle 3 MySQL 4",
            "\t\tSyBase }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BuildSelect": {
        "comments": [
            "{ Description: Builds SQL selection queries using supplied field names",
            "\tand values. Made to be called as a subroutine only. }"
        ],
        "snippets": [
            "\\ODBCManager.BuildSelect(",
            "\tSelectFields, { Required. Text array of field Names to read }",
            "\tTableName, { Required. May be a simple value or a one-dimensional",
            "\t\tarray. The name(s) of the table(s) that will be queried. }",
            "\tWhereFields, { Required. May be a simple value or a one-dimensional",
            "\t\tarray. Field names for WHERE clause }",
            "\tWhereOperators, { Required. May be a simple value or a one-dimensional",
            "\t\tarray. Operators for WHERE clause }",
            "\tWhereValues, { Required. Any SQL data type. May be a simple value or a",
            "\t\tone-dimensional array. Values for WHERE clause }",
            "\tWhereSQLDataTypes, { Required. Values indicating the data type of the",
            "\t\tinsert values. Should be a simple value or an array matching the",
            "\t\tWhereFields parameter. Refer to Data Type Codes used in the ODBC",
            "\t\tManager for a list of the codes. }",
            "\tWhereAND, { Required. Can be any expression that evaluates to a",
            "\t\tBoolean true or false. If set to true (non-zero) then the components",
            "\t\tof the WHERE clauses are to be ANDed together. If false (0) an OR is",
            "\t\tused between the sub clauses. }",
            "\tOrderFields, { Required. May be a simple value or a one-dimensional",
            "\t\tarray. Provides the field names for ORDER BY clause }",
            "\tQualifier { Required. SQL Qualifier such as \"top 100\", \"unique\", etc }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "BuildUpdate": {
        "comments": [
            "{ Description: Builds SQL UPDATE statements using supplied field names",
            "\tand values. Made to be called as a subroutine, but will function as a",
            "\tcalled module. }"
        ],
        "snippets": [
            "\\ODBCManager.BuildUpdate(",
            "\tTableName, { Required. Any expression for the name of the table to be",
            "\t\tupdated. }",
            "\tUpdateFields, { Required. May be a simple value or a one-dimensional",
            "\t\tarray. Provides the field names to be updated }",
            "\tUpdateValues, { Required. Any SQL data type. May be a simple value or",
            "\t\ta one-dimensional array. Provides the new values for the fields }",
            "\tSQLDataTypes, { Required. Values indicating the data type of the",
            "\t\tupdate values. Should be a simple value or an array matching the",
            "\t\tUpdateFields parameter. Refer to Data Type Codes used in the ODBC",
            "\t\tManager for a list of the numeric codes. }",
            "\tWhereFields, { Required. Any expression or array of the field names",
            "\t\tfor WHERE clause }",
            "\tWhereOperators, { Required. May be a simple value or a one-dimensional",
            "\t\tarray. Operators for WHERE clause }",
            "\tWhereValues, { Required. May be a simple text value or a",
            "\t\tone-dimensional array of text. Values for WHERE clause }",
            "\tWhereSQLDataTypes, { Required. Values indicating the data type of the",
            "\t\tinsert values. Should be a simple value or an array matching the",
            "\t\tWhereFields parameter. Refer to Data Type Codes used in the ODBC",
            "\t\tManager for a list of the numeric codes. }",
            "\tWhereAND, { Required. Can be any expression that evaluates to a",
            "\t\tBoolean true or false. If set to true (non-zero) then the components",
            "\t\tof the WHERE clause are to be ANDed together. If false (0) an OR is",
            "\t\tused between the sub clauses. }",
            "\tdbType, { Required numeric value, indicating the type of this DB",
            "\t\tconnection. DBType Meaning 0 MS SQL 1 MS Access 2 Oracle 3 MySQL 4",
            "\t\tSyBase }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Call": {
        "comments": [
            "{ Description: Starts an instance of the module specified by its first",
            "\tparameter. }",
            "{ The additional parameters that are specified are passed to the",
            "\tstarted module as parameters to the call. }"
        ],
        "snippets": [
            "Call(",
            "\tModule, { Required. Any expression for the module that is to be",
            "\t\tstarted. }",
            "\tParm1, Parm2, Parm3, â¦ { Optional. Expressions to be passed to the",
            "\t\tmodule that is being started. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CalledInstances": {
        "comments": [
            "{ Description: Returns the object values of module instances that are",
            "\tcalled by a particular module. }",
            "{ The return value is an array of objects which are called from",
            "\tObject. If no instances are called from Object, Invalid is returned. }"
        ],
        "snippets": [
            "CalledInstances(",
            "\tObject, { Required. An object value of the module instance for which",
            "\t\tto get the number of called instances. }",
            "\tOptions, { Optional. Any numeric expression that defines which modules",
            "\t\tare to be included in the returned set. The value for this parameter",
            "\t\tis formed by adding together the values from the following table:",
            "\t\t(See: Bitwise Parameters & Operations ) Options Bit Number Description",
            "\t\t1 0 Include all modules, even if they are in the same window as their",
            "\t\tcaller. Set false to include only (root) modules for modules in",
            "\t\tseparate windows. 2 1 Recurse into called modules of called modules.",
            "\t\tSet false to include only modules directly called by the Object",
            "\t\tparameter. 4 2 Group all instances of the same module into an array",
            "\t\tand store that array of object values in the element of the returned",
            "\t\tarray, instead of the object value. }",
            "\t1, { 2 }",
            "\t4",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Caller": {
        "comments": [
            "{ Description: Takes a given object value for a module and returns the",
            "\tobject value of the module by which it was called. }"
        ],
        "snippets": [
            "Caller(",
            "\tObject { Required. An object value that specifies the instance whose",
            "\t\tcaller is desired. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CanAddLock": {
        "comments": [
            "{ Description: Returns TRUE if the user has lock adding privileges for",
            "\ta given tag. }",
            "{ None }"
        ],
        "snippets": [
            "\\ControlLockManager.CanAddLock(",
            "\tTagID { Required text. The unique ID of tag being examined. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CancelCall": {
        "comments": [
            "{ Description: This subroutine removes a queued call or abandons a",
            "\tcall that is in-progress. }",
            "{ As described under MakeCall, after a tag has requested that a call",
            "\tbe made, the Modem Manager takes responsibility for the control of the",
            "\tcall, and indicates progress in the tag's DataPort variable. If the",
            "\ttag decides at any point before the Modem Manager has completed (or",
            "\tabandoned) the call that it no longer requires the call, then the tag",
            "\tmust call CancelCall. }"
        ],
        "snippets": [
            "\\ModemManager.CancelCall(",
            "\tTag, { Any text expression that identifies the tag that originally",
            "\t\trequested the call. }",
            "\tHangUp, { An optional Boolean parameter that specifies whether to",
            "\t\thang-up on an active call. The default is to allow an active call to",
            "\t\tproceed. }",
            "\tNoCancel, { An optional Boolean parameter that, if set, will remove",
            "\t\tthe call from the internal queue, but not terminate the call. }",
            "\tSilent { An optional Boolean parameter indicating the logging is not",
            "\t\trequired if set TRUE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CanControl (Control Lock Manager)": {
        "comments": [
            "{ Description: Returns true if there are no locks preventing the",
            "\tcontrol of a given tag. Always returns true if ControlLocksEnabled is",
            "\tset to false. }",
            "{ None }"
        ],
        "snippets": [
            "\\ControlLockManager.CanControl(",
            "\tTagObj { Required object. Tag instance of tag being examined }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CanControl (Control Token Manager)": {
        "comments": [
            "{ Description: Returns true if there is a token allowing the control",
            "\tof a given tag. }",
            "{ Returns true if there is a token allowing the control of the",
            "\tspecified tag. Always returns true if the nearest instance of the",
            "\tproperty, ControlTokensEnabled, is set to 0 (FALSE), meaning that the",
            "\tControl Token system is disabled for this workstation. }"
        ],
        "snippets": [
            "\\ControlTokenManager.CanControl(",
            "\tTagObj { An object reference to the tag you wish to check for a",
            "\t\tControl Token. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CanDenyTokenRequest": {
        "comments": [
            "{ Description: Returns TRUE if the user is allowed to deny a token",
            "\trequest. }",
            "{ The user must either own the existing token, own the request, or",
            "\thave the token admin privilege. Returns FALSE otherwise. }"
        ],
        "snippets": [
            "\\ControlTokenManager.CanDenyTokenRequest(",
            "\tTagID, { Required text. The GUID of the tag for which a token request",
            "\t\tshould be denied. }",
            "\tTokenRequestRecord, { something }",
            "\tSessionID, { Optional text. Defaults to the current Session ID if not",
            "\t\tspecified. Used when checking whether a control token is already held.",
            "\t\t}",
            "\tAccountID, { Optional text. Defaults to the current user Account ID.",
            "\t\tUsed when checking whether a control token is already held. }",
            "\tMachineID { Optional text. Defaults to the current user Machine ID.",
            "\t\tUsed when checking whether a control token is already held. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CanEditDoc": {
        "comments": [
            "{ Description: Returns an indication as to whether the document for",
            "\tthe given module can be edited. }",
            "{ This function returns true if the document for the given module can",
            "\tbe modified. The function will check to see if the date and time for",
            "\tthe document file match that of the run file. It will return false if",
            "\tthe document does not exist, if the dates and times are out of sync,",
            "\tor if the document is \"Read Only\". }"
        ],
        "snippets": [
            "CanEditDoc(",
            "\tModule, { Required. Any module value that specifies the document that",
            "\t\tyou wish to modify. }",
            "\tErrCode, { Optional. Is set to a non-zero value when CanEditDoc",
            "\t\treturns a 1. The return value is a collection of 3 bits: (See: Bitwise",
            "\t\tParameters & Operations ) ErrCode Bit No. Description 1 0 TRUE if not",
            "\t\tavailable (001) 2 1 TRUE if read only (010) 3 2 TRUE if file is out of",
            "\t\tsync (100) }",
            "\t1, { 2 }",
            "\t3",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CanGrantTokenRequest": {
        "comments": [
            "{ Description: Returns TRUE if the user is allowed to grant a token",
            "\trequest. }",
            "{ The person granting the request must own the existing token, or have",
            "\tcontrol over the tag for which the request is being made, or have",
            "\ttoken admin privileges. Returns FALSE otherwise. }"
        ],
        "snippets": [
            "\\ControlTokenManager.CanGrantTokenRequest(",
            "\tTagID, { Required text. The UniqueIDof the tag for which a token",
            "\t\trequest should be granted. }",
            "\tSessionID, { Optional text. Defaults to the current Session ID if not",
            "\t\tspecified. Used when checking whether a control token is already held.",
            "\t\t}",
            "\tAccountID, { Optional text. Defaults to the current user Account ID.",
            "\t\tUsed when checking whether a control token is already held. }",
            "\tMachineID { Optional text. Defaults to the current user Machine ID.",
            "\t\tUsed when checking whether a control token is already held. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CanReleaseToken": {
        "comments": [
            "{ Description: Returns true if the user has token releasing privileges",
            "\tand appropriate token ownership. }",
            "{ Returns TRUE if the user has token releasing privileges and",
            "\tappropriate token ownership. Returns FALSE otherwise. }"
        ],
        "snippets": [
            "\\ControlTokenManager.CanReleaseToken(",
            "\tTagID, { Required text. The GUID of the tag, from which a token should",
            "\t\tbe released. }",
            "\tTokenInfo, { Required text. The token record or the token record's",
            "\t\tGUIDto release. The token record can be Obtained by calling GetToken.",
            "\t\t}",
            "\tSessionID, { Optional text. Defaults to the current Session ID if not",
            "\t\tspecified. Used when checking whether a control token is already held.",
            "\t\t}",
            "\tAccountID, { Optional text. Defaults to the current user Account ID.",
            "\t\tUsed when checking whether a control token is already held. }",
            "\tMachineID { Optional text. Defaults to the current user Machine ID.",
            "\t\tUsed when checking whether a control token is already held. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CanRemoveLock": {
        "comments": [
            "{ Description: Returns true if the user has lock removing privileges",
            "\tand appropriate lock ownership. }",
            "{ None }"
        ],
        "snippets": [
            "\\ControlLockManager.CanRemoveLock(",
            "\tTagID, { Required text. The unique ID of tag being examined. }",
            "\tLockInfo, { Required text or structure. May be the lock record (a",
            "\t\tstructure) or a GUID (text). }",
            "\tSessionID, { Optional text. The ID of the session where this function",
            "\t\twas called. Defaults to the current security session. }",
            "\tAccountID, { Optional text. The AccountID of the user removing the",
            "\t\tlock. Defaults to the user signed in at the station where this",
            "\t\tfunction is called. }",
            "\tMachineID { Optional text. The workstation's MachineID. Defaults to",
            "\t\tthe workstation from which this function is called. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CanRequestToken": {
        "comments": [
            "{ Description: Returns TRUE if the user is allowed to request a token.",
            "\t}",
            "{ The user must have the Token Request/Release privilege and must not",
            "\tcurrently own a token applying to the tag. }"
        ],
        "snippets": [
            "\\ControlTokenManager.CanRequestToken(",
            "\tTagID, { Required text. The GUID of the tag to examine. }",
            "\tSessionID, { Optional text. Defaults to the current Session ID if not",
            "\t\tspecified. Used when checking whether a control token is already held.",
            "\t\t}",
            "\tAccountID, { Optional text. Defaults to the current user Account ID.",
            "\t\tUsed when checking whether a control token is already held. }",
            "\tMachineID { Optional text. Defaults to the current user Machine ID.",
            "\t\tUsed when checking whether a control token is already held. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CaptureImage": {
        "comments": [
            "{ Description: Creates an image handle from a GUIStretch operation }",
            "{ Creates an image capture of anything drawn by the object or its",
            "\tchildren within the provided (optional) coordinates. This image is",
            "\tstored in a bitmap handle identical to the output of the MakeBitmap",
            "\tfunction, meaning that it can be modified, displayed or saved. }"
        ],
        "snippets": [
            "CaptureImage(",
            "\tObject, { The object whose image is being captured }",
            "\tLeft, { The left coordinate of the capture. }",
            "\tBottom, { The bottom coordinate of the capture. }",
            "\tRight, { The right coordinate of the capture. }",
            "\tTop { The top coordinate of the capture. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CaptureSettings": {
        "comments": [
            "{ Description: Gathers a single property value or an accumulated",
            "\tsection and returns the result in a tabular format. }",
            "{ A launched module, this function's return value is a reference to",
            "\titself which becomes invalid when the operation completes. The caller",
            "\tmust not slay itself while this object is valid. The check is",
            "\tperformed in a critical section to prevent result corruption due to",
            "\tsettings changes on other threads. Comments are not included in the",
            "\toutput, but hidden values are. pResult can be any of the following: If",
            "\tValueName was provided and there is only one setting in the section",
            "\twith that name, it will be that one value (not an array). If ValueName",
            "\twas provided and the setting appears multiple times in the section,",
            "\tthen it will be a 1-dimensional array of those values. If ValueName",
            "\twas not provided, then it will be a 2d array of all of the setting",
            "\tnames+values in the section. For example, pResult[0][0] will contain",
            "\tthe first setting name and pResult[1][0] will return its value. If the",
            "\tproperty is found in more than one settings file, the returned result",
            "\twill be the one from the file with the highest priority. In order from",
            "\tlowest to highest priority, these are: SETUP.INI, Settings.Startup,",
            "\tSettings,Dynamic, Workstation.Startup, Workstation.Dynamic }"
        ],
        "snippets": [
            "\\CaptureSettings(",
            "\tSection, { Required. The name of the section where the property will",
            "\t\tbe found. }",
            "\tValueName, { Required. The name of the property to return. Set to",
            "\t\tInvalid to retrieve the entire section. }",
            "\tpResult, { Required. A pointer to a variable, in which the retrieved",
            "\t\tproperty or properties will be returned. See comments. }",
            "\tCallerHasLock { Optional Boolean. Set to TRUE if the caller holds the",
            "\t\tsemaphore. If you did not set a lock using AcquireLock or are not",
            "\t\tlaunching this module that is know to have a lock, set to FALSE or",
            "\t\tomit. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Case": {
        "comments": [
            "{ Description: In script, this selects one of a set of parameters for",
            "\texecution and returns its return value. In steady state all parameters",
            "\tare executed, but only the value of the one matching the case",
            "\tcondition is returned. }",
            "{ The return value of this function is the return value of the",
            "\tparameter selected by Index, or invalid if index does not correspond",
            "\tto a parameter. When used in steady state, all cases will execute on",
            "\tparameter change even if they are not the selected parameter",
            "\tstatement. When used in script, only the selected parameter statement",
            "\twill execute. }"
        ],
        "snippets": [
            "Case(",
            "\tIndex, { Required. Any numerical expression giving the parameter",
            "\t\tnumber result to return. If this value is 0, the value of parameter",
            "\t\tParm 0 is returned. }",
            "\tParm 0, Parm 1, Parm 2, â¦ { Required. The statements to be selected",
            "\t\tby the index. Only the selected statement value will be returned. The",
            "\t\tstatement in each parameter could be an expression or a value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Cast": {
        "comments": [
            "{ Description: Takes a value and returns a different type of value, if",
            "\tpossible. }",
            "{ This function performs a type-cast, changing one type of value to",
            "\tanother. Note that values that are converted to integers are",
            "\ttruncated, rather than rounded. If a stream longer than 65,523",
            "\tcharacters is cast to a text string, it will be truncated at 65,523",
            "\tcharacters. }"
        ],
        "snippets": [
            "Cast(",
            "\tVal, { Required. Any variable name. }",
            "\tType { Required. A VTScada Value Types indicating what type of value",
            "\t\tshould be returned. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Ceil": {
        "comments": [
            "{ Description: Returns the smallest integer greater than or equal to a",
            "\tnumber (the ceiling). }",
            "{ This function performs function similar to that of the Int function,",
            "\texcept that it goes to the next highest number. }"
        ],
        "snippets": [
            "Ceil(",
            "\tX { Required. Any numeric expression for which the ceiling should be",
            "\t\tdetermined. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Change": {
        "comments": [
            "{ Description: Returns a true when the value of the first parameter",
            "\tchanges by at least the value of the second parameter. }",
            "{ The change specified by MaxLimit is the absolute value of the change",
            "\tso the Value is checked for an increase or decrease by this amount.",
            "\tThe initial value used in the comparison for the change is the value",
            "\twhen the function is first executed upon entering a state or when the",
            "\tparameters become valid. This initial value is reset by functions that",
            "\treset their parameters (i.e. Latch, Toggle, and Save) and by action",
            "\ttriggers. Value must change from a valid value to another valid value.",
            "\tChanging to or from an invalid value does not trigger a Change. }"
        ],
        "snippets": [
            "Change(",
            "\tValue, { Required. Any numeric expression giving the value to check",
            "\t\tfor the change. }",
            "\tMaxLimit { Required. Any numeric expression giving the amount by which",
            "\t\tValue must change for the function to be true. The change in Value",
            "\t\tmust be strictly greater than MaxLimit for the Change function to be",
            "\t\ttrue. If MaxLimit is less than zero, the function will always be true.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "CharCount": {
        "comments": [
            "{ Description: Returns the number of bytes in a section of a buffer",
            "\tthat matches a search character. }",
            "{ Offset + N must be less than or equal to the buffer length, or the",
            "\treturn value will be invalid. }"
        ],
        "snippets": [
            "CharCount(",
            "\tBuffer, { Required. Any text expression giving the buffer to search. }",
            "\tOffset, { Required. Any numeric expression giving the starting buffer",
            "\t\tposition for the CharCount, starting at 0. }",
            "\tN, { Required. Any numeric expression giving the number of bytes to",
            "\t\tinclude in the search. }",
            "\tMatch { Required. Any numeric expression giving the byte (usually an",
            "\t\tASCII code) for which to search. Match must be in the range of 0 to",
            "\t\t255. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Checkbox": {
        "comments": [
            "{ Description: Draws a check box with an optional label. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ If not using ThreeState, the variable must be",
            "\tinitialized to 0 or 1. If using ThreeState, you must force the",
            "\tvariable to a value other than 0 or 1 in order to achieve the third",
            "\t\"filled box\" state. Clicking can only transition between selected or",
            "\tdeselected. The size of the check box is constant, with X1, Y1and X2,",
            "\tY2 defining the position of the check box and its label. }"
        ],
        "snippets": [
            "System.CheckBox(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the check box and its label. The smaller of X1",
            "\t\tand X2 will always be to the left. }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the check box. The smaller of Y1",
            "\t\tand Y2 will always be the top. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the check box and its label opposite to X1. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of the top or bottom of the check box, whichever is the",
            "\t\topposite to Y1. }",
            "\tVariable, { Required. The variable whose value is toggled by the check",
            "\t\tbox. }",
            "\tLabel, { Optional. Any text expression to be used as a label with the",
            "\t\tcheck box. The default value is a blank label. }",
            "\tBoxOnLeft, { Optional. Any logical expression. If true (non-0) the",
            "\t\tcheck box will appear to the left of the label. If false (0) it will",
            "\t\tbe to the right. The default value is true. }",
            "\tAlignment, { Optional. Any numeric expression that sets the alignment",
            "\t\tof the check box and its label according to one of the following",
            "\t\toptions: The default value is 0. Value Horizontal Alignment Vertical",
            "\t\tAlignment 0 Left Top 1 Right Top 2 Full Top 3 Left Centered 4 Right",
            "\t\tCentered 5 Full Centered 6 Left Bottom 7 Right Bottom 8 Full Bottom }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "CheckCertificateChain": {
        "comments": [
            "{ Description: Checks the chain of trust of a certificate. }",
            "{ This statement verifies that the supplied certificate BLOB has a",
            "\tchain of trust to a trusted root certificate installed on the local",
            "\tcomputer, that the certificate has not been revoked and that it is",
            "\totherwise valid. }"
        ],
        "snippets": [
            "CheckCertificateChain(",
            "\tCertificateBLOB { Required. A buffer holding a DER-binary encoded",
            "\t\tcertificate BLOB (binary large object) of the certificate to add. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CheckFileExist": {
        "comments": [
            "{ Description: This subroutine checks for the existence of the",
            "\tspecified file. }",
            "{ This subroutine checks for the existence of the file specified by",
            "\tFileName. It returns 1 if the specified file exists, or 0 if the",
            "\tspecified file does not exist. }"
        ],
        "snippets": [
            "System.CheckFileExist(",
            "\tFileName { Required. Any expression for the name of the file whose",
            "\t\texistence you wish to verify. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CheckIPMask": {
        "comments": [
            "{ Description: Determines whether an IP Address is in the address",
            "\tranges defined by MaskSet. }",
            "{ For advanced use only. Returns Invalid for a bad parameter and where",
            "\tthe specified IP address is not in the IP address range described by",
            "\tthe MaskSet. Otherwise, returns the index into MaskSet of the matching",
            "\tsubnet entry. This index can be used as an input parameter to",
            "\tIPMaskToText to obtain the subnet address as text. }"
        ],
        "snippets": [
            "CheckIPMask(",
            "\tIPAddress, { Required. Any single legal IP address. }",
            "\tMaskSet { Required. A MaskSet constructed by one or more calls to",
            "\t\tMakeIPMask }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CheckPathExist": {
        "comments": [
            "{ Description: This subroutine checks for the existence of the",
            "\tspecified path. }",
            "{ This subroutine checks for the existence of the path specified in",
            "\tPath. It returns 1 if the specified path exists, or 0 if the specified",
            "\tpath does not exist. }"
        ],
        "snippets": [
            "System.CheckPathExist(",
            "\tPath { Required. Any expression for the path whose existence you wish",
            "\t\tto verify. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CheckSignature": {
        "comments": [
            "{ Description: Checks a digital signature with a key given a handle",
            "\treturned from Hash(). }",
            "{ none. }"
        ],
        "snippets": [
            "CheckSignature(",
            "\tHashHandle, { Required. Handle returned from a call to Hash() }",
            "\tSignature, { Required text. The signature to be checked. }",
            "\tKey, { Required handle to the public key, with which to check the",
            "\t\tsignature. Previously obtained from any of GenerateKey(), ImportKey(),",
            "\t\tDeriveKey(). This must be an asymmetric public key }",
            "\tPaddingType, { Optional integer. Can be one of the following values:",
            "\t\tValue~Meaning 0~No padding is to added to the plaintext data before",
            "\t\tsigning. 1~Padding is added to the data before signing in accordance",
            "\t\twith the RSASSA-PKCS1-v1_5 scheme. 2~Padding is added to the data",
            "\t\tbefore signing in accordance with the RSASSA-PSS scheme. }",
            "\tPadHashAlgorithm, { Optional text value. The algorithm to be used for",
            "\t\tpadding the data. The hash is then signed. }",
            "\tSaltLength { Optional integer. Only required for RSASSA-PSS padding.",
            "\t\tThis is the length of the salt used by that scheme. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CheckTagGroup": {
        "comments": [
            "{ Description: Returns TRUE or FALSE according to whether a tag is in",
            "\tthe specified group. }",
            "{ If the tag is a member of the group, the function will return, TRUE.",
            "\tA list of groups can be found in the topic, Type Characteristics .",
            "\tThis function can be useful in Linked Tag Widgets, where you may need",
            "\tto check the group membership of the linked tag. There, the TagModule",
            "\tmay be referenced as \"\\Root\", which is the linked tag. }"
        ],
        "snippets": [
            "\\CheckTagGroup(",
            "\tTagModule, { Required. A tag type module or instance. }",
            "\tTagGroup { Required. The name of the tag group to check. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ChildDocs": {
        "comments": [
            "{ Description: Gets the module values for the root and all descendent",
            "\tmodules that match the conditions defined by the second parameter. May",
            "\talso be called as \"Child_Docs\". }",
            "{ This function is used by the compiler subsystem. It returns a",
            "\tpointer to a single dimensioned array. }"
        ],
        "snippets": [
            "ChildDocs(",
            "\tModule, { Required. The module to search. }",
            "\tFilter, { Optional. Any numeric expression that defines which modules",
            "\t\tare to be included in the returned set. Filter is formed by adding",
            "\t\ttogether the values from the following table. Defaults to 2 if missing",
            "\t\tor invalid. (See: Bitwise Parameters & Operations ) Filter Bit No.",
            "\t\tDescription 1 0 Include all modules, even if they are in the same file",
            "\t\tas their parent. False to only include modules with external files",
            "\t\t(subject to bits 2 and 5). 2 1 Recurse into submodules. False to",
            "\t\tinclude only immediate children. 4 2 Include only modules whose .RUN",
            "\t\tfiles are out of sync with their .SRC files. 8 3 Include the root",
            "\t\tmodule in the list, subject to bits 2 and 5. 16 4 Don't recurse if the",
            "\t\tmodule is added to the list. 32 5 Include only modules whose .SRC file",
            "\t\texists (i.e. not just a .RUN file). }",
            "\t1, { 2 }",
            "\t4, { 8 }",
            "\t16 { 32 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ChildInstances": {
        "comments": [
            "{ Description: Returns the object values of module instances that are",
            "\tchildren of a particular module instance (i.e. all objects whose",
            "\tparent is a specified object). }",
            "{ The return value is an array of objects that are called from Object.",
            "\tIf no instances are called from Object, Invalid is returned. }"
        ],
        "snippets": [
            "ChildInstances(",
            "\tObject, { Required. An object value of the module instance for which",
            "\t\tto get the number of child instances. }",
            "\tOptions, { Required. Any numeric expression that defines which modules",
            "\t\tare to be included in the returned set. Options is formed by adding",
            "\t\ttogether the values from the following table: (See: Bitwise Parameters",
            "\t\t& Operations ) Options Bit Number Description 1 0 Include all modules,",
            "\t\teven if they are in the same window as their caller. False to include",
            "\t\tonly (root) modules for modules in separate windows. 2 1 Recurse into",
            "\t\tchild module instances of children. False to include only modules",
            "\t\twhose immediate parent is the module instance referenced by the Object",
            "\t\tparameter. 4 2 Group all instances of the same module into an array",
            "\t\tand store that array of object values in the element of the returned",
            "\t\tarray, instead of the object value. }",
            "\t1, { 2 }",
            "\t4",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Circle": {
        "comments": [
            "{ Description: Draws a circle on the screen. }",
            "{ This statement has been superseded by the GUIEllipse function and is",
            "\tmaintained for backwards compatibility only. As of version 11, this is",
            "\tnow drawn in the same z-order as other graphics, making it similar to",
            "\tthe z-graphics functions. }"
        ],
        "snippets": [
            "Circle(",
            "\tX, { Required. Any numeric expression giving the X coordinate for the",
            "\t\tcenter of the circle on the screen. }",
            "\tY, { Required. Any numeric expression giving the Y coordinate for the",
            "\t\tcentre of the circle on the screen. }",
            "\tRadius, { Required. Any numeric expression giving the radius of the",
            "\t\tcircle specified in units of X screen coordinates. }",
            "\tColor, { Required. Any numeric expression giving the color of the",
            "\t\tcircle. }",
            "\tWidth { Required. Any numeric expression giving the width of the",
            "\t\tcircle wall in units of X screen coordinates. The width is always",
            "\t\trounded to result in an odd number of pixels on the screen. The",
            "\t\tminimum width displayed will be 1 pixel. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "CleanModule": {
        "comments": [
            "{ Description: Removes the flag that marks when a module that has been",
            "\tchanged programmatically and would therefore have its changes saved to",
            "\tdisk were this flag not cleared. }",
            "{ When a module's code is changed through VTScada script (for example,",
            "\tby using a function such as AddVariable) a flag is set in the engine",
            "\tto indicate that the associated script file must be updated before",
            "\tshutdown. This function clears that flag, preventing the update. This",
            "\tfunction can be used to make transitory code changes (such as, by the",
            "\tExpression Manager) or to reverse code changes that have been undone",
            "\t(page editing). }"
        ],
        "snippets": [
            "CleanModule(",
            "\tModule { Required. Any expression giving a module to clean. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ClearModule": {
        "comments": [
            "{ Description: Deletes the contents (all variables and states) of a",
            "\tmodule without removing the module itself. }",
            "{ If there are any instances of the module running, ClearModule does",
            "\tnothing and returns. }"
        ],
        "snippets": [
            "ClearModule(",
            "\tModule { Required. Any expression giving a module to clear. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ClearState": {
        "comments": [
            "{ Description: Deletes all of the statements in a state. }",
            "{ This statement is used to delete the contents of a state without",
            "\tremoving the state itself or altering the document file. }"
        ],
        "snippets": [
            "ClearState(",
            "\tState { Required. Any expression giving the code value of the state to",
            "\t\tdelete. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ClearVarMetaData": {
        "comments": [
            "{ Description: The opposite of SetVarMetaData, this statement removes",
            "\tall metadata associated with a variable. }",
            "{ none }"
        ],
        "snippets": [
            "ClearVarMetadata(",
            "\tVar { Required. Any expression giving the variable whose metadata base",
            "\t\tvalue is to be removed. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Click": {
        "comments": [
            "{ Description: The Click function returns a Boolean TRUEif the click",
            "\thappens within a target area and the click is done with specified",
            "\tbutton combination. }",
            "{ This function returns true if the locator position is within the",
            "\tboundaries of the \"target\" as defined by (X1,Y1) - (X2,Y2), and the",
            "\tlocator button value matches the Button parameter. If the locator is",
            "\tnot installed, the function will return false (0). The Click function",
            "\tis a level sensitive function, which means that the mouse button(s)",
            "\tmust be pressed when the function is executed or it will return false.",
            "\tThis means that a brief press of a mouse button with the cursor in the",
            "\tcorrect target area might not be picked up by the Click function if",
            "\tthe system is heavily loaded. Use the Pick() function for action",
            "\ttriggers, rather than Click(). If Click is used as an action trigger",
            "\tit will not reset. The action will continue to trigger as fast as",
            "\tpossible as long as the Click is true. This is different from Pick,",
            "\twhich would trigger once and be reset by the action trigger. }"
        ],
        "snippets": [
            "Click(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the screen area (\"target\"). }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the screen area (\"target\"). }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the \"target\" opposite to X1. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the \"target\", whichever is the",
            "\t\topposite to Y1. }",
            "\tButton, { Required. Any numeric expression giving the locator button",
            "\t\tcombination that will cause the Click function to return a true value",
            "\t\twhen the locator cursor is within the \"target\" screen area. The codes",
            "\t\tfor this parameter are as follows: Button Button Locator 0 No buttons",
            "\t\t1 Right button 2 Middle button 3 Right and middle buttons 4 Left",
            "\t\tbutton 5 Left and right buttons 6 Left and middle buttons 7 All three",
            "\t\tbuttons If the value is: multiplied by 8: the meaning for multiple",
            "\t\tbuttons pressed becomes \"OR\", rather than \"AND\". For example, to",
            "\t\taccept any button on a 2 or 3 button mouse, use 56 (8 * 7). To accept",
            "\t\tthe left mouse button, regardless of whether the right button is",
            "\t\tpressed, use 32 (8 * 4). increased by 64: the function will become",
            "\t\ttrue when the mouse buttons are released, rather than when they are",
            "\t\tpressed. increased by 128: the buttons must be double-clicked }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6 { 7 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ClientSocket": {
        "comments": [
            "{ Description: Opens a client WinSock-compliant socket stream and",
            "\treturns a stream value, or a numeric error code. }"
        ],
        "snippets": [
            "ClientSocket(",
            "\tProtocol, { Required. Any numeric expression giving the protocol to be",
            "\t\tused. This must be a valid 0 for TCP/IP protocol or a valid 1 for a",
            "\t\tUDP protocol. }",
            "\tHost, { Required. Any text expression giving the host name or TCP/IP",
            "\t\taddress to connect. For a ClientSocket where bi-directional UDP",
            "\t\tcommunication with a remote system is required and where the client",
            "\t\tsocket defines InboundPortOrStream as a port, the Host parameter must",
            "\t\tbe populated with the expected IP address. To ensure reliability, you",
            "\t\tshould acquire the IP address by using GetHostByName . }",
            "\tService, { Required. Either any text expression giving the service",
            "\t\tname to connect, or any numeric expression giving the port number with",
            "\t\twhich to connect. }",
            "\tTransmitLen, { Any numeric expression for the number of bytes to",
            "\t\tbuffer when transmitting. The value must be a signed long integer,",
            "\t\twhere only positive values are useful. If the application is running",
            "\t\ton a operating system of Windows 7 / Server 2008 R2, or later, and the",
            "\t\tvalue is set to zero, then Windows will manage the appropriate buffer",
            "\t\tsize for the link speed and latency. If you set the buffer size, the",
            "\t\tvalue should match or be larger than the largest message that is",
            "\t\texpected. A high bandwidth / high latency link will require a larger",
            "\t\tsize to achieve optimum efficiency, but the exact size can be",
            "\t\tdetermined only by empirical testing. }",
            "\tReceiveLen, { Required. Any numeric expression for the maximum number",
            "\t\tof bytes to buffer by VTScada when receiving. Additional buffering",
            "\t\twill be handled by WinSock. The value must be a signed long integer,",
            "\t\twhere only positive values are useful (an error will be returned if",
            "\t\tthe value is not greater than zero). The value should match or be",
            "\t\tlarger than the largest message that is expected. A high bandwidth /",
            "\t\thigh latency link will require a larger size to achieve optimum",
            "\t\tefficiency, but the exact size can be determined only by empirical",
            "\t\ttesting. Note: Behavior of this parameter varies depending on",
            "\t\tClientSocket is being used for UDPor TCP communications. When used",
            "\t\twith UDP communications, the provided size is passed to the system to",
            "\t\tdefine the size of the Windows receive buffers as well as those within",
            "\t\tVTScada. The system receive buffer size will be set to the larger of",
            "\t\tthe ReceiveLen parameter or the current default receive buffer size",
            "\t\tfor the windows buffers. An upper limit of 4 MiB may be provided for",
            "\t\tthe system level buffer. If the ReceiveLen parameter is greater than",
            "\t\tthat, the Windows buffer will be restricted to 4 MiB. When used with",
            "\t\tTCP communications, VTScada will use the Windows default receive",
            "\t\tbuffer size. }",
            "\tFlush, { Required. Any logical expression. If true, the transmit",
            "\t\tbuffer will be flushed (transmitted) after each write to the stream.",
            "\t\tThis normally should be false to reduce network traffic by allowing",
            "\t\tthe driver to group smaller packets into a single larger packet. }",
            "\tProtocolFilters { An optional array that specifies what filtering",
            "\t\tshould be applied to socket connections. The order in the",
            "\t\tProtocolFilter array determines priority. Each filter item consists of",
            "\t\ttwo elements where the first is the filter type (\"TLS/SSL\", \"VIC\",",
            "\t\t\"NULL\" and \"PROXY\") The second is a value dependent upon the filter",
            "\t\ttype, noting that there is no second value for \"VIC\" and \"NULL\" types.",
            "\t\tThe certificate subject name is not normally used on a client",
            "\t\tconnection. Examples: For TLS/SSL the value is the subject name in the",
            "\t\tcertificate, given as \"CN=host.example.com\". For PROXY it is a string.",
            "\t\tPFilter = New(2); PFilter[0] = New(2); PFilter[0][0] = \"SSL\";",
            "\t\tPFilter[0][1] = \"CN=host.example.com\"; PFilter[1] = New(2);",
            "\t\tPFilter[1][0] = \"NULL\"; PFilter[1][1] = \"\"; }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ClipboardGet": {
        "comments": [
            "{ Description: Returns the current contents of the system clipboard as",
            "\ta string. This function enables an application to perform text \"paste\"",
            "\toperations. }"
        ],
        "snippets": [
            "ClipboardGet();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ClipboardPut": {
        "comments": [
            "{ Description: Set the current contents of the system clipboard to a",
            "\tstring. This function enables an application to perform text \"copy\" or",
            "\t\"cut\" operations. }",
            "{ This function can be used to set the current contents of the",
            "\tclipboard. If the parameter is not a text expression, then the",
            "\tcontents of the clipboard are left unchanged. Otherwise, the current",
            "\tcontents of the clipboard are overwritten. Do not use a clipboard",
            "\toperation as a subroutine parameter if the application is accessed by",
            "\tthin clients. Within an Anywhere Client session, this function does",
            "\tnothing. }"
        ],
        "snippets": [
            "ClipboardPut(",
            "\tString { Required. Any text expression that will be copied to the",
            "\t\tsystem clipboard. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ClosePopUp": {
        "comments": [
            "{ Description: Close the windowed page, from within which this",
            "\tfunction is called. }",
            "{ This subroutine will close only the current pop-up window instance",
            "\tthat issues the call, without closing any other instances of the same",
            "\tpop-up window. It will close only pop-up pages and does nothing when",
            "\tcalled from non-windowed page. }"
        ],
        "snippets": [
            "\\DisplayManager.ClosePopUp();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CloseStream": {
        "comments": [
            "{ Description: Closes and flushes any type of open stream and returns",
            "\tits own error code. }",
            "{ The return value is true if the stream is successfully closed and",
            "\tinvalid otherwise. This function closes the stream passed to it. If",
            "\tthe stream is invalid, or the stream is already closed, nothing",
            "\thappens. }"
        ],
        "snippets": [
            "CloseStream(",
            "\tStream, { Required. Any expression that returns a stream value. }",
            "\tCloseType, { Optional. Short integer with the following definitions: 0",
            "\t\tSTREAM_CLOSE_NORMAL, // Graceful shutdown - finish what you're doing",
            "\t\tfirst 1 STREAM_CLOSE_HARD, // Abortive shutdown - throw away",
            "\t\toutstanding work. To be used only when there is a valid reason such as",
            "\t\tthe detection of a malicious request. 2 STREAM_TRANSACTION_END, //",
            "\t\tFlush the outgoing message and wait for the other end to close the",
            "\t\tconnection. }",
            "\t1 { 2 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Cls": {
        "comments": [
            "{ Description: Clears the screen and sets its background color. }",
            "{ This statement sets the background color for the window that the",
            "\tfunction is executed within. It will clear the screen but any layered",
            "\tgraphics such as GUI or Z-graphic functions will be redrawn. The",
            "\tdescription of the color parameter mentions that Cls will ignore alpha",
            "\t(transparency) values. Note also that you cannot set the background",
            "\tcolor of windows that use their background as a transparency mask (bit",
            "\t18 set in the Style parameter). Cls will work on both workstations and",
            "\ton thin clients. }"
        ],
        "snippets": [
            "Cls(",
            "\tColor { Required. Any numeric expression giving the color to which the",
            "\t\tscreen should be set. You may use any of the following methods to",
            "\t\tspecify the color: a palette index VTScada Color Palette a system",
            "\t\tcolor Constants for System Colors an RGB string with optional Alpha",
            "\t\tvalue in the format, \"<AARRGGBB>\", or \"<RRGGBB>\", where AA, RR, GG and",
            "\t\tBB are hexadecimal digits. Note that Cls will ignore the alpha channel",
            "\t\tif you provide the color as an <AARRGGBB> string, since the background",
            "\t\tcolor of a window cannot have an alpha value that is different from",
            "\t\tthe window itself. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CodeText": {
        "comments": [
            "{ Description: Returns information (usually the source code text),",
            "\tmatching the given code value. }",
            "{ Returns the source code text, offset or size for the provided code",
            "\tvalue. Typically followed by a SetCodeText call, which would then",
            "\tupdate the source code with new text. }"
        ],
        "snippets": [
            "CodeText(",
            "\tCodeVal, { Required. Any code value giving the statement or function",
            "\t\twithin a statement whose text to be read. }",
            "\tType, { Optional numeric expression. Controls what will be returned by",
            "\t\tthe function according to the following table: Type Description 0",
            "\t\tdefault. Return the text for the expression. 1 Return the offset in",
            "\t\tthe file for the start of the expression. 2 Return the size (number of",
            "\t\tbytes) of the expression. }",
            "\t0, { 1 }",
            "\t2",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ColorSelect": {
        "comments": [
            "{ Description: Color Selection Tool. This module draws a color",
            "\tselection button and its accompanying display area. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ If the button and display area are set to be",
            "\tstandard size, the button size will remain a constant size (101 x 31",
            "\tpixels) regardless of the boundaries of the defined area, but the",
            "\tdisplay area will vary between a minimum (square) size to a maximum",
            "\tlength equal to the length of the button, depending on the size of the",
            "\tbounding area. After the maximum display area size has been reached,",
            "\tthe button and area will be fully justified to cover the entire width",
            "\tof the defined area (the vertical alignment will be set by the value",
            "\tof VertAlign). For any optional parameter that is to be set, all",
            "\toptional parameters preceding the desired one must be present,",
            "\talthough they may be invalid. }"
        ],
        "snippets": [
            "System.ColorSelect(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the button or color display area. The smaller of",
            "\t\tvalues X1 and X2 will always be the left side. }",
            "\tY1, { Any numeric expression giving the Y coordinate on the screen of",
            "\t\teither the top or bottom of the button and color display area. The",
            "\t\tsmaller of values Y1 and Y2 will always be the top. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the button or color display area opposite to X1.",
            "\t\t}",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of the top or bottom of the button and color display area,",
            "\t\twhichever is the opposite to Y1. }",
            "\tColor, { Required. The variable whose value is set to the index of the",
            "\t\tchosen color. }",
            "\tBtnLabel, { Optional. Any text expression to be used as a label on the",
            "\t\tcolor selection button. No default if missing or Invalid. }",
            "\tBtnOnLeft, { Optional Any logical expression. If true (non-0) the",
            "\t\tbutton will appear to the left of the color display area, If false (0)",
            "\t\tit will be to the right. The default value is true. }",
            "\tStandard, { Optional Any logical expression, If true (non-0) the",
            "\t\tbutton and color display area will be standard system size. If false",
            "\t\t(0) they will be sized to fit their boundaries and VertAlign will be",
            "\t\tignored. The default value is true. }",
            "\tVertAlign, { Optional Any numeric expression that sets the vertical",
            "\t\talignment of the button and display area according to one of the",
            "\t\tfollowing options: Value Vertical Alignment 0 Top 1 Center 2 Bottom If",
            "\t\tStandard is true, this parameter is ignored. The default value is 0,",
            "\t\ttop alignment. }",
            "\t0, { 1 }",
            "\t2",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Combine": {
        "comments": [
            "{ Description: Performs a Merge2 operation with automated conflict",
            "\tresolution and change priority. }",
            "{ This module must be called as a subroutine. This function is",
            "\tguaranteed to return a result, however it will discard changes if",
            "\tunable to merge them without conflict. It is the recommended method",
            "\tfor combining different change paths against standard VTScada file",
            "\ttypes (settings files, source files, tag files, etc.). Changes from",
            "\tthe high priority diff are treated preferentially to changes from the",
            "\tlow priority diff when resolving conflicts. If the operation fails",
            "\tthen the result will be the original buffer modified by the high",
            "\tpriority diff only. Failure is indicated by the pFail parameter being",
            "\tset to a non-zero value that is typically a string detailing the type",
            "\tof failure. Notes: All Tag file conflicts are resolvable, Combine does",
            "\tnot fails on tags. Conflicts of Adjacency (where two change regions",
            "\tshare an edge but do not overlap) are resolved for all non-tag files.",
            "\tSimultaneous Addition Conflicts (where two pure addition changes",
            "\tcoincide) are resolved for Page, Menu, Setting, and PageNote files.",
            "\tSpecific segments of AppRoot files are parsed and rebuilt allowing for",
            "\tall types of conflicts to be resolved, these are additionally checked",
            "\tfor duplicate entries, which are removed. The results of conflict",
            "\tresolution are passed to the Mend function to generate complete merged",
            "\tfile buffers. This module returns a simple merge of the high priority",
            "\tdiff and the source buffer should conflicts occur and conflict",
            "\tresolution fail. In this case *pFail is set to an error string that",
            "\tdescribes the failure in a human-readable form. }"
        ],
        "snippets": [
            "\\AppLayer\\Combine(",
            "\tSource, { Required. The buffer or stream to be modified }",
            "\tDiff1, { Required. High priority diff to merge to Source. }",
            "\tDiff2, { Required. Low priority diff to merge to Source. }",
            "\tSRCPath, { Required. Full file path for the origin of the Source",
            "\t\tbuffer. }",
            "\tpFail { Required. Pointer to a variable in which an error message will",
            "\t\tbe returned. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "COMClient": {
        "comments": [
            "{ Description: Instantiates COM objects that do not possess a user",
            "\tinterface. }",
            "{ COMClient instantiates a COM object. Generally this statement is",
            "\tused to instantiate COM objects that do not possess a user interface.",
            "\tIf the object does display a user interface, then the user interface",
            "\twill appear in a window created and owned by the object. It is more",
            "\tusual to use the ActiveX statement to create a COM object that has a",
            "\tuser interface. If the statement succeeds, a COM client interface is",
            "\treturned, allowing subsequent access to the object. If the statement",
            "\tfails, Invalid is returned. Arrays indexes are deliberately offset by",
            "\t-1 so that a 1-based array in the object becomes a 0-based array in",
            "\tscript. EventSearchScope specifies the location where the event",
            "\tsubroutines for this COM object instance may be found. Each event",
            "\tsubroutine is named after the corresponding event produced by the",
            "\tdefault outgoing interface for the COM object. If the COM object",
            "\tgenerates an event for which an event subroutine cannot be found, the",
            "\tCOM object is informed that event handling for that event is not",
            "\timplemented. When an event subroutine is run in response to an",
            "\tincoming event from the object, the parent and caller for the",
            "\tsubroutine are as specified by EventParent and EventCaller. The event",
            "\tsubroutine may update any of its parameters, and any that are defined",
            "\tas [in, out] or [out]. These will be returned to the COM object on",
            "\tcompletion of the event subroutine. The event subroutine should return",
            "\tan integer value, which is returned to the COM object as the result of",
            "\tthe event. A value of 0 indicates the event completed successfully. If",
            "\tthe COM object to be instantiated is an inproc server object (i.e. it",
            "\tis a DLL) then it must be a 64-bit COM server for 64-bit VTScada and a",
            "\t32-bit COM server for 32-bit VTScada. If it is instantiated",
            "\tout-of-process (i.e. it is an .EXE) then either 32-bit VTScada or",
            "\t64-bit VTScada can work with either 32-bit or 64-bit COM servers. If",
            "\tused in a script, the COM object will remain instantiated until the",
            "\tlast reference to that object has been invalidated. You assign the",
            "\treturn value of the COMClient script statement to a variable, and the",
            "\tCOM object will remain instantiated as long as that variable or any",
            "\tother variable holds a copy of the COM Client Interface handle. Only",
            "\twhen the last copy of the COM Client Interface handle has been",
            "\tdestroyed will the COM object be destroyed. If used in a steady-state",
            "\tstatement, the COM object will only remain instantiated while the",
            "\tsteady-state statement is still running. In other words, a change of",
            "\tstate or destruction of the module instance that is running the",
            "\tstatement will cause the COM object to be destroyed. Any variables",
            "\tthat hold a handle to the COM Client Interface will be invalidated at",
            "\tthat time. }"
        ],
        "snippets": [
            "COMClient(",
            "\tObjectIdentifier, { Required. Specifies a unique identifier for the",
            "\t\tobject to be instantiated. It may take one of the following forms: a",
            "\t\ttext string representing a ProgID (e.g. \"Excel.Application\"). a",
            "\t\ttextual GUID, in registry format (e.g.",
            "\t\t\"{00020812-0000-0000-C000-000000000046}\"). a binary GUID (e.g. the",
            "\t\tresult from \"GetGUID(1, 00020812-0000-0000-C000-000000000046)\"). }",
            "\tObjectContext, { Required. If valid, this object specifies the",
            "\t\tcontexts in which it is permissible to instantiate the COM object. A",
            "\t\tsubset of values taken from the CLSCTX enumeration is supported.",
            "\t\tPossible values are: CLSCTX_INPROC_SERVER (1): The COM object is",
            "\t\tinstantiated in the VTScada process (i.e. by a DLL).",
            "\t\tCLSCTX_LOCAL_SERVER (4): The COM object is instantiated in a separate",
            "\t\tprocess (i.e. by an .exe, but only on the same machine upon which",
            "\t\tVTScada is running. CLSCTX_SERVER (13): Any of the above. This is the",
            "\t\tdefault and permits the COM object to be instantiated wherever the",
            "\t\t\"class factory\" (which performs object instantiation) sees fit. }",
            "\tEventSearchScope, { Required. May be any expression that yields a",
            "\t\tmodule value or object value. This parameter specifies the scope in",
            "\t\twhich to search for event subroutines. If missing or invalid, the COM",
            "\t\tevents will not be enabled. }",
            "\tEventParent, { Optional. May be any expression that yields an object",
            "\t\tvalue. If present, specifies the context that is used to resolve scope",
            "\t\tfor event subroutines. If absent or Invalid, defaults to Self(). }",
            "\tEventCaller { Optional. May be any expression that yields an object",
            "\t\tvalue. If present, specifies an \"auxiliary\" context for event",
            "\t\tsubroutines. An event subroutine can retrieve this value using",
            "\t\tCaller(Self()). If absent or Invalid, defaults to Self(). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "COMEvent": {
        "comments": [
            "{ Description: Sets an event subroutine context for an existing COM",
            "\tclient interface. }",
            "{ The COM client interface specified as the first parameter may or may",
            "\tnot already have an event subroutine context associated with it. This",
            "\tfunction supplies a new context that destructively replaces any",
            "\texisting context. Use of this function enables dynamic modification of",
            "\tthe event subroutine context. The context may also be dynamically set",
            "\tif the COMClient or ActiveX function is being run in steady state, by",
            "\tsimply changing the parameters of the steady-state statement. It is",
            "\tmore usual to use this function for COM client interfaces that are",
            "\tcreated by a script statement. EventSearchScope specifies the location",
            "\twhere the event subroutines for this COM object instance may be found.",
            "\tWhen an event subroutine is run in response to an incoming event from",
            "\tthe object, the parent and caller for the subroutine are as specified",
            "\tby EventParent and EventCaller. }"
        ],
        "snippets": [
            "COMEvent(",
            "\tCOMClientInterface, { Required. A COM client interface handle returned",
            "\t\tfrom a COMClient or ActiveX statement. }",
            "\tEventSearchScope, { Optional May be any expression that yields a",
            "\t\tModule or an object value. If present, specifies the scope in which to",
            "\t\tsearch for event subroutines. No default value is provided. }",
            "\tEventParent, { Optional May be any expression that yields an object",
            "\t\tvalue. If present, specifies the context that is used to resolve scope",
            "\t\tfor event subroutines. If absent or Invalid, defaults to Self(). }",
            "\tEventCaller { Optional May be any expression that yields an object",
            "\t\tvalue. If present, specifies an \"auxiliary\" context for event",
            "\t\tsubroutines. An event subroutine can retrieve this value using",
            "\t\tCaller(Self()). If absent or Invalid, defaults to Self(). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CommaFormat": {
        "comments": [
            "{ Description: Returns a number as text with embedded commas. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ Note that the return value is a string, not a",
            "\tnumber. If used with an I/O and Calculations tag, ensure that the type",
            "\tis set to String, not Analog. }"
        ],
        "snippets": [
            "\\System.CommaFormat(",
            "\tValue { Required. Any integer expression giving the value to be",
            "\t\tformatted. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CommandLine": {
        "comments": [
            "{ Description: Returns any command line arguments as a text string. }"
        ],
        "snippets": [
            "CommandLine();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Commission": {
        "comments": [
            "{ Description: Commission the alarm by adding it to the Configured",
            "\tlist, or modify an existing alarm's configuration. }",
            "{ Commission should be used when creating an alarm, or when updating",
            "\tthat alarm's configuration. It will always generate a new call to",
            "\tEvaluateAlarm with the given value of the trigger, evaluating that",
            "\tagainst the current setpoint and comparison function. Commission will",
            "\tstore the alarm's object and its Root value in a dictionary of alarm",
            "\tnames. This gives an efficient look-up table to get an alarm object.",
            "\tAfter an alarm has been commissioned, further calls to this function",
            "\twill update that record in the alarm database. A call to",
            "\t\\AlarmManager\\Evaluate is made automatically as part of each call to",
            "\tCommission. Note: For the sake of creating efficient code, commission",
            "\tshould never be used as a substitute for EvaluateAlarm. Use commission",
            "\tonly when creating or changing alarm configuration, not when handing",
            "\tnew values to the alarm to be evaluated against the setpoint. }"
        ],
        "snippets": [
            "\\AlarmManager\\Commission(",
            "\tAlarmObj, { Required. The alarm object. Normally, the object pointer",
            "\t\tto the tag within which the alarm is being commissioned. }",
            "\tCfgStructure, { Required. A structure of alarm configuration",
            "\t\tparameters. Normally obtained by a call to",
            "\t\t\\AlarmManager\\GetAlarmConfiguration. }",
            "\tValue, { Optional numeric. Current value to evaluate, based on the new",
            "\t\tconfiguration. }",
            "\tValueTimestamp, { Optional UTC timestamp of the value. Defaults to the",
            "\t\tcurrent time. }",
            "\tSuppressConfigEvent, { Optional Boolean. If TRUE, no transaction",
            "\t\trecord will be stored for this call to Commission. Should be used for",
            "\t\talarm parameters that may be updated often due to being set by tag",
            "\t\tvalues or expressions rather than constants. Defaults to FALSE. Note",
            "\t\tthat configuration events (for example, \"Modify\") are automatically",
            "\t\tfiltered from the History list. Operators must enable the display of",
            "\t\tthese events with the \"Show Configuration Events\" tool of the Alarm",
            "\t\tList. }",
            "\tAlarmDB, { Optional name or object. The alarm database to be used for",
            "\t\tthis alarm. Not necessary if the alarm object is valid. }",
            "\tMachineID { Optional. The workstation ID to be associated with the",
            "\t\talarm. Defaults to the current workstation. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CommitEditedFiles": {
        "comments": [
            "{ Description: This function compiles and commits edited files if the",
            "\tcompile succeeds. }",
            "{ This helper function manages the Working Copy files by applying a",
            "\tset of file changes indicated in prior EditFile calls. Typically the",
            "\tcaller will have the working copy lock and this call is made using",
            "\tonly the first three parameters, with the third parameter set TRUE.",
            "\tThis operation returns an object that becomes invalid upon completion.",
            "\tIf the compile does not succeed, this function will revert the",
            "\tcompilation changes. By the time this launched module terminates, the",
            "\tModified dictionary is always emptied. This module launches a worker",
            "\tmodule into the Layer so that the operation is not interrupted by this",
            "\tmodule's caller being slain. }"
        ],
        "snippets": [
            "\\AppLayer\\CommitEditedFiles(",
            "\tUser, { Required. The user performing work on the repository's working",
            "\t\tcopy. }",
            "\tComment, { Required. Text that will be stores with the repository",
            "\t\tcommit. }",
            "\tAlreadyHasLock, { Required. Boolean indicating whether we already have",
            "\t\ta working copy lock. }",
            "\tReloadOnFailure, { Optional Boolean. If set TRUE, then if the files",
            "\t\tcannot be integrated into a running system, the files are reverted and",
            "\t\tno reloading of the reverted files is performed. If set FALSE, then",
            "\t\tthe reverted files are reloaded. This can be set to false when you are",
            "\t\tsure that none of the changes being committed have been integrated",
            "\t\tinto a running application. Defaults to TRUE. }",
            "\tpFail, { Optional pointer to a Boolean. Set TRUE upon failure. }",
            "\tRSema, { Optional repository semaphore. If provided, it is essential",
            "\t\tthat you also have the working copy lock. }",
            "\tSuppressAudit { Optional Boolean. Set TRUE to suppress the audit the",
            "\t\tcommit. This is typically done because you are guaranteed to do",
            "\t\tanother commit before you give up the WC lock. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CommitFocused": {
        "comments": [
            "{ Description: This function causes any edit field, while being",
            "\tedited, to output the value currently found in that field. }",
            "{ This function causes any edit field that the user is currently",
            "\tediting to output what the user has written prior to the function",
            "\tcall. Here, \"edit fields\", includes those created by \\Sytem.Edit,",
            "\tWinEditCtrl, or an editable System.DropList or WinComboCtrl. This call",
            "\twill cause that control's trigger value to transition to 2 as if the",
            "\tcontrol has lost the focus, but does not actually cause the control to",
            "\tlose the focus. An edit field will automatically output its changes",
            "\twhen the user changes focus away from the edit field, therefore this",
            "\tfunction is not necessary most of the time. It becomes useful if you",
            "\twant to commit what the user has typed without the field necessarily",
            "\tlosing focus, for example if when the user clicks something that does",
            "\tnot take the focus, as is the case with many controls within the",
            "\tcontext of the VTScada Internet Client (VIC). If your UI has a",
            "\tfocusable button that the user must click after making changes, then",
            "\tthere is no need to call CommitFocused. CommitFocused will only have",
            "\tan effect on a focused graphic if it is within the call tree under the",
            "\tobject identified by the sole required parameter. That object must be",
            "\tthe one that contains the WinEditCtrl function, or it must be that",
            "\tobject's caller, or its caller's caller, etc.... }"
        ],
        "snippets": [
            "CommitFocused(",
            "\tcontextToCommit { Required. The object that contains the edit control",
            "\t\tto commit, or it's caller within the same window. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Compile": {
        "comments": [
            "{ Description: Compiles text and creates a new function. The type of",
            "\treturn value is determined by the input parameters. }",
            "{ This function is used when compiling text statements. The syntax of",
            "\tthe statements is described by the table parameters that are not fully",
            "\tdescribed here. This function compiles text to create a new function,",
            "\tbut doesn't add the new function. }"
        ],
        "snippets": [
            "Compile(",
            "\tFuncNames, { Required. Any array expression for the function names",
            "\t\tlist. }",
            "\tOpCodes, { Required. Any array expression for the Operational Codes",
            "\t\tthat correspond to the names in FuncNames. }",
            "\tNumber, { Required. Any numeric expression for the number of",
            "\t\tFuncNames/OpCodes pairs. }",
            "\tModule, { Required. Any expression that returns a module value. This",
            "\t\tis the context where the compile takes place. }",
            "\tScript, { Required. Any logical expression. If true, the text will be",
            "\t\tcompiled as a script statement. If false, it will be compiled as a",
            "\t\tnormal statement. }",
            "\tSense, { Required. Any logical expression. If true, this statement",
            "\t\twill be compiled as case-sensitive, otherwise, this will be",
            "\t\tcase-insensitive. }",
            "\tStream, { Required. Any expression for the input stream to read. }",
            "\tClassBuffer, { Required. Any text expression that provides the",
            "\t\ttokenizer look-up table. }",
            "\tNumClass, { Required. Any numeric expression for the number of",
            "\t\tcharacter classes in the tokenizer state table. }",
            "\tTStateBuffer, { Required. Any expression for the tokenizer state",
            "\t\ttable. The tokenizer begins in state 0. }",
            "\tTActionBuffer, { Required. Any two-dimensional array expression for",
            "\t\tthe tokenizer action table. }",
            "\tNumTokens, { Required. Any numeric expression for the number of tokens",
            "\t\tin the compiler table. }",
            "\tCStateBuffer, { Required. Any text expression for the compiler state",
            "\t\ttable. The compiler begins in state 0. }",
            "\tCActionBuffer, { Required. Any text expression for the compiler action",
            "\t\ttable. }",
            "\tCDataBuffer, { Required. Any two-dimensional array expression for the",
            "\t\tcompiler data table. }",
            "\tError, { Required. Must be a variable into which the resulting error",
            "\t\tcode will be stored. The error code may be any of the following: Error",
            "\t\tDescription 0 No error. -1 Operation code in OpCode table is not",
            "\t\tdefined. -2 Parameter must be a constant. -3 Too many parameters. -4",
            "\t\tCompiler table index past the end of the table. -5 Token type is < 0",
            "\t\tor > max_token. -6 illegal attempt to add op code from built-in",
            "\t\tfunction. -7 Op code array entry is invalid. -8 Illegal attempt to add",
            "\t\tvariable parameter. -9 Too many parameters. -10 Illegal radix in",
            "\t\tcompiler data table. -11 Illegal digit in integer. -12 Illegal action",
            "\t\tin CActionBuffer. -13 No function specified. -14 Not enough",
            "\t\tparameters. -15 Does not have a single parameter. -16 Compiler stack",
            "\t\tis too deep (> 1000) -17 Infinite loop detected. -18 Suspending and",
            "\t\texiting at the same time. }",
            "\t0, { -1 }",
            "\t-2, { -3 }",
            "\t-4, { -5 }",
            "\t-6, { -7 }",
            "\t-8, { -9 }",
            "\t-10, { -11 }",
            "\t-12, { -13 }",
            "\t-14, { -15 }",
            "\t-16, { -17 }",
            "\t-18",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "COMPort": {
        "comments": [
            "{ Description: Opens a serial port and handles all interrupts and",
            "\tasynchronous events for that serial port, including transmission,",
            "\treception, and control. It returns its own error code. Note that the",
            "\tSerialStream function is generally preferred in many situations. }"
        ],
        "snippets": [
            "ComPort(",
            "\tPort, { Required. Any numeric expression giving the serial port number",
            "\t\tto be used. For COM1, Port = 1 For COM2, Port = 2 The valid range for",
            "\t\tPort is 1 to MaxComPorts (a variable storing the maximum number of",
            "\t\tWindows serial ports available. As of the release date of VTS 9.1,",
            "\t\tthis is 4096). }",
            "\tReceiveLen, { Required. Any numeric expression giving the size of the",
            "\t\treceive buffer in bytes. ReceiveLen must be in the range 2 to 32 766.",
            "\t\tIf more bytes are received than can fit in the receive buffer before",
            "\t\tyour application removes them using SerRcv or a similar WEB function,",
            "\t\tthe additional data will be lost. }",
            "\tTransmitLen, { Required. Any numeric expression giving the size of the",
            "\t\ttransmit buffer in bytes. TransmitLen must be in the range 2 to 32",
            "\t\t766. The buffer must be large enough to hold the maximum number of",
            "\t\tbytes pending transmission at any instance. }",
            "\tBaud, { Required. Any numeric expression giving the baud rate. Baud",
            "\t\tmust be in the range 10 to 115 200, and must divide evenly into 115",
            "\t\t200 with no more than 2.5% error. }",
            "\tDataBits, { Required. Any numeric expression giving the number of data",
            "\t\tbits per character. DataBits must be 5, 6, 7, or 8. }",
            "\tStopBits, { Required. Any numeric expression giving the number of stop",
            "\t\tbits per character. StopBits must be 1 or 2. }",
            "\tParity, { Required. Any numeric expression giving the parity checking",
            "\t\tto use (as follows) Value Parity 0 No parity 1 Odd parity 2 Even",
            "\t\tparity 3 0 Stick (space parity) 4 1 Stick (mark parity) }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Compress": {
        "comments": [
            "{ Description: Eliminate invalid array entries. }",
            "{ None }"
        ],
        "snippets": [
            "Compress(",
            "\tArrayElem, { Required. Any array element giving the starting point for",
            "\t\tthe array search. The subscript for the array may be any numeric",
            "\t\texpression.If processing a multidimensional array, the usual rules",
            "\t\tapply to decide which dimension should be examined. }",
            "\tN { Required. Any numeric expression giving the number of array",
            "\t\telements to use starting at the element given by the first parameter.",
            "\t\tIf N extends past the upper bound of the array dimension, this",
            "\t\tcomputation will \"wrap-around\" and resume at element 0, until N",
            "\t\telements have been processed. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "COMStatus": {
        "comments": [
            "{ Description: Returns the last status information that occurred for a",
            "\tspecified COM client interface. }",
            "{ The value returned indicates the success or failure of the last",
            "\toperation attempted through the specified COM client interface.",
            "\tDepending on the Options parameter, this function returns either the",
            "\tWindows API error code or a text value containing an ASCII",
            "\trepresentation of the error code. There is no guarantee that all error",
            "\tcodes can successfully be translated into a text representation. }"
        ],
        "snippets": [
            "ComStatus(",
            "\tCOMClientInterface, { Required. A COM client interface handle returned",
            "\t\tfrom a COMClient or ActiveX statement. }",
            "\tOptions { Optional. Any numeric expression. Set to 0 to return the",
            "\t\tWindows API error code. Set to 1 to return a text message",
            "\t\trepresentation of the Windows API error code. Defaults to 0 if missing",
            "\t\tor Invalid. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Concat": {
        "comments": [
            "{ Description: Returns the text value that is the concatenation of all",
            "\tthe text parameters. }",
            "{ This function takes all of the characters of the first parameter and",
            "\tappends all of the characters of the second parameter to the end of",
            "\tthis string. It will then take all of the characters of the next",
            "\tparameter and append them to the result. This will continue until",
            "\tthere are no more parameters. The result cannot exceed 2,147,483,647",
            "\tcharacters. INVALID will be returned instead. Because the text strings",
            "\tare delimited by quotation marks, to include a set of quotation marks",
            "\tas part of the resulting string, you must use two sets of quotation",
            "\tmarks (see example). For multilingual user interfaces, you are",
            "\tencouraged to use \\GetParmPhrase rather than Concat. }"
        ],
        "snippets": [
            "Concat(",
            "\tString1, String2, String3 { A minimum of two parameters are required",
            "\t\tMay be any expressions that give the text values to add to the",
            "\t\tresulting string. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Cond": {
        "comments": [
            "{ Description: Returns the result of one of two expressions depending",
            "\tupon the result of a conditional expression. }",
            "{ This function will return either Value1 or Value2 based on the truth",
            "\tof Condition. This means that the function may return a valid result",
            "\teven if one of the Value parameters is invalid (i.e. the one not",
            "\tselected). If Cond is executed in a script, and the Condition",
            "\tparameter selects one of the parameters, the other is not evaluated",
            "\t(unless Condition is invalid, and then neither parameter is",
            "\tevaluated). If Cond is executed in steady state, both Value1 and",
            "\tValue2 are evaluated, but only one result is returned. Cond may be",
            "\tused on the left side of an assignment, in which case Value1 and",
            "\tValue2 may be variables, and one of Value1 and Value2 will receive the",
            "\tassignment (depending on the Condition parameter). This function is",
            "\tused extensively to change screen images based upon variable values.",
            "\tFor example, it can be used to change a color of a bar if it is used",
            "\twithin the Bar statement in the Foreground color parameter. The return",
            "\tvalue is optional. }"
        ],
        "snippets": [
            "Cond(",
            "\tCondition, { Required. Any numeric expression giving the conditional",
            "\t\tvalue to use for the test. If Condition is true (i.e. not equal to",
            "\t\tzero), the value of the Value1 parameter is returned. If Condition is",
            "\t\tfalse (i.e. equal to zero), the value of the Value2 parameter is",
            "\t\treturned. If Condition is invalid, the return value is invalid. }",
            "\tValue1, { Required. Any expression whose value is returned if the",
            "\t\tCondition parameter is true. }",
            "\tValue2 { Required. Any expression whose value is returned if the",
            "\t\tCondition parameter is false. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Configure": {
        "comments": [
            "{ Description: Is used to define how a speech stream will sound and",
            "\twhere it will be heard. }",
            "{ A speech stream can be configured to sound differently by changing",
            "\tthe rate and volume parameters. To configure output to go to another",
            "\tdevice, such as a modem, change the Device parameter. If a voice or",
            "\tdevice is specified which is not valid for this stream, or a problem",
            "\tis encountered while trying to change the stream configuration, the",
            "\tstream will be left unchanged. \"VTSFileOutput\" is a valid device name.",
            "\tWhen used, the Speak() module will no longer work, but the",
            "\tSpeakToFile() module can be used to speak a phrase into a .wav file.",
            "\tThis return value is the Windows error code for the problem",
            "\tencountered, or zero if there was no problem. }"
        ],
        "snippets": [
            "VoiceTalk.Configure(",
            "\tVoiceTalkStream, { Required. A speech stream returned from VoiceTalk.",
            "\t\t}",
            "\tVoice, { Optional Specifies the name of the voice in which to speak.",
            "\t\tThis should be one of the voice names returned from a",
            "\t\tVoiceTalk\\GetVoices call, or Invalid to not change the voice. }",
            "\tDevice, { Optional Specifies where to play back the voice. This can",
            "\t\teither be a system device ID (), or the name of a device (such as",
            "\t\treturned from a call to VoiceTalk.GetDevices()). -1 is the default -",
            "\t\tusually speaker audio }",
            "\tRate, { Optional Specifies the speed at which the voice is to speak.",
            "\t\tNormal speed is \"0\". Valid values are from -10 (very slow) to 10 (very",
            "\t\tfast). The default is \"0\". }",
            "\tVolume { Optional Specifies the volume at which the voice is to speak.",
            "\t\tValid values are from 0 (silent), to 100 (full speaker volume). The",
            "\t\tdefault is 100. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ConnectToMachine": {
        "comments": [
            "{ Description: This subroutine increments the usage count on the",
            "\tspecified workstation and forces RPC Manager to attempt to establish a",
            "\tconnection with the specified workstation if it is not already",
            "\tconnected. Subroutine call only. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. While the usage count of the workstation is non-zero, RPC",
            "\tManager will continue to attempt to establish a connection to the",
            "\tremote workstation. It is critical that each ConnectToMachine call",
            "\tshould be paired with a DisconnectFromMachine call. If the number of",
            "\tConnectToMachine calls exceeds the number of DisconnectFromMachine",
            "\tcalls, the RPC Manager will not behave as expected and disconnection",
            "\tfrom the remote workstation may be impeded. An unexpectedly positive",
            "\tvalue for the Srv value in the socket's entry in the RPC Diagnostics",
            "\tWindow may be an indication of a",
            "\tConnectToMachine/DisconnectFromMachine mismatch. This subroutine",
            "\tdoesn't return a (reliable) socket node (i.e. may go invalid). Also,",
            "\tit isn't a socket, it is a socket node instance. }"
        ],
        "snippets": [
            "\\RPCManager\\ConnectToMachine(",
            "\tWorkstation { Required. Any text expression giving the name or IP",
            "\t\taddress of the workstation to which the connection is to be made. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ConstCount": {
        "comments": [
            "{ Description: Returns the number of constant parameters in a",
            "\tfunction. }",
            "{ No longer in use. }"
        ],
        "snippets": [
            "ConstCount(",
            "\tOpCode { Required Any numeric expression for the opcode of the",
            "\t\tfunction. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ConvertTimeStamp": {
        "comments": [
            "{ Description: Converts a time stamp from one time zone to another. }",
            "{ The function returns the converted timestamp as a number indicating",
            "\tthe number of seconds since midnight of January 1, 1970. The SourceTZ",
            "\tand DestTZ parameters must use names as returned by the TimeZoneList",
            "\tfunction. The function uses the time zone information in the registry",
            "\tto determine local time zone bias, DST bias, and starting and ending",
            "\tdates of DST. If the information in the registry is incorrect, then it",
            "\tmay be updated using the TZEdit tool available from Microsoft. Be",
            "\taware that the local server's time zone may differ from the geographic",
            "\ttime zone. Client workstations (and thin clients) may have time zones",
            "\tthat differ from the local server's configuration. Timezone(3) is a",
            "\tthin client safe approach to converting to or from the local time.",
            "\tTimezone is thin client aware, and adjusts the returned timezone as",
            "\tappropriate for converting for the session under which it is run.",
            "\tTimezone names must be provided only in English, using the same names",
            "\tas reported by TimeZone(2), TimeZone(3), and TimeZoneList(). Both the",
            "\tSourceTZ and DestTZ parameters may be provided as structures. These",
            "\tstructures will have two members StdTimeZone - a string that",
            "\trepresents the standard name for the time zone ObservesDST - a",
            "\tBoolean, where 0 indicates that the time zone does not observe",
            "\tdaylight savings time and a 1 indicates that it does The purpose of",
            "\tthis structure is to handle systems that are set to a time zone that",
            "\tdoes normally observe DST, but the users have configured Windowsâ¢ to",
            "\tnot adjust for daylight savings time. This structure is the same as",
            "\tthat used by option 3 of the TimeZone function. }"
        ],
        "snippets": [
            "ConvertTimeStamp(",
            "\tTimestamp, { Required The timestamp (in seconds) to be converted since",
            "\t\tmidnight of January 1, 1970. The timestamp parameter is limited to a",
            "\t\tminimum of 0, and a maximum of 34359738367. Values outside this range",
            "\t\twill cause Invalid to be returned. }",
            "\tSourceTZ, { Required. The name, in English, of the time zone from",
            "\t\twhich Timestamp originated. The name must be a name in the list",
            "\t\treturned by the TimeZoneList function. May also be a structure - see",
            "\t\tComments. If Invalid, or not a valid time zone name, then UTC is used",
            "\t\tas the source time zone. If set to \"0\", the local server's time zone",
            "\t\tis used. }",
            "\tInDST, { Required. A flag that indicates whether daylight savings time",
            "\t\t(DST) was in use in the source time zone at the moment defined by",
            "\t\tTimestamp. This flag is used only for the period at the end of DST",
            "\t\twhere a local time may appear twice. You must write your own",
            "\t\texpressions to determine this for your region If true (non-0), DST is",
            "\t\tin effect. If false (0), DST is not in effect. If INVALID, the default",
            "\t\tvalue is false. INVALID is recommended for most situations. If the",
            "\t\tsource time zone does not observe DST (as is the case with values",
            "\t\tstored using UTC, which is everything that the Historian saves), then",
            "\t\tthis flag has no effect. }",
            "\tDestTZ { Required The name, in English, of the time zone to which",
            "\t\tTimestamp is to be converted. The name must be a name in the list",
            "\t\treturned by the TimeZoneList function. May also be a structure - see",
            "\t\tcomments. If invalid, or not a valid time zone name, then UTC is used",
            "\t\tas the destination time zone. If set to \"0\", the local server's time",
            "\t\tzone is used. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ConvertToDbDate": {
        "comments": [
            "{ Description: Provides a conversion of a date value into the format",
            "\tused by the indicated database. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager, as shown in \"Format\" above. }"
        ],
        "snippets": [
            "\\ODBCManager.ConvertToDbDate(",
            "\tdbType, { Required numeric value, indicating the type of this DB",
            "\t\tconnection. DBType Meaning 0 MS SQL 1 MS Access 2 Oracle 3 MySQL 4",
            "\t\tSyBase }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { ValueIn }",
            "\tNoDelimiters { Optional. Any Boolean expression. If this parameter",
            "\t\tevaluates to true (non-zero), then text delimiters will be suppressed",
            "\t\tin the output value. Defaults to true }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ConvertToDbTime": {
        "comments": [
            "{ Description: Provides a conversion of a time value into the format",
            "\tused by the indicated database. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager, as shown in \"Format\" above. }"
        ],
        "snippets": [
            "\\ODBCManager.ConvertToDbTime(",
            "\tdbType, { Required numeric value, indicating the type of this DB",
            "\t\tconnection. DBType Meaning 0 MS SQL 1 MS Access 2 Oracle 3 MySQL 4",
            "\t\tSyBase }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { ValueIn }",
            "\tNoDelimiters { Optional. If this parameter evaluates to true",
            "\t\t(non-zero), then text delimiters will be suppressed in the output",
            "\t\tvalue. Defaults to true }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ConvertToDbTimeStamp": {
        "comments": [
            "{ Description: Provides a conversion of a timestamp value into the",
            "\tformat used by the indicated database. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager, as shown in \"Format\" above. }"
        ],
        "snippets": [
            "\\ODBCManager.ConvertToDbTime(",
            "\tdbType, { Required numeric value, indicating the type of this DB",
            "\t\tconnection. DBType Meaning 0 MS SQL 1 MS Access 2 Oracle 3 MySQL 4",
            "\t\tSyBase }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { ValueIn }",
            "\tNoDelimiters { Optional. If TRUE (non-zero), then text delimiters will",
            "\t\tbe suppressed in the output value. Defaults to true }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ConvertToVTSDate": {
        "comments": [
            "{ Description: Provides a format conversion of a date value from that",
            "\tused by the indicated database to the format used by VTScada. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager, as shown in \"Format\" above. }"
        ],
        "snippets": [
            "\\ODBCManager.ConvertToVTSDate(",
            "\tdbType, { Required numeric value, indicating the type of this DB",
            "\t\tconnection. DBType Meaning 0 MS SQL 1 MS Access 2 Oracle 3 MySQL 4",
            "\t\tSyBase }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4 { ValueIn }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ConvertToVTSTime": {
        "comments": [
            "{ Description: Provides a format conversion of a time value, from that",
            "\tused by the indicated database, to that used by VTScada }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager, as shown in \"Format\" above. }"
        ],
        "snippets": [
            "\\ODBCManager.ConvertToVTSTime(",
            "\tdbType, { Required numeric value, indicating the type of this DB",
            "\t\tconnection. At present, only MS SQL and Oracle are supported. DBType",
            "\t\tMeaning 0 MS SQL 2 Oracle }",
            "\tValueIn { Required. Time value as used by the indicated database. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ConvertToVTSTimeStamp": {
        "comments": [
            "{ Description: Provides a format conversion of a time value from that",
            "\tused by the indicated database into a VTScada time stamp format }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager, as shown in \"Format\" above. }"
        ],
        "snippets": [
            "\\ODBCManager.ConvertToVTSTime(",
            "\tdbType, { Required numeric value, indicating the type of this DB",
            "\t\tconnection. At present, only MS SQL and Oracle are supported. DBType",
            "\t\tMeaning 0 MS SQL 2 Oracle }",
            "\t0, { 2 }",
            "\tValueIn, { Required. Time and date value as used by the indicated",
            "\t\tdatabase. }",
            "\tFormatStr { Optional. Provides a format to use. Please refer to the",
            "\t\tBuffRead function for a description of the formatting options }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Coordinates": {
        "comments": [
            "{ Description: Sets the VTScada screen coordinate limits (also called",
            "\t\"world coordinates\") used by the graphics functions. }",
            "{ Left cannot equal Right, and Top cannot equal Bottom. Left, Right,",
            "\tTop, and Bottom can be any floating point values including fractions.",
            "\tWhen this statement changes coordinate limits, all active graphics",
            "\tstatements are automatically redrawn. It may be useful for setting",
            "\tscreen coordinates to match device coordinates, or to ensure the",
            "\tscreen coordinates are set correctly when working with different video",
            "\tmodes. If you wish to set to pixel coordinates you may do so using",
            "\tthis statement or it may be simpler to set the window option to pixel.",
            "\t}"
        ],
        "snippets": [
            "Coordinates(",
            "\tLeft, { Required. Any numeric expression giving the x screen",
            "\t\tcoordinate of the left side of the window. }",
            "\tBottom, { Required. Any numeric expression giving the y screen",
            "\t\tcoordinate of the Bottom side of the window. }",
            "\tRight, { Required. Any numeric expression giving the x screen",
            "\t\tcoordinate of the Right side of the window. }",
            "\tTop { Required. Any numeric expression giving the y screen coordinate",
            "\t\tof the Top of the window. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CoordToPixel": {
        "comments": [
            "{ Description: Takes a specified coordinate pair within a given window",
            "\tand returns the overall, onscreen pixel location. }",
            "{ This function's return value is determined by the Option parameter.",
            "\t}"
        ],
        "snippets": [
            "CoordToPixel(",
            "\tObject, { Required. The window context that the coordinates are taken",
            "\t\tfrom. }",
            "\tCoordX, { Required. Any numeric expression giving the x-coordinate to",
            "\t\tconvert. }",
            "\tCoordY, { Required. Any numeric expression giving the y-coordinate to",
            "\t\tconvert. }",
            "\tOption { Required. Any numeric expression specifying the converted",
            "\t\tcoordinate to return, where 0 returns the converted x-coordinate, and",
            "\t\t1 returns the converted y-coordinate. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CopyDir": {
        "comments": [
            "{ Description: This subroutine recursively copies a directory's files",
            "\tand sub-directories down through the entire directory tree. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ }"
        ],
        "snippets": [
            "System.CopyDir(",
            "\tDestination, { Required. Any text expression giving the directory into",
            "\t\twhich the source directory is to be copied. This directory must",
            "\t\talready exist. }",
            "\tSource { Required. Any text expression giving the directory to be",
            "\t\tcopied. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CopyIn": {
        "comments": [
            "{ Description: Copies data from an absolute RAM address and returns a",
            "\tbuffer. }",
            "{ This function requires that the VTSIO driver be installed, which",
            "\twill not be true in new installations. A buffer is returned that is a",
            "\tcopy of RAM at Address. }"
        ],
        "snippets": [
            "CopyIn(",
            "\tAddress, { Required. Any numeric expression giving the absolute RAM",
            "\t\taddress to start to copy. Typically the address is specified using the",
            "\t\tcolon ( : ) operator. }",
            "\tLength { Required. Any numeric expression giving the number of bytes",
            "\t\tto copy. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CopyOut": {
        "comments": [
            "{ Description: Copies data from a buffer to an absolute RAM address. }",
            "{ This function requires that the VTSIO driver be installed, which",
            "\twill not be true for new applications. A buffer is written to RAM at",
            "\tAddress. If fewer than Length bytes are in the buffer, the copy will",
            "\tstop when the end of the buffer is reached. }"
        ],
        "snippets": [
            "CopyOut(",
            "\tBuffer, { Required. Any text or buffer expression containing data",
            "\t\tbytes to copy. }",
            "\tAddress, { Required. Any numeric expression giving the absolute RAM",
            "\t\taddress to start to copy. }",
            "\tLength { Required. Any numeric expression giving the number of bytes",
            "\t\tto copy. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CopyRecords": {
        "comments": [
            "{ Description: Copy record(s) from a database and inserts the values",
            "\tback into the same table with the desired change to one field. It will",
            "\tdestroy any existing records with the same name. Should be run as a",
            "\tcalled module, waiting for completion. Do not call as a subroutine. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager, as shown in \"Format\" above. }"
        ],
        "snippets": [
            "\\ODBCManager.CopyRecords(",
            "\tDSN, { Required. Data source name of the database to use }",
            "\tTableName, { Required. Table name to read and write in both databases",
            "\t\t}",
            "\tKeyField, { Required. Field name to use for the SQL WHERE clause }",
            "\tOrgKeyValue, { Required. Key values of the records when complete }",
            "\tCopiedKeyValue, { Required. Key values of the records to copy }",
            "\tUsername, { Required. User name for database access }",
            "\tPass, { Required. Password for database access }",
            "\tTransObj { Required. Value of transaction object }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Cos": {
        "comments": [
            "{ Description: Returns the trigonometric cosine of an angle in",
            "\tradians. }",
            "{ The returned value is a number in the range of -1.00 to +1.00. To",
            "\tconvert an angle from degrees to radians multiply by \\pi / 180 or",
            "\t(approximately) 0.0174533. This function does calculations with",
            "\tdouble-precision floating point values and does not support 64-bit",
            "\tintegers computations. }"
        ],
        "snippets": [
            "Cos(",
            "\tAngle { Required. Any numeric expression giving the angle in radians.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CoverageSnapshot": {
        "comments": [
            "{ Description: Captures the areas in a VTScada source file which have",
            "\tnot executed along with summary statistic for each module in the file",
            "\tto extract code coverage information. }",
            "{ This function exists for purposes of internal testing by Trihedral.",
            "\tIt is unlikely to be useful elsewhere. The VTScada interpreter engine",
            "\tkeeps counters for every module, variable, state, statement and",
            "\tfunction parameter. All of these counters start at 0 whenever VTScada",
            "\tstarts. Every time one of these internal structures is executed, its",
            "\tcorresponding counter is incremented. The CoverageSnapshot function",
            "\tsearches through the code for a given VTScada script source file and",
            "\tlocates all of the counters which are still 0. These represent the",
            "\tareas of the code that have not executed since VTScada started or at",
            "\tleast since the last reset. CoverageSnapshot returns a list of all",
            "\tthese areas of the code that havenât executed. The list is in the form",
            "\tof starting and ending byte offsets in the source file. The list",
            "\texcludes constants the declaration of TEST modules and FIXTURES. The",
            "\tstructure returned is FileCoverage Struct [ Children { Dictionary of",
            "\tchild module names. The values are either a pointer to Child Struct or",
            "\ta file name. File name is used if not in the same source file. File",
            "\tnames are relative to VTScada installation directory.}; List { Pointer",
            "\tto an UncoveredList Struct }; FileSize { Number of bytes in the file.",
            "\tWill be invalid if the first parameter of the function refers to a",
            "\tmodule which is not the root module in the file and the parent of the",
            "\tmodule is invalid. }; TimeStamp { File time for the file }; Class {",
            "\tVariable class defined for the root module In the file. }; ]; The",
            "\treferenced structures are: Child Struct [ Begin { Byte offset from the",
            "\tbeginning of the source file for module definition }; End { Last byte",
            "\toffset for the module definition }; Children { Dictionary as defined",
            "\tin FileCoverage Struct }; Class { Variable class defined for the",
            "\tmodule }; ]; UncoveredList Struct [ Begin { Offset to start of",
            "\tuncovered code in source file }; End { Offset to last byte of",
            "\tuncovered code in range }; Mode { 0 for code, 1 for variables }; Next",
            "\t{ Pointer to next UncoveredList for the file }; ] The UncoverList is",
            "\tordered in increasing Begin offsets with none of the Begin/End areas",
            "\toverlapping in the list. }"
        ],
        "snippets": [
            "CoverageSnapshot(",
            "\tModule, { Required. A VTScada module. The data returned will be for",
            "\t\tthe source file which contains that module. Information for all of the",
            "\t\tmodules in the same source file will be included in the returned",
            "\t\tvalue. The module need not be the root module of the source file. }",
            "\tReset { Optional Tells the function to reset all of the code coverage",
            "\t\tcounters to 0 immediately after the statistics are collected. A true",
            "\t\tvalue indicates that the reset should be done and a false (0)",
            "\t\tindicates that it should not be done. The default value is 1. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CRC": {
        "comments": [
            "{ Description: Returns the cyclic redundancy check (CRC) value for a",
            "\tbuffer. }",
            "{ CRC is a driver toolkit function. }"
        ],
        "snippets": [
            "CRC(",
            "\tBuffer, { Required. Any text expression for which to generate a CRC. }",
            "\tOffset, { Required. Any numeric expression giving the offset from 0 in",
            "\t\tthe buffer where the CRC calculation will start. }",
            "\tLength, { Required. Any numeric expression giving the number of buffer",
            "\t\tbytes to include in the CRC. Length must not be greater than 65500. }",
            "\tTable, { Required. A text expression giving a CRC look-up table",
            "\t\tbuffer. The length of the table buffer must be a multiple of 256 plus",
            "\t\t1. A table can be generated automatically with the CRCTable function.",
            "\t\t}",
            "\tStart { Required. Any numeric expression giving the initial value for",
            "\t\tthe register used in the CRC calculation. For most drivers this is 0",
            "\t\tor 0xFFFF. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CRCTable": {
        "comments": [
            "{ Description: Returns a buffer containing a CRC table. }",
            "{ This function is part of the driver toolkit. (See: Bitwise",
            "\tParameters & Operations ) }"
        ],
        "snippets": [
            "CRCTable(",
            "\tPolynomial, { Required. A long expression that gives the bit pattern",
            "\t\tof the generating polynomial. For Allen-BradleyÂ® and ModiconÂ®,",
            "\t\tPolynomial = 0b1000000000000101, which corresponds to the expression:",
            "\t\tx^16 + x^15 + x^2 + 1 To determine the value of Polynomial for a given",
            "\t\tgenerator expression, drop the highest order term, and represent each",
            "\t\tterm present by a 1 in the bit position equal to its exponent. For",
            "\t\texample, x^16 + x^12 + x^5 + 1 would have a Polynomial value of",
            "\t\t0b0001000000100001. The first 1 corresponds to x^12, the second to",
            "\t\tx^5, and the last to 1 (which is x^0). This polynomial is used by the",
            "\t\tXMODEM protocol. }",
            "\tLength, { Required. Any numeric expression giving the byte length of",
            "\t\tthe CRC accumulator register (usually 2 or 4). The CRCTable buffer",
            "\t\treturned is 256 * Length + 1 bytes long. }",
            "\tShift { Any numeric expression that is 0 for right-shifted CRC",
            "\t\tcalculations (such as Allen-BradleyÂ® or ModiconÂ®), and 1 for",
            "\t\tleft-shifted CRC calculations (such as XMODEM). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CreateModule": {
        "comments": [
            "{ Description: Creates a new module and returns a pointer to it. }",
            "{ This function creates a module that has no parent. Seldom (if ever)",
            "\tused when adding features to modern VTScada applications. }"
        ],
        "snippets": [
            "CreateModule(",
            "\tFileName { Required. Any text expression giving the name of the .SRC",
            "\t\tfile that contains this module's definition. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CriticalSection": {
        "comments": [
            "{ Description: Marks a section of a module as a critical section and",
            "\twill not allow interruption of its execution by other threads. }",
            "{ This statement works in a manner similar to Execute, but on the",
            "\tthreaded level. }"
        ],
        "snippets": [
            "CriticalSection(",
            "\tStatement1, Statement2, Statement3, â¦ { Required. Any expressions to",
            "\t\tbe executed. Any number of parameters may be used. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Crop": {
        "comments": [
            "{ Description: Modifies an existing image, producing a new one that",
            "\tdisplays a sub-section of the original. }",
            "{ This function allows for the enlargement of parts of an original",
            "\timage, without requiring that the entire image be drawn. It also uses",
            "\tvery little memory, and is very fast, as compared to calls to creating",
            "\ta file from a disk file each time. There are no restrictions on how",
            "\tlarge the new image may be, so it can be larger (in any dimension)",
            "\tthan the original. If this is the case, the extra space will be filled",
            "\twith black pixels. Values for Left and Top that are less than zero (0)",
            "\tare therefore permitted. Width and Height should be given a value of",
            "\tat least one \"1\", but may be as large as desired. Any transparency in",
            "\tthe original image is preserved in the cropped image. Cropping can be",
            "\tcumulative, so that you can take the output of one crop function and",
            "\tuse that as input to another. The result is that the left and top of",
            "\tthe new transform are equivalent to the sum of the values in each of",
            "\tthe original transforms. However, since width and height are in",
            "\tpixels, the number of pixels specified each time is exactly how large",
            "\tthe resulting image will be. The image resulting from a call to Crop()",
            "\tcan be used any place that an image may be used, such as in a call to",
            "\tGUIBitmap or GUIButton. }"
        ],
        "snippets": [
            "Crop(",
            "\tOrigBMP, { Required. The original image to be cropped. This must be a",
            "\t\tvalid image object, created with the MakeBitmap statement. }",
            "\tLeft, { Required. Any expression for the number of pixels from the",
            "\t\tleft side of the original image to set to be the left side of the new",
            "\t\timage. \"0\" will start at the same place as the original image. }",
            "\tTop, { Required. Any expression for the number of pixels from the top",
            "\t\tof the original image to set to be the top of the new image. \"0\" will",
            "\t\tstart at the top of the original image. }",
            "\tWidth, { Required. Any expression for the number of pixels wide the",
            "\t\tnew image will be. The new image will be enforced to be at least 1",
            "\t\tpixel wide, even if Width is set to less than 1 pixel. }",
            "\tHeight { Required. Any expression for the number of pixels high the",
            "\t\tnew image will be. The new image will always be at least 1 pixel",
            "\t\theight, even if Height is set to less than 1 pixel. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CrossReference": {
        "comments": [
            "{ Description: Returns a linked list of structures representing all",
            "\treferences to a specified variable or module. }",
            "{ Context must be valid where scoping needs to be resolved as shown in",
            "\tthe example. In this example, it is necessary to determine if the Draw",
            "\tmodule referred to is the correct one based up on the module value of",
            "\tthe actual Draw variable stored in Tag23âs module. }"
        ],
        "snippets": [
            "CrossReference(",
            "\tModuleToSearch, { Required. Module value which is the root of the",
            "\t\tstatic module tree to search. May also be an array of module values.",
            "\t\tIf the next parameter (ModuleToFind) is invalid, then only the",
            "\t\tvariable references which are not within the scope of this module are",
            "\t\treturned, i.e. external references. }",
            "\tWhatToFind, { Optional. May be either a module or a variable to search",
            "\t\tfor. If invalid, all references to all variables (whether they may",
            "\t\tcontain modules or otherwise) outside the specified scope tree are",
            "\t\treturned. }",
            "\tContext { Optional. Instance of a module that indicates what scope",
            "\t\tModuleToSearch would run in, were it to run. (Note that ModuleToSearch",
            "\t\tdoes not need to be running when CrossReference is called.) If",
            "\t\tinvalid, only the static scope will be searched. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CryptRandom": {
        "comments": [
            "{ Description: Returns a buffer of random byte values. }",
            "{ The randomness complies with NIST SP800-90. }"
        ],
        "snippets": [
            "CryptRandom(",
            "\tLength { Required. Any numeric expression giving the number of bytes",
            "\t\tto create. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CurrentLine": {
        "comments": [
            "{ Description: Returns the text string that is the current line in an",
            "\teditor. }"
        ],
        "snippets": [
            "CurrentLine(",
            "\tEditor { Required. Any expression that returns an editor value that",
            "\t\twas created by the MakeEditor function. If this isn't an editor type",
            "\t\tvalue, or if it is invalid, nothing happens. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "CurrentTime": {
        "comments": [
            "{ Description: Returns the number of seconds, in local or UTC time,",
            "\tsince midnight of January 1, 1970 (where \"midnight\" is 00:00). }",
            "{ This function solves the problem encountered when using Seconds",
            "\ttogether with Today to determine the current date and time, when the",
            "\ttime is within a fraction of a second of midnight. This function",
            "\tassumes that \"midnight\" on January 1, 1970 is 00:00, rather than 24:00",
            "\ton a 24-hour clock. The returned value is accurate to three decimal",
            "\tpoints (milliseconds). Refer to the notes at the end of Working in",
            "\tSteady State for an example of how to use this (and similar) functions",
            "\tin a Steady State context. }"
        ],
        "snippets": [
            "CurrentTime(",
            "\tTimeType, { Any expression that evaluates to a 0 or 1. When 0, it",
            "\t\tindicates that time returned should be local time. If set to 1,",
            "\t\tindicates that the current UTC time should be returned. Defaults to 0",
            "\t\tif missing or Invalid. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "CurrentWindow": {
        "comments": [
            "{ Description: Returns the application window over which the mouse",
            "\tcursor rests. }"
        ],
        "snippets": [
            "CurrentWindow();"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Date": {
        "comments": [
            "{ Description: Returns a text string giving the date that corresponds",
            "\tto the number of days since January 1, 1970. }",
            "{ This function is primarily used to convert dates from historical",
            "\tdata files to a format that is more easily readable. The Julian style",
            "\tdate is used since it gives an easy method of calculating the time",
            "\tbetween dates and it is compact for historical records. If Date is",
            "\tused with a predefined date code, then the result will always be in",
            "\tEnglish, regardless of any system settings. If Date is used with a",
            "\tformat string, such as \"dd MMMM yyyy\", then the result will be in the",
            "\tuser's locale. For example, \"25 Febrero 2014\" }"
        ],
        "snippets": [
            "Date(",
            "\tDay, { Required. Any numeric expression giving the number of days",
            "\t\tsince January 1, 1970. This is a \"Julian\" style date. The function,",
            "\t\tToday() is commonly used. }",
            "\tDateForm { Required. Any numeric or text expression selecting the",
            "\t\tformat for the date format. Will also accept a date locale such as",
            "\t\t\"us-en\", matching the Windows locale. If DateForm is numeric, the",
            "\t\tformat for the date will be interpreted according to the standard Date",
            "\t\tFormatting Codes . If DateForm is a text value, it is interpreted as a",
            "\t\tdate formatting string. Please refer to the Date Formatting Strings in",
            "\t\tthe appendix. Note that these key strings are case sensitive. In the",
            "\t\tevent that the DateForm parameter does not resolve to either a numeric",
            "\t\tor text value, the system-configured date format, as specified through",
            "\t\tthe Windows Control Panel, is used. In this case, the Flags parameter",
            "\t\tis used to select from a number of options for the date. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "DateNum": {
        "comments": [
            "{ Description: Returns the number of days since January 1, 1970 for a",
            "\tgiven date. }",
            "{ This function performs the inverse function of the Day, Month, and",
            "\tYear functions. }"
        ],
        "snippets": [
            "DateNum(",
            "\tDay, { Required. Any numeric expression giving the day of the month",
            "\t\tfor the date. }",
            "\tMonth, { Required. Any numeric expression giving the month number for",
            "\t\tthe date. January is month 1. }",
            "\tYear, { Required. Any numeric expression giving the year of the date.",
            "\t\tThe full four-digit date must be used. }",
            "\tValidateInputRanges { Optional Boolean. If set to TRUE, this function",
            "\t\twill validate the Day and Month parameters to be in their valid range.",
            "\t\tIf both Day and Month are legal values for the given year, DateNum",
            "\t\twill return days since January 1, 1970, for a given date. Otherwise,",
            "\t\tthis will return Invalid. Defaults to FALSE, meaning that a value will",
            "\t\tbe calculated without verification that the Day and Month parameters",
            "\t\tare within a valid range. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "DateSelector": {
        "comments": [
            "{ Description: Displays a calendar, from which operators can select a",
            "\tdate. }",
            "{ The function returns an object variable of itself upon starting, in",
            "\tcase the calling module requires it. You can monitor the value of",
            "\tShowSelector to know whether the operator selected a date",
            "\t(ShowSelector becomes 0). If the calendar is shown as a popup,",
            "\tShowSelector becomes -1 if the calendar is closed without choosing a",
            "\tnew date. }"
        ],
        "snippets": [
            "\\DateSelector(",
            "\tShowSelector, { Sets the display mode. 1 to temporarily open the popup",
            "\t\tDateSelector. 2 to permanently show an embedded DateSelector. Also",
            "\t\tused as a return value: 0 indicates that a date was selected, -1",
            "\t\tindicates that the operator closed the popup without selecting a date.",
            "\t\t}",
            "\tLeftParm, { Any numeric expression specifying the location of the left",
            "\t\tedge of the calendar. }",
            "\tTopParm, { Any numeric expression specifying the location of the top",
            "\t\tedge of the calendar. }",
            "\tpSelTimestamp, { Output. A pointer to a variable holding a timestamp",
            "\t\tvalue. The returned date from the calendar will be found here. You may",
            "\t\talso use this to hand an initial date to the calendar, to display when",
            "\t\tShowSelector becomes true. If the initial date is not in range and no",
            "\t\tother date is selected, then the parameter will return invalid. No",
            "\t\ttimestamp is returned if no date is selected. }",
            "\tHelpID, { (Optional) Specific HelpID for this use of the DateSelector.",
            "\t\t}",
            "\tMinTimestamp, { (Optional) Minimum selectable date. (the number of",
            "\t\tseconds, in local or UTC time, since midnight of January 1, 1970",
            "\t\t(where \"midnight\" is 00:00) to the minimum selectable date.) }",
            "\tMaxTimestamp, { (Optional) Maximum selectable date. (the number of",
            "\t\tseconds, in local or UTC time, since midnight of January 1, 1970",
            "\t\t(where \"midnight\" is 00:00) to the maximum selectable date.) }",
            "\tpWidth, { (Optional) Returns pointer set to width of the calendar. }",
            "\tpHeight, { (Optional) Returns pointer set to height of the calendar. }",
            "\tDisabledDays, { (Optional) Bitwise. Days of the week that are",
            "\t\tdisabled: 0bSFTWTMS, read right-to-left. eg. 0b1110001 disables",
            "\t\tSunday, Thursday, Friday. Saturday. }",
            "\tBackColorParm, { (Optional) Background color. Default <FFFFFFFF>",
            "\t\t(white). }",
            "\tTextColorParm, { (Optional) Text color. Default <FF000000> (black). }",
            "\tFontSizeParm, { (Optional) Selected font size. 0 = small (default) 1 =",
            "\t\tmedium 2 = large 3 = X-large 4 = XX - large }",
            "\tHighlightToday, { (Optional) Boolean. TRUE to highlight today's date.",
            "\t\tDefault TRUE. }",
            "\tFirstDayOfWeek { (Optional) The weekday considered first (Sunday = 0).",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Day": {
        "comments": [
            "{ Description: Returns the day of the month for a given date number. }",
            "{ This function works in conjunction with the Month and Year functions",
            "\tto decompose a date into the corresponding day, month and year. }"
        ],
        "snippets": [
            "Day(",
            "\tDate { Required. Any numeric expression giving the number of days",
            "\t\tsince January 1, 1970. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "DBAdd": {
        "comments": [
            "{ Description: Executes in its own thread to add a record to a VTScada",
            "\tdatabase and returns an indication of parameter errors. }",
            "{ This function executes in the thread created by the DBSystem call,",
            "\tso it will not block other statements from executing. This does mean,",
            "\thowever, that the timing for EventCode becoming valid (marking that",
            "\tthe statement has finished executing) is unpredictable and should",
            "\ttherefore be checked for validity prior to executing other statements",
            "\tthat rely on this statement's results. The return value for this",
            "\tfunction indicates if any of its key parameters (DBSysVal, IDKey,",
            "\tDefaultEvent, or any required FieldVal) are illegal. It will",
            "\timmediately return a value of false (0) unless a key parameter was",
            "\tillegal, in which case it will return true (1). Note that the return",
            "\tvalue only signals completion of the function's execution if it is",
            "\ttrue, otherwise the function will continue executing in the thread",
            "\tcreated for it. If the record that is to be added already exists (i.e.",
            "\tits IDKey duplicates one already in the system), the field values of",
            "\tthe pre-existing record are updated by those defined in the FieldVal",
            "\tparameter(s). If the database file has its read-only attribute set",
            "\twhen this function is executed, it will be cleared automatically by",
            "\texecution of the function. }"
        ],
        "snippets": [
            "DBAdd(",
            "\tDBSysVal, { Required. The database value to use. This is the return",
            "\t\tvalue from a DBSystem call. }",
            "\tIDKey, { Required. Any text expression that uniquely identifies the",
            "\t\trecord to be created. }",
            "\tDefaultEvent, { Required. Any text expression containing one byte for",
            "\t\teach list in the system. Any missing bytes or bytes with values not",
            "\t\tincluded in the list provided, default to \"do nothing to the list\".",
            "\t\tNote that there is one byte for each list in the system. Text Value",
            "\t\tDefault Event + Add to list <space> Do nothing to list }",
            "\tEventCode, { Required. Any variable in which the event code for the",
            "\t\tfunction is returned. This parameter may be used to indicate",
            "\t\tcompletion of the function, as it will not be set to a valid value",
            "\t\tuntil execution is complete. It has one of the following meanings:",
            "\t\tEventCode Meaning 0 New record added 1 Record already existed. it was",
            "\t\tupdated 2 Error occurred - record not added EventCode may be replaced",
            "\t\tby a constant or Invalid if it is not required. This parameter will",
            "\t\tnot be set if there is a parameter error (see comments) }",
            "\tFieldVal { (or FieldVal1, FieldVal2, FieldVal3, â¦ ) One or more",
            "\t\tparameters that are an array or a list of values for each field.",
            "\t\tFieldVal (or FieldVal1, FieldVal2, FieldVal3, â¦ ) will be set to",
            "\t\tInvalid if not specified, if insufficient parameters are specified to",
            "\t\tfill each field in the new database record, or if the parameter is an",
            "\t\tarray with insufficient entries to fill each field in the database. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DBDropList": {
        "comments": [
            "{ Description: Populates a droplist using the results of an SQL query",
            "\ton a given database. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager\\, as shown in \"Format\" above. }"
        ],
        "snippets": [
            "\\ODBCManager\\DBDropList(",
            "\tX1, { Required. Screen coordinates of the left side of drop list }",
            "\tY1, { Required. Screen coordinates of the top of list }",
            "\tX2, { Required. Screen coordinates of the right side of the list }",
            "\tY2, { Required. Screen coordinates of the bottom of list }",
            "\tDSN, { Required. DSN of the database to query }",
            "\tUserName, { Required. The user name in the database for",
            "\t\tauthentication. }",
            "\tPassword, { Required. The password in the database for authentication.",
            "\t\t}",
            "\tSQLQuery, { Required. An SQL query that returns either one or two",
            "\t\tcolumns. The first column is used for droplist display, the second (if",
            "\t\tit exists) provides the matching value for each entry in the list. }",
            "\tTitle, { Required. The title for the drop list }",
            "\tLocFocusID, { Required. Numeric expression from 0 to 32767 for the",
            "\t\tfocus number of this graphic. If this value is 0, the droplist will",
            "\t\tdisplay its current setting, but will not be able to be opened (i.e.",
            "\t\tits value cannot be changed) and will appear grayed out. The default",
            "\t\tvalue is 1. }",
            "\tInit, { Required. Any expression for the initial value displayed in",
            "\t\tthe field }",
            "\tVar, { Required. A variable whose value will be set by this droplist }",
            "\tDrawBevel, { Optional. If true (non-0) a bevel is drawn around the",
            "\t\tdroplist. If false (0) no bevel is drawn. The default value is false }",
            "\tAlignTitle, { Optional. If true (non-0) the title is included in the",
            "\t\tcalculation for vertical alignment. If false(0) it is added to the",
            "\t\tdroplist after it (and its bevel if one exists) has been vertically",
            "\t\taligned. The default is true }",
            "\tAddInvalid, { Required. If true an entry with an invalid value will be",
            "\t\tadded at the top of list. }",
            "\tInvalidText { Required. Used with AddInvalid to provide the text to",
            "\t\tdisplay for the item at the top of the list. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DBGetStream": {
        "comments": [
            "{ Description: Converts a database to a stream, and returns an",
            "\tindication of parameter errors. }",
            "{ The return value for this function indicates if its key parameter",
            "\t(DBSysVal) is invalid If DBSysVal is valid, DBGetStream will",
            "\timmediately return a value of false (0). If DBSysVal is invalid,",
            "\tDBGetStream will not perform the required operation, and will instead",
            "\timmediately return a value of 1. Note that the return value only",
            "\tsignals completion of the function's execution if it is true. Because",
            "\tthe value of the Stream parameter is created from a database's file,",
            "\tthe DBSystem function that created the database had to have a valid",
            "\tfirst parameter (the file name in which the database contents are",
            "\tstored). If the database file has its read-only attribute set when",
            "\tthis function is executed, it will be cleared automatically by",
            "\texecution of the function. }"
        ],
        "snippets": [
            "DBGetStream(",
            "\tDBSysVal, { Required. The database value to use. This is the return",
            "\t\tvalue from a DBSystem call. }",
            "\tStream, { Required. Any variable in which the stream containing the",
            "\t\tdatabase will be returned. }",
            "\tTimestamp { Optional. An optional parameter that is any numeric",
            "\t\texpression indicating the earliest timestamp to include in the stream.",
            "\t\tOnly database records with date/time values greater than or equal to",
            "\t\tthis parameter will be returned. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DBGridList": {
        "comments": [
            "{ Description: Populates a grid list using the results of a database",
            "\tquery }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager\\, as shown in \"Format\" above. }"
        ],
        "snippets": [
            "\\ODBCManager\\DBGridList(",
            "\tDSN, { Required. Datasource name to query. }",
            "\tUserName, { Required. The user name in the database for",
            "\t\tauthentication. }",
            "\tPassword, { Required. The user name in the database for",
            "\t\tauthentication. }",
            "\tSelectQualifier, { Required. SQL selection qualifier, such as \"top",
            "\t\t100\" etc. }",
            "\tFields, { Required. An array of field names to query for }",
            "\tTables, { Required. An array of tables to query from }",
            "\tWhereFields, { Required. An array of fields named for SQL WHERE clause",
            "\t\t}",
            "\tWhereOperators, { Required. An array of Operators for the SQL WHERE",
            "\t\tclause }",
            "\tWhereValues, { Required. An array of Array of values for the SQL WHERE",
            "\t\tclause }",
            "\tWhereAndFlag, { Required. Set 1 for AND of where fields, reset for OR",
            "\t\t}",
            "\tUserQuery, { Required. Overrides Fields, Tables, & Where when defined",
            "\t\t}",
            "\tColName, { Required. Text array of titles for displaying data }",
            "\tColFormat, { Required. Text array of format qualifiers for each of the",
            "\t\tvalues. }",
            "\tColCellWidth, { Required. Array giving the size to use for the cells",
            "\t\tcolumns }",
            "\tRowHeight, { Required. Height of the data rows. Set to invalid to use",
            "\t\tthe defaults. }",
            "\tTitleHeight, { Required. Height of the column titles. Set to invalid",
            "\t\tto use the defaults. }",
            "\tExtDisplayRef, { Required. Object value of where ColFormat modules",
            "\t\tlocated }",
            "\tAutoResizeWidths, { Required. Automatically resize the widths to fit",
            "\t\tthe available space }",
            "\tOrderBy, { Required. Field names for ORDER BY clause only used }",
            "\tLockFirstColParm, { Required. TRUE to lock column 0 while horizontal",
            "\t\tscrolling }",
            "\tSortParm, { Required. Enables grid list sorting }",
            "\tSelectedRowParm, { Required. 0 - based value of row of selected item }",
            "\tSelectedColParm, { Required. 0 - based value of column of selected",
            "\t\titem }",
            "\tHorz, { Required. Horizontal scroll position }",
            "\tVert, { Required. Vertical scroll position }",
            "\tRefresh, { Required. Set flag to re-query data }",
            "\tDataPtr { Required. Pointer to data read from db in [Col][Row] format",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DBInsert": {
        "comments": [
            "{ Description: Identical to DBAdd, except that it will not modify an",
            "\texisting record. Executes in its own thread to add a record to a",
            "\tVTScada database and returns an indication of parameter errors. }",
            "{ This function executes in the thread created by the DBSystem call,",
            "\tso it will not block other statements from executing. This does mean,",
            "\thowever, that the timing for EventCode becoming valid (marking that",
            "\tthe statement has finished executing) is unpredictable and should",
            "\ttherefore be checked for validity prior to executing other statements",
            "\tthat rely on this statement's results. The return value for this",
            "\tfunction indicates if any of its key parameters (DBSysVal, IDKey,",
            "\tDefaultEvent, or any required FieldVal) are illegal. It will",
            "\timmediately return a value of false (0) unless a key parameter was",
            "\tillegal, in which case it will return true (1). Note that the return",
            "\tvalue only signals completion of the function's execution if it is",
            "\ttrue, otherwise the function will continue executing in the thread",
            "\tcreated for it. If the database file has its read-only attribute set",
            "\twhen this function is executed, it will be cleared automatically by",
            "\texecution of the function. }"
        ],
        "snippets": [
            "DBInsert(",
            "\tDBSysVal, { Required. The database value to use. This is the return",
            "\t\tvalue from a DBSystem call. }",
            "\tIDKey, { Required. Any text expression that uniquely identifies the",
            "\t\trecord to be created. }",
            "\tDefaultEvent, { Required. Any text expression containing one byte for",
            "\t\teach list in the system. Any missing bytes or bytes with values not",
            "\t\tincluded in the list provided, default to \"do nothing to the list\".",
            "\t\tNote that there is one byte for each list in the system. Text Value",
            "\t\tDefault Event + Add to list <space> Do nothing to list }",
            "\tTimeStamp, { Required. The time to be used for all lists that the new",
            "\t\trecord is a member of. Current time will be used if this field is",
            "\t\tinvalid. }",
            "\tEventCode, { Required. Any variable in which the event code for the",
            "\t\tfunction is returned. This parameter may be used to indicate",
            "\t\tcompletion of the function, as it will not be set to a valid value",
            "\t\tuntil execution is complete. It has one of the following meanings:",
            "\t\tEventCode Meaning 0 New record added 2 Error occurred - record not",
            "\t\tadded EventCode may be replaced by a constant or Invalid if it is not",
            "\t\trequired. This parameter will not be set if there is a parameter error",
            "\t\t(see comments) }",
            "\tFieldVal { (or FieldVal1, FieldVal2, FieldVal3, â¦ ) One or more",
            "\t\tparameters that are an array or a list of values for each field.",
            "\t\tFieldVal (or FieldVal1, FieldVal2, FieldVal3, â¦ ) will be set to",
            "\t\tInvalid if not specified, if insufficient parameters are specified to",
            "\t\tfill each field in the new database record, or if the parameter is an",
            "\t\tarray with insufficient entries to fill each field in the database. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DBListGet": {
        "comments": [
            "{ Description: Executes in its own thread to retrieve certain records",
            "\tfrom a list in a VTScada database and returns an indication of",
            "\tparameter errors. }"
        ],
        "snippets": [
            "DBListGet(",
            "\tDBSysVal, { Required. The database value to use. This is the return",
            "\t\tvalue from a DBSystem call. }",
            "\tResult, { Required. A variable in which the resulting array will be",
            "\t\tstored. The dimension of the array will match the number of fields",
            "\t\trequested. }",
            "\tOrientation, { Required. Any logical expression that denotes the",
            "\t\torientation of the resultant array. If true (non-0) each record",
            "\t\tretrieved forms its own row, with each column representing a field. If",
            "\t\tfalse (0), the reverse holds true. This means that with Orientation",
            "\t\tset to 1, if 5 fields were requested in the FieldVals parameter(s),",
            "\t\tthe resultant array would be R[n][5], where n is the number of",
            "\t\tmatching records found. }",
            "\tList, { Required. Any numeric value or array of numeric values that",
            "\t\tdefine(s) the list(s) to search. (See: Bitwise Parameters & Operations",
            "\t\t) Value List -1 Entire database 0 Transaction log Number, starting at",
            "\t\t1 The specific list number The database and transaction log cannot be",
            "\t\tcombined with other lists. }",
            "\t-1, { 0 }",
            "\tNumber, starting at 1",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DBListSize": {
        "comments": [
            "{ Description: Executes in its own thread to retrieve the size of a",
            "\tcertain list in a VTScada database and returns an indication of",
            "\tparameter errors. }",
            "{ This function executes in the thread created by the DBSystem call,",
            "\tso it will not block other statements from executing. This does mean,",
            "\thowever, that the timing for Result becoming valid is unpredictable",
            "\tand should therefore be checked for validity prior to being used. The",
            "\treturn value for this function indicates if any of its key parameters",
            "\t(DBSysVal, List, or Method) are invalid. If all of the key parameters",
            "\tare valid, DBListSize will immediately return a value of false (0). If",
            "\tany of the key parameters are invalid, DBListSize will not perform the",
            "\trequired operation, and will instead immediately return a value of 1.",
            "\tIf no filter being used at all, the function reports the number of",
            "\trecords stored in the header of the underlying formatted file class,",
            "\trather than counting records one by one. Note that the return value",
            "\tonly signals completion of the function's execution if it is true,",
            "\totherwise the function will continue executing in the thread created",
            "\tfor it. If the database file has its read-only attribute set when this",
            "\tfunction is executed, it will be cleared automatically by execution of",
            "\tthe function. For information about the standard alarm lists in",
            "\tVTScada see \"Alarm Manager Service\". }"
        ],
        "snippets": [
            "DBListSize(",
            "\tDBSysVal, { Required. The database value to use. This is the return",
            "\t\tvalue from a DBSystem call. }",
            "\tResult, { Required. A variable in which the resulting 1 or 2",
            "\t\tdimensional array will be stored. }",
            "\tList, { Required. Any numeric value or array of numeric values that",
            "\t\tdefine(s) the list(s) to search List List Description -1 Entire",
            "\t\tdatabase 0 Transaction log Number, starting at 1 The specific list",
            "\t\tnumber The database and transaction log cannot be combined with other",
            "\t\tlists. }",
            "\t-1, { 0 }",
            "\tNumber, starting at 1",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DBRemove": {
        "comments": [
            "{ Description: Executes in its own thread to remove a record from a",
            "\tVTScada database and returns an indication of parameter errors. }",
            "{ This function executes in the thread created by the DBSystem call,",
            "\tso it will not block other statements from executing. This does mean,",
            "\thowever, that the timing for EventCode becoming valid (marking that",
            "\tthe statement has finished executing) is unpredictable and should",
            "\ttherefore be checked for validity prior to executing other statements",
            "\tthat rely on this statement's results. The return value for this",
            "\tfunction indicates if any of its key parameters (DBSysVal or IDKey)",
            "\tare invalid. It will immediately return a value of false (0) unless a",
            "\tkey parameter was invalid, in which case it will return true (1). Note",
            "\tthat the return value only signals completion of the function's",
            "\texecution if it is true, otherwise the function will continue",
            "\texecuting in the thread created for it. If the database file has its",
            "\tread-only attribute set when this function is executed, it will be",
            "\tcleared automatically by execution of the function. }"
        ],
        "snippets": [
            "DBRemove(",
            "\tDBSysVal, { Required. The database value to use. This is the return",
            "\t\tvalue from a DBSystem call. }",
            "\tIDKey, { Required. Any text expression used for designating the",
            "\t\trecord(s) to delete. Can contain the wildcard characters \"*\" and \"?\".",
            "\t\t}",
            "\tEventCode { Optional. Any variable in which the event code for the",
            "\t\tfunction is returned. This parameter may be used to indicate",
            "\t\tcompletion of the function, as it will not be set to a valid value",
            "\t\tuntil execution is complete. It has one of the following meanings",
            "\t\tEventCode Meaning 0 Record(s) deleted 1 Error occurred - record(s) not",
            "\t\tdeleted EventCode will not be set if there is a parameter error (see",
            "\t\tcomments). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DBSystem": {
        "comments": [
            "{ Description: Creates a VTScada database and returns its value. The",
            "\tmaximum field length is 65,523 characters. If the field length is",
            "\tlonger than 65,523 characters, the DBSystem call will return invalid.",
            "\t}",
            "{ This function is not threaded, however, it creates a thread inside",
            "\tof which the database value referring to the database system requested",
            "\tis accessed. All other database functions (those beginning with \"DB\"),",
            "\texcept for DBValue, do not create their own thread, but will execute",
            "\tin the thread created by this function. This thread will exist for as",
            "\tlong as the DBSystem statement remains active (i.e. until a state",
            "\tchange occurs). For this reason, the state containing the DBSystem",
            "\tcall must remain active until all other database statements have",
            "\tfinished executing. The statement responsible for a state change",
            "\tshould therefore trigger only when all results from all statements",
            "\taccessing this database are valid. }"
        ],
        "snippets": [
            "DBSystem(",
            "\tDBFile, { Required. A text expression giving the file in which to",
            "\t\tstore the database information. If this parameter is invalid or is a",
            "\t\tnull text string (\"\"), no file is created and the database is",
            "\t\treconstructed every time the system starts. DBFile can be an array",
            "\t\tcontaining 1 or 2 file names or streams. On startup, the second stream",
            "\t\twill be brought into sync with the first. The first is only read to",
            "\t\tinitialize the database system. Both streams are maintained while the",
            "\t\tsystem is running. Note that the value for this parameter may not be",
            "\t\tchanged while the DBSystem call is active (i.e. the file cannot",
            "\t\tchange) - any changes will be ignored. }",
            "\tDBTransFile, { Required. A text expression giving the file in which",
            "\t\ttransactions are logged. If this parameter is invalid or is a null",
            "\t\ttext string (\"\"), no file is created and no transaction logging is",
            "\t\tdone. Unlike the DBFile parameter, the value of this parameter may be",
            "\t\tchanged even while the DBSystem function is active (i.e. the file is",
            "\t\tdynamic). }",
            "\tMaxTrans, { Required. Any numeric expression giving the maximum number",
            "\t\tof transactions to be stored in the transaction log file. }",
            "\tNumLists, { Required. Any numeric expression giving the number of",
            "\t\tmemory lists to be maintained. The valid range is from 0 to 255. }",
            "\tIDKeySize, { Required. Any expression that designates the maximum",
            "\t\tlength for the ID key. This affects the size of the files and the",
            "\t\tdatabase stored in memory. }",
            "\tFieldAttribs, { Required. Either an array or a series of parameters",
            "\t\tthat defines what type and size the fields are. The number of",
            "\t\tparameters or array entries determines how many fields there are. The",
            "\t\tvalid field types are FieldAttribs Field Type Attribute -4 Indicates a",
            "\t\tVTScada value field. Any VTScada value may be written, but will only",
            "\t\tgo into the in-memory copy of the database. The disk record will have",
            "\t\ta zero length field. -3 Double precision float (8 bytes) -2 Long",
            "\t\tinteger (4 bytes) -1 Short integer (2 bytes) 0 Indicates a Status",
            "\t\tfield . 1 or more Text (number defines length) }",
            "\t-4, { -3 }",
            "\t-2, { -1 }",
            "\t0 { 1 or more }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "DBTransaction": {
        "comments": [
            "{ Description: Executes in its own thread to perform a transaction on",
            "\ta VTScada database and returns an indication of parameter errors. }",
            "{ This function executes in the thread created by the DBSystem call,",
            "\tso it will not block other statements from executing. This does mean,",
            "\thowever, that the timing for EventCode becoming valid (marking that",
            "\tthe statement has finished executing) is unpredictable and should",
            "\ttherefore be checked for validity prior to executing other statements",
            "\tthat rely on this statement's results. The return value for this",
            "\tfunction indicates if any of its key parameters (DBSysVal, IDKey or",
            "\tEvent) are invalid. It will immediately return a value of false (0)",
            "\tunless a key parameter was invalid, in which case it will return true",
            "\t(1). Note that the return value only signals completion of the",
            "\tfunction's execution if it is true, otherwise the function will",
            "\tcontinue executing in the thread created for it. If the user attempts",
            "\tto add a record to a list on which it already exists, that record's",
            "\ttime and position on the list will be updated unless the new time is",
            "\t0, in which case no change will occur. If the database file has its",
            "\tread-only attribute set when this function is executed, it will be",
            "\tcleared automatically by execution of the function. }"
        ],
        "snippets": [
            "DBTransaction(",
            "\tDBSysVal, { Required. The database value to use. This is the return",
            "\t\tvalue from a DBSystem call. }",
            "\tIDKey, { Required. Any text expression that designates the record to",
            "\t\tuse. It can contain the wildcard characters \"*\" and \"?\". }",
            "\tEvent, { Required. Any text expression containing on byte for each",
            "\t\tlist in the system. Any missing bytes or bytes with values not",
            "\t\tincluded in the following list default to \"do nothing to list\". Note",
            "\t\tthat there is one byte for each list in the system, not for each list",
            "\t\tthat has been selected by the List parameter. Text Value Event + Add",
            "\t\tto list - Remove from list <space> Do nothing to list }",
            "\t+, { - }",
            "\t<space>",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DBUpdate": {
        "comments": [
            "{ Description: Executes in its own thread to update a VTScada database",
            "\tfrom a given stream and returns an indication of parameter errors. }",
            "{ This function executes in the thread created by the DBSystem call,",
            "\tso it will not block other statements from executing. This does mean,",
            "\thowever, that the timing for EventCode becoming valid (marking that",
            "\tthe statement has finished executing) is unpredictable and should",
            "\ttherefore be checked for validity prior to executing other statements",
            "\tthat rely on this statement's results. The return value for this",
            "\tfunction indicates if any of its key parameters (DBSysVal or Stream)",
            "\tare invalid. It will immediately return a value of false (0) unless a",
            "\tkey parameter was invalid, in which case it will return true (1). Note",
            "\tthat the return value only signals completion of the function's",
            "\texecution if it is true, otherwise the function will continue",
            "\texecuting in the thread created for it. Because the value of the",
            "\tStream parameter is created from a database, the DBSystem statement",
            "\tthat created the database had to have a valid first parameter (the",
            "\tfile name in which the database contents are stored). Do not attempt",
            "\tto access the database file directly via a FileStream statement if any",
            "\tDBSystem functions referencing this file are active, since the results",
            "\tmay be unpredictable. This function is useful to synchronize the",
            "\tdatabase setup on two machines over a network. It allows a secondary",
            "\tmachine to load the file from the first, thus duplicating its",
            "\tattributes precisely. If the database file has its read-only attribute",
            "\tset when this function is executed, it will be cleared automatically",
            "\tby execution of the function. }"
        ],
        "snippets": [
            "DBUpdate(",
            "\tDBSysVal, { Required. The database value to use. This is the return",
            "\t\tvalue from a DBSystem call. }",
            "\tStream, { Required. Any stream value created from the contents of a",
            "\t\tdatabase. This results from a DBGetStream statement. }",
            "\tEventCode, { Required. An optional variable in which the event code",
            "\t\tfor the function is returned. This parameter may be used to indicate",
            "\t\tcompletion of the function, as it will not be set to a valid value",
            "\t\tuntil finished executing. It has the following meaning Value Meaning 0",
            "\t\tDatabase successfully updated 1 Update failed EventCode may be",
            "\t\treplaced by a constant or Invalid if it is not required. This",
            "\t\tparameter will not be set if there is a parameter error (see comments)",
            "\t\t}",
            "\t0 { 1 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DBValue": {
        "comments": [
            "{ Description: Returns a certain value retrieved from a VTScada",
            "\tdatabase. }",
            "{ Unlike most of the other database statements, this function is not",
            "\tthreaded. Execution of all other statements will wait until this",
            "\tstatement has completed execution and returned its result. If no",
            "\trecords matching IDKey are found, the return value will be Invalid. If",
            "\tthe database file has its read-only attribute set when this function",
            "\tis executed, it will be cleared automatically by execution of the",
            "\tfunction. }"
        ],
        "snippets": [
            "DBValue(",
            "\tDBSysVal, { Required. The database value to use. This is the return",
            "\t\tvalue from a DBSystem call. }",
            "\tIDKey, { Required. Any text expression that designates the record to",
            "\t\tuse. It can contain the wildcard characters \"*\" and \"?\". }",
            "\tFieldNumber, { Required. Any numeric expression that indicates the",
            "\t\tfield for which data is requested. Valid values for FieldNumber are as",
            "\t\tfollows Value Meaning -1 A timestamp is required. A ListNum parameter",
            "\t\tmust be supplied, specifying which list the timestamp is to be",
            "\t\tretrieved from. 0 Event code for the record 1 to 255 Indicates which",
            "\t\tpiece of the record's data you wish to retrieve. }",
            "\t-1, { 0 }",
            "\t1 to 255 { ListNum }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "DDE": {
        "comments": [
            "{ Description: Returns the value of the data for a specific item from",
            "\ta DDE server program. This function is a DDE client. }",
            "{ Due to numerous security problems, DDE has been disabled by default",
            "\tin Microsoft Office applications since 2017. If you must use this",
            "\ttechnology, do so with extreme care! This sets up a DDE client. After",
            "\tthe link is established, the return value of the function will change",
            "\twhenever the value in the DDE server changes. }"
        ],
        "snippets": [
            "DDE(",
            "\tProgram, { Required. Any text expression giving the name of the",
            "\t\tprogram which is the DDE server. This does not contain the .EXE",
            "\t\textension. This is usually the same as the root file name of the",
            "\t\texecutable file, but may be different as in the case of Microsoft Word",
            "\t\tfor Windows 6.0 which uses the name \"MSWord\". }",
            "\tTopic, { Required. Any text expression giving the DDE topic name",
            "\t\twithin the server. For a VTScada server the topic name is usually the",
            "\t\tname of the window. For Microsoft Excel, the topic is the spreadsheet",
            "\t\tname. }",
            "\tItem, { Required. Any text expression giving the location or name of",
            "\t\tthe value to retrieve. }",
            "\tError, { Optional. A variable that will be set when an error occurs.",
            "\t\tValues may be as follows: 0=OK, -1=DDE is stopping, -2=FAILED }",
            "\tTrigger, { Optional. If present, this indicates a \"COLD\" link as",
            "\t\topposed to a \"HOT\" link (i.e. you have to poll the server to get an",
            "\t\tupdate, rather than it pushing updates to you). When set to 1, this",
            "\t\ttriggers a poll. The trigger is then reset. }",
            "\tpollTimeOut { Optional. If this is a COLD link (see Trigger) then",
            "\t\tpollTimeOut is the value in seconds of the time out for the poll. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "DDEPoke": {
        "comments": [
            "{ Description: Sends a value for a specific item to a DDE server",
            "\tprogram. }",
            "{ Due to numerous security problems, DDE has been disabled by default",
            "\tin Microsoft Office applications since 2017. If you must use this",
            "\ttechnology, do so with extreme care! After the link is established,",
            "\tnew data will be sent to the server whenever Value changes. The return",
            "\tvalue is true (1) if successful and false (0) otherwise. }"
        ],
        "snippets": [
            "DDEPoke(",
            "\tProgram, { Required. Any text expression giving the name of the",
            "\t\tprogram which is the DDE server. This does not contain the .EXE",
            "\t\textension. This is usually the same as the root file name of the",
            "\t\texecutable file, but may be different as in the case of Microsoft Word",
            "\t\tfor Windows 6.0 which uses the name \"MSWord\". }",
            "\tTopic, { Required. Any text expression giving the DDE topic name",
            "\t\twithin the server. For a VTScada server the topic name is usually the",
            "\t\tname of the window. For Microsoft Excel, the topic is the spreadsheet",
            "\t\tname. }",
            "\tItem, { Required. Any text expression giving the name or location of",
            "\t\tthe value to send. }",
            "\tValue { Required. Any expression for the value to be sent, up to a",
            "\t\tmaximum of 255 characters. If this value is invalid, a null value",
            "\t\t(null text string) will be sent to the DDE server program. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "DDEShareAdd": {
        "comments": [
            "{ Description: Adds a new DDE share name to the SYSTEM.INI file or the",
            "\tregistry and returns its own error code. }",
            "{ Due to numerous security problems, DDE has been disabled by default",
            "\tin Microsoft Office applications since 2017. If you must use this",
            "\ttechnology, do so with extreme care! The return value of this function",
            "\tis true if successful, false if unsuccessful, and invalid if not",
            "\tattempted (i.e. invalid parameters). }"
        ],
        "snippets": [
            "DDEShareAdd(",
            "\tObject, { Required. Any object expression giving the module instance",
            "\t\twhose variables' value will be shared. }",
            "\tShareName, { Required. Any text expression that gives the DDE share",
            "\t\tname other DDE enabled programs use to access the variables in Object.",
            "\t\t}",
            "\tPassword { Required. Any text expression that gives the password",
            "\t\trequired to access this DDE share name. If this is invalid, no",
            "\t\tpassword is required. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DDEShareDel": {
        "comments": [
            "{ Description: Deletes a DDE share name from the SYSTEM.ini file or",
            "\tthe registry and returns its own error code. }",
            "{ Due to numerous security problems, DDE has been disabled by default",
            "\tin Microsoft Office applications since 2017. If you must use this",
            "\ttechnology, do so with extreme care! The return value of this function",
            "\tis true if successful, false if unsuccessful, and invalid if not",
            "\tattempted (i.e. invalid parameters). }"
        ],
        "snippets": [
            "DDEShareDel(",
            "\tShareName { Required. Any text expression that gives the DDE share",
            "\t\tname. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DeadBand": {
        "comments": [
            "{ Description: Returns the previous value of the first parameter until",
            "\tit changes by an amount specified by the second parameter. }",
            "{ When the function is first called, its value will be that of its",
            "\tfirst parameter Value. After that, the value will remain at this",
            "\tinitial value until the difference between Value and the function",
            "\tvalue is greater than or equal to Delta. At this point, the function",
            "\tvalue will assume the new value of Value. This has the effect of",
            "\tignoring all changes in Value which are less than Delta. This is",
            "\tuseful for ignoring \"noise\" in values such as analog inputs. Because",
            "\tVTScada performs calculations based upon changes in values, this",
            "\tfunction may be used in certain situations to minimize the number of",
            "\tirrelevant value changes and thereby reduce the frequency of",
            "\tcalculations and improve performance. This function may also be used",
            "\tby PID to eliminate noise in the process value parameter and therefore",
            "\tavoid making frequent minor output changes which are irrelevant. The",
            "\tchange specified by Delta is the absolute value of the change so a",
            "\tpositive or negative change in Value will be treated equally. Delta",
            "\tshould be always greater than zero. }"
        ],
        "snippets": [
            "Deadband(",
            "\tValue, { Required. Any numeric expression giving the value whose",
            "\t\tchanges are to be limited to amounts no less than Delta. }",
            "\tDelta { Required. Any numeric expression giving the lower limit of the",
            "\t\tchange in Value that will allow the function value to change. If Delta",
            "\t\tis less than or equal to 0, the function will always return Value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Debugger": {
        "comments": [
            "{ Description: Starts the VTScada Debugger utility. (Not the Source",
            "\tDebugger) }",
            "{ The utility that starts is the older Debugger, not the newer Source",
            "\tDebugger. It does not need to be loaded into the VAM in order to run",
            "\twhen called by this function. This module is a member of the System",
            "\tLibrary, and must therefore be prefaced by \\System. as shown in the",
            "\t\"Format\" section. If your application predates version 11.2, use the",
            "\tbackslash notation rather than dot: \\System\\ }"
        ],
        "snippets": [
            "System.Debugger(",
            "\tStatus, { Optional. Any numeric expression giving the enabled status",
            "\t\tof the window in which the debugger is displayed, as follows. The",
            "\t\tdefault value is 1 - Enabled. Status Meaning 0 Disabled 1 Enabled 2",
            "\t\tEnabled, bring to front 3 Enabled, reload ViewModule, then bring to",
            "\t\tfront }",
            "\t0, { 1 }",
            "\t2 { 3 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Decode": {
        "comments": [
            "{ Description: Returns the plain value of a cipher that is the result",
            "\tof the Encode function. }",
            "{ Decode will check for errors at every step in the operation and will",
            "\tskip subsequent steps should an error occur. }"
        ],
        "snippets": [
            "\\System.Decode(",
            "\tCipherValue, { Required. The information to be decoded. }",
            "\tUnpackDictionary, { If a dictionary was used to pack the information",
            "\t\tas part of the encoding, the mirror of that dictionary must be",
            "\t\tprovided to unpack the information. See notes and example in the",
            "\t\tUnpack function. }",
            "\tKey, { Optional string. Must be included if the CipherValue was",
            "\t\tencrypted using a key, in which case this value must match the key",
            "\t\tthat was used in the Encode function. }",
            "\tHashKey, { Optional string. Must be included if the CipherValue was",
            "\t\tprotected from tampering with a Hash value, in which case this value",
            "\t\tmust match the Hash that was used in the Encode function. }",
            "\tpError, { Optional. If present, will return a numeric value from the",
            "\t\tmodule providing extra information if the decode operation fails.",
            "\t\tPossible values and meanings for pError follow: 0 No error 1 Invalid",
            "\t\tOpcode 2 Hashed CipherText, missing HashKey parameter 3 Encrypted",
            "\t\tCipherText, missing Key parameter 4 Error in Salt Length 5 Error in",
            "\t\tDecompressed Length 6 Error in Base64 Encoding 7 Error in Salt Length",
            "\t\t8 Hash does not match payload 9 Error when Decrypting payload 10 Error",
            "\t\twhen Decompressing payload }",
            "\t1, { 2 }",
            "\t3, { 4 }",
            "\t5, { 6 }",
            "\t7, { 8 }",
            "\t9 { 10 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DecodeParms": {
        "comments": [
            "{ Description: Takes a string of page parameters for a MenuItem tag",
            "\tand returns the values assigned for those parameters. }",
            "{ If you know which MenuItem tag you want to get the parameters from,",
            "\tuse the following to get an array of its parameter values: Parameters",
            "\t= \\MenuManager.DecodeParms(TagObj.Parameters, TRUE); You must always",
            "\tpass TRUE into the second parameter. The name of the page to go with",
            "\tthose parameters can be found in: TagObj.CodeReference }"
        ],
        "snippets": [
            "\\MenuManager.DecodeParms(",
            "\tData, { Required text. A string of parameters to decode. You can",
            "\t\tobtain this automatically via TagObj.Parameters , where TagObj is the",
            "\t\tMenuItem tag you are examining. }",
            "\tReserved { Boolean. Set to TRUE to return an array of parameter",
            "\t\tvalues. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Decommission": {
        "comments": [
            "{ Description: Decommission an alarm by name. }",
            "{ An alarm tag that is deleted without being decommissioned is",
            "\treferred to as an orphaned alarm. VTScada will removed orphaned alarms",
            "\tautomatically, but it is better practice to specifically decommission",
            "\tthe alarm }"
        ],
        "snippets": [
            "\\AlarmManager\\Decommission(",
            "\tAlarmName { Required text. Unique name for the alarm. Typically the",
            "\t\tunique ID, which can be obtained using GetAlarmName . If there are",
            "\t\tmultiple built-in alarms in a tag, the convention is to concatenate",
            "\t\tthe UniqueID with a separator and a unique integer or string per",
            "\t\talarm. For example, Concat(Root\\UniqueID, \\AlarmSeparatorString, 0). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Decrypt": {
        "comments": [
            "{ Description: The Decrypt function decrypts data previously encrypted",
            "\tusing the Encrypt function. It is the VTScada analog of the CryptoAPI",
            "\tCryptDecrypt call. Decrypt fully supports asymmetric and symmetric",
            "\tkeys via CNG (Cryptography New Generation) }",
            "{ The plain text is returned as a text string. If an error occurs, the",
            "\treturn value is invalid. }"
        ],
        "snippets": [
            "Decrypt(",
            "\tKey, { Required. The handle to the key to use to decrypt the data. }",
            "\tCipherText, { Required. A text string that contains the cipher text to",
            "\t\tbe decrypted. }",
            "\tFinal, { Required. A parameter that specifies whether this is the last",
            "\t\tsection in a series being decrypted. Final is set TRUE for the last or",
            "\t\tonly block and FALSE if there are more blocks to be decrypted }",
            "\tReserved n/a, { An optional parameter which should be set to 0. If",
            "\t\tomitted or invalid, then the value 0 is used. }",
            "\tFlags, { Optional. An optional parameter specifying the flags to be",
            "\t\tpassed to CryptDecrypt. If omitted or invalid then the value 0 is",
            "\t\tused. When using a CNG key, the Flags parameter can take the same",
            "\t\tvalues as for Encrypt . }",
            "\tError, { Required. An optional variable in which the error code for",
            "\t\tthe function is returned. It can have the following meanings: Value",
            "\t\tMeaning 0 Key successfully imported. 1 Key, CipherText or Final",
            "\t\tparameters invalid. x Any other value is an error from CryptDecrypt. }",
            "\t0, { 1 }",
            "\tx",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DefaultNamingContext": {
        "comments": [
            "{ Description: Returns the string value of the LDAP default naming",
            "\tcontext for the host machine domain. }"
        ],
        "snippets": [
            "DefaultNamingContext();"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "DefaultPrinter": {
        "comments": [
            "{ Description: Returns the Windowsâ¢ default printer. }"
        ],
        "snippets": [
            "DefaultPrinter();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Deflate": {
        "comments": [
            "{ Description: Compresses or decompresses a buffer of data using the",
            "\tDEFLATE algorithm, and returns the compressed / decompressed data. }",
            "{ Compression/decompression is performed using an implementation of",
            "\tthe DEFLATE algorithm (RFC 1951). The DEFLATE algorithm is a",
            "\tdictionary-based compression technique, suitable for many types of",
            "\tdata. A dictionary-based algorithm needs to include dictionary tokens",
            "\tin the output buffer, so compression of small buffers can give poor",
            "\tresults. The DeflateHandle parameter is an opaque quantity that",
            "\tidentifies an existing dictionary, or, if the variable it identifies",
            "\tdoes not hold an existing deflate handle, is set to a new deflate",
            "\thandle on return from the statement. Supplying the same deflate handle",
            "\tfor successive calls to Deflate results in the existing dictionary",
            "\tbeing used and augmented on successive calls. This usually improves",
            "\tcompression significantly. If you make a series of calls to Deflate,",
            "\tusing the same deflate handle to decompress, then you must make a",
            "\tseries of calls in the same sequence, with the initial call obtaining",
            "\ta new deflate handle, and subsequent calls using the newly-acquired",
            "\tdeflate handle (see the \"Example\" section for further details).",
            "\tMaxDecompressedLength is useful when you already know the size of the",
            "\tdecompressed data (usually because you recorded it before compression",
            "\twas performed). While this parameter is not necessary, its use reduces",
            "\tthe memory required to decompress the data. The default size of",
            "\tMaxDecompressedLength is 65536 bytes. Expanding data larger than this",
            "\tsize will cause the output to be clipped unless a larger value is",
            "\tprovided in this parameter. }"
        ],
        "snippets": [
            "Deflate(",
            "\tInputBuffer, { Required. Any expression that will yield a buffer of",
            "\t\tdata to be compressed or decompressed. This can be a string, a buffer,",
            "\t\tor a stream. }",
            "\tDecompress, { Required. A Boolean value. If set to true (non-zero),",
            "\t\tthe data in the InputBuffer is decompressed. If set to false (zero),",
            "\t\tthe data in InputBuffer is compressed. }",
            "\tDeflateHandle, { Optional. A variable that holds an existing deflate",
            "\t\thandle or is to receive a new deflate handle (see the \"Comments\"",
            "\t\tsection for further details). }",
            "\tMaxDecompressedLength, { Optional. Specifies the maximum length of the",
            "\t\tdecompressed output (see the \"Comments\" section for further details).",
            "\t\t}",
            "\tFlushMode, { Optional. Indicates the type of flushing that the encoder",
            "\t\tshould use when processing the data. Values are FlushMode ZLib Value 0",
            "\t\tZ_NO_FLUSH 2 Z_SYNC_FLUSH 3 Z_FULL_FLUSH 4 Z_FINISH Effective use of",
            "\t\tthis parameter requires an understanding of the ZLib library (",
            "\t\twww.gzip.org/zlib ). The default value is Z_SYNC_FLUSH which is",
            "\t\tappropriate for continuous, stream mode type operations. For a single",
            "\t\tencoding, as in a file or a web page, then Z_FINISH is likely to be",
            "\t\tmore appropriate. It is not normally necessary to specify a flush",
            "\t\tvalue for decompress but, if one is specified, it will be used. }",
            "\t0, { 2 }",
            "\t3 { 4 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DeleteAccount": {
        "comments": [
            "{ Description: Removes an account. }",
            "{ To use this API, the calling code must be running in a security",
            "\tsession that has Manager privilege. Deleting an account is an",
            "\tasynchronous operation. If the asynchronous operation was not",
            "\tattempted, due to detection of an error, the return value will be",
            "\tInvalid. If the asynchronous operation is attempted, the return value",
            "\twill be an object value. The object value will become Invalid when the",
            "\tasynchronous operation completes. At that time (or when the method",
            "\treturns Invalid), the value addressed by PtrReturnCode can be examined",
            "\tto determine the status of the operation. The contents of the value",
            "\taddressed by PtrReturnCode is undefined until the method returns",
            "\tInvalid. A single account can be deleted by supplying a single",
            "\tAccountData structure in NewAccountData. Multiple accounts can be",
            "\tdeleted in one operation by providing a single dimension array or",
            "\tdictionary of AccountData structures in NewAccountData. The result",
            "\tcode returned in the value addressed by PtrReturnCode will be a scalar",
            "\tvalue if a single structure was supplied in NewAccountData. If an",
            "\tarray of structures or a dictionary of structures was supplied, a",
            "\tsingle dimension array of the same size as NewAccountData will be",
            "\treturned in the value addressed by PtrReturnCode, each element",
            "\tcontaining the result code for the corresponding NewAccountData",
            "\telement. Deleting an account requires a working copy write lock. If",
            "\tsuch a lock is held by the calling code, the HaveLock parameter must",
            "\tbe set to TRUE. Otherwise omit this parameter or set it to FALSE. If",
            "\tthe calling code holds a read lock on the working copy, this must be",
            "\treleased before DeleteAccount can complete its operation. The",
            "\tAccountData structure(s) provided must have the AccountID member set",
            "\tto an existing account ID. All other members are ignored. }"
        ],
        "snippets": [
            "\\SecurityManager\\DeleteAccount(",
            "\tNewAccountData, { Required. An AccountData structure, a single",
            "\t\tdimension array of AccountData structures or a dictionary of",
            "\t\tAccountData structures identifying the account(s) to delete. }",
            "\tPtrReturnCode, { Optional. A pointer to a value that will contain one",
            "\t\tof the defined result codes at the conclusion of the operation. }",
            "\tHaveLock { Optional. A Boolean value that indicates whether the",
            "\t\tworking copy lock is held by the calling code. Default FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DeleteArrayItem": {
        "comments": [
            "{ Description: Deletes an element from a single-dimension,",
            "\tdynamically-allocated array and returns the modified array. }",
            "{ This function supersedes the System Library's DeleteListItem. This",
            "\tfunction is intended for use on dynamically allocated arrays; that is,",
            "\tarrays that have been created via the New function. If used with an",
            "\tarray that has been statically declared, unless otherwise specified in",
            "\tthe Array parameter, the first element of the array will be used. If",
            "\tthis element contains a dynamically allocated array, the deletion of",
            "\tthe specified element will be performed on this array. }"
        ],
        "snippets": [
            "DeleteArrayItem(",
            "\tArray, { Required. Any array variable that has been created via a New",
            "\t\tfunction call. This should be a single dimension array or unexpected",
            "\t\tresults may occur. }",
            "\tIndex { Required. Any numeric expression giving the element in the",
            "\t\tarray to delete. If out of range, then the original array will be",
            "\t\treturned. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DeleteContributor": {
        "comments": [
            "{ Description: Removes a contributor from a container. }",
            "{ Used only when writing custom tags with code (as opposed to creating",
            "\tthem from Context tags). See: Containers, Contributors and Site Tags",
            "\tThis function can be called from the contributor. }"
        ],
        "snippets": [
            "\\DeleteContributor(",
            "\tHandleName, { Required. The name of the handle variable in the",
            "\t\tcontainer module. }",
            "\tArrayName, { Required. The name of the variable in the ContainerObj",
            "\t\tthat holds an array of values from which to delete the contributor.",
            "\t\tThis parameter may be invalid if there is no such array in the",
            "\t\tcontainer. }",
            "\tCountName, { Required. The name of the variable in the ContainerObj",
            "\t\tthat holds a count of the current number of this type of contributor.",
            "\t\tThis parameter may be invalid if no such variable exists in the",
            "\t\tContainerObj. Not all contributors need to be counted. The",
            "\t\tCountIncrement determines the initial change in the count and the",
            "\t\tcontributor must maintain the count. }",
            "\tContainerObj, { Required. The object value of the container tag",
            "\t\tmodule. }",
            "\tContributorObj, { Required. The object value of the contributor to",
            "\t\tdelete. }",
            "\tCountIncrement { Required. This value will be subtracted from the",
            "\t\tvariable in the container that has the name of CountName. This value",
            "\t\tis usually a \"1\" or a \"0\", indicating whether the contributor is",
            "\t\tactively contributing its value now. The contributor will increment or",
            "\t\tdecrement the value of the CountName variable as the corresponding",
            "\t\tstate of the contributor changes. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DeleteModule": {
        "comments": [
            "{ Description: Deletes a module from the system. }"
        ],
        "snippets": [
            "DeleteModule(",
            "\tModule, { Required. Any expression that gives the module value of the",
            "\t\tmodule to delete. }",
            "\tIgnoreSource { If true, the function will not modify any source file.",
            "\t\tAlso, will not check that .SRC and .RUN files are in sync and",
            "\t\ttherefore will not return a value of 3. Defaults to FALSE if invalid",
            "\t\tor not specified. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DeleteOptional": {
        "comments": [
            "{ Description: Deletes a statement from an action script. }",
            "{ Seldom (if ever) used when adding features to modern VTScada",
            "\tapplications. The corresponding text for the deleted statement is",
            "\tremoved from the document file. This statement is disabled in the run",
            "\ttime version of VTScada. It will do nothing. }"
        ],
        "snippets": [
            "DeleteOptional(",
            "\tAction, { Required. Any expression that gives the VTScada Value Types",
            "\t\tof the action. }",
            "\tPosition { Required. Any numeric expression giving the statement",
            "\t\tnumber in the script to delete, beginning with 1. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DeletePrivFromUser": {
        "comments": [
            "{ Description: Removes a privilege from the specified username. }",
            "{ May only be called from a user-context that has the Manager",
            "\tprivilege. The return value of the function is the object value of the",
            "\tlaunched worker module. This will be set to Invalid when the operation",
            "\thas completed and may be used to discover when that occurs. Use of",
            "\tthis function requires an understanding of the VTScada security system",
            "\tand the general privileges. Please refer to System Privileges in the",
            "\tchapter Security Manager Service. }"
        ],
        "snippets": [
            "\\SecurityManager\\DeletePrivFromUser(",
            "\tPtrReturnCode, { Required. A pointer to a variable that will be used",
            "\t\tfor the return code. PtrReturnCode Meaning 1 Privilege deleted. 2",
            "\t\tDenied. The calling context does not have the Manager general",
            "\t\tprivilege. 3 The privilege is not valid - no action taken. 4 The",
            "\t\tspecified user does not exist - no action taken. 6 The application",
            "\t\tcannot be edited. }",
            "\t1, { 2 }",
            "\t3, { 4 }",
            "\t6",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DeleteState": {
        "comments": [
            "{ Description: Exists only for backward compatibility. Deletes a state",
            "\tfrom a module. }",
            "{ The corresponding text for the deleted state is removed from the",
            "\tdocument file. }"
        ],
        "snippets": [
            "DeleteState(",
            "\tState { Required. Any expression that gives the code value of the",
            "\t\tstate. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DeleteStatement": {
        "comments": [
            "{ Description: Deletes a statement from a state. }",
            "{ Seldom (if ever) used when adding features to modern VTScada",
            "\tapplications. The corresponding text for the deleted statement is",
            "\tremoved from the document file. This statement is disabled in the run",
            "\ttime version of VTScada. It will do nothing. }"
        ],
        "snippets": [
            "DeleteStatement(",
            "\tStatement { Required. Any expression that gives the code value of the",
            "\t\tstatement. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DeleteUser": {
        "comments": [
            "{ Description: Removes a specified user name from the system. }",
            "{ May only be called from a user-context that has the Manager general",
            "\tprivilege. The return value of the function is the object value of the",
            "\tlaunched worker module. This will be set to Invalid when the operation",
            "\thas completed and may be used to discover when that occurs. Use of",
            "\tthis function requires an understanding of the VTScada security system",
            "\tand the general privileges. Please refer to System Privileges in the",
            "\tchapter Security Manager Service. }"
        ],
        "snippets": [
            "\\SecurityManager\\DeleteUser(",
            "\tPtrReturnCode, { Required. A pointer to a variable that will be used",
            "\t\tfor the return code. PtrReturnCode Meaning 0 User does not exist. No",
            "\t\taction taken. 1 User deleted. 2 Denied. The calling context does not",
            "\t\thave the Manager general privilege. 6 The application cannot be",
            "\t\tedited. }",
            "\t0, { 1 }",
            "\t2 { 6 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DeleteVariable": {
        "comments": [
            "{ Description: Deletes a variable from a module. }",
            "{ Seldom (if ever) used when adding features to modern VTScada",
            "\tapplications. If IgnoreSource is FALSE or not provided then the",
            "\tcorresponding text for the deleted variable is removed from the source",
            "\tfile. However, this is only true if the variable is not a temporary",
            "\tvariable, and only if the files are in sync. DeleteVariable will fail",
            "\tif there are any references to the variable to be deleted. }"
        ],
        "snippets": [
            "DeleteVariable(",
            "\tVariable, { Required. Any expression that gives the variable value to",
            "\t\tdelete. }",
            "\tIgnoreSource { An optional Boolean expression. If true, the function",
            "\t\twill ignore out-of-sync source files and not attempt to make any",
            "\t\tsource file changes. The result is convenient deletion of",
            "\t\tnon-temporary variables without having the function modify the",
            "\t\tcorresponding source code. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DelPageFromApp": {
        "comments": [
            "{ Description: Deletes a system page from an application. }",
            "{ Seldom (if ever) used when adding features to modern VTScada",
            "\tapplications. In versions of VTS prior to 8.1, this subroutine was a",
            "\tpart of the page manager and therefore was called using the format",
            "\t\\PageManager\\DelPageFromApp(â¦). With version 8.1, the page manager is",
            "\tno longer a part of VTScada and the function can simply be called",
            "\tusing \\DelPageFromApp() as shown in the \"Format\" section above. }"
        ],
        "snippets": [
            "\\DelPageFromApp(",
            "\tPageName { Required. The text name of the page to delete. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DelRead": {
        "comments": [
            "{ Description: Is called by a tag to delete an existing read request,",
            "\tas created by an AddRead. }",
            "{ DelRead() can only delete a single item. The module searches",
            "\tReadList (a linked list of ReadBlocks) for the node whose info vars",
            "\tmatch those of the item to be deleted. It then looks for the matching",
            "\trate, then the specific request as identified by Value (the address of",
            "\tthe tag's RawValue) and removes it from the list. }"
        ],
        "snippets": [
            "VTSDriver.DelRead(",
            "\tAddress, { Required. The address from which to get the data. }",
            "\tValue, { Required. A pointer to the destination for the read data. }",
            "\tRate, { Required. The update rate in seconds. }",
            "\tOriginalAddress { Original Address string from I/O tag. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DenyTokenRequest": {
        "comments": [
            "{ Description: Denies a control token request }",
            "{ Denying a pending token request removes it from the Token Request",
            "\tlist. }"
        ],
        "snippets": [
            "ControlTokenManager.DenyTokenRequest(",
            "\tTagID, { Required string. The UniqueID of the tag for which the token",
            "\t\trequest is to be denied. }",
            "\tTokenRequestRecord, { Required. The record of the token request to",
            "\t\tdeny. }",
            "\tCustom, { Optional. A structure of custom fields to log }",
            "\tTimestamp, { Optional The UTC timestamp of this event. Defaults to",
            "\t\tcurrent time }",
            "\tSessionID, { Optional. The ID of session denying the request. }",
            "\tAccountID, { Optional. The Account ID of user denying the request.",
            "\t\tDefaults to the currently signed-in user. }",
            "\tMachineID, { Optional. The MachineIDof the workstation where this",
            "\t\taction originated. Defaults to the current machine. }",
            "\tDevice { Optional. Name of client device }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Deriv": {
        "comments": [
            "{ Description: Returns the derivative (rate of change) of a value. }",
            "{ This function takes the change in the Value parameter between two",
            "\tsuccessive evaluations and divides by the elapsed time interval",
            "\tbetween these evaluations. If the Value changes from invalid to valid,",
            "\tit will take two evaluations before the function's result becomes",
            "\tvalid. This function is the inverse of Intgr. The time parameter is",
            "\tnecessary because of VTScada's evaluation method of not doing any",
            "\tcalculations unless necessitated by a change in a parameter. This",
            "\tmeans that if the Value remains unchanged, the Deriv function will be",
            "\trecalculated after the time interval specified by the Time parameter",
            "\tand return 0. This function is often used in control functions such as",
            "\tPID loops where it makes up the \"D\" in the \"PID\". This function does",
            "\tcalculations with double-precision floating point values and does not",
            "\tsupport 64-bit integers computations. }"
        ],
        "snippets": [
            "Deriv(",
            "\tValue, { Required. Normally, the name of a variable holding a numeric",
            "\t\tvalue for which the derivative will be taken. }",
            "\tTime { Required. Any numeric expression giving the time in seconds",
            "\t\tbetween derivative function updates. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "DeriveKey": {
        "comments": [
            "{ Description: Generates a cryptographic session key from a seed",
            "\tvalue. }",
            "{ DeriveKey guarantees that when the same CSP and algorithms are used,",
            "\tthe keys generated from the same seed are identical. The base data can",
            "\tbe a password or any other user data. A handle to the key or key pair",
            "\tis returned. This handle can then be used as needed with any Crypto",
            "\tAPI function requiring a key handle. It is the VTScada analog of the",
            "\tCrypto API CryptDeriveKey call. The return value for this function is",
            "\ta handle to the Key. If an error occurs, then the return value is",
            "\tInvalid. A key has a value type of 37. If cast to text, then the",
            "\thexadecimal value of the algorithm ID will be returned. Does not",
            "\tsupport CNG (Cryptography New Generation). }"
        ],
        "snippets": [
            "DeriveKey(",
            "\tCSPHandle, { Required. The handle of a CSP critical security parameter",
            "\t\tto use to generate the key. }",
            "\tAlgID, { Required. Identifies the algorithm for which the key is to be",
            "\t\tgenerated. Values for this parameter vary depending on the CSP used,",
            "\t\tand are defined in WinCrypt.h }",
            "\tSeed, { Required. A text string to use as a seed. }",
            "\tFlags, { Optional. Specifies the flags to be passed to CryptGenKey. If",
            "\t\tomitted or invalid, then the value \"0\" is used. }",
            "\tError, { Optional. A variable in which the error code for the function",
            "\t\tis returned. The error codes are as follows Error Meaning 0 Key",
            "\t\tsuccessfully generated 1 CSPHandle or AlgID parameters invalid X Any",
            "\t\tother value is an error from CryptGenKey. }",
            "\t0, { 1 }",
            "\tX",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DialogInitPos": {
        "comments": [
            "{ Description: Attempts to position a dialog so that it is not started",
            "\tbeyond the left, right, top, or bottom of the visible screen. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ XPosPtr and YPosPtr are absolute coordinate",
            "\tpositions of the Windows desktop. XOffset and YOffset are suggested to",
            "\tbe used for calculating the new coordinates for the top left corner,",
            "\tand are relative to the current monitor. If they are left invalid,",
            "\tthey will be calculated to attempt to center the window on the current",
            "\tmonitor. Width and Height are used to help center the window on the",
            "\tcurrent monitor. If they are invalid, they are assumed to be one third",
            "\tthe size of the current monitor. AllowVirtualDisplay - This setting",
            "\tcan be added to SETUP.INI and set to 1 in order to force the",
            "\tDialogInitPos constraint rectangle to be the entire virtual display,",
            "\ti.e. the Windows desktop. Calling this function before starting a",
            "\tWindow() call will reposition a dialog's starting position so it will",
            "\tnot be drawn entirely off-screen. This is only necessary if the",
            "\tdialog's X- or Y-coordinates are retained. The width and height of the",
            "\tdialog are optional. If provided, the dialog will be prevented from",
            "\tbeing drawn partially beyond the bottom/right edge of the screen.",
            "\tOtherwise only the top/left corner of the dialog will be guaranteed to",
            "\tbe drawn on-screen. There is no return value. }"
        ],
        "snippets": [
            "System.DialogInitPos(",
            "\tXPosPtr, { Required. A pointer to the dialog's X-position. The",
            "\t\tX-position will be modified by this function if the dialog is beyond",
            "\t\tthe left or right edge of the screen. }",
            "\tYPosPtr, { Required. A pointer to the dialog's Y-position variable.",
            "\t\tThe Y-position will be modified by this function if the dialog is",
            "\t\tbeyond the top or bottom edge of the screen. }",
            "\tXOffset, { Optional. Any numeric expression giving the default",
            "\t\tX-position to use if the value of the XPosPtr is Invalid. It is also",
            "\t\tthe X-position that will be used if the dialog is beyond the right",
            "\t\tedge of the screen and Width is Invalid. Default is 0. }",
            "\tYOffset, { Optional. Any numeric expression giving the default",
            "\t\tY-position to use if the value of the YPosPtr is Invalid. It is also",
            "\t\tthe Y-position that will be used if the dialog is beyond the bottom",
            "\t\tedge of the screen and Height is Invalid. Default is 0. }",
            "\tWidth, { Optional. Any numeric expression giving the width of the",
            "\t\tdialog. }",
            "\tHeight, { Optional. Any numeric expression giving the height of the",
            "\t\tdialog. }",
            "\tSuppressCentering, { Optional Boolean. If TRUE, this function won't",
            "\t\tcenter off-screen windows, instead shifting windows on-screen. Note",
            "\t\tthat when this is true and *pXPosition and *pYPosition are valid, then",
            "\t\tXOffset and YOffset are not used because VTScada will always shift the",
            "\t\tpositions given in the pointers on-screen rather than falling back on",
            "\t\tXOffset/YOffset. }",
            "\tWinOptions, { Optional structure, defined as follows: Struct [",
            "\t\tBorderWidth { Width of left or right border (each), if any };",
            "\t\tBorderHeight { Height of top or bottom border (each) , if any};",
            "\t\tTitleBarHeight { Height of titlebar (not including top BorderHeight),",
            "\t\tif any }; ]; Defaults to a window with a titlebar and thick borders }",
            "\tRefWindow { Optional Window object. If provided, and if the values of",
            "\t\tpXPosition and pYPosition are not preset or would cause the dialog to",
            "\t\tappear outside of the screen, the module will try to center the dialog",
            "\t\tto this window instead of the screen. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Dictionary": {
        "comments": [
            "{ Description: Creates a database-like storage structure that provides",
            "\tefficient addition, retrieval and removal of information linked to key",
            "\tvalues. Keys can be any data type although integers and strings are",
            "\trecommended. Values can be any data type including another dictionary.",
            "\t}"
        ],
        "snippets": [
            "Dictionary(",
            "\tCaseInsensitive, { Optional. A Boolean indicating whether the keys in",
            "\t\tthe dictionary are to be case sensitive. TRUE == Not Case Sensitive",
            "\t\t(default) FALSE == Case Sensitive }",
            "\tRootValue { Optional text value, almost never used. Numeric values",
            "\t\twill be cast to text. If not provided, the dictionary will have no",
            "\t\troot value. (default: Invalid) In practice, root values are only ever",
            "\t\tassigned to dictionaries to create nested dictionaries. If the script",
            "\t\tcannot find a specific key in a dictionary it will then search the",
            "\t\tnested dictionary. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DictionaryCopy": {
        "comments": [
            "{ Description: Create a new dictionary with contents identical to an",
            "\texisting dictionary. It is expected that this function will be used",
            "\trarely, since in most cases it will be more efficient to hand off a",
            "\treference to a dictionary rather than build a duplicate of it. In the",
            "\tcase of a complex dictionary that contains other dictionaries within",
            "\tit, the optional Boolean parameter, deep, controls whether the copy",
            "\tshould also contain the sub dictionaries, as does the original, or if",
            "\tit should contain copies of those dictionaries. }"
        ],
        "snippets": [
            "NewDictionary = DictionaryCopy(",
            "\tDictionary, { Required. The name of the dictionary. }",
            "\tDeep, { Optional. A Boolean that causes all linked dictionaries, if",
            "\t\tany, to be copied as well. Defaults to FALSE }",
            "\tAcyclic, { Optional. A Boolean indicating that cyclic links within the",
            "\t\tdictionary structure should not be included in the copy. Defaults to",
            "\t\tFALSE }",
            "\tLock { Optional. A Boolean indicating that the contents of the",
            "\t\tdictionary copy are to be constant. Defaults to FALSE }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DictionaryRemove": {
        "comments": [
            "{ Description: Removes a key / value pair from a dictionary, providing",
            "\ta means to regain memory space and remove data that is no longer",
            "\tneeded. }"
        ],
        "snippets": [
            "DictionaryRemove(",
            "\tDictionary, { Required. The name of the dictionary. }",
            "\tKey { Required. The name of the key to be removed. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Diff": {
        "comments": [
            "{ Description: Compares two buffers and generates a third buffer",
            "\tcontaining formatted instructions describing how the first buffer can",
            "\tbe modified so that it will match the second. This will perform a",
            "\tdelimited difference unless the ChunkSize parameter is set to 1 or",
            "\tgreater. }",
            "{ This function will return Invalid on failure. Otherwise, the return",
            "\tvalue is a buffer of zero or more binary records. Each record will",
            "\tconsist of at least two 32-bit words, containing instructions in the",
            "\tfollowing form: The highest bit of the first word indicates whether",
            "\tthis is a delete instruction or an add instruction. 0 means \"delete\"",
            "\twhile 1 means \"add\". The remaining 31 bits of the first word (taken as",
            "\ta 31-bit unsigned integer) contain the number of bits to be affected",
            "\tby this operation. The second word, taken as a 32-bit unsigned",
            "\tinteger, indicates the offset of the operation. That is the location",
            "\tof the bytes affected. If the operation is to add bytes, there will be",
            "\ta binary string following the second word. These are the bytes to be",
            "\tadded at the specified location. Because the diff function uses a",
            "\tsearching algorithm, and in particular an incomplete search (that is",
            "\tit tries to find a solution without exploring all of the",
            "\tpossibilities), it will at any time only have a partial collection of",
            "\tall the possible solutions to the problem. Each solution is defined as",
            "\ta set of instructions that modify the source buffer, and each of these",
            "\tsets requires a different number of instructions to convert a",
            "\tdifferent region of that buffer. The \"best set\" is the one that",
            "\tconverts the largest portion of the buffer while requiring the fewest",
            "\tchanges to it, selected from the solutions that have been discovered",
            "\tso far. The optimization works by eliminating solutions which appear",
            "\tto be so much worse than the current best set that they are unlikely",
            "\tto recover, as judged by how many more changes they require to convert",
            "\ta similar region. The problem is that a solution which works poorly in",
            "\tone region may perform much better in the others, so the optimization",
            "\tmay cause the \"real\" best set (the one that's optimal for the entire",
            "\tbuffer) to be overlooked. The return value will be an empty buffer if",
            "\tBuffer1 and Buffer2 are identical. }"
        ],
        "snippets": [
            "Diff(",
            "\tResultBuffer, { Required. Any expression that resolves to the variable",
            "\t\tto be set to the output buffer. This buffer is created asynchronously",
            "\t\tand should be checked for valid data before use. The content of this",
            "\t\tbuffer will be an instruction set for transforming the contents of",
            "\t\tBuffer1 into a duplicate of the contents of Buffer2. A detailed",
            "\t\tdescription of this instruction set is provided in the Comments",
            "\t\tsection. }",
            "\tCompletion Counter, { Required. Any expression that resolves to a",
            "\t\tvariable containing a numeric value or Invalid. If a numeric variable,",
            "\t\tthe value will be incremented at the instant that Diff is called. It",
            "\t\twill then be decremented after the Result Buffer has been populated.",
            "\t\tThe same variable can be used to monitor any number of simultaneous,",
            "\t\tasynchronous Diff operations. If this parameter is set to Invalid then",
            "\t\tthe Diff operation will be performed synchronously. The function won't",
            "\t\treturn until the Result Buffer is populated. }",
            "\tBuffer1, { Required. Any expression that returns the first buffer.",
            "\t\tThis is the buffer that is intended to be modified by the instructions",
            "\t\treturned. }",
            "\tBuffer2, { Required. Any expression for the second buffer. This is the",
            "\t\tbuffer that the first buffer would resemble were the returned",
            "\t\tinstructions applied. }",
            "\tDelimiter, { Optional. The bytes used to delimit lines in text buffers",
            "\t\t(or records in any sort of delimited buffer). Multiple delimiters can",
            "\t\tbe specified by passing an array of text strings. If not otherwise",
            "\t\tspecified, the default is an array containing typical text file line",
            "\t\tendings (newline, carriage return or a combination of the two",
            "\t\tcharacters in either order). Can accept either a single string or an",
            "\t\tarray of strings }",
            "\tChunkSize, { Optional. The number of bytes to compare as a unit in a",
            "\t\tbinary buffer. Must be set to 1 or greater to enable a binary diff (a",
            "\t\tdelimited diff is performed by default). Unless the contents of the",
            "\t\tbuffers are guaranteed to align to a given number of bytes it is",
            "\t\trecommended that this be set to 1 to enable binary diffs. Defaults to",
            "\t\t0. }",
            "\tClipLength, { Optional. This numeric value is an optimization. It",
            "\t\tindicates how long a string of matches (i.e. both buffers having",
            "\t\tidentical contents) will become before the function decides that it",
            "\t\thas found an optimal instruction set and will discard competing sets.",
            "\t\tIf Diff returns sub-optimal instructions you should increase this",
            "\t\tvalue. Lower values will reduce the execution time of the function at",
            "\t\tthe cost of the quality of the output. Higher values increase output",
            "\t\tquality but decrease speed. Sub-optimal instruction sets will result",
            "\t\tif strings of matches having the given length can occur randomly",
            "\t\twithin the two buffers. Defaults to 20. }",
            "\tEdgeLength, { Optional. Another numeric optimization, best set to",
            "\t\ttwice the ClipLength. Causes the elimination of instruction sets that",
            "\t\tare estimated to require at least EdgeLength more instructions than",
            "\t\tthe best set at any point during the search. Sub-optimal instruction",
            "\t\tsets will result if the estimate is inaccurate by an amount greater",
            "\t\tthan this value. Lower EdgeLength values will reduce the execution",
            "\t\ttime of the function at the cost of the quality of the output. Higher",
            "\t\tvalues will increase output quality but decrease speed. Defaults to",
            "\t\t40. }",
            "\tMaxVariance, { Optional. Sets a maximum variance, as measured by the",
            "\t\tnumber of items changes in the same way. If the DIFF strays from an",
            "\t\texact match by MaxVariance by a given number of data adds or deletes,",
            "\t\texecution will stop. A mixture of adds and deletes will cancel each",
            "\t\tother out. When set to a value smaller than the default, files with",
            "\t\tlots of small modified areas will pass while files with a single",
            "\t\tmodification, larger than this variance, will fail. Defaults to",
            "\t\t1,000,000. }",
            "\tPointCap { Optional. Sets a cap on the number of points that will be",
            "\t\tsearched within the buffers. In effect, this value serves to cause a",
            "\t\ttimeout when comparing extremely large buffers that are almost",
            "\t\tcompletely different. Defaults to 1,000,000,000. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Dir": {
        "comments": [
            "{ Description: Performs a search in the given directory and returns an",
            "\tarray of matching file names. }",
            "{ This function returns an array of text values, where each element",
            "\tcontains the information specified by Option for each file that",
            "\tmatches both Path and Attributes. If no files are found, the return",
            "\tvalue will be set to invalid. Notice that the only difference between",
            "\tthis function and the FileFind function is that FileFind searches down",
            "\tthrough the whole directory tree, while this function looks in the",
            "\timmediate directory only. If you are looking for a \"browse for folder\"",
            "\tdialog box, please refer to the FileDialogBox function. (See: Bitwise",
            "\tParameters & Operations ) }"
        ],
        "snippets": [
            "Dir(",
            "\tPath, { Required. Any text expression that indicates the full path",
            "\t\tname for the directory to list. The search is non-recursive (i.e. it",
            "\t\tconsiders only the specified directory, not any of its",
            "\t\tsub-directories). Path may include a wildcard, such as \"*.DAT\". A",
            "\t\tknown path alias for File-Related Functions may be provided in the",
            "\t\tform, :{KnownPathAlias}. }",
            "\tAttributes, { Required. Any numeric expression that gives the",
            "\t\tattributes to match on each file listed. Files that don't match these",
            "\t\tattributes won't be listed. The Attribute parameter may be set as one",
            "\t\tof the following: Attribute Bit No. Meaning 0 - Files without",
            "\t\tattributes 8 3 All files (regardless of attributes) ... or, it may be",
            "\t\tconstructed by adding together the numbers from the following table :",
            "\t\tAttribute Bit No. Meaning 1 0 Read only 2 1 Hidden 4 2 System 16 4",
            "\t\tSub-directory 32 5 Archive }",
            "\t0, { 8 }",
            "\t1, { 2 }",
            "\t4, { 16 }",
            "\t32",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DirectApply": {
        "comments": [
            "{ Description: Applies a set of changes directly to the repository,",
            "\twithout disturbing existing (non-conflicting) changes already on",
            "\teither branch. }",
            "{ This function uses a callback system to acquire a set of changes",
            "\tagainst the repository tip versions of a file or group of files (both",
            "\tthe local and deployed versions) and then applies those changes",
            "\tdirectly to the local and deployed repository tips without altering",
            "\tthe working copy. The changes are then applied to the working copy as",
            "\ta result of the repository update. The primary purpose of this",
            "\toperation is to allow changes to a file to be deployed without also",
            "\tdeploying any existing local changes to the same file. The local",
            "\tversion must also be updated such that the file is updated correctly",
            "\twhen the current local and deployed tips differ - otherwise conflicts",
            "\tcould result when the repository attempts to rationalize the two.",
            "\tDirectApply is used to distribute operation changes, notes, security",
            "\tinformation, and other data for which it is not appropriate that one",
            "\tmachine may be configured differently than its peers. It should not be",
            "\tused for normal configuration changes. To make all configuration",
            "\tchanges deploy immediately set the \"Automatically Deploy\" flag in the",
            "\tCM Information panel. The callback definition follows: Callback (",
            "\tDeployChangeSet { Set of deploy buffers, make changes to these };",
            "\tLocalChangeSet { Set of local buffers, make changes to these }; RSema",
            "\t{ Repo semaphore }; pComment { Comment pointer allowing late editing",
            "\t}; ) This module launches a worker module into the Layer so that the",
            "\toperation is not interrupted by this module's caller being slain. In",
            "\tthe case that the current machine is not supporting an open local",
            "\tbranch the LocalChangeSet callback parameter will be invalid. }"
        ],
        "snippets": [
            "LayerModule\\DirectApply(",
            "\tAlreadyHasLock, { Required Boolean. Set TRUE when we already have the",
            "\t\tworking copy lock. }",
            "\tRSema, { Required. Repository semaphore, if already held by the",
            "\t\tcaller. }",
            "\tCallBack, { Required. Module name of the caller performing the",
            "\t\tchanges. }",
            "\tFileSet, { The set of files to be changed, identified using a path",
            "\t\trelative to the working-copy. }",
            "\tUser, { The user ID that is to be applied to the change. }",
            "\tComment, { Any text value that is the comment to be stored in the",
            "\t\tversion log for this change. }",
            "\tpFail { A pointer to a Boolean. This will be set TRUE on failure. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Disable": {
        "comments": [
            "{ Description: Use AlarmManager\\EvaluateAlarm in all new code. Told",
            "\tthe Alarm Manager to disable an alarm. Disable will also clear any",
            "\tactive or unacknowledged state that might exist. }",
            "{ The Disable subroutine always returns \"0\". }"
        ],
        "snippets": [
            "\\AlarmManager\\Disable(",
            "\tAlarmObject, { Required. The object value for the alarm that was",
            "\t\tpassed to the Register subroutine that will be disabled. }",
            "\tEventTime { Optional. The time stamp to use when adding this event to",
            "\t\tthe alarm lists. If invalid or not defined, the default is",
            "\t\tCurrentTime(). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DisconnectFromMachine": {
        "comments": [
            "{ Description: This subroutine disconnects from a workstation by",
            "\tdecrementing the usage count on the specified workstation and forcing",
            "\tthe RPC Manager to attempt to establish a connection with the",
            "\tspecified workstation if it is not already connected. Subroutine call",
            "\tonly. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. When the usage count of the workstation reaches \"0\", the",
            "\tRPC Manager will not attempt to re-establish a connection to the",
            "\tworkstation after the current connection is lost. It is critical that",
            "\teach DisconnectFromMachine call should be paired with a",
            "\tConnectToMachine call. If the number of DisconnectFromMachine calls",
            "\texceeds the number of ConnectToMachine calls, the RPC Manager will not",
            "\tbehave as expected and connection with the remote workstation may be",
            "\timpeded. A negative value for the Srv value in the socket's entry in",
            "\tthe RPC Diagnostics Window may be an indication of a",
            "\tDisconnectFromMachine/ConnectToMachine mismatch. }"
        ],
        "snippets": [
            "\\RPCManager\\DisconnectFromMachine(",
            "\tWorkstation { Required. Any of the name or IPs that can be used to",
            "\t\tconnect to the workstation. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DLL": {
        "comments": [
            "{ Description: Returns a value of a type specified by its parameter",
            "\tfrom a call to Microsoft Windowsâ¢ dynamic link library using the C",
            "\tcalling convention. }",
            "{ This statement allows a wide variety of other routines and code to",
            "\tbe used in an application. (*) If a DLL function takes a parameter of",
            "\ttype 4 (buffer), then it should only read/write that buffer while the",
            "\tDLL's function is running - it should not store it for later. The",
            "\tpointer that gets passed into the DLL function points to a buffer that",
            "\tonly exists for the lifetime of the DLL function call. 64-bit VTScada",
            "\tcan load only 64-bit DLLs. 32-bit VTScada can load only 32-bit DLLs.",
            "\tVTScada Internet Clients (VICs) can load only 32-bit DLLs regardless",
            "\tof whether the VTScada server is 32-bit or 64-bit. }"
        ],
        "snippets": [
            "DLL(",
            "\tDLLName, { Required. Any text expression that gives the full path,",
            "\t\tfile name, and extension of the DLL to load, or the handle returned",
            "\t\tfrom a LoadDLL statement. }",
            "\tFuncName, { Required. Any text expression that gives the name of the",
            "\t\tfunction to call in the DLL. }",
            "\tReturnType, { Required. The return type of the DLL function, as shown",
            "\t\tin the following table ReturnType Attribute 0 Void (return value only)",
            "\t\t1 16-bit Integer 2 32-bit Integer 3 64-bit Double 4 Pointer to a",
            "\t\tbuffer (*) 5 HWnd value of VTScada Object 6 Reserved 7 64-bit Integer",
            "\t\t8 Pointer-width Integer* *The pointer-width integer is the size of a",
            "\t\tpointer in the host environment. Therefore, in 32-bit VTScada, it is a",
            "\t\t32-bit integer, and in 64-bit VTScada, it is a 64-bit integer. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DoLoop": {
        "comments": [
            "{ Description: Executes a do-while loop in a script. }",
            "{ The Function parameters are executed at least once, then Condition",
            "\tis checked. If Condition is true, the Function parameters are executed",
            "\tand Condition is executed again. This repeats until Condition is false",
            "\tor Invalid. }"
        ],
        "snippets": [
            "DoLoop(",
            "\tFunction1, Function2, â¦, { Required. Any expression or statement.",
            "\t\tThis is the body of the loop. All of the Function parameters are",
            "\t\texecuted in order prior to testing the Condition parameter. }",
            "\tCondition { Required. Any logical expression for the loop control. As",
            "\t\tlong as this is true, the loop will repeat. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "DoOperate": {
        "comments": [
            "{ Description: Used by tags that can be operated from the Tag Browser,",
            "\tthis displays an input dialog where users can enter the new value to",
            "\twrite. Should be overridden for use with tags other than those that",
            "\twrite analog, digital or string values. }",
            "{ For typical I/O tags that are operable, this will display a",
            "\tpredefined dialog containing a widget that is appropriate for the tag",
            "\tinstance. If the tag in question contains its own DoOperate()",
            "\tsubmodule, that will be called instead. }"
        ],
        "snippets": [
            "\\DoOperate(",
            "\tTagObj { Required object value. The tag to be examined. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "DragHandle": {
        "comments": [
            "{ Description: Drags a graphic object's selected handle. }"
        ],
        "snippets": [
            "DragHandle(",
            "\tObject, { Required. Any expression that gives the object value that",
            "\t\tdefines the selected graphic list to drag. }",
            "\tX, { Required. Any numeric expression that is the new X coordinate of",
            "\t\tthe selected handle(s). }",
            "\tY, { Required. Any numeric expression that is the new Y coordinate of",
            "\t\tthe selected handle(s). }",
            "\tKeepRatio { Required. Any logical expression. If true (non-zero), the",
            "\t\taspect ratio of the graphic will be preserved during stretching",
            "\t\t(online). If false (0), it will not. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "DrawArcPath": {
        "comments": [
            "{ Description: Draws an arc in any window. }",
            "{ This statement is intended for building drawing tools. The arc is",
            "\tdrawn in white and is exclusive OR'ed onto the screen. }"
        ],
        "snippets": [
            "DrawArcPath(",
            "\tLeft, { Required. Any numeric expression for the left side of the",
            "\t\tarc's bounding box. }",
            "\tBottom, { Required. Any numeric expression for the bottom side of the",
            "\t\tarc's bounding box. }",
            "\tRight, { Required. Any numeric expression for the right side of the",
            "\t\tarc's bounding box. }",
            "\tTop, { Required. Any numeric expression for the top side of the arc's",
            "\t\tbounding box. }",
            "\tRotateAngle, { Required. Any numeric expression for the angle of",
            "\t\trotation of the arc in degrees. This represents a rotation about the",
            "\t\tcenter of the bounding box. If it is greater than 0, the arc's shape",
            "\t\twill still be defined by the proportions of the bounding box, but will",
            "\t\tno longer be within its (un-rotated) screen coordinates. Note that",
            "\t\talthough the arc itself will rotate RotateAngle degrees, neither of",
            "\t\tthe endpoints for the lines defined by StartX, StartY, and EndX, EndY",
            "\t\twill be affected (i.e. the arc will not 'line up' with the angled",
            "\t\tlines). }",
            "\tObject, { Required. Any expression for the object value that defines",
            "\t\tthe window in which to draw the arc. }",
            "\tStartX, { Required. Any numeric expression for the X coordinate of an",
            "\t\tendpoint of a line that defines the starting angle. The other endpoint",
            "\t\tis the center of the arc's bounding box. }",
            "\tStartY, { Required. Any numeric expression for the Y coordinate of an",
            "\t\tendpoint of a line that defines the starting angle. The other endpoint",
            "\t\tis the center of the arc's bounding box. }",
            "\tEndX, { Required. Any numeric expression for the X coordinate of an",
            "\t\tendpoint of a line that defines the ending angle. The other endpoint",
            "\t\tis the center of the arc's bounding box. }",
            "\tEndY { Required. Any numeric expression for the Y coordinate of an",
            "\t\tendpoint of a line that defines the ending angle. The other endpoint",
            "\t\tis the center of the arc's bounding box. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "DrawChordPath": {
        "comments": [
            "{ Description: Draws a chord in any window. }",
            "{ This statement is intended for building drawing tools. The chord",
            "\tshape is drawn in white and is exclusive OR'ed onto the screen. The",
            "\tshape of the object is such that the angle defined by the two lines",
            "\tforms a flattened side to an ellipse (if the angle between the lines",
            "\tis less than 180 degrees), or a sliver that has been cut from the",
            "\tellipse (if the angle is greater than 180 degrees). }"
        ],
        "snippets": [
            "DrawChordPath(",
            "\tLeft, { Required. Any numeric expression for the left side of the",
            "\t\tbounding box. }",
            "\tBottom, { Required. Any numeric expression for the bottom side of the",
            "\t\tbounding box. }",
            "\tRight, { Required. Any numeric expression for the right side of the",
            "\t\tbounding box. }",
            "\tTop, { Required. Any numeric expression for the top side of the",
            "\t\tbounding box. }",
            "\tRotateAngle, { Required. Any numeric expression for the angle of",
            "\t\trotation of the chord in degrees. This represents a rotation about the",
            "\t\tcenter of the bounding box. If it is greater than 0, the chord's shape",
            "\t\twill still be defined by the proportions of the bounding box, but will",
            "\t\tno longer be within its (un-rotated) screen coordinates. Note that",
            "\t\talthough the chord itself will rotate RotateAngle degrees, neither of",
            "\t\tthe endpoints for the lines defined by StartX, StartY, and EndX, EndY",
            "\t\twill be affected (i.e. the chord will not 'line up' with the angled",
            "\t\tlines). }",
            "\tObject, { Required. Any expression for the object value that defines",
            "\t\tthe window in which to draw the chord. }",
            "\tStartX, { Required. Any numeric expression for the X coordinate of an",
            "\t\tendpoint of a line that defines the starting angle. The other endpoint",
            "\t\tis the center of the bounding box. }",
            "\tStartY, { Required. Any numeric expression for the Y coordinate of an",
            "\t\tendpoint of a line that defines the starting angle. The other endpoint",
            "\t\tis the center of the bounding box. }",
            "\tEndX, { Required. Any numeric expression for the X coordinate of an",
            "\t\tendpoint of a line that defines the ending angle. The other endpoint",
            "\t\tis the center of the bounding box. }",
            "\tEndY { Required. Any numeric expression for the Y coordinate of an",
            "\t\tendpoint of a line that defines the ending angle. The other endpoint",
            "\t\tis the center of the bounding box. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "DrawEllipticalPath": {
        "comments": [
            "{ Description: Draw an ellipse in any window. }",
            "{ This statement is intended for building drawing tools. The ellipse",
            "\tis drawn in white and is exclusive OR'ed onto the screen. }"
        ],
        "snippets": [
            "DrawEllipticalPath(",
            "\tLeft, { Required. Any numeric expression for the left side of the",
            "\t\tbounding box. }",
            "\tBottom, { Required. Any numeric expression for the bottom side of the",
            "\t\tbounding box. }",
            "\tRight, { Required. Any numeric expression for the right side of the",
            "\t\tbounding box. }",
            "\tTop, { Required. Any numeric expression for the top side of the",
            "\t\tbounding box. }",
            "\tRotateAngle, { Required. Any numeric expression for the angle of",
            "\t\trotation of the ellipse in degrees. This represents a rotation about",
            "\t\tthe center of the bounding box. If it is greater than 0, the ellipse's",
            "\t\tshape will still be defined by the proportions of the bounding box,",
            "\t\tbut will no longer be within its (un-rotated) screen coordinates. }",
            "\tObject { Required. Any expression for the object value that defines",
            "\t\tthe window in which to draw the ellipse. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "DrawPath": {
        "comments": [
            "{ Description: Draws a polygon in any window. }",
            "{ This statement is intended for building drawing tools. The polygon",
            "\tis drawn in white and is exclusive OR'ed onto the screen. Do not",
            "\tconfuse DrawPath with the function, PathDraw() }"
        ],
        "snippets": [
            "DrawPath(",
            "\tXArray, { Required. An array element expression. This array specifies",
            "\t\tthe X coordinates of the path to draw, beginning with the element",
            "\t\tspecified. }",
            "\tYArray, { Required. An array element expression. This array specifies",
            "\t\tthe Y coordinates of the path to draw, beginning with the element",
            "\t\tspecified. }",
            "\tN, { Required. Any numeric expression for the number of points (number",
            "\t\tof array elements) in the path. }",
            "\tObject { Required. Any expression for the object value that defines",
            "\t\tthe window. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "DrawPiePath": {
        "comments": [
            "{ Description: Draws a pie in any window. }",
            "{ This statement is intended for building drawing tools. The pie is",
            "\tdrawn in white and is exclusive OR'ed onto the screen. }"
        ],
        "snippets": [
            "DrawPiePath(",
            "\tLeft, { Required. Any numeric expression for the left side of the",
            "\t\tbounding box. }",
            "\tBottom, { Required. Any numeric expression for the bottom side of the",
            "\t\tbounding box. }",
            "\tRight, { Required. Any numeric expression for the right side of the",
            "\t\tbounding box. }",
            "\tTop, { Required. Any numeric expression for the top side of the",
            "\t\tbounding box. }",
            "\tRotateAngle, { Required. Any numeric expression for the angle of",
            "\t\trotation of the pie, in degrees. This represents a rotation about the",
            "\t\tcenter of the bounding box. If it is greater than 0, the pie's shape",
            "\t\twill still be defined by the proportions of the bounding box, but will",
            "\t\tno longer be within its (un-rotated) screen coordinates. Note that",
            "\t\talthough the pie itself will rotate RotateAngle degrees, neither of",
            "\t\tthe endpoints for the lines defined by StartX, StartY and EndX, EndY",
            "\t\twill be affected (i.e. the pie will not 'line up' with the angled",
            "\t\tlines). }",
            "\tObject, { Required. Any expression for the object value that defines",
            "\t\tthe window. }",
            "\tStartX, { Required. Any numeric expression for the X coordinate of an",
            "\t\tendpoint of a line that defines the starting angle. The other endpoint",
            "\t\tis the center of the bounding box. }",
            "\tStartY, { Required. Any numeric expression for the Y coordinate of an",
            "\t\tendpoint of a line that defines the starting angle. The other endpoint",
            "\t\tis the center of the bounding box. }",
            "\tEndX, { Required. Any numeric expression for the X coordinate of an",
            "\t\tendpoint of a line that defines the ending angle. The other endpoint",
            "\t\tis the center of the bounding box. }",
            "\tEndY { Required. Any numeric expression for the Y coordinate of an",
            "\t\tendpoint of a line that defines the ending angle. The other endpoint",
            "\t\tis the center of the bounding box. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "DrawScale": {
        "comments": [
            "{ Description: Will draw a scale (i.e. tick marks) for a linear or",
            "\tradial type meter. These marks are images (normally lines) indicating",
            "\tthe major and minor divisions of the entire scale. This function must",
            "\tbe called inside a GUITransform to work properly. }",
            "{ This function must be called from within a GUITransform statement in",
            "\torder for it to work correctly. The Tick Marks are scaled according to",
            "\tthe size of the transform and the RelativeSize parameter. }"
        ],
        "snippets": [
            "\\MeterParts\\DrawScale(",
            "\tMajorTickImage, { Required. The full path to an image file to use as a",
            "\t\tmajor tick mark. }",
            "\tMinorTickImage, { Required. The full path to an image file to use as a",
            "\t\tminor tick mark. }",
            "\tMajorDivisions, { Optional. The number of major divisions in the",
            "\t\tscale. The default is 1 major division. }",
            "\tMinorDivisions, { Optional. The number of Minor divisions between the",
            "\t\tmajor divisions in the scale. The default is 5 minor divisions. }",
            "\tRelativeSize, { Optional. The relative size of the tick marks. If set,",
            "\t\tthe tick marks will resize independently from the automatic sizing",
            "\t\tthat is done when you resize the transform. Typically the range for",
            "\t\tthis parameter is from 0 to 2, where 2 is double the default size and",
            "\t\t0.5 is half the default size. The default is 1 which is the native",
            "\t\tsize as scaled with the transform size. }",
            "\tLinearScale, { Optional. A flag that, when set to true causes a linear",
            "\t\tscale to be drawn. When set to false, a Radial scale will be created.",
            "\t\tThe default is true. }",
            "\tOrientation, { Optional. A flag that is relevant only when drawing a",
            "\t\tlinear type scale. When set to true the scale will be oriented",
            "\t\tvertically. When set to false, the scale will be oriented",
            "\t\thorizontally. The default is false. }",
            "\tMinAngle, { Optional. The angle for the starting position of a radial",
            "\t\ttype scale. 0 is defined as up or the 12 oâclock position. This",
            "\t\tparameter is relevant only when drawing a radial type scale. The",
            "\t\tdefault is 0. }",
            "\tMaxAngle, { Optional. The angle for the ending position of a Radial",
            "\t\ttype scale. . 0 is defined as up or the 12 oâclock position. This",
            "\t\tparameter is relevant only when drawing a radial type scale. The",
            "\t\tdefault is 90. }",
            "\tHue, { Optional. The Hue translation to perform on the tick mark",
            "\t\timage. The image must have color in it already to perform a hue",
            "\t\ttranslation. If there is no color to start with, then changing this",
            "\t\tvalue does nothing. You can add color by setting a value for the",
            "\t\tColorizeHue parameter, described later. The default is 0, indicating",
            "\t\tthat no hue translation is done and the indicator is in its native",
            "\t\tcolor. }",
            "\tSaturation, { Optional. The amount of saturation of the colors in the",
            "\t\ttick mark image. A value of 0 will make the image black and white (no",
            "\t\tcolor saturation). A value of 2 produces a brightly colored",
            "\t\t(saturated) indicator. The default is 1 which corresponds to the",
            "\t\tnative saturation of the indicator image. }",
            "\tBrightness, { Optional. An adjustment of the brightness of the tick",
            "\t\tmark image. Higher numbers produce a brighter image. A 0 produces a",
            "\t\tblack image. The default is 1 which corresponds to the native",
            "\t\tbrightness of the tick mark image. }",
            "\tTransparency, { Optional. An adjustment of the opacity of the tick",
            "\t\tmark image where 1 means 100% opacity and 0 means %100 transparent.",
            "\t\tThe default is 1. }",
            "\tContrast, { Optional. An adjustment of the contrast of the colors in",
            "\t\tthe tick mark image. A value of 0 produces a flat looking image and a",
            "\t\tvalue of 2 gives a high contrast image. The default is 1 which",
            "\t\tcorresponds to the native contrast of the image. }",
            "\tColorizeHue, { Optional. A value that works in conjunction with",
            "\t\tColorizeIntensity. This is the hue of the color that is introduced by",
            "\t\tcolorizing an image. Colorizing an image will introduce color into an",
            "\t\timage that previously was black and white or grayscale. The default",
            "\t\tvalue is 0. }",
            "\tColorizeIntensity { Optional. A value to define how much color to",
            "\t\tintroduce into the image. The default is 0, meaning not to introduce",
            "\t\tany color at all into the image. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "DriveInfo": {
        "comments": [
            "{ Description: Returns information about a disk drive. }"
        ],
        "snippets": [
            "DriveInfo(",
            "\tAttributes, { Required. Any numeric expression which gives the",
            "\t\tattributes to match for each drive. Drives that don't match these",
            "\t\tattributes won't be listed. The Attributes parameter is constructed by",
            "\t\tadding together the numbers from the table below (See: Bitwise",
            "\t\tParameters & Operations ) Attribute Bit No. Drive Type 1 0 Removable",
            "\t\tdrive (floppy disk) 2 1 Fixed drive (hard disk) 4 2 Remote drive",
            "\t\t(network disk) 8 3 CD-ROM drive }",
            "\t1, { 2 }",
            "\t4 { 8 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Droplist": {
        "comments": [
            "{ Description: Draws a droplist with (optional) title or bevel or",
            "\tboth. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ The height of the (unopened) droplist is constant,",
            "\twith X1 and X2 defining its width, and Y1 and Y2 defining its opened",
            "\theight, which may or may not include the added height of a title and",
            "\tbevel, depending on the alignment used and if they exist. Note that if",
            "\tthe entire list can be displayed in a smaller area than indicated by",
            "\tY1 and Y2, the dropped list height will be decreased accordingly.",
            "\tDroplist enforces a minimum dropped list size of four rows, unless the",
            "\tlist is smaller in size. Droplist may not be wrapped in a",
            "\tGUITransform. }"
        ],
        "snippets": [
            "System.DropList(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the droplist. }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the (opened) droplist. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the droplist opposite to X1. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of the top or bottom of the (opened) droplist, whichever is the",
            "\t\topposite to Y1. }",
            "\tData, { Required. An array of data to display in the droplist. }",
            "\tTitle, { Required. Any text expression to be used as a title for the",
            "\t\tdroplist. }",
            "\tIndex, { Required. A variable whose value indicates the array index of",
            "\t\tthe highlighted item in the list. Index can be set invalid to reset",
            "\t\tthe droplist. }",
            "\tFocusID, { Required. Any numeric expression from 0 to 32767 for the",
            "\t\tfocus number of this graphic. If this value is 0, the droplist will",
            "\t\tdisplay its current setting, but will not be able to be opened (i.e.",
            "\t\tits value cannot be changed) and will appear grayed out. The default",
            "\t\tvalue is 1. }",
            "\tTrigger, { Required. If the droplist is editable, Trigger provides",
            "\t\tfeedback. While editing, the value will be 0. When editing is complete",
            "\t\t(tab, enter or loss of focus) the value will change to non-zero; 1 if",
            "\t\tenter is pressed, 2 otherwise. If this information is not required and",
            "\t\tthe next parameter is used, a value of invalid or a constant may be",
            "\t\tsubstituted. }",
            "\tNoEdit, { Required. Any logical expression. If TRUE (non-0) the text",
            "\t\tdisplayed in the droplist cannot be edited directly, if FALSE (0) it",
            "\t\tcan be edited in the same manner as an editfield. Options of the Style",
            "\t\tparameter may conflict with this parameter, if configured. In this",
            "\t\tcase, the Style parameter will be used and the NoEdit parameter will",
            "\t\tbe ignored. If a variable is used to specify the NoEdit parameter",
            "\t\tvalue and this variable is set to invalid, NoEdit will default to",
            "\t\tTRUE. If Invalid is used directly as the value of the NoEdit",
            "\t\tparameter, NoEdit will default to FALSE. }",
            "\tInit, { Required. Any expression for the initial value displayed in",
            "\t\tthe field if Index is set to invalid. If NoEdit is true, then Init",
            "\t\tmust be an element of the data array. }",
            "\tVariable, { Required. The variable whose value is set by the droplist.",
            "\t\tThe maximum number of characters that a user can provide is 65535. }",
            "\tDrawBevel, { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0) a bevel is drawn around the droplist, if false (0) no",
            "\t\tbevel is drawn. The default value is false. }",
            "\tVertAlign, { An optional parameter that is any numeric expression that",
            "\t\tsets the vertical alignment of the editfield according to one of the",
            "\t\tfollowing options VertAlign Vertical Alignment 0 Top 1 Center 2 Bottom",
            "\t\tWhether the title is included when the vertical alignment is",
            "\t\tcalculated is determined by the value of AlignTitle. The default value",
            "\t\tis 0. }",
            "\t0, { 1 }",
            "\t2",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "DropTree": {
        "comments": [
            "{ Description: Draws a control similar to a Droplist, but rather than",
            "\ta flat list, a tree of possible selections is displayed. }",
            "{ This function allows the use of disabled options - grayed in",
            "\tappearance and unselectable. The following set of helper functions is",
            "\tavailable. These may be added to the caller of DropTree to add special",
            "\thandling of certain events. OnLeftClick(NodeArray) - Subroutine: The",
            "\tleft mouse button was released over a tree node.",
            "\tOnRightClick(NodeArray, X, Y) - Subroutine: The right mouse button was",
            "\treleased over a node. X and Y are the coordinates of the mouse.",
            "\tOnDoubleClick(NodeArray, X, Y) - Subroutine: The left mouse button was",
            "\tdouble-clicked over a node. X and Y are the coordinates of the mouse.",
            "\tCreateSubTree(NodeKey) - ExpandTreeToNode(NodeKey) - Recursive",
            "\tSubroutine: Used for SetSelected call, expands to given node",
            "\tCollapse() - Will traverse the whole tree starting from the leaves,",
            "\tworking towards the root, calling CollapseNodes() on each node. }"
        ],
        "snippets": [
            "System.DropTree(",
            "\tLeft, { Any numeric expression for the left coordinate of the tool. }",
            "\tBottom, { Any numeric expression for the bottom coordinate of the",
            "\t\ttool. }",
            "\tRight, { Any numeric expression for the right coordinate of the tool.",
            "\t\t}",
            "\tTop, { Any numeric expression for the top coordinate of the tool. }",
            "\tTreeData, { The data to display, in Node array format. The format is",
            "\t\tthe same as for a call to TreeControl }",
            "\tTitle, { Any text expression to be used as a title. }",
            "\tSelectedKey, { The key of the selected item. Must be a variable, and",
            "\t\tmay specify initial selection. }",
            "\tFocusID, { Any numeric expression from 0 to 32767 for the FocusID. }",
            "\tFTrigger, { The Focus Trigger of the DropTree. }",
            "\tDrawBevel, { Optional Boolean. If TRUE (non-0) a bevel is drawn.",
            "\t\tDefaults to FALSE. }",
            "\tAlignTitle, { An optional parameter that is any logical expression. If",
            "\t\tTRUE (non-0) the title is included in the calculation for vertical",
            "\t\talignment. The default is FALSE. }",
            "\tDlgRoot, { Optional. The object value of the root dialog. Used for",
            "\t\talignment of the DropTree. Defaults to the caller if not specified. }",
            "\tTrigger, { An optional numeric expression. Initially set to zero (0)",
            "\t\twhen the DropTree opens. If the user presses the Escape key or closes",
            "\t\tthe extended window, then Trigger becomes 1. }",
            "\tBGColor { Optional background color of the control. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Edge": {
        "comments": [
            "{ Description: Performs a test for a rising or falling edge. }",
            "{ Edge is one of the Latching and Resetting functions. Use",
            "\taccordingly. }"
        ],
        "snippets": [
            "Edge(",
            "\tValue, { Required. Any expression giving a numeric status value to be",
            "\t\ttested. It is interpreted as true if it is non-zero, and false if it",
            "\t\tis zero. }",
            "\tMode { Required. Dictates whether the change from false to true or",
            "\t\ttrue to false is tested. If it is 0, a true to false (a falling edge)",
            "\t\tis tested. If it is 1, a false to true (a rising edge) is tested. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Edit": {
        "comments": [
            "{ Description: Draws an edit field with (optional) title or bevel or",
            "\tboth. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ The height of the edit field is constant, with X1",
            "\tand X2 defining its width, and Y1 and Y2 defining the boundaries in",
            "\twhich it is to be confined vertically, which may or may not include",
            "\tthe added height of a title and bevel, depending on the alignment used",
            "\tand if they exist. For any optional parameter that is to be set, all",
            "\toptional parameters preceding the desired one must be present,",
            "\talthough they may be invalid. }"
        ],
        "snippets": [
            "System.Edit(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the edit field. }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the edit field. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the edit field opposite to X1. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of the top or bottom of the edit field, whichever is the",
            "\t\topposite of Y1. }",
            "\tTitle, { Required. Any text expression to be used as a title for the",
            "\t\tfield. }",
            "\tVariable, { Required. A variable whose value is set by the edit field.",
            "\t\t}",
            "\tFocusID, { Optional. Any numeric expression from 0 to 32767 for the",
            "\t\tfocus number of this graphic. If this value is 0, the edit field will",
            "\t\tdisplay its current setting, but its value will not be able to be",
            "\t\tchanged and it will appear grayed out. The default value is 1. }",
            "\tTrigger, { Optional. Trigger provides feedback. While editing, the",
            "\t\tvalue will be 0. When editing is complete (tab, enter or loss of",
            "\t\tfocus) the value will change to non-zero: 1 if enter is pressed, 2",
            "\t\totherwise. }",
            "\tView, { Optional. Indicates how to display the edit field, as follows",
            "\t\tView Display Mode 0 Invisible 1 Normal (color scheme - no graying) 2",
            "\t\tGrayed-out (only if FocusID is 0) 3 Non-grayed text on a shaded",
            "\t\tbackground 4 Gray only if ID == 0 and allow clicks to be detected by a",
            "\t\tPick(). This parameter may be used to force an edit field with a",
            "\t\tFocusID of 0 to display normally, rather than allowing it to default",
            "\t\tto its grayed color. Note that if the FocusID is not 0, setting this",
            "\t\tvalue as 2 will not force the field to gray out. The default value is",
            "\t\t2 if FocusID is 0 and 1 otherwise. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "EditFile": {
        "comments": [
            "{ Description: Informs the configuration management system that a file",
            "\thas been modified in the working copy, typically before making a call",
            "\tto CommitEditedFiles. }",
            "{ This function must be called only if the caller has the semaphore",
            "\t(working copy lock). The files will be added to the Modified",
            "\tdictionary so that it is distributed to all subscribers when the",
            "\ttransaction is closed. If a set of files is passed, then the values",
            "\twill also be passed to the repository. The primary purpose of this is",
            "\tthat it allows for files to be marked as ignored. }"
        ],
        "snippets": [
            "\\AppLayer.EditFile(",
            "\tModItem, { Required. A file name, a dictionary of file names, or an",
            "\t\tarray of names of modified files. File paths relative to the working",
            "\t\tcopy are recommended. Files outside the working copy cannot be added.",
            "\t\tIf invalid, all the working copy files are used. If a dictionary, then",
            "\t\tthe keys are the files to use. If the values are FileMetadata, then",
            "\t\tthe structures are expected to be fully populated including the",
            "\t\tdeltas. If the values are streams, then the stream contains the new",
            "\t\tcopy of the file to commit. The stream may contain a Time metadata",
            "\t\tvalue for the time stamp. If the metadata is not there, CurrentTime",
            "\t\twill be used. Otherwise the dictionary values contain a numeric value",
            "\t\twith options as follows: 0 means the file is added, modified or",
            "\t\tdeleted based on the working copy file 1 mean the file is deleted from",
            "\t\tworking copy 2 mean ignore the file in the working copy The default",
            "\t\tfor this value is 0 }",
            "\tJustInformSubscribers { Optional Boolean. Set TRUE to not mark the",
            "\t\tfile as modified. This is useful when switching between repository",
            "\t\trevisions.Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "EditINI": {
        "comments": [
            "{ Description: Draws an edit field from which a value of an",
            "\tapplication property in Settings.Dynamic may be set. }",
            "{ This module is a member of the VTS Library and must therefore be",
            "\tcalled from within a GUITransform and prefaced by \\Library. The height",
            "\tof the edit field is constant, with the horizontal boundaries of its",
            "\tcalling transform defining its width, and the vertical boundaries of",
            "\tits calling transform defining its height (to a minimum size). The",
            "\theight will include the height of the bevel, but may or may not",
            "\tinclude the title, depending on the alignment used. For any optional",
            "\tparameter that is to be set, all optional parameters preceding the",
            "\tdesired one must be present, although they may be invalid. }"
        ],
        "snippets": [
            "\\Library.EditINI(",
            "\tSection, { Required. Any text expression giving the name of the",
            "\t\tsection in the file. This should not include the square brackets",
            "\t\tdelimiting the section. }",
            "\tVarName, { Required. Any text expression giving the name of the",
            "\t\tvariable for which the value is to be set. }",
            "\tTitle, { Optional. Any text expression to be used as a title for the",
            "\t\tfield. No default. }",
            "\tDataType, { Optional. Any numeric expression giving the type of data",
            "\t\taccepted by the edit field as follows. No default. DataType Type 0",
            "\t\tByte (unsigned) 1 Short (2 byte signed) 2 Long (4 byte signed) 3",
            "\t\tDouble precision floating point (8 byte signed) 4 Text Note that for",
            "\t\ttypes 1 and 2, if the number entered into the field is prefaced by a",
            "\t\t\"0x\", the value is taken to be a hexadecimal value and is converted to",
            "\t\ta decimal value when return is pressed. The default value is 4. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "EditINICheckbox": {
        "comments": [
            "{ Description: Draws an edit field check box, with which a value of an",
            "\tapplication property in Settings.Dynamic may toggled between true and",
            "\tfalse. }",
            "{ This module is a member of the VTScada Library and must therefore be",
            "\tcalled from within a GUITransform and prefaced by \\Library\\. }"
        ],
        "snippets": [
            "\\Library\\EditINIcheck box(",
            "\tSection, { Required. Any text expression giving the name of the",
            "\t\tsection in the file. This should not include the square brackets",
            "\t\tdelimiting the section. }",
            "\tVarName, { Required. Any text expression giving the name of the",
            "\t\tvariable for which the value is to be set. }",
            "\tTitle, { Optional. Any text expression to be used as a title for the",
            "\t\tfield. No default: }",
            "\tBoxOnLeft, { Optional. A Boolean, indicating whether the check box",
            "\t\tshould be to the left or right of the label. Defaults to TRUE (box to",
            "\t\tthe left of the label). }",
            "\tAlign, { Optional. Any numeric expression controlling the alignment of",
            "\t\tthe label and the box. Defaults to 3 - Left, vertically centered.",
            "\t\tValue Meaning 0 Left, top. 1 Right, top. 2 Full, top. 3 Left,",
            "\t\tvertically centered. 4 Right, vertically centered. 5 Full, vertically",
            "\t\tcentered. 6 Left, bottom. 7 Right, bottom. 8 Full, bottom. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Editor": {
        "comments": [
            "{ Description: Displays an editor on the screen. }"
        ],
        "snippets": [
            "Editor(",
            "\tLeft, { Required. Any numeric expression that defines the left hand",
            "\t\tside of the square area where the editor will operate. }",
            "\tBottom, { Required. Any numeric expression that defines the bottom of",
            "\t\tthe square area where the editor will operate. }",
            "\tRight, { Required. Any numeric expression that defines the right hand",
            "\t\tside of the square area where the editor will operate. }",
            "\tTop, { Required. Any numeric expression that defines the top of the",
            "\t\tsquare area where the editor will operate. }",
            "\tEditorValue, { Required. An editor value that has been created by",
            "\t\tMakeEditor which contains the text contents for the editor. }",
            "\tFocusID, { Required. Any numeric expression from 0 to 32767 giving the",
            "\t\tfocus number of the graphic. If FocusID is zero, this graphic cannot",
            "\t\treceive the input focus. }",
            "\tFont, { Required. Any expression that returns a (fixed pitch) font",
            "\t\tvalue. If the font supplied is not fixed pitch, the system font is",
            "\t\tused. }",
            "\tInfo, { Optional. A one-dimensional array where information on the",
            "\t\teditor will be recorded, as follows: (no default) Info Information 0",
            "\t\tCurrent line number 1 Current column number 2 Total number of lines in",
            "\t\teditor 3 Number of lines in view mode 4 Current block mode (1 - line",
            "\t\tmode, 2 - column mode) }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Ellipse": {
        "comments": [
            "{ Description: Draws an ellipse on the screen. }",
            "{ This statement has been superseded by the GUIEllipse function and is",
            "\tmaintained for backwards compatibility only. As of version 11, this is",
            "\tnow drawn in the same z-order as other graphics, making it similar to",
            "\tthe z-graphics functions. }"
        ],
        "snippets": [
            "Ellipse(",
            "\tX, { Required. Any numeric expression giving the X coordinate of the",
            "\t\tcenter of the ellipse on the screen. }",
            "\tY, { Required. Any numeric expression giving the Y coordinate of the",
            "\t\tcenter of the ellipse on the screen. }",
            "\tXRadius, { Required. Any numeric expression giving the radius of the",
            "\t\tellipse along the X axis specified in units of X screen coordinates. }",
            "\tYRadius, { Required. Any numeric expression giving the radius of the",
            "\t\tellipse along the Y axis specified in units of Y screen coordinates. }",
            "\tColor, { Required. A numeric expression giving the color of the",
            "\t\tellipse. }",
            "\tWidth { Required. Any numeric expression giving the width of the",
            "\t\tellipse wall in units of X screen coordinates. The Width is always",
            "\t\trounded to result in an odd number of pixels on the screen. The",
            "\t\tminimum width displayed will be 1 pixel. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Enable": {
        "comments": [
            "{ Description: Tell the Alarm Manager to enable an alarm. Use the",
            "\tSetEnable function for new code. }",
            "{ The Enable subroutine always returns \"0\". }"
        ],
        "snippets": [
            "\\AlarmManager\\Enable(",
            "\tAlarmObject, { Required. The object value for the alarm that was",
            "\t\tpassed to the Register subroutine that will be enabled. }",
            "\tEventTime { Optional. The time stamp to use when adding this event to",
            "\t\tthe alarm lists. If invalid or not defined, the default is",
            "\t\tCurrentTime(). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "EnableHelp": {
        "comments": [
            "{ Description: Enables you to enable or disable help file activation",
            "\twhen the F1 key is pressed. }",
            "{ VTScada calls EnableHelp during startup using the settings of the",
            "\tSetup.ini configuration file variables \"F1DisableHelp\" and \"WEBHelp\"",
            "\trespectively. }"
        ],
        "snippets": [
            "EnableHelp(",
            "\tEnable, { Required. Controls whether F1 help is activated. If Enable",
            "\t\tis set to zero, F1 help activation is disabled. If Enable is set to 1,",
            "\t\tF1 help activation is enabled. }",
            "\tDefaultFileName { Required. The name of the Windows help file to be",
            "\t\tlaunched when the user presses the F1 key (if F1 help is activated",
            "\t\tusing the Enable parameter above), and if no other help context can be",
            "\t\tfound. This Windows help file is also the default help file that will",
            "\t\tbe used when the user presses the Help button on the VTScada",
            "\t\tApplication Manager (VAM). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Encode": {
        "comments": [
            "{ Description: Processes a VTScada string using a configurable",
            "\tselection of compression, encryption, encoding and secure hashing. }",
            "{ Note that if Base64 encoding is selected, the time required to",
            "\tencode and also to decode the information will increase by a factor of",
            "\tapproximately ten. }"
        ],
        "snippets": [
            "System.Encode(",
            "\tPlainValue, { Required. The information to be encoded. May be any",
            "\t\tVTScada value that can be packed. }",
            "\tPackDictionary, { Optional dictionary. If present, the information",
            "\t\twill be packed. Refer to notes for the Pack function for further",
            "\t\tdetails about this parameter. }",
            "\tCompressed, { Optional Boolean. Set TRUE if the value is to be",
            "\t\tcompressed before possible encryption. No compression is done unless",
            "\t\tthis value is specified as TRUE. }",
            "\tKey, { Optional. Key to be used as a seed for encryption. }",
            "\tSaltLength, { Optional numeric. Length of salt in bytes to use for",
            "\t\tencryption ( 0-64 ) Not relevant unless the Key parameter is also",
            "\t\tvalid. Defaults to zero. }",
            "\tHashKey, { Optional text. If valid, an SHA2-256 hash will be added to",
            "\t\tthe end of the result to prevent tampering. This string is used to",
            "\t\tseed/salt the hash. }",
            "\tBase64Encoded { Optional Boolean. Set true if the result is to be",
            "\t\tBase64 encoded. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "EncodeURIComponent": {
        "comments": [
            "{ Description: Encodes a string so that it can be embedded as part of",
            "\ta Uniform Resource Indicator. (URL-encoded) }",
            "{ The input string must be UTF-8 encoded. Any character that is not a",
            "\tletter, a number, or included in the set of DontEscape symbols will be",
            "\tpercent-encoded. If you are content with the default set of DontEscape",
            "\tcharacters, you can use the wrapper:",
            "\tSystem.HTTPServerInst.Escape(Input) }"
        ],
        "snippets": [
            "System.HTTPServerInst.EncodeURIComponent(",
            "\tInput, { Required text. The string to be encoded. }",
            "\tDontEscape { Optional text. The set of characters that should not be",
            "\t\tescaped in the result. Defaults to -_.!~*'() if invalid. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Encrypt": {
        "comments": [
            "{ Description: The Encrypt function encrypts data. The algorithm used",
            "\tto encrypt the data is designated by the Key parameter. It is the",
            "\tVTScada analog of the Windows CryptoAPI CryptEncrypt call. Encrypt",
            "\tfully supports asymmetric and symmetric keys via CNG (Cryptography New",
            "\tGeneration). }",
            "{ The cipher text is returned as a text string. If an error occurs,",
            "\tthe return value is invalid. When using CNG keys, the data supplied to",
            "\tEncrypt must be an integer multiple of the symmetric key block size",
            "\tUNLESS Flags is set to one of the padding options, when the algorithm",
            "\twill automatically pad the plaintext as required. Note that the size",
            "\tof a block can be obtained using the GetKeyParam function and",
            "\tspecifying the \"BlockLength\" property. }"
        ],
        "snippets": [
            "Encrypt(",
            "\tKey, { Required. The handle to the key to use to encrypt the data. }",
            "\tPlainText, { Required. A text string that contains the plain text to",
            "\t\tbe encrypted. }",
            "\tFinal, { Required. A parameter that specifies whether this is the last",
            "\t\tsection in a series being encrypted. Final is set TRUE for the last or",
            "\t\tonly block and FALSE if there are more blocks to be encrypted }",
            "\tReserved, { An optional parameter that should be set to 0. If omitted",
            "\t\tor invalid, then the value 0 is used. }",
            "\tFlags, { Optional. Specifies the flags to be passed to CryptEncrypt.",
            "\t\tIf omitted or invalid then the value 0 is used. Refer to the Crypto",
            "\t\tAPI Encrypt function for the flag list if using CAPI. If using a CNG",
            "\t\tkey, the following may be used (separate tables provided for",
            "\t\tasymmetric and symmetric keys) If the encryption key is an asymmetric",
            "\t\tkey: Value Meaning 0 No padding is to added to the plaintext data",
            "\t\tbefore encryption. 1 Padding is added to the plaintext data before",
            "\t\tencryption in accordance with the RSAES-PKCS1-v1_5 scheme. 2 Padding",
            "\t\tis added to the plaintext data before encryption in accordance with",
            "\t\tthe RSAES-OEAP scheme, using SHA1 for padding generation. 3 Padding is",
            "\t\tadded to the plaintext data before encryption in accordance with the",
            "\t\tRSAES-OEAP scheme, using SHA256 for padding generation. If the",
            "\t\tencryption key is a symmetric key: Value Meaning 0 No padding is to",
            "\t\tadded to the plaintext data before encryption. 1 Padding is added to",
            "\t\tthe plaintext data before encryption. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t0, { 1 }",
            "\tError, { Optional. A variable in which the error code for the function",
            "\t\tis returned. It has the following meaning: (no default) Error Meaning",
            "\t\t0 Key successfully imported. 1 Key, PlainText or Final parameters",
            "\t\tinvalid. x Any other value is an error from CryptEncrypt. }",
            "\t0, { 1 }",
            "\tx",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ErrMessage": {
        "comments": [
            "{ Description: Returns a text message for the error code handed to it",
            "\tas a parameter }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager, as shown in \"Format\" above. The",
            "\terror message / code is passed to \\GetPhrase and will return the",
            "\tmessage in the current language if other than English and if",
            "\tavailable. }"
        ],
        "snippets": [
            "\\ODBCManager.ErrMessage(",
            "\tErrCode { Required. A numeric error code for which you want to obtain",
            "\t\tthe appropriate message. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Escape": {
        "comments": [
            "{ Description: Performs URL-encoding of a given string. }",
            "{ Escape() is a wrapper for EncodeURIComponent. When using this",
            "\tfunction, there is no option to specify characters that should not be",
            "\tescaped, therefore the default set will be used: \"-_.!~*'()\" }"
        ],
        "snippets": [
            "Escape(",
            "\tInput { Required text. The string to be encoded. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "EvaluateAlarm": {
        "comments": [
            "{ Description: Passes a new value to an alarm, to be compared to the",
            "\tsetpoint. }",
            "{ EvaluateAlarm should be called every time your tag's Value changes.",
            "\t}"
        ],
        "snippets": [
            "\\AlarmManager.EvaluateAlarm(",
            "\tAlarmName, { Required text. Unique name for the alarm. Typically the",
            "\t\tunique ID, which can be obtained using GetAlarmName . If there are",
            "\t\tmultiple built-in alarms in a tag, the convention is to concatenate",
            "\t\tthe UniqueID with a separator and a unique integer or string per",
            "\t\talarm. For example, Concat(Root\\UniqueID, \\AlarmSeparatorString, 0). }",
            "\tValue, { Required. The new value to be checked against the alarm",
            "\t\tsetpoint. }",
            "\tTimeStamp, { Optional UTC timestamp of the value. Defaults to the",
            "\t\tcurrent time. }",
            "\tCustom, { Optional structure of custom fields to be logged with the",
            "\t\tevent. }",
            "\tDescription { Customized description, used if it differs from the",
            "\t\tdescription given to Commission. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Event": {
        "comments": [
            "{ Description: Now a wrapper for AddEvent }",
            "{ The Event subroutine always returns \"0\". }"
        ],
        "snippets": [
            "\\AlarmManager\\Event(",
            "\tAlarmObject, { Required. The object value for the alarm that was",
            "\t\tpassed to the Register subroutine that will be enabled. }",
            "\tEventTime { Optional. The time stamp to use when adding this event to",
            "\t\tthe alarm lists. If invalid or not defined, the default is",
            "\t\tCurrentTime(). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Execute": {
        "comments": [
            "{ Description: Executes a group of statements as a single entity in",
            "\tstructures that would otherwise allow only one statement to be",
            "\texecuted. }",
            "{ This statement is typically used with a Case or IfElse statement.. }"
        ],
        "snippets": [
            "Execute(",
            "\tStatement1, Statement2, â¦ } { Required. Are any expression(s) to be",
            "\t\texecuted. Any number of parameters may be used. Commas or semi-colons",
            "\t\tmust separate the parameters. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ExecuteQuery": {
        "comments": [
            "{ Description: Called to send an SQL SELECT command to the server and",
            "\tget a reply back. This function is used as a general query tool and",
            "\tdoes not provide for the guaranteed eventual execution that the",
            "\tExecuteQueryCached() function does. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager\\, as shown in \"Format\" above.",
            "\tThis module MUST be called as a subroutine in a script. This function",
            "\tacts as a shell to launch a query within the DSN within the",
            "\tODBCManager library. Upon completion of the execution of the function,",
            "\tthe query is still active. Completed execution of the query is",
            "\tindicated by a valid value set in the variable pointed to by parameter",
            "\t\"ErrPtr\". For this reason the variable referenced by \"ErrPtr\" MUST be",
            "\tinvalidated before calling the function. Numeric values retrieved from",
            "\tan ODBC data source are restricted to double precision floating point",
            "\tvalues. There is no support for receiving full-precision 64-bit",
            "\tintegers. }"
        ],
        "snippets": [
            "\\ODBCManager\\ExecuteQuery(",
            "\tErrPtr, { Required. Pointer to an error. Always valid on completion.",
            "\t\tSet to 0 if the command succeeds. }",
            "\tCmdStr, { Required. The SQL command to send to the database }",
            "\tDSN, { Required. The name of the ODBC database in which to execute the",
            "\t\tcommand. }",
            "\tUserName, { Required. The user name in the database for",
            "\t\tauthentication. A null provided in this field will be passed to the",
            "\t\tdatabase as a null string. }",
            "\tPassword, { Required. The password in the database for authentication.",
            "\t\tA null provided in this field will be passed to the database as a null",
            "\t\tstring. }",
            "\tResultPtr, { Required. A pointer to the ODBC result data being passed",
            "\t\tback as the result of the query. }",
            "\tAttribPtr, { Optional. A pointer to the ODBC attribute array being",
            "\t\tpassed back from the result of the query. no default: }",
            "\tErrorMsgPtr, { Optional. A pointer to the ODBC error message being",
            "\t\tpassed back. Will contain invalid if the command succeeds. no default:",
            "\t\t}",
            "\tSQLStatePtr, { Optional. A pointer to the ODBC error state being",
            "\t\tpassed back. Will contain invalid if the command succeeds. no default:",
            "\t\t}",
            "\tErrorCodePtr, { Optional. A pointer to ODBC error code being passed",
            "\t\tback. Will contain invalid if the command succeeds. no default: }",
            "\tReFormat, { Optional. A flag which, if set to true, causes the result",
            "\t\tset from the query to be reformatted from a Result[Column][Row] to",
            "\t\tResult[Row][Column]. This is potentially useful for reformatting",
            "\t\tmulti-record \"Select\" queries to match your application requirements.",
            "\t\tno default: }",
            "\tTransObj, { Optional. An transaction object (as returned from the",
            "\t\t\"Transaction()\" function) to execute this query within. If a",
            "\t\ttransaction is opened on this DSN and this value is not set, then the",
            "\t\tquery will wait until the transaction has completed before being",
            "\t\texecuted. If set, the query will be executed after all other",
            "\t\toutstanding ExecuteQuery() functions for the transaction on the DSN",
            "\t\thave executed. no default: }",
            "\tFormatBitField, { Optional. Bitfield indicating whether values coming",
            "\t\tback from the query will be converted to their corresponding VTScada",
            "\t\tdata types. Can be set on a type by type basis according to the",
            "\t\tfollowing flags: (no default) Value Meaning 0 Convert numerics 1",
            "\t\tConvert dates 2 Convert times 3 Convert timestamps }",
            "\t0, { 1 }",
            "\t2 { 3 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ExecuteQueryCached": {
        "comments": [
            "{ Description: Called to send an SQL data modification command to the",
            "\tserver. This module will cache the query locally if it fails and send",
            "\tit to the database after the next successful transaction with the db.",
            "\tThis module was designed to be used for logging values that cannot be",
            "\tlost. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager, as shown in \"Format\" above.",
            "\tThis module MUST be called as a subroutine in a script. Completed",
            "\texecution of the query is indicated by a valid value set in the",
            "\tvariable pointed to by parameter \"ErrPtr\". For this reason the",
            "\tvariable referenced by \"ErrPtr\" MUST be invalidated before calling the",
            "\tfunction. }"
        ],
        "snippets": [
            "\\ODBCManager.ExecuteQueryCached(",
            "\tErrPtr, { Required. Pointer to an error. Always valid on completion.",
            "\t\tSet to 0 if the command succeeds. }",
            "\tCmdStr, { Required. The SQL command to send to the database }",
            "\tDSN, { Required. The name of the ODBC database in which to execute the",
            "\t\tcommand. }",
            "\tUserName, { Required. The user name in the database for",
            "\t\tauthentication. A null provided in this field will be passed to the",
            "\t\tdatabase as a null string. }",
            "\tPassword, { Required. The password in the database for authentication.",
            "\t\tA null provided in this field will be passed to the database as a null",
            "\t\tstring. }",
            "\tBatchSize { Optional. The number of array entries to send in one batch",
            "\t\tno default. Returns 0 upon query execution starting. See the following",
            "\t\tcomments. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Exp": {
        "comments": [
            "{ Description: Returns the natural antilogarithm of a numeric",
            "\texpression. }",
            "{ The function raises the constant e to the power of the parameter X.",
            "\tIt is the complement of the Ln function. }"
        ],
        "snippets": [
            "Exp(",
            "\tX { Required. Any numeric expression. The value must not be negative",
            "\t\tor the result will be invalid. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ExportKey": {
        "comments": [
            "{ Description: The ExportKey function exports a cryptographic key or a",
            "\tkey pair from a CSP in a secure manner as a Key BLOB. It is the",
            "\tVTScada analog of the Crypto API ExportKey call. }",
            "{ The exported key is returned as a text string. If an error occurs,",
            "\tthe return value is invalid. EncryptKey is not required if BlobType is",
            "\tPUBLICKEYBLOB. Does not support CNG (Cryptography New Generation). }"
        ],
        "snippets": [
            "ExportKey(",
            "\tKey, { Required. The handle to the key which is to be exported. }",
            "\tBlobType, { Required. A parameter specifying the type of key BLOB to",
            "\t\tbe exported. Values are defined in WinCrypt.h }",
            "\tEncryptKey, { Required. An optional parameter containing a Key handle",
            "\t\tfor a key to be used to encrypt the exported key so that it may only",
            "\t\tbe encrypted by the destination user. If omitted or invalid, then the",
            "\t\tvalue NULL is used. }",
            "\tFlags, { Required. An optional parameter specifying the flags to be",
            "\t\tpassed to CryptExportKey. If omitted or invalid then the value 0 is",
            "\t\tused. Flags values are defined in WinCrypt.h. }",
            "\tError, { Required. An optional variable in which the error code for",
            "\t\tthe function is returned. It has the following meaning: Error Meaning",
            "\t\t0 Key successfully exported. 1 Key or BlobType parameters invalid. x",
            "\t\tAny other value is an error from CryptExportKey. }",
            "\t0, { 1 }",
            "\tx",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Fail": {
        "comments": [
            "{ Description: This subroutine advises the Modem Manager to abort and",
            "\tretry an established, outgoing call. }",
            "{ The call is treated as a fail connection attempt. This is usually",
            "\tcalled as the result of a driver deciding that the quality of the data",
            "\tconnection is too poor and declares this connection to have failed.",
            "\tSince the connection succeeded by phone company standards, the call",
            "\tcan be attempted again without delay. }"
        ],
        "snippets": [
            "\\ModemManager.Fail(",
            "\tTag { Any text expression that identifies the tag that originally",
            "\t\trequested the call. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FALSE": {
        "comments": [
            "{ Description: For use in expressions that perform Boolean logic.",
            "\tUsing \"FALSE\" will make your code easier to read than using \"0\". }",
            "{ This function exists to make your code more readable. It is",
            "\tequivalent to PickValid(Cast(Parameter, 0) == 0, 0); For compatibility",
            "\twith the VTScada style guide, use all caps (TRUE and FALSE) when used",
            "\tas a constant. Capitalize only the first letter when used as a",
            "\tfunction call: True(test expression) and False(test expression). }"
        ],
        "snippets": [
            "False[(",
            "\tTestExpr { Optional. Any expression that evaluates to a 1 or 0 value.",
            "\t\tIf no parameter is provided, then there is no need to include the",
            "\t\tparentheses. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "FFT": {
        "comments": [
            "{ Description: Performs a fast Fourier transform between time and",
            "\tfrequency domains. }",
            "{ This statement is useful for performing frequency analysis on analog",
            "\tsignals (such as motor frequency). In the time domain equal sampling",
            "\tintervals are required, equal frequency spacing in the frequency",
            "\tdomain is required. The order of the time domain samples is in",
            "\tchronological order. The order of complex frequency data is... real 0,",
            "\treal N/2, real 1, imaginary 1, real 2, imaginary 2, ..., real N/2-1,",
            "\timaginary N/2-1 Real 0 is the average (D.C.) component in the signal.",
            "\tThe second element, real N/2, is the last real component because real",
            "\t0 and real N/2 are always real (no imaginary component). Real 1 is the",
            "\treal amplitude of the lowest frequency, and imaginary 1 is the",
            "\timaginary amplitude of the lowest frequency. Real N/2-1 and imaginary",
            "\tN/2-1 are the real and imaginary components of the second highest",
            "\tfrequency. The order of amplitude/phase pairs in Array is: amplitude",
            "\t0, amplitude 1, ..., amplitude N/2, phase 1, phase 2, ..., phase N/2 -",
            "\t1 Amplitude 0 is the average (D.C.) component in the signal. Amplitude",
            "\t1 is the amplitude of the lowest frequency, amplitude N/2 is the",
            "\tamplitude of the highest frequency. Phase 1 is the phase angle (in",
            "\tradians) of the lowest frequency (the average doesn't have a phase,",
            "\tits frequency is 0). Phase N/2-1 is the phase angle of the second",
            "\thighest frequency. Note that neither the average (D.C.) component nor",
            "\tthe highest frequency have a phase angle or imaginary component. The",
            "\thighest frequency and the sampling is: fc = 1/2Î Where fc is the",
            "\tcritical (highest) frequency in Hertz, and Î is the sampling interval",
            "\tin seconds. The lowest frequency, the number of samples, and the",
            "\tsampling interval are related by the following equation: fL = 1/NÎ",
            "\tWhere fL is the lowest frequency in Hertz, N is the number of samples,",
            "\tand Î is the sampling interval in seconds. All other frequencies are",
            "\tmultiplies of the lowest frequency fL. Caution should be taken, as",
            "\twhen VTScada executes a script, no other statements are updated. The",
            "\tFFT statement may take several seconds to execute, depending on the",
            "\tcomputer and the number of samples. The computation time goes up by N",
            "\t* log2N. This function does calculations with double-precision",
            "\tfloating point values and does not support 64-bit integers",
            "\tcomputations. }"
        ],
        "snippets": [
            "FFT(",
            "\tArray, { Required. The starting array element. Array may contain time",
            "\t\tdomain samples, complex frequency samples, or amplitude/phase pair",
            "\t\tsamples. Any data passed to FFT in Array will be overwritten by the",
            "\t\tresulting transform. Arrays may be copied using ArrayOp2 if it is",
            "\t\tnecessary to retain an original. There must be at least N elements in",
            "\t\tArray (partial transforms are not possible). }",
            "\tN, { Required. Any numeric expression giving the number of elements in",
            "\t\tArray to transform. N must be a positive power of 2 in the range 4 to",
            "\t\t4096. }",
            "\tOperation, { Required. Any numeric expression giving the type of",
            "\t\ttransform as follows: Operation Transform Type 0 Time samples to",
            "\t\tfrequency complex 1 Time samples to frequency amplitude/phase 2 Time",
            "\t\tsamples to frequency amplitude only 3 Frequency complex to time",
            "\t\tsamples 4 Frequency amplitude/phase to time samples Note that",
            "\t\tOperation 2 will set all phase elements to 0 to indicate a loss of",
            "\t\tphase information. This transform is not reversible because of this",
            "\t\tloss of phase information. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FileChooser": {
        "comments": [
            "{ Description: Provides an edit box for specifying a file name, along",
            "\twith a label and a browse button. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by System. as shown in the \"Format\" section. The height of",
            "\tthe edit field is constant, with X1 and X2 defining its width, and Y1",
            "\tand Y2 defining the boundaries in which it is to be confined",
            "\tvertically, which may or may not include the added height of a title",
            "\tand bevel, depending on the alignment used and if they exist. }"
        ],
        "snippets": [
            "System.FileChooser(",
            "\tX1, { Left or right side of area }",
            "\tY1, { Top or bottom of area }",
            "\tX2, { Opposite side to X1 }",
            "\tY2, { Opposite side to Y1 }",
            "\tTitle, { Text. Any text expression to be used as a title for the",
            "\t\tfield. Defaults to \"\" if invalid. }",
            "\tButtonLabel, { Required text. The label to use on the browse button.",
            "\t\tDefaults to \"...\" if invalid. }",
            "\tOutVar, { Required text. A variable whose value is set by the edit",
            "\t\tfield. }",
            "\tID, { Optional. Any numeric expression from 0 to 32767 for the focus",
            "\t\tnumber of this graphic. If this value is 0, the edit field will",
            "\t\tdisplay its current setting, but its value will not be able to be",
            "\t\tchanged and it will appear grayed out. The default value is 1. }",
            "\tTrigger, { Numeric. Trigger provides feedback. While editing, the",
            "\t\tvalue will be 0. When editing is complete (tab, enter or loss of",
            "\t\tfocus) the value will change to non-zero: 1 if enter is pressed, 2",
            "\t\totherwise. }",
            "\tView, { Numeric. Indicates how to display the edit field, as follows",
            "\t\tView Display Mode 0 Invisible 1 Normal (color scheme - no graying) 2",
            "\t\tGrayed-out (only if FocusID is 0) 3 Non-grayed text on a shaded",
            "\t\tbackground This parameter may be used to force an edit field with a",
            "\t\tFocusID of 0 to display normally, rather than allowing it to default",
            "\t\tto its grayed color. Note that if the FocusID is not 0, setting this",
            "\t\tvalue as 2 will not force the field to gray out. The default value is",
            "\t\t2 if FocusID is 0 and 1 otherwise. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\tSave, { Save Save Mode 0 Open dialog 1 Save dialog -1 Browse for",
            "\t\tfolder -2 Browser for folder + add trailing \"\\\" }",
            "\t0, { 1 }",
            "\t-1, { -2 }",
            "\tFilterPattern, { Required text. An array or a semicolon-separated list",
            "\t\tof wildcard file patterns for the types that will appear. Defaults to",
            "\t\t\"\" if invalid. }",
            "\tFilterDesc, { Required text. An array or a semicolon-separated list of",
            "\t\ttext values describing the corresponding FilterPatterns. Defaults to",
            "\t\t\"\" if invalid. }",
            "\tDialogTitle, { Required text. The title to apply to the file dialog.",
            "\t\tDefaults to \"\" if invalid. }",
            "\tExtensionToUse, { Required text. For save dialogs (Save parameter ==",
            "\t\t1) the file extension to use if not specified by the user. Defaults to",
            "\t\t\"\" if invalid. }",
            "\tDrawBevel, { OptionalBoolean. If TRUE, the bevel is drawn. The Default",
            "\t\tvalue is FALSE. }",
            "\tVertAlign, { Optional. Any numeric expression that sets the vertical",
            "\t\talignment of the edit field according to one of the following options",
            "\t\tVertAlign Vertical Alignment 0 Top 1 Center 2 Bottom Whether the title",
            "\t\tis included when the vertical alignment is calculated is determined by",
            "\t\tthe value of AlignTitle. The default value is 0. }",
            "\t0, { 1 }",
            "\t2, { AlignTitle }",
            "\tBGColor, { Optional. Background color of the edit box }",
            "\tFGColor, { Optional. Foreground color of the edit box }",
            "\tFontParm, { Optional. Font value }",
            "\tTitleBGColor, { Optional. Background color under title }",
            "\tTitleFGColor, { Optional. Foreground (text) color for the title }",
            "\tBevelColor, { Optional. Color of the bevel line }",
            "\tPlaceholderText { Optional. Text to display in place of invalid entry",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "FileDialogBox": {
        "comments": [
            "{ Description: Displays a threaded system common file dialog box. }",
            "{ This statement displays a threaded system dialog box for opening or",
            "\tsaving a file, depending on the value of the Save parameter, however,",
            "\tit does not actually perform the requested action, but simply displays",
            "\tthe dialog. If successful, the Result parameter will be set to the",
            "\tfull path and file name of the chosen file, or 0 if it fails or is",
            "\tcanceled. It is the user's responsibility to act upon the value of",
            "\tResult and save or open the file by using such commands as FWrite or",
            "\tFRead. In addition to the Result parameter, the function itself will",
            "\treturn an error code to indicate whether the dialog was successfully",
            "\topened. A \"1\" indicates failure to open while a \"0\" indicates success.",
            "\tThe Directory parameter is ignored for Open and Save operations if the",
            "\tFile parameter contains a path. You can use this feature to define the",
            "\tinitial directory, but return to the selected file if the user",
            "\tre-opens the dialog. For example: FileDialogBox(1, \"\", \"\",",
            "\tSelectedFile, InitialDirectory, ....); SelectedFile can be initialized",
            "\tto \"SomeFile.txt\", in which case the InitialDirectory will be used.",
            "\tAfter the user has selected a file (\"C:\\AnotherFile.txt\") , and",
            "\treopens the dialog, then it will reopen to the path in SelectedFile.",
            "\tThis avoids having to parse a user selection result (SelectedFile)",
            "\tinto a filename and path to achieve the same effect. For Save -1",
            "\t(directory browser mode) the Directory parameter means something",
            "\tdifferent. Directory defines the root of the selectable directories.",
            "\tFor example, you can use this feature to restrict the user from",
            "\tselecting a directory outside their VTScada application folder.",
            "\tPassing the VTScada application path as Directory, means that",
            "\toperators would only be able to select that folder, or any",
            "\tsub-folders. This option can be used in conjunction with 'File' to",
            "\trestrict the selectable path and also have an initial selection. If",
            "\teither the FilterPattern or FilterDesc parameters use dynamically",
            "\tallocated arrays (i.e. created using the New function), the dialog box",
            "\twill not open - these two parameters must use statically declared",
            "\tarrays. If using a single text value instead, you may specify as many",
            "\twildcard patterns as needed by adding a semi-colon separator between",
            "\teach: \"*.BMP;*.JPG;*.PNG;*.TIF\". If the Save parameter is a negative",
            "\tvalue, indicating that a \"Browse for Folder\" dialog is required, the",
            "\tDirectory and Title parameters must be set. Title will be displayed",
            "\tabove the tree view control in the dialog box. This string can be used",
            "\tto specify instructions to the user. Directory can either be a string",
            "\tcontaining the starting root directory to begin browsing, or a CSIDL",
            "\tvalue to specify a special folder (a CSIDL is a number, the",
            "\tdefinitions of which can be found in the Platform SDK). The remaining",
            "\tparameters may be set to any valid value, including empty strings",
            "\t(\"\"). FTP sites may not be browsed depending if the server is running",
            "\tan older Windows operating system. Within an Anywhere Client session,",
            "\tthis function does nothing. }"
        ],
        "snippets": [
            "FileDialogBox(",
            "\tSave, { Required. Any expression that evaluates to one of the",
            "\t\tfollowing values Save Meaning 0 indicates that an \"Open\" dialog box is",
            "\t\tdesired Non-zero (positive) indicates that a \"Save\" dialog box is",
            "\t\trequired -1 indicates that a \"Browse for Folder\" dialog is required",
            "\t\t(please read Comments below if you require a \"Browse for Folder\"",
            "\t\tdialog). }",
            "\t0, { Non-zero (positive) }",
            "\t-1",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FileFind": {
        "comments": [
            "{ Description: Performs a recursive search down through the directory",
            "\ttree structure and returns an array of matching file names. }",
            "{ This function returns an array of text values. As the function does",
            "\ta recursive search through the directory tree, the contents of each",
            "\tsub-directory are added to the array in reverse-alphabetic order",
            "\tbefore the function moves on to the next directory. Each text value",
            "\tcontains the information specified by Option for each file which",
            "\tmatches both Path and Attributes. If no files are found, the return",
            "\tvalue will be set to invalid. Notice that the only difference between",
            "\tthis function and the Dir function is that Dir searches in the",
            "\timmediate directory only, while this function looks down through the",
            "\twhole directory tree. (See: Bitwise Parameters & Operations ) }"
        ],
        "snippets": [
            "FileFind(",
            "\tPath, { Required. Any text expression that indicates the full path",
            "\t\tname where the search begins. This may include a wildcard spec, such",
            "\t\tas \"*.DAT\". The search progresses recursively down each sub-directory",
            "\t\t(depth-first). }",
            "\tAttributes, { Required. Any numeric expression that gives the",
            "\t\tattributes to match on each file listed (files not matching these",
            "\t\tattributes won't be listed). Attribute Bit No. Meaning 0 - Files",
            "\t\twithout attributes 8 3 All files (regardless of attributes)",
            "\t\tAlternatively, the parameter may be constructed by adding together the",
            "\t\tnumbers from the table below: Attribute Bit No. Meaning 1 0 Read only",
            "\t\t2 1 Hidden 4 2 System 16 4 Sub-directory 32 5 Archive }",
            "\t0, { 8 }",
            "\t1, { 2 }",
            "\t4, { 16 }",
            "\t32",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FileRootModule": {
        "comments": [
            "{ Description: Parses the document file that contains the given module",
            "\tto find the root module in that file. Returns the module value of the",
            "\troot module. }",
            "{ The returned module value from this statement may be the parent or",
            "\tsome ancestor of Module. }"
        ],
        "snippets": [
            "FileRootModule(",
            "\tModule { Required. Any expression for the module. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FileSize": {
        "comments": [
            "{ Description: Returns the size of a disk file in bytes. }",
            "{ This function returns the size of the file in bytes. If the return",
            "\tvalue is invalid, the file could not be found. }"
        ],
        "snippets": [
            "FileSize(",
            "\tFileName { Required. Any text expression that gives the path, file",
            "\t\tname, and extension of the file. A Known Path Aliases for File-Related",
            "\t\tFunctions may be provided in the form, :{KnownPathAlias}. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FileStream": {
        "comments": [
            "{ Description: Returns a stream attached to a disk file or printer,",
            "\tand is suitable for use in SWrite. }",
            "{ If the file designated by FileName does not exist, it will be",
            "\tcreated when it is written to (by SWrite/BlockWrite forexample). The",
            "\tfile pointer returned by the function will still be valid. If the file",
            "\texists but has its read-only attribute set, the stream may only be",
            "\tread from, not written to. If you want to be certain that the file",
            "\texists, then manually use FWrite(File, 2, 0, \"\"); before opening the",
            "\tstream with FileStream. If the PrintFlag parameter is set, even though",
            "\ta printer is not being used (i.e. FileName indicates a certain file),",
            "\tit will not have any effect overall except that it may impose a slight",
            "\tperformance penalty. }"
        ],
        "snippets": [
            "FileStream(",
            "\tFileName, { Required. Any text specification for a file or printer",
            "\t\tSWrite. A known path alias may be provided in the form,",
            "\t\t:{KnownPathAlias}. }",
            "\tPrintFlag, { An optional parameter that is any logical expression and",
            "\t\tmust be set to true (non-0) if the stream is printer-based so that",
            "\t\tspecial handling and error checking for printer output will be",
            "\t\tprovided. If this parameter is omitted, the default value of false (0)",
            "\t\tis used (i.e. a file-based stream is assumed). }",
            "\tCompletionVar, { An optional variable that will be initially set",
            "\t\tInvalid. When the stream is closed it will be incrementally set to an",
            "\t\tinteger in the range 0 to 100. This integer indicates the percentage",
            "\t\tcompletion of writing the session-aware stream contents to the VIC.",
            "\t\tWhen the value of this variable is set to exactly 100, the stream has",
            "\t\tbeen completely written to the VIC file system. This can be used by",
            "\t\tthe programmer to indicate the progress in writing large files to a",
            "\t\tVIC over a relatively slow communication link. This variable can also",
            "\t\tbe provided on non-session-aware FileStreams, where it will remain",
            "\t\tuntouched by any file operations. Its presence does not mark the",
            "\t\tFileStream as being session-aware. }",
            "\tFlags { An optional parameter that may take one of three values. If",
            "\t\tabsent or Invalid, the FileStream will not be session-aware (i.e. all",
            "\t\toperations will be on the local file system. If valid, the FileStream",
            "\t\tis session-aware, and if the file does not exist on the VIC file",
            "\t\tsystem, a zero-length file will be created and opened for read-write",
            "\t\taccess. If the file on the VIC exists, setting this parameter to zero",
            "\t\twill cause it to be initially opened for read-only access. Read-write",
            "\t\taccess is only obtained when you make the first write to the stream.",
            "\t\tIf the file exists on the VIC, setting Flags to 1 will cause the file",
            "\t\tto be opened for read-write access, and truncated to zero length. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Filter": {
        "comments": [
            "{ Description: Sets the value of one array element to invalid if the",
            "\tcorresponding value in another array element is invalid. }",
            "{ This statement is useful together with either the FiltLow or",
            "\tFiltHigh statements which would typically be executed on the first",
            "\tarray before Filter is executed. }"
        ],
        "snippets": [
            "Filter(",
            "\tArray1Elem, { Required. Any array element giving the starting point",
            "\t\tfor the array conversion in the destination array. The subscript for",
            "\t\tthe array may be any numeric expression. If processing a",
            "\t\tmultidimensional array, the usual rules apply to decide which",
            "\t\tdimension should be used. }",
            "\tArray2Elem, { Required. Any array element giving the starting point in",
            "\t\tthe reference array (this array is not altered in any way). The",
            "\t\tsubscript for the array may be any numeric expression. If processing a",
            "\t\tmultidimensional array, the usual rules apply to decide which",
            "\t\tdimension should be used. }",
            "\tN { Required. Any numeric expression giving the number of array",
            "\t\telements to process starting at the element given by the first",
            "\t\tparameters. If this parameter is greater than either dimension of the",
            "\t\tarrays, the number of points used will be the smaller array dimension.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FiltHigh": {
        "comments": [
            "{ Description: Sets the values in an array sub-range that fall above a",
            "\tspecified upper limit to a new value. }",
            "{ The statement is useful for setting array elements above a limit to",
            "\ta maximum value or to invalid. }"
        ],
        "snippets": [
            "FiltHigh(",
            "\tArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array for the search. The subscript for the array may be any",
            "\t\tnumeric expression. If processing a multidimensional, the usual rules",
            "\t\tapply to decide which dimension should be used. }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to use, starting at the element given by the first parameter.",
            "\t\tIf N extends past the upper bound of the lowest array dimension, this",
            "\t\tcomputation will \"wrap-around\" and resume at element 0, until N",
            "\t\telements have been processed. }",
            "\tLimit, { Required. Any numeric expression giving the upper cutoff",
            "\t\tvalue for the array elements. Any array elements in the range that are",
            "\t\tstrictly greater than this value are set to the Value parameter. }",
            "\tValue { Required. Any numeric expression giving the new value to set",
            "\t\tthe array elements that fall above the Limit parameter. The function",
            "\t\tstill continues if this parameter is invalid, in which case the new",
            "\t\tvalues become invalid. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FiltLow": {
        "comments": [
            "{ Description: Sets the values in an array sub-range that fall below a",
            "\tspecified lower limit to a new value. }",
            "{ The statement is useful for setting array elements below a limit to",
            "\ta minimum value or to invalid. }"
        ],
        "snippets": [
            "FiltLow(",
            "\tArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array for the search. The subscript for the array may be any",
            "\t\tnumeric expression. If processing a multidimensional array, the usual",
            "\t\trules apply to decide which dimension should be used. }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to use, starting at the element given by the first parameter.",
            "\t\tIf N extends past the upper bound of the lowest array dimension, this",
            "\t\tcomputation will \"wrap-around\" and resume at element 0, until N",
            "\t\telements have been processed. }",
            "\tLimit, { Required. Any numeric expression giving the lower cutoff",
            "\t\tvalue for the array elements. Any array elements in the range that are",
            "\t\tstrictly less than this value are set to the Value parameter. }",
            "\tValue { Required. Any numeric expression giving the new value to set",
            "\t\tthe array elements that fall below the Limit parameter. The function",
            "\t\tstill continues if this parameter is invalid, in which case the new",
            "\t\tvalues become invalid. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FindAction": {
        "comments": [
            "{ Description: Returns an action from the list of actions in a state.",
            "\t}",
            "{ This function is used to step through the actions in a state. Seldom",
            "\t(if ever) used when adding features to modern VTScada applications. }"
        ],
        "snippets": [
            "FindAction(",
            "\tAction, { Required. Any expression that gives a code value. If the",
            "\t\tcode value represents a module and state, the first action will be",
            "\t\treturned. If the code value represents an action or statement, the",
            "\t\taction returned will depend on Mode. }",
            "\tMode, { Required. Any numeric expression for the mode. The mode is",
            "\t\tdescribed by the following table: Value Mode -1 Previous action 0",
            "\t\tReturn Action parameter 1 Next action If Mode is 1, and Action is the",
            "\t\tlast action in the state, or if Mode is -1, and Action is the first",
            "\t\tpredicate in the state, the return value is invalid. }",
            "\t-1, { 0 }",
            "\t1",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FindCertificate": {
        "comments": [
            "{ Description: Locates a certificate in a certificate store. }",
            "{ This is a useful way of locating a certificate that corresponds to a",
            "\tthumbprint obtained earlier and obtaining a certificate structure for",
            "\tit. Thumbprints are convenient, compact values that can be persisted",
            "\tand used again later. Refer to ListCertificates for a description of",
            "\tthe returned structure. }"
        ],
        "snippets": [
            "FindCertificate(",
            "\tMachineStore, { Required Boolean. If TRUE (non-zero), attempts to find",
            "\t\tthe certificate in a store in the Local Computer certificate hive. If",
            "\t\tFALSE (zero) attempts to find the certificate in a store in the",
            "\t\tCurrent User certificate hive. }",
            "\tStoreName, { Required text. The name of the store in which to find the",
            "\t\tcertificate. }",
            "\tThumbprint { Required. A binary buffer holding the SHA1 thumbprint of",
            "\t\tthe certificate to find. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FindFile": {
        "comments": [
            "{ Description: Takes a file name a returns the full path of the a file",
            "\tby that name that exists in the \"nearest\" directory. }",
            "{ The nearest directory is the one which is the lowest index in the",
            "\tDirList array. For relative file names, all the working copies will be",
            "\tsearched first, followed by the Data directories. }"
        ],
        "snippets": [
            "\\FindFile(",
            "\tFile, { Required text. The name of the file to search for. It may",
            "\t\tcontain an absolute or relative path. }",
            "\tProtectedFile, { Optional Boolean. Set TRUE to indicate that the file",
            "\t\tmust be verified. Defaults to FALSE. }",
            "\tStopOnFailure, { Optional numeric. If ProtectedFile is TRUE, this sets",
            "\t\tthe action to take if protected file can't be loaded. Set to 1 to stop",
            "\t\tthe application. Set to 2 to stop the VAM. }",
            "\tSilent { Optional numeric. If ProtectedFile is TRUE, this can suppress",
            "\t\tfile protection errors as follows: Set to 1 to silence all errors. Set",
            "\t\tto 2 to silence only 'missing file' errors. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FindModem": {
        "comments": [
            "{ Description: This subroutine returns a pointer to one of the Modem",
            "\tManager's own internal modem objects. This pointer may then be used to",
            "\taccess public, read-only properties for display purposes. }"
        ],
        "snippets": [
            "\\ModemManager.FindModem(",
            "\tModemName { Any text expression that identifies the required modem.",
            "\t\tThis will be the name property of a modem tag. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "FindVariable": {
        "comments": [
            "{ Description: Searches for a variable by text name and returns a",
            "\tvalue that is of the type 'Variable'. }",
            "{ The type of value this function returns (Variable) can be cast into",
            "\ttext, which gives the name of the variable, or if the original",
            "\tvariable is a Module, it can also be cast into the Module itself. Note",
            "\tthat it provides no way to retrieve the actual value stored in a",
            "\tvariable that is not a Module. The Variable type value can also be",
            "\tpassed into the SetDefault , GetDefaultValue , or DeleteVariable",
            "\tfunctions as the Variable parameter This function returns invalid if",
            "\tthe variable is not found. FindVariable can be used on the left side",
            "\tof an equals sign (=) to allow shared variables to be set when there",
            "\tare no instances of a module running. }"
        ],
        "snippets": [
            "FindVariable(",
            "\tName, { Required. Any text expression that gives the name of the",
            "\t\tvariable. }",
            "\tModule, { Required. Any expression for the module where the search",
            "\t\tbegins. }",
            "\tReserved n/a, { Reserved for future use, set to 0. }",
            "\tGlobal { Required. Any logical expression. If true (non-0), the search",
            "\t\twill continue to parent objects if they exist and the variable isn't",
            "\t\tfound. If false (0), only Module will be searched. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FirstState": {
        "comments": [
            "{ Description: Sets the first state in a module. }",
            "{ Given that a module starts in its first state, this function will",
            "\tset which state within a module will considered to be first. Seldom",
            "\t(if ever) used when adding features to modern VTScada applications. }"
        ],
        "snippets": [
            "FirstState(",
            "\tState { Required. Any expression for the code value of the new first",
            "\t\tstate. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FitOffset": {
        "comments": [
            "{ Description: Linear regression offset. This function returns the",
            "\toffset or Y intercept of the least square curve fit of data in a pair",
            "\tof arrays. }",
            "{ If an element of either array is invalid, then that X-Y pair is not",
            "\tincluded in the computation. If the number of valid data points is",
            "\tless than 2, the function returns an invalid value. Note that",
            "\tXarrayElem and YarrayElem are not necessarily the same array element",
            "\tnumber. This function is used in conjunction with the FitSlope",
            "\tfunction. This function does calculations with double-precision",
            "\tfloating point values and does not support 64-bit integers",
            "\tcomputations. }"
        ],
        "snippets": [
            "FitOffset(",
            "\tXArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array of X coordinates of the input data set. The subscript for",
            "\t\tthe array may be any numeric expression. If processing a",
            "\t\tmultidimensional array, the usual rules apply to decide which",
            "\t\tdimension should be used. }",
            "\tYArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array of Y coordinates of the input data set. The subscript for",
            "\t\tthe array may be any numeric expression. If processing a",
            "\t\tmultidimensional array, the usual rules apply to decide which",
            "\t\tdimension should be used. }",
            "\tN { Required. Any numeric expression giving the number of data points",
            "\t\tto use from the arrays given by the first two parameters. If N extends",
            "\t\tpast the upper bound of the lowest array dimension, this computation",
            "\t\twill \"wrap-around\" and resume at element 0, until N elements have been",
            "\t\tprocessed. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "FitR2": {
        "comments": [
            "{ Description: Returns the coefficient of determination (i.e. r2) for",
            "\ta linear curve fit. This number gives a measure of how accurate the",
            "\tcurve fit is. }",
            "{ This function returns a number indicating how close a fit the data",
            "\tare to a line. If an element of either array is invalid, then that X-Y",
            "\tpair is not included in the computation. If the result is 0, there is",
            "\tno linear relationship at all between the array of X values and the",
            "\tarray of Y values. If the result is 1, the fit is perfect. The result",
            "\tmay be any value in the range of 0 to 1. This function can be used in",
            "\tconjunction with the other linear regression functions. This function",
            "\tdoes calculations with double-precision floating point values and does",
            "\tnot support 64-bit integers computations. }"
        ],
        "snippets": [
            "FitR2(",
            "\tXArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array of X coordinates of the input data set. The subscript for",
            "\t\tthe array may be any numeric expression. If processing a",
            "\t\tmultidimensional array, the usual rules apply to decide which",
            "\t\tdimension should be used. }",
            "\tYArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array of Y coordinates of the input data set. The subscript for",
            "\t\tthe array may be any numeric expression. If processing a",
            "\t\tmultidimensional, the usual rules apply to decide which dimension",
            "\t\tshould be used. }",
            "\tN { Required. Any numeric expression giving the number of data points",
            "\t\tto use from the arrays given by the first two parameters. If N extends",
            "\t\tpast the upper bound of the lowest array dimension, this computation",
            "\t\twill \"wrap-around\" and resume at element 0, until N elements have been",
            "\t\tprocessed. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "FitSlope": {
        "comments": [
            "{ Description: Linear regression slope. This function returns the",
            "\tslope of the least square curve fit of data in a pair of arrays. }",
            "{ If an element of either array is invalid, then that X-Y pair is not",
            "\tincluded in the computation. If the number of valid data points is",
            "\tless than 2, the function returns an invalid value. Note that",
            "\tXArrayElem and YArrayElem are not necessarily the same array element",
            "\tnumber. This function is used in conjunction with the FitOffset",
            "\tfunction. This function does calculations with double-precision",
            "\tfloating point values and does not support 64-bit integers",
            "\tcomputations. }"
        ],
        "snippets": [
            "FitSlope(",
            "\tXArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array of X coordinates of the input data set. The subscript for",
            "\t\tthe array may be any numeric expression. If processing a",
            "\t\tmultidimensional array, the usual rules apply to decide which",
            "\t\tdimension should be used. }",
            "\tYArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array of Y coordinates of the input data set. The subscript for",
            "\t\tthe array may be any numeric expression. If processing a",
            "\t\tmultidimensional array, the usual rules apply to decide which",
            "\t\tdimension should be used. }",
            "\tN { Required. Any numeric expression giving the number of data points",
            "\t\tto use from the arrays given by the first two parameters. If N extends",
            "\t\tpast the upper bound of the lowest array dimension, this computation",
            "\t\twill \"wrap-around\" and resume at element 0, until N elements have been",
            "\t\tprocessed. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Flush": {
        "comments": [
            "{ Description: Pushes the data in all software caches associated with",
            "\ta FileStream directly to the physical media. }",
            "{ The operation is bound to the speed of the physical media and can be",
            "\tslow. This function is used to ensure that all preceding operations on",
            "\ta FileStream have been completed on the physical media before the",
            "\toperation completes. All file operations in VTScada are subject to the",
            "\tmediation of the file cache (a part of the Operating System that",
            "\tserves to speed up file access) which can have a reliability cost when",
            "\tthe cache or the media are disrupted. This function allows the caller",
            "\tto momentarily opt out of the file cache, ensuring that a file is in",
            "\tthe expected state while exposing the caller to the performance",
            "\tlimitations of the physical device. As this can be a very slow",
            "\toperation it is performed asynchronously, with the caller being",
            "\tinformed after the operation completes. Note that an asynchronous",
            "\tflush can be prevented by the CloseStream function if that results in",
            "\tthe file being closed before the flush completes. There are two types",
            "\tof asynchronous operation available, depending upon whether the",
            "\tCompletionCounter value has been set to a variable containing a valid",
            "\tor invalid value. If invalid, the thread upon which the call was made",
            "\tis blocked until the operation completes, but other threads are",
            "\tallowed to run. CompletionCounter should not be set invalid if Flush",
            "\tis called in a CriticalSection as this will cause all threads to await",
            "\tthe flush operation. If CompletionCounter is set to a valid numeric",
            "\tvalue then the flush operation will occur independently of the calling",
            "\tthread, which will continue executing immediately. This mechanism is",
            "\tidentical to that used by the Diff function, and the CompletionCounter",
            "\tparameters of the two operations can be shared. If the Success",
            "\tparameter is provided and has not been set to 1 by the time the",
            "\toperation completes then it should be assumed that the file has not",
            "\tbeen persisted, and in fact may not be persist-able. This can happen",
            "\tif there is something wrong with the Stream parameter, or if either",
            "\tthe OS file cache or the physical media are damaged. Flushing a file",
            "\tthat has nothing to write will set this parameter to TRUE (1). }"
        ],
        "snippets": [
            "Flush(",
            "\tStream, { Required FileStream. Any expression that resolves to the",
            "\t\tstream that is to be persisted to the physical media. This must be a",
            "\t\tFileStream. Other stream types do nothing in response to a Flush call.",
            "\t\t}",
            "\tCompletionCounter, { Required numeric. Any expression that resolves to",
            "\t\ta variable containing a numeric value or Invalid. If a numeric",
            "\t\tvariable, the value will be incremented at the instant that Flush is",
            "\t\tcalled. It will then be decremented after the stream has been flushed.",
            "\t\tThe same variable can be used to monitor any number of simultaneous,",
            "\t\tasynchronous Flush operations. If this parameter is set to Invalid",
            "\t\tthen the Flush operation will be performed synchronously and the",
            "\t\tfunction won't return until the stream is flushed. }",
            "\tSuccess { Required Boolean. Any expression that resolves to a variable",
            "\t\tcontaining a numeric value or Invalid. If a numeric value, that value",
            "\t\twill be set after the stream has been flushed to indicate the success",
            "\t\tof the operation. A value of TRUE (1) indicates success while FALSE",
            "\t\t(0) indicates failure. If set to invalid then the success of the",
            "\t\toperation is not reported. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FlushCache": {
        "comments": [
            "{ Description: Forces a flush of a log file for a specified DSN. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager, as shown in \"Format\" above.",
            "\tReturns 0 on completion. }"
        ],
        "snippets": [
            "\\ODBCManager.FlushCache(",
            "\tDSN, { Required. The data source name of the ODBC database for which",
            "\t\tto flush the cache. }",
            "\tUserName, { Required The user name in the database for authentication.",
            "\t\tA null provided in this field will be passed to the database as a null",
            "\t\tstring. }",
            "\tPassword, { Required. The password in the database for authentication.",
            "\t\tA null provided in this field will be passed to the database as a null",
            "\t\tstring. }",
            "\tErrPtr { Required. Pointer to an error. Always valid on completion.",
            "\t\tSet to 0 if the command succeeds. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FocusID": {
        "comments": [
            "{ Description: Returns the focus ID of the object in a window that has",
            "\tthe input focus. }",
            "{ If the window is inactive, this function will return the focus ID of",
            "\tthe object that will receive the input focus when the window becomes",
            "\tactive. FocusID values have a valid range of 0 to 32767. Values",
            "\toutside this range are likely to cause the object to vanish. }"
        ],
        "snippets": [
            "FocusID(",
            "\tWindow, { Required. Any object value that will specify the instance of",
            "\t\ta window. }",
            "\tLocal { Optional Boolean. If True then focus calls are module-specific",
            "\t\t(i.e. local to the module calling Focus.) }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Folder": {
        "comments": [
            "{ Description: Draws a tabbed folder dialog. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ }"
        ],
        "snippets": [
            "System.Folder(",
            "\tX1, { Required. The coordinate of the left side of the folder. }",
            "\tY1, { Required. The coordinate of the bottom of the folder. }",
            "\tX2, { Required. The coordinate of the right side of the folder. }",
            "\tY2, { Required. The coordinate of the top of the folder. }",
            "\tLabels, { Required. A one dimensional array of labels to be assigned",
            "\t\tas the labels for each of the folder's tabs. }",
            "\tSelected, { Required. The selected tab. Selected defaults to 0",
            "\t\t(indicating the first tab). }",
            "\tTabHeight { Numeric feedback parameter, telling the caller the height",
            "\t\tof the tabs, or the total height when there are multiple rows of tabs.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Font": {
        "comments": [
            "{ Description: Returns a font value. }",
            "{ This function is for use in layered graphics statements that display",
            "\ttext. A good idea is to use variables for font parameters in the",
            "\tlayered graphics statements. If it is desired to change the font",
            "\tlater, it need only be changed at one place - where the assignment is",
            "\tmade to the variable. This also promotes a consistent use of fonts.",
            "\tParameters are suggestions. Substitutions will be made if the",
            "\tparameters describe a font that cannot be found. Supported font types",
            "\tinclude TRUEType, OpenType and PostScript CFF. }"
        ],
        "snippets": [
            "Font(",
            "\tName, { Required. Any text expression that gives the name of the font.",
            "\t\tThis must be the same as the Microsoft Windowsâ¢ name for the font.",
            "\t\tFor example, \"ARIAL\". }",
            "\tCharSet (Deprecated), { Deprecated. Use DEFAULT_CHARSET in all cases.",
            "\t\tOther values, used by legacy applications, are now ignored. }",
            "\tHeight, { Required. Any numeric expression giving the height of the",
            "\t\tfont in points. }",
            "\tRotation, { Required. Any numeric expression giving the rotation of",
            "\t\teach character in degrees. }",
            "\tWeight, { Required. Any numeric expression giving the weight of the",
            "\t\tfont. Larger numbers give a more bold appearance. The range is 0 to 9.",
            "\t\t}",
            "\tDecoration, { Required bit-wise flag (See: Bitwise Parameters &",
            "\t\tOperations ) 0 Normal 0b01 Italic 0b10 Underline }",
            "\t0b01, { 0b10 }",
            "\tcharFixed { Required. Any logical expression. If true (non-0), all of",
            "\t\tthe characters used by the font will be the same width and height,",
            "\t\tthat of the largest character. If false (0), and the font is a",
            "\t\tproportional or a true type font, then the characters may have",
            "\t\tdifferent sizes. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "FontDialog": {
        "comments": [
            "{ Description: Displays a threaded system common font dialog box. }",
            "{ The first seven parameters are originally read in to set the default",
            "\tvalues for the dialog box and if they are VTScada variables, they will",
            "\tbe set to the attributes for the font chosen by the user in the dialog",
            "\tbox. In addition to the Result parameter, the function itself will",
            "\treturn an error code to indicate whether the dialog was successfully",
            "\topened. A \"1\" indicates failure to open while a \"0\" indicates success.",
            "\tWithin an Anywhere Client session, this function does nothing. }"
        ],
        "snippets": [
            "FontDialog(",
            "\tName, { Required. Any text expression which gives the name of the",
            "\t\tfont. This must be the same as the Microsoft Windowsâ¢ name for the",
            "\t\tfont. For example, \"MS Sans Serif\". }",
            "\tCharSet, { Required. Any numeric expression giving the Font Character",
            "\t\tSets for this font. If you are uncertain as to a valid value, set",
            "\t\tCharSet to 0, thereby obtaining English characters. The keyword,",
            "\t\tDEFAULT_CHARSET may be used, auto-selecting the character set based on",
            "\t\tthe configured Windows locale. OEM_CHARSET will do the same, but will",
            "\t\tuse the DOS equivalent. }",
            "\tHeight, { Required. Any numeric expression giving the height of the",
            "\t\tfont in points. }",
            "\tRotation, { Required. Any numeric expression giving the rotation of",
            "\t\teach character in degrees. }",
            "\tWeight, { Required. Any numeric expression giving the weight of the",
            "\t\tfont. Larger numbers give a more bold appearance. The range is 0 to 9.",
            "\t\t}",
            "\tItalic, { Required. Any logical expression. If true (non-0), the",
            "\t\titalicized version of the font is used. If false (0), the normal",
            "\t\tversion is used. }",
            "\tFixed, { Required. Any logical expression. If true (non-0), all of the",
            "\t\tcharacters used by the font will be the same width and height, that of",
            "\t\tthe largest character. If false (0), and the font is a proportional or",
            "\t\ta true type font they may have different sized characters. }",
            "\tDisplay, { An optional parameter that gives a list of fonts to",
            "\t\tdisplay. Display can be set to one of the following values. Display",
            "\t\tFont List 0 All fonts 1 Screen fonts only 2 Printer fonts only If the",
            "\t\tvalue is invalid, all fonts will be displayed. If out of range, then",
            "\t\tthe function call is not valid. }",
            "\t0, { 1 }",
            "\t2",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ForceEvent": {
        "comments": [
            "{ Description: Forces the editor to perform an action based on the",
            "\tinformation provided. }"
        ],
        "snippets": [
            "ForceEvent(",
            "\tEditorValue, { Required. An editor value that has been created by",
            "\t\tMakeEditor. }",
            "\tEventType, { Required. Any numeric expression that gives the type of",
            "\t\tevent for the editor to perform. EventType Type of event -1 Tab 0",
            "\t\tCursor left 1 Cursor right 2 Cursor up 3 Cursor down 4 Enter 5 Delete",
            "\t\tnext character 6 Delete previous character 7 Move cursor to beginning",
            "\t\tof line 8 Move cursor to end of line 9 Move cursor up one page 10 Move",
            "\t\tcursor down one page 11 Move cursor to start of the Editor 12 Move",
            "\t\tcursor to end of the Editor 13 Move the selection block left one",
            "\t\tcharacter 14 Move the selection block right one character 15 Move the",
            "\t\tselection block up one line 16 Move the selection block down one line",
            "\t\t17 Cut the selection block from the editor to the clipboard 18 Copy",
            "\t\tthe selection block from the editor to the clipboard 19 Insert the",
            "\t\ttext from the clipboard into the editor 20 Toggle block line, column",
            "\t\tselection mode 21 Turn the selection block off 22 Delete the current",
            "\t\tline 23 Scroll down one line 24 Scroll up one line 25 Move the editor",
            "\t\tto the given byte offset 26 Move cursor to the given pixel coordinates",
            "\t\tif they lie within the editor's defined region 27 Insert the supplied",
            "\t\ttext at the current cursor position }",
            "\t-1, { 0 }",
            "\t1, { 2 }",
            "\t3, { 4 }",
            "\t5, { 6 }",
            "\t7, { 8 }",
            "\t9, { 10 }",
            "\t11, { 12 }",
            "\t13, { 14 }",
            "\t15, { 16 }",
            "\t17, { 18 }",
            "\t19, { 20 }",
            "\t21, { 22 }",
            "\t23, { 24 }",
            "\t25, { 26 }",
            "\t27",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ForceServers": {
        "comments": [
            "{ Description: Sets the servership of an application service to a",
            "\tspecific state. }",
            "{ The server states are defined by a 2D array, with row[0] listing the",
            "\tservers and row[1] listing the states. The servers MUST appear in the",
            "\tsame order as returned from GetServersListed for the service. The",
            "\tstate values are zero (undetermined), #RPCClient or #RPCServer. These",
            "\tvalues then get reflected in the RPCStatus to that service. }"
        ],
        "snippets": [
            "\\RPCManager.ForceServers(",
            "\tService, { Name by which the service is known. }",
            "\tServerStates, { A 2D array of servers and their states. }",
            "\tOptGUID { The GUID of the application in which the service instance is",
            "\t\tlocated. Optional, the default is the application to which the caller",
            "\t\tbelongs. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ForceState": {
        "comments": [
            "{ Description: Sets the next state to start when the action script",
            "\tcompletes. }",
            "{ A script may contain more than one ForceState statement, but it is",
            "\tonly the last one executed that sets the state to which the module",
            "\twill switch. This statement does not act as an immediate exit point",
            "\tfrom the script - the script will still run in its entirety. That",
            "\tsaid, the first ForceState will cause the current state to end and any",
            "\treference to objects in that state will fail. If the script trigger",
            "\tstatement did not specify a destination state to transfer to, this",
            "\tfunction will stop the current state as if one had been specified. IF",
            "\tstatements are the standard tool for specifying the next state. Use",
            "\tForceState rarely and only when significant effort would be required",
            "\totherwise to control the flow from one state to another. }"
        ],
        "snippets": [
            "ForceState(",
            "\tState { Required. Any text expression giving the name of the state to",
            "\t\tstart upon completion of the script. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FormalParms": {
        "comments": [
            "{ Description: Returns the number of formal parameters declared in a",
            "\tmodule. }",
            "{ This function's result may seem obvious, but this function can help",
            "\tautomate some of the work in building a parameterized module, just in",
            "\tcase the number of parameters declared in a module is changed. }"
        ],
        "snippets": [
            "FormalParms(",
            "\tModule { Required. Any expression that returns an object or module",
            "\t\ttype value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Format": {
        "comments": [
            "{ Description: Returns a text string corresponding to numbers in a",
            "\tspecified format. }",
            "{ This function is useful in conjunction with the Print statement to",
            "\tproduce numbers in a printed report. Note that if a text expression is",
            "\texpected as an argument by any VTScada function, and a numeric",
            "\targument is used, VTScada performs an automatic Format on the value. }"
        ],
        "snippets": [
            "Format(",
            "\tWidth, { Required. Any numeric expression giving the minimum number of",
            "\t\tcharacters to use. If fewer characters are required to produce the",
            "\t\toutput, the area is filled with blank spaces on the left to make up",
            "\t\tthe required number of characters. This is useful for aligning numbers",
            "\t\ton the right. If more characters are required than the Width parameter",
            "\t\tspecifies, the extra characters are extended to the right. By making",
            "\t\tWidth 0, the output will be aligned on the left. If the Width",
            "\t\tparameter is greater than or equal to 100, the format of the floating",
            "\t\tpoint number used is in the most compact form which may be in",
            "\t\texponential form if the exponent is less than -4 or is greater than",
            "\t\tthe specified Precision parameter. The actual width used in this mode",
            "\t\tis 100 less than the specified Width. Trailing 0s are not displayed in",
            "\t\tthis mode. Values for Width outside the range of 0 to 255 inclusive",
            "\t\tare invalid. }",
            "\tPrecision, { Required. Any numeric expression giving the precision of",
            "\t\tthe output (with rounding). It gives the number of digits to appear",
            "\t\tafter the decimal point, if Width is less than 100, or the maximum",
            "\t\tnumber of significant digits to appear, if Width is greater than or",
            "\t\tequal to 100. Values for Precision outside the range of 0 to 255",
            "\t\tinclusive are invalid. }",
            "\tValue { Required. Any numeric parameter giving the number to be",
            "\t\tformatted. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "FormatBatchQuery": {
        "comments": [
            "{ Description: When given an array of SQL queries, this module will",
            "\tre-format them into a single query, suitable for a batch call to the",
            "\tspecified database. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager, as shown in \"Format\" above. The",
            "\treturn value is the batch query as a text string. If the database type",
            "\tis unknown, this function will return only one element from the array,",
            "\tas indicated by the StartingElement. Batch queries cannot be created",
            "\twithout knowing which separator string to use. The only way to ensure",
            "\tthat a long running (or faulty) query does terminate is to set",
            "\tappropriate values for both the parameters ExecutionTimeout and",
            "\tUseDriverTimeout when running AddConnection . Modules executing",
            "\tqueries are designed to be run as launched modules and will remain",
            "\tactive until complete. }"
        ],
        "snippets": [
            "\\ODBCManager.FormatBatchQuery(",
            "\tdbType, { Required numeric value, indicating the type of this DB",
            "\t\tconnection. DBType Meaning 0 MS SQL 1 MS Access 2 Oracle 3 MySQL 4",
            "\t\tSyBase }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { QueryArray }",
            "\tStartingElement, { Required. Sets the element in the array at which to",
            "\t\tbegin. }",
            "\tNumberOfElements { Required. Sets the number of elements of the array",
            "\t\tthat should be processed. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FormatInteger": {
        "comments": [
            "{ Description: Given a numeric value, returns that value converted to",
            "\tHex, Octal or Binary as specified. }",
            "{ Must be preceded by a backslash. Useful for formatting a numeric",
            "\tvalue into one of the three available representations. }"
        ],
        "snippets": [
            "\\FormatInteger(",
            "\tValue, { Required. Any numeric expression giving the original decimal",
            "\t\tvalue to be converted. }",
            "\tOutputFormat, { Required. The format to convert to. Constants are used",
            "\t\tas follows: (Note the leading backslash in each case.) \\#HEX \\#OCTAL",
            "\t\t\\#BINARY }",
            "\tSize, { Required. The size of the result to return. May be one of:",
            "\t\t\\#DATA_BYTE \\#DATA_WORD \\#DATA_DWORD \\#DATA_QWORD }",
            "\tLeadingZeros { Optional. A Boolean. If TRUE, the output will be padded",
            "\t\twith leading zeros according to the size specified. Defaults to FALSE.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "FormatNumber": {
        "comments": [
            "{ Description: Given a numeric value, returns a compactly formatted",
            "\tversion of this number containing at least the specified number of",
            "\tsignificant digits. }",
            "{ Must be preceded by System. This is primarily a significant digits",
            "\tfunction, but will also return an exponential value if the number of",
            "\tleading or trailing zeros is greater than three. If the number is a",
            "\tnon-integer, its significant digits are limited (to four digits by",
            "\tdefault). If the number can be shown with fewer characters using",
            "\tscientific notation, that notation is used. Integers are left",
            "\tuntouched unless otherwise directed by an optional parameter. }"
        ],
        "snippets": [
            "System.FormatNumber(",
            "\tValue, { Required. Any numeric expression giving the original value to",
            "\t\tbe formatted. }",
            "\tDigits, { Required. Any numeric expression giving the number of",
            "\t\tsignificant digits to be returned from Value. }",
            "\tIntegerFlag { Optional. Any Boolean expression. If FALSE, integers are",
            "\t\treturned without modification. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "FRead": {
        "comments": [
            "{ Description: Reads values from a formatted file and returns the",
            "\tnumber not read. }",
            "{ In early versions of VTS (WEB), there was a numeric leading",
            "\tparameter, N. This should not be included in any new code. Data",
            "\texchange between many file formats is possible if the file formats are",
            "\tknown. The return value is optional and is the number of Vn parameters",
            "\tNOT read. This can be used as an error flag. }"
        ],
        "snippets": [
            "FRead(",
            "\tFile, { Any text expression specifying the path, file name, and",
            "\t\textension to read. A known path alias may be provided in the form,",
            "\t\t:{KnownPathAlias}. }",
            "\tOffset, { Any numeric expression giving the starting file position for",
            "\t\tthe read in bytes, starting at 0. }",
            "\tFormat, { Required. Any text expression giving the format of how the",
            "\t\tvalues (Vn parameters) are to be read. This format is similar, but not",
            "\t\tidentical, to the C language format string for the scanf function,",
            "\t\twhereby each of the % format specifications assigns a value to one of",
            "\t\tthe Vn parameters in the statement in the order in which each appears",
            "\t\tin the list. Note that like a standard text string, these format",
            "\t\tspecifiers must also be enclosed by double quotes. If a format",
            "\t\tspecification appears for which there are no remaining V parameters,",
            "\t\tthe format specification value is read and discarded. For the % format",
            "\t\tspecifications, the following form applies (where the [ ] indicates",
            "\t\toptional elements): %[*][width]type Whereâ¦ % Is a mandatory character",
            "\t\t* The optional asterisk causes the read to occur as per the format",
            "\t\tspecification, but suppresses any assignment to the Vn parameters.",
            "\t\twidth Width is optional, specifying the maximum number of characters",
            "\t\tto read. type The specifications for type are listed in the following",
            "\t\ttable: Format strings are case insensitive. Additionally, specifying a",
            "\t\tcharacter for a type that is not in this list results in all the",
            "\t\tcharacters following the % up to that point to be read exactly as they",
            "\t\tappear in the Format string and discarded. Type Meaning Nb Binary",
            "\t\tformat, where n is a number indicating the type of value (see below) c",
            "\t\tSingle ASCII character (byte) d Signed decimal 64-bit integer e Signed",
            "\t\texponential f Signed floating point g e or f formats i Signed decimal",
            "\t\tinteger l Line of characters terminated by a carriage return, line",
            "\t\tfeed, or both n Present offset in the buffer o Signed octal, 32-bit",
            "\t\tdefault* s Text string t Counted string u Unsigned decimal 64-bit",
            "\t\tinteger x Signed hex integer using \"abcdef\", 32-bit default* znnn",
            "\t\tEscape character where nnn is the 3-digit ASCII code %x and %o will",
            "\t\ttreat values as 32-bit integers by default unless the %ll modifier is",
            "\t\tused. %llx and %llo will read values in 64-bit. for %u, when reading",
            "\t\tan unsigned 64bit integer greater than 9223372036854775807 (the",
            "\t\tlargest signed 64bit integer), the value will be read in as the",
            "\t\tbit-equivalent signed 64bit integer. ( eg. 9223372036854775808 is read",
            "\t\tin as -9223372036854775808.) nb, Binary type For the format",
            "\t\tspecification of %nb, where n specifies the type of number, n must be",
            "\t\ta single digit from one of the following choices. All are",
            "\t\tlow-byte-first. n value Type 0 Byte 1 Short integer (2 bytes, low byte",
            "\t\tfirst) 2 Long integer (4 bytes, low bytes first) 3 IEEE single",
            "\t\tprecision float (4 bytes) 4 <obsolete> 5 IEEE double precision float",
            "\t\t(8 bytes) 6 <obsolete> 7 Binary unsigned short (2 bytes, low byte",
            "\t\tfirst) 8 Unsigned 32-bit integer 9 64-bit FileTime. This reads or",
            "\t\twrites a 64 bit time value in the Microsoft FileTime format. When",
            "\t\treading, the value is converted from the FileTime epoch and units (100",
            "\t\tnanosecond intervals since Jan 1, 1601) to the VTS epoch and units",
            "\t\t(seconds since 1/1/1970) any times earlier than this will result in a",
            "\t\tvalue of 0. When writing, the value is converted from the VTS epoch",
            "\t\tand units to the FileTime epoch and units. c, ASCII character type :",
            "\t\tUnlike BuffWrite this type deals with characters in a string; each",
            "\t\tcharacter being equal to one byte. Unlike the %s option, which reads",
            "\t\tonly up to the first white-space character, the %c option reads the",
            "\t\tnumber of characters/bytes specified by its width and is not",
            "\t\tterminated by any particular character. If no width is specified, a",
            "\t\tsingle character is read. d, Signed decimal integer e, Signed",
            "\t\texponential f, Signed floating point g, e or f formats i, Signed",
            "\t\tdecimal integer type: This option normally reads a decimal integer;",
            "\t\thowever, if a leading \"0b\" is encountered, the number will be",
            "\t\tinterpreted as binary. If a leading \"0\" (zero only) is encountered,",
            "\t\tthe number will be interpreted as octal. If a leading \"0x\" is",
            "\t\tencountered, the number will be interpreted as hexadecimal. For",
            "\t\tdecimal, values will be read as 64-bit integers, but hex, octal and",
            "\t\tbinary will be treated as 32-bit integers unless the %lli modifier is",
            "\t\tused, which will cause the %i format to treat hex, octal and binary as",
            "\t\t64-bit. l, Line of characters: This option reads a line of characters",
            "\t\tterminated by a carriage return, a line feed, or both (in either",
            "\t\torder). The carriage return and line feed will be discarded, and the",
            "\t\tnext character read will be the first character on the next line. The",
            "\t\tmaximum number of characters read is 2GiB (2^30 bytes) or less if the",
            "\t\twidth option is used. n, Buffer offset : This option does not read a",
            "\t\tvalue, but returns the present offset in Buffer and can be useful in",
            "\t\tsubsequent reads. o, Unsigned Octal s, Text string type: Text in the",
            "\t\tstring is read up until a white-space character is encountered, or the",
            "\t\tspecified width has been read, whichever is smaller. Square brackets",
            "\t\tenclosing a character, group of characters, or a caret and a group of",
            "\t\tcharacters used in the format string reads strings not delimited by",
            "\t\tspaces. This is a substitute for the %s format specification. The",
            "\t\tinput is read up to the first character that does not appear inside",
            "\t\tthe square brackets (note that this is case-sensitive). A dash may be",
            "\t\tused to specify a range of characters. For example, the following",
            "\t\tformat specifier: % [A-Fa-f] will read a string up to the first which",
            "\t\tis not an A, B, C, D, E, or F both upper and lower case. t, Counted",
            "\t\tstring type A counted string is encoded as a sequence of UTF-8",
            "\t\tcharacters without a null terminator and preceded by the length in",
            "\t\tbytes. The length in bytes is encoded as Int32, i.e. a \"%2b\". A value",
            "\t\tof â1 is used to indicate an invalid string, a value of 0 indicates a",
            "\t\tnull (\"\") string. Do not apply width or precision modifiers to a \"%t\"",
            "\t\tcounted string. The caret symbol ^. If the first character inside the",
            "\t\tsquare brackets is a caret ( ^ ), the read progresses up to, but not",
            "\t\tincluding, the first character that appears inside the square",
            "\t\tbrackets: %[^X-Z] This would read a string up to, but not including,",
            "\t\tthe first X, Y or Z (upper-case only); if the string were terminated",
            "\t\tby an X, the next character read would be that X. Inside the square",
            "\t\tbrackets, the backslash is used as an escape character - any character",
            "\t\tfollowing a backslash (such as a caret, dash, or backslash) is taken",
            "\t\tas that character without special meaning. For example: %[^X-Z\\^]",
            "\t\twould behave as described previously, except that the string would now",
            "\t\tbe read up to but not including the first X, Y, Z, or ^. Because",
            "\t\tformat specifications for the Vn parameters are indicated by a",
            "\t\tpercentage sign, to read (and discard) an actual percentage sign as",
            "\t\tpart of the text string, precede it with a backslash character (i.e.",
            "\t\t\\%). Also, since the backslash character is used in this manner, as",
            "\t\twell as with special control characters such as line feed, carriage",
            "\t\treturn and form feed, to read and discard a backslash, use two",
            "\t\tbackslash characters (i.e. \\\\). x, Hexadecimal characters: the %x",
            "\t\toption reads the number of characters/bytes specified by its width and",
            "\t\tis not terminated by any particular character. If no width is",
            "\t\tspecified, it will continue reading all bytes that can be recognized",
            "\t\tas hexadecimal characters. For example, given the string \"â¦= 3D\",",
            "\t\t%[^=]=%2x would read the hedadecimal value, 3D (decimal value, 61).",
            "\t\tznnn, Escape characters: This specifies an escape character that will",
            "\t\tbe thrown away when read, where nnn is a 3-digit number giving the",
            "\t\tASCII character code of the escape character. This option is generally",
            "\t\tused as the sole format specifier that reads an entire string, spaces",
            "\t\tincluded, discarding every single occurrence of an escape character,",
            "\t\tor the first occurrence of every pair of escape characters. For",
            "\t\texample, if the string to be read looked like: abXc dXXfghiXXXjXXXXkl",
            "\t\tmX Xn o and the format specifier indicated that the ASCII code for 'X'",
            "\t\t(88) was to be the escape code: %25z088 then the variable that this",
            "\t\twas read into would contain: abc dXfghiXjXXkl m n o Notice that for",
            "\t\teach occurrence of X, the character immediately following it is saved,",
            "\t\teven if it is itself an escape character. Then the next occurrence of",
            "\t\tthe escape character is discarded, with the character following it",
            "\t\tbeing saved, regardless of what it is, and so on. The width field",
            "\t\tspecifies the maximum number of bytes to place in the output string;",
            "\t\tif this number is smaller than the input string (less the offending",
            "\t\tescape characters), the string will be truncated. If no width is",
            "\t\tspecified, a single character will be read. Control characters: In",
            "\t\torder to encode certain control characters as part of the Format",
            "\t\tparameter, one of two methods may be used. The first is to use a",
            "\t\tbackslash character followed by one of the single character codes",
            "\t\tlisted below to produce the desired result. Please note that the",
            "\t\tletters must be lower case. Code Meaning \\b Backspace \\f Form Feed \\n",
            "\t\tLine Feed \\r Carriage Return \\t Horizontal Tab \\v Vertical Tab In",
            "\t\taddition to the predefined codes, an alternate form may be used: \\nnn:",
            "\t\twhere nnn is a three digit integer in the range of 0 to 255 specifying",
            "\t\ta certain ASCII character. If the number contains less than three",
            "\t\tdigits, the leading spaces must be padded with zeroes; this is not the",
            "\t\tcase with the previously listed single character control characters.",
            "\t\tFor example, to include the one byte ASCII character G in the output,",
            "\t\tyou could place its decimal equivalent of 71 in the Format string as",
            "\t\t\\071. }",
            "\tNb, { c }",
            "\td, { e }",
            "\tf, { g }",
            "\ti, { l }",
            "\tn, { o }",
            "\ts, { t }",
            "\tu, { x }",
            "\tznnn,",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t\\b, { \\f }",
            "\t\\n, { \\r }",
            "\t\\t { \\v }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "FWrite": {
        "comments": [
            "{ Description: Writes text or binary data to a file and may also be",
            "\tused to create or delete a file. It returns the number of data items",
            "\tnot written. }",
            "{ In early versions of VTS (WEB), there was a numeric leading",
            "\tparameter, N. This should not be included in any new code. You cannot",
            "\twrite to a read-only file. You may use GetFileAttribs and",
            "\tSetFileAttribs to get/set the read-only attribute. If one of the",
            "\tvalues to be written is outside of the range of the type indicated by",
            "\tthe format specifier, a 0 is written. If the value to be written is",
            "\tinvalid, nothing is written for most format specifiers, except for",
            "\t%nb, which will write a 0 in the place of the invalid. Invalidity of",
            "\tthe output values does not preclude execution of this function. This",
            "\tfunction returns the number of Vn parameters not written to the file.",
            "\tA return value of zero indicates success. Variables that contain",
            "\tinvalid values that were not written due to their invalidity do not",
            "\tincrement this count. An invalid return value indicates an error with",
            "\tone of the parameters. For Mode 3, a 0 indicates success and a 1",
            "\t(true) indicates a problem deleting the file. FWrite cannot be used to",
            "\topen COM 1 or COM 2 for direct writing, however, FWrite can connect to",
            "\ta printer on either COM1 or COM2. All print functions are compatible",
            "\twith the values returned in either of the first two parameters of the",
            "\tPrintDialogBox function. As of version 12.0, VTScada expects all",
            "\tstrings to be encoded using UTF-8. }"
        ],
        "snippets": [
            "FWrite(",
            "\tFileSpec, { Required. Specifies any output file or printer as the",
            "\t\tdestination to which to write. A known path alias may be provided in",
            "\t\tthe form, :{KnownPathAlias}. When specifying a printer, FileSpec will",
            "\t\taccept any of the following: Local Printer: Port name (including",
            "\t\tvirtual ports) with or without a trailing colon (e.g. DEF or DEF:.",
            "\t\tCOM1 or COM1:; USB001 or USB001:; etc.) Windows printer share (e.g.",
            "\t\t\"XYZ Laser Printer\") Windows share name (if the printer is shared)",
            "\t\t(e.g. \"XYZLaser\") Local or Remote Printer: UNC share name (which",
            "\t\tincludes the host and share name (e.g. \"\\\\localhost\\XYlaser\" or",
            "\t\t\"\\\\lab1\\NetPrinter\") If FileSpec is Invalid, FWrite will do nothing",
            "\t\tand execution will continue with the next statement. }",
            "\tMode, { Required. Any numeric expression giving the method of opening",
            "\t\tthe file as shown: (further detail follows the table) Mode Method of",
            "\t\topening 0 Overwrite old data at specified position (other data",
            "\t\tunaffected) 1 Clear existing data before using file (all data lost) 2",
            "\t\tAppend data to end of file (other data unaffected) 3 Delete file (all",
            "\t\tdata lost) 4 Open specifically for printer output 5 Print mode,",
            "\t\tDC-based If the file does not exist, it will be created if a mode of",
            "\t\t0, 1, or 2 is used. In the case of Mode 2, the Position parameter is",
            "\t\tignored. If a position past the end of file is specified, the file",
            "\t\twill be extended to include the new information. If the file is",
            "\t\textended, any information not specified by the Fwrite (such as a gap",
            "\t\tbetween the old end of file and the present Fwrite position) will be a",
            "\t\tstring of unknown, random characters (bytes). In the case of Mode 3,",
            "\t\tthe remaining parameters in Fwrite are ignored, but must be present",
            "\t\tand valid. In the case of Mode 4, special handling and error checking",
            "\t\tfor printer output will be provided. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4 { 5 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GenerateHMAC": {
        "comments": [
            "{ Description: Calculates the hash-based message authentication code",
            "\t(HMAC) for a given key and input message. Supports incremental HMAC",
            "\tgeneration. }",
            "{ HMAC stands for keyed-Hash Message Authentication Code. }"
        ],
        "snippets": [
            "GenerateHMAC(",
            "\tAlgorithm, { Required text. The hash algorithm to use. Any of the",
            "\t\tMicrosoft CNG hashing algorithms may be used, including \"SHA1\",",
            "\t\t\"SHA256\", \"SHA384\", \"SHA512\" and others. A list is available at",
            "\t\thttps://msdn.microsoft.com/en-us/library/windows/desktop/aa375534(v=vs.85).aspx",
            "\t\t}",
            "\tKey, { Required text. The text string key to use for the HMAC. }",
            "\tMessage, { Required text. The text string to use as the input message",
            "\t\t}",
            "\tHashHandle { Optional. If the parameter is Invalid or omitted,",
            "\t\tGenerateHMAC simply generates the HMAC for the supplied buffer. If the",
            "\t\tparameter is present, it must be a variable that will be set to a hash",
            "\t\thandle holding the current hash value. This can then be passed in as",
            "\t\tthe 4th parameter to a further call to GenerateHMAC to add the",
            "\t\tcontents of another buffer to the HMAC }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GenerateKey": {
        "comments": [
            "{ Description: The GenerateKey function generates a random",
            "\tcryptographic session key or a public/private key pair. A handle to",
            "\tthe key or key pair is returned. This handle can then be used as",
            "\tneeded with any CryptoAPI function requiring a key handle. It is the",
            "\tVTScada analog of the CryptoAPIâs CryptGenKey call. }",
            "{ The return value for this function is a handle to the Key. If an",
            "\terror occurs, then the return value is invalid. A key has a value type",
            "\tof 37. If cast to text, then the hexadecimal value of the algorithm ID",
            "\twill be returned. Does not support CNG (Cryptography New Generation).",
            "\t}"
        ],
        "snippets": [
            "GenerateKey(",
            "\tCSPHandle, { Required. The handle of a CSP (cryptographic service",
            "\t\tprovider) to use to generate the key. }",
            "\tAlgID, { Required. Identifies the algorithm for which the key is to be",
            "\t\tgenerated. Values for this parameter vary depending on the CSP used",
            "\t\tand are defined in WinCrypt.h }",
            "\tFlags, { An optional parameter specifying the flags to be passed to",
            "\t\tCryptGenKey. If omitted or invalid then the value 0 is used. }",
            "\tError, { An optional variable in which the error code for the function",
            "\t\tis returned. It can have the following values. Error Definition 0 Key",
            "\t\tsuccessfully generated. 1 CSPHandle or AlgID parameters invalid. x Any",
            "\t\tother value is an error from CryptGenKey. }",
            "\t0, { 1 }",
            "\tx",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GenerateSignature": {
        "comments": [
            "{ Description: Generates a digital signature of a handle returned from",
            "\tHash(). }",
            "{ Using an asymmetric key for signing is quite expensive compared to",
            "\tan HMAC with a symmetric key. For this reason, the data itself is not",
            "\tsigned, but hashed and then the hash signed. This is much more",
            "\tefficient. }"
        ],
        "snippets": [
            "GenerateSignature(",
            "\tHashObj, { Required. Handle returned from a call to Hash() }",
            "\tKey, { Optional. CNG (Cryptography New Generation) only. The",
            "\t\tcryptographic key to be used to sign the data. This must be an",
            "\t\tasymmetric private key. }",
            "\tPaddingType, { Optional integer. Can be one of the following values:",
            "\t\tValue~Meaning 0~No padding is to added to the plaintext data before",
            "\t\tsigning. 1~Padding is added to the data before signing in accordance",
            "\t\twith the RSASSA-PKCS1-v1_5 scheme. 2~Padding is added to the data",
            "\t\tbefore signing in accordance with the RSASSA-PSS scheme. }",
            "\tPadHashAlgorithm, { Optional text value. The algorithm to be used for",
            "\t\tpadding the data. The hash is then signed. }",
            "\tSaltLength { Optional integer. Only required for RSASSA-PSS padding.",
            "\t\tThis is the length of the salt used by that scheme. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Get": {
        "comments": [
            "{ Description: Reads an array of historical data from a file (written",
            "\tby Save or SaveHistory) and returns the relative file position of the",
            "\tfile entry following the last one read, or an error code. }"
        ],
        "snippets": [
            "Get(",
            "\tArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array in which data read from the file will be stored. The",
            "\t\tsubscript for the array may be any numeric expression. If processing a",
            "\t\tmultidimensional array, the usual rules apply to decide which",
            "\t\tdimension should be used. }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\tentries to use. If this value is greater than the dimension of the",
            "\t\tarray, then the array dimension is used for N. If N extends past the",
            "\t\tupper bound of the lowest array dimension, this computation will",
            "\t\t\"wrap-around\" and resume at element 0, until N elements have been",
            "\t\tprocessed. }",
            "\tFile, { Required. Any text expression giving the file name for the",
            "\t\thistorical data file. The file extension should not be added to the",
            "\t\tname since the default of \".DAT\" is automatically added. If the file",
            "\t\tname is prefixed with a period, the path will be to the directory that",
            "\t\tthe module is contained in. }",
            "\tFieldNum, { Required. Any numeric expression giving the field number",
            "\t\tto be read from the file. The value number for the actual data starts",
            "\t\tat 0 and corresponds to the columns specified in Save or SaveHistory.",
            "\t\tIt is also possible to retrieve time data associated with each record",
            "\t\tby setting this parameter to a negative value. Time options are:",
            "\t\tFieldNum Time Option -1 Time of day only -2 Date only -3 Time since",
            "\t\tJanuary 1, 1970 It is possible to retrieve more than one field in a",
            "\t\tsingle Get statement. To do this, pass an array of values in as the",
            "\t\tFieldNum parameter }",
            "\t-1, { -2 }",
            "\t-3",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetAccountID": {
        "comments": [
            "{ Description: Returns the account ID of the named account. }",
            "{ If AccountName is Invalid or not specified, returns the account ID",
            "\tof the callerâs account. A common use is to store a retained instance",
            "\tof a module, which is linked to the current user. See: SetInstanceName",
            "\tfor more information and an example. }"
        ],
        "snippets": [
            "\\SecurityManager.GetAccountID(",
            "\tAccountName { Optional. The name of the account to obtain the account",
            "\t\tID for. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetAccountInfo": {
        "comments": [
            "{ Description: Returns one or more AccountData structures. }",
            "{ To use this API, the calling code must be running in a security",
            "\tsession that has the Manager privilege. If AccountID is valid, a",
            "\tsingle AccountData Structure is returned for the specified account. If",
            "\tAccount ID is Invalid, a dictionary of AccountData structures for",
            "\tevery account and role is returned. The dictionary uses either account",
            "\tnames or account IDs as the dictionary key, depending on the value of",
            "\tthe IndexByID parameter. The AccountData structures returned here can",
            "\tbe modified in situ and passed back into ModifyAccount or",
            "\tDeleteAccount to effect changes to the account records. The Password",
            "\tand AltID fields of the returned structure are always Invalid. }"
        ],
        "snippets": [
            "\\SecurityManager.GetAccountInfo(",
            "\tAccountName, { Optional. The account ID for which information is to be",
            "\t\tobtained. }",
            "\tIndexByID { Optional. A Boolean. If TRUE the returned dictionary will",
            "\t\tuse account IDs as the dictionary key. If FALSE (default) the returned",
            "\t\tdictionary will use the account names as the dictionary key. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetAdaptersInfo": {
        "comments": [
            "{ Description: Returns TRUE whenever the network interface",
            "\tconfiguration of the local computer changes. (For example, turning off",
            "\tWiFi or plugging in a network adapter.) Current network configuration",
            "\tis returned in the parameter. }",
            "{ The dictionary maintained in variable Info, has 3 members. Each of",
            "\tthe members holds an array of equal size, with one element per network",
            "\tinterface. \"InterfaceID\" Holds the interface ID number that Windows",
            "\thas assigned to the network interface. \"Name\" Holds the textual name",
            "\tof the interface. \"UniqueID\" Holds a UUID assigned to the interface by",
            "\tWindows. \"Addresses\" Holds an array of IPaddress structures, one",
            "\telement for each IPaddress configured on the interface. Each structure",
            "\thas the following members: \"Address\" - a buffer holding the configured",
            "\tbinary address. Note that IPv4 addresses are held in IPv4-mapped IPv6",
            "\taddress format. \"Mask\" - a buffer holding the configured binary mask",
            "\tfor \"Address\" (IPv4 only). The binary address buffers can be used as",
            "\tinput to IPMask statements, such as IPMaskToText. }"
        ],
        "snippets": [
            "GetAdaptersInfo(",
            "\tInfo { Optional. A variable that will be assigned a dictionary",
            "\t\tdescribing the current networking configuration of the local computer.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetAlarmActionLabel": {
        "comments": [
            "{ Description: Returns an action label for an alarm / event record }",
            "{ This function is a user-interface helper module, useful for",
            "\tconverting the Action field of an AlarmRecord into a displayable event",
            "\tor status label. Displayed values are those stored in the application",
            "\tproperties, AlarmEventDesc0-21 (IsHistory==TRUE) or",
            "\tAlarmStatusDesc0-5(IsHistory==FALSE). }"
        ],
        "snippets": [
            "\\GetAlarmActionLabel(",
            "\tIsHistory, { Required Boolean. Set TRUE if you want the label for a",
            "\t\thistorical event or FALSE for the current status }",
            "\tRecord, { Optional. The alarm record, for which to obtain the action",
            "\t\tlabel. }",
            "\tAction { Optional action code, for use if Record is invalid and",
            "\t\tIsHistory is true. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetAlarmConfiguration": {
        "comments": [
            "{ Description: Returns a copy of an alarm's configuration structure,",
            "\treturning an unpopulated structure if it does not already exist. }"
        ],
        "snippets": [
            "\\AlarmManager.GetAlarmConfiguration(",
            "\tAlarmName { Required text. Unique name for the alarm. Typically the",
            "\t\tunique ID, which can be obtained using GetAlarmName . If there are",
            "\t\tmultiple built-in alarms in a tag, the convention is to concatenate",
            "\t\tthe UniqueID with a separator and a unique integer or string per",
            "\t\talarm. For example, Concat(Root\\UniqueID, \\AlarmSeparatorString, 0). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetAlarmList": {
        "comments": [
            "{ Description: Returns filtered and sorted lists of records from alarm",
            "\tdatabases. }",
            "{ An alarm database contains a history of alarm transactions / event",
            "\trecords. Event records are included only in a queries for a history",
            "\tlist. Filtering - Only records that pass filtering will be displayed.",
            "\tFiltering may be: Area filtering (Realms, etc..) [automatic] Shelved",
            "\talarm suppression Custom filter expression For efficiency reasons the",
            "\tfiltering is done on the base record rather than the calculated",
            "\tversion. History - Unlike the live lists, the history is unbounded and",
            "\tmust be accessed from storage. The process can take time so search",
            "\tprogress is reported via PtrHistoryProgress. When working with a live",
            "\tlist, the system will automatically rerun filtering and recalculate",
            "\tfields if an alarm is changes on any list, allowing filtering and",
            "\tcalculated fields based on other list state. }"
        ],
        "snippets": [
            "\\AlarmManager\\GetAlarmList(",
            "\tListPtr, { Required. This pointer will be assigned the array of",
            "\t\trecords being returned. The array may be longer than the number of",
            "\t\trecords, see LengthPtr for the valid length. If there is no sort",
            "\t\torder, the most recent record is in array index 0. }",
            "\tLengthPtr, { Required. Pointer to a variable which will be assigned",
            "\t\tthe number of elements in the ListPtr array that are to be used. }",
            "\tListNames, { Required. Provide a text string or an array of strings",
            "\t\tidentifying the lists to which the alarm will subscribe. Valid list",
            "\t\tnames include: History Active Unacked Shelved Disabled Configured To",
            "\t\tobtain the Current list, include Active and Unacked in your array. }",
            "\tSnapshot, { Optional Boolean. If TRUE, then this function will take a",
            "\t\tsnapshot of the list(s) and terminate. If FALSE, then the function",
            "\t\twill build the list while also keeping it updated. A snapshot of live",
            "\t\tlist(s) acts as a subroutine, all other uses must launch a worker",
            "\t\tprocess. Defaults to FALSE. }",
            "\tIncludeShelved, { Optional Boolean. Set TRUE to include shelved",
            "\t\talarms. Defaults to FALSE. }",
            "\tIncludeConfig, { Optional Boolean. Set TRUE to include alarm",
            "\t\tconfiguration events in History. Defaults to FALSE. }",
            "\tFilterExpr, { Optional text string that is the expression to evaluate",
            "\t\tif a record is to be included. Standard realm-area filtering is",
            "\t\thandled automatically so should not be included in this expression.",
            "\t\tNote that text must be surrounded in quotation marks if being used in",
            "\t\tthe filter. For example: Concat(\"Record\\Area == \"\"\", pArea, \"\"\"\") }",
            "\tCalculatedFields, { Optional array. May be used to create additional",
            "\t\trecord fields or modify existing records. A callback subroutine allows",
            "\t\trecord field values to be replaced, for example swapping AccountID for",
            "\t\tan operator name. If specified, this parameter must be an array that",
            "\t\tdefines the extra record fields. For example: CalculatedFields =",
            "\t\tNew(4); CalculatedFields[0] = \"FriendlyName\"; CalculatedFields[1] =",
            "\t\t\"IsActive\"; CalculatedFields[2] = \"IsUnacked\"; CalculatedFields[3] =",
            "\t\t\"IsDisabled\"; }",
            "\tCalculatedFieldsScope, { Optional. Scope in which to find calculated",
            "\t\tfield values. Often, Self() }",
            "\tSortOrder, { Optional. For live lists this is sorting information for",
            "\t\tSortArray. For example: { Sort by friendly name } SortInfo =",
            "\t\tSortKeys(\"FriendlyName\", 1 { text }, #SortAscending); For history set",
            "\t\tTRUE for forward chronological, and FALSE for reverse (default). }",
            "\tBeginTime, { Optional UTC timestamp. Oldest time. May be used when",
            "\t\tfiltering history. }",
            "\tEndTime, { Optional UTC timestamp. Newest time. May be used when",
            "\t\tfiltering history. }",
            "\tMaxHistory, { Optional numeric, except required when querying the",
            "\t\tHistory list. Limits the number of history records retrieved. No",
            "\t\tdefault. }",
            "\tPtrDone, { Optional pointer. Will be set TRUE when history search",
            "\t\tcompletes. }",
            "\tPtrHistoryProgress, { Optional pointer. Will be set to a structure",
            "\t\tinstance containing progress stats (HistoryProgressDef) }",
            "\tPtrChangeStats, { Optional pointer. Allows the caller to detect",
            "\t\tchanges. Set to a structure as follows: Additions { Set to cumulative",
            "\t\tnumber of records added }; Modifications { Set to cumulative number of",
            "\t\trecords modified}; Deletions { Set to cumulative number of records",
            "\t\tdeleted }; }",
            "\tDBTags, { Optional array of AlarmDatabase tag names (UniqueIDs or",
            "\t\tFriendly Names). If a simple text value, then it is the single tag to",
            "\t\taccess. If Invalid then all AlarmDatabase tags are included. Realm",
            "\t\tfiltering is automatically detected and used. }",
            "\tRefreshInterval, { Optional numeric. Minimum time in seconds between",
            "\t\tsorted array updates. Defaults to a half-second. May also be set by",
            "\t\tadding an application property, AlarmListRefreshDelayTime. }",
            "\tRealm, { Optional text. Realm to use for realm filtering. This will be",
            "\t\tdetected automatically for the logged-on account if not otherwise",
            "\t\tspecified. }",
            "\tArea, { Optional text. Area to use for filtering. May use wildcard",
            "\t\tcharacters. }",
            "\tIncludeSubordinates, { Optional Boolean. When TRUE,alarm databases",
            "\t\tfrom subordinate applications are included. Defaults to TRUE. }",
            "\tInitDeferTimeout { Optional numeric. Sets a time to wait before",
            "\t\tinitializing. Setting this value to .1 will allow other objects on a",
            "\t\tpage to load before the alarm list is populated, resulting in a",
            "\t\tsmoother user experience. Defaults to 0. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetAlarmName": {
        "comments": [
            "{ Description: Returns the name of a given alarm within a tag for use",
            "\twith the AlarmManager's inquiry functions. }",
            "{ For tags that do not have a range of alarm types (PLC alarm, Alarm",
            "\tPoint, Digital Status, Network Status, Pump Status, Selector Switch),",
            "\tdo not provide a Key. }"
        ],
        "snippets": [
            "\\GetAlarmName(",
            "\tTagObj, { Required. A reference to a tag that contains an alarm. }",
            "\tKey { Optional text. Identifies which alarm to query within the tag.",
            "\t\tTypically, this will be any of \"LowLow\", \"Low\", \"High\", \"HighHigh\", or",
            "\t\t\"Digital\" Key is not case-sensitive. If set to a word other than those",
            "\t\tlisted here, GetAlarmName will return Invalid. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetAlarmObject": {
        "comments": [
            "{ Description: Returns an alarm object value given an alarm name. }",
            "{ This function can also provide the alarm's Root tag value, returned",
            "\tthrough the optional second parameter. }"
        ],
        "snippets": [
            "\\AlarmManager.GetAlarmObject(",
            "\tAlarmName, { Required text. Unique name for the alarm. Typically the",
            "\t\tunique ID, which can be obtained using GetAlarmName . If there are",
            "\t\tmultiple built-in alarms in a tag, the convention is to concatenate",
            "\t\tthe UniqueID with a separator and a unique integer or string per",
            "\t\talarm. For example, Concat(Root\\UniqueID, \\AlarmSeparatorString, 0). }",
            "\tptrRoot { Optional pointer. If valid, and if the alarm is a tag or a",
            "\t\tsubmodule of a tag, that tag's object value will be returned in this",
            "\t\tparameter. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetAlarmStat": {
        "comments": [
            "{ Description: Returns the number of alarms in the given tag and its",
            "\tdescendents, where those alarms match the specified statistic. }"
        ],
        "snippets": [
            "\\FunctionLib.GetAlarmStat(",
            "\tTagObj, { Tag object to be checked for alarm statistics. Typically a",
            "\t\tparent tag, such as a station. Typically provided in the form,",
            "\t\t[TagName]\\Root }",
            "\tStatistic, { Required Text. Specifies which alarm types or states to",
            "\t\tcount. See comments. }",
            "\tPriority { Optional Numeric. Specify only if querying statistics for a",
            "\t\tgiven priority value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetAlarmStateStats": {
        "comments": [
            "{ Description: Returns a structure containing the cumulative alarm",
            "\tstate statistics for the specified tag. (See following notes.) If the",
            "\ttag is the ancestor of multiple alarm tags, the stats will be the",
            "\taccumulation of all descendent alarms. }",
            "{ TagName may be a context or other parent, in which case statistics",
            "\twill be gathered for all of the child tags. It may also be Code, in",
            "\torder to retrieve statistics about the whole application. Information",
            "\treturned by this function is not limited by realm-area filtering. The",
            "\treturn structure includes the following elements: ActiveCount { Total",
            "\tActive alarms including descendents }; UnackedCount { Total Unacked",
            "\talarms including descendents }; ShelvedCount { Total Shelved alarms",
            "\tincluding descendents }; DisabledCount { Total Disabled alarms",
            "\tincluding descendents }; SuppressedCount { Total Suppressed alarms",
            "\tincluding descendents }; HighestActivePriority { Highest priority of",
            "\tactive alarms including descendents }; HighestUnackedPriority {",
            "\tHighest priority of unacked alarms including descendents };",
            "\tActivePriorities { Dictionary of counts of active alarms for each",
            "\tpriority, including descendents }; UnackedPriorities { Dictionary of",
            "\tcounts of unacked alarms for each priority, including descendents }",
            "\tThe dictionaries, ActivePriorities and UnackedPriorities are keyed by",
            "\talarm priority numbers, which are padded with zeros. For example, the",
            "\tkey to access the count of Critical active alarms is \"0001\". These",
            "\tdictionaries will return an invalid if there are no alarms that match",
            "\tyour query. A valid value will not be returned until a specified alarm",
            "\thas been generated. To protect against an invalid return from the",
            "\texpression, especially if value returned is to be included in reports",
            "\tor displayed on a screen, the expression should be wrapped in a",
            "\tPickValid() so a valid value will always be returned. For example:",
            "\tPickValid(\\AlarmManager.GetAlarmStateStats(\\Root).ActivePriorities[\"0001\"],",
            "\t0) }"
        ],
        "snippets": [
            "\\AlarmManager.GetAlarmStateStats(",
            "\tTagName { Required object reference. The tag for which statistics are",
            "\t\tto be gathered. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetAlarmStatus": {
        "comments": [
            "{ Description: Returns a reference to an alarm's status structure,",
            "\tproviding access to the alarm's current state without having to make",
            "\tfunction calls. }"
        ],
        "snippets": [
            "\\AlarmManager\\GetAlarmStatus(",
            "\tAlarmName { Required text. Unique name for the alarm. Typically the",
            "\t\tunique ID, which can be obtained using GetAlarmName . If there are",
            "\t\tmultiple built-in alarms in a tag, the convention is to concatenate",
            "\t\tthe UniqueID with a separator and a unique integer or string per",
            "\t\talarm. For example, Concat(Root\\UniqueID, \\AlarmSeparatorString, 0). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetAllWorkstationNames": {
        "comments": [
            "{ Description: Launched module that creates an alphabetically sorted",
            "\tlist of all known workstation names. The list is not service specific.",
            "\t}",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager,",
            "\tand the System variable must be declared in AppRoot.src. This",
            "\tsubroutine is only called by the service instance that is server",
            "\tduring synchronization. }"
        ],
        "snippets": [
            "\\RPCManager.GetAllWorkstationNames(",
            "\tpList, { Required. Pointer which will be set to the resulting server",
            "\t\tlist of workstation names. }",
            "\tLayer { Optional. Layer for which a server list should be obtained. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetAppInstance": {
        "comments": [
            "{ Description: Retrieves the Layer object (\\AppLayer) for a particular",
            "\tapplication specified by GUID. }",
            "{ The return value of this function will be an object that becomes",
            "\tinvalid upon completion. If the Layer has not finished loading, this",
            "\tfunction will wait until it does so before returning. This is an",
            "\tasynchronous operation. If the GUID does not match any known",
            "\tapplication, then Invalid will be assigned to the second parameter. }"
        ],
        "snippets": [
            "System.GetAppInstance(",
            "\tGUID, { Required text. The 36-byte GUID of the application to be",
            "\t\tretrieved. }",
            "\tpAppInstance { A pointer to a variable. The Layer object matching the",
            "\t\tGUIDwill be returned via this pointer. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetByte": {
        "comments": [
            "{ Description: Returns a single byte from a buffer. }",
            "{ This function is useful for manipulating text on a byte-by-byte",
            "\tlevel. For example, examining serial I/O driver response packets. }"
        ],
        "snippets": [
            "GetByte(",
            "\tBuffer, { Required. Any buffer expression giving the buffer to get the",
            "\t\tbyte from. }",
            "\tOffset { Required. Any numeric expression giving the offset from the",
            "\t\tstart of the buffer in bytes, starting from 0. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetCertificateInfo": {
        "comments": [
            "{ Description: Returns a structure of information about a supplied",
            "\tX.509 certificate. }",
            "{ The certificate blob may be obtained from a number of different",
            "\tsources. For example, it may be transmitted over a communication",
            "\tprotocol or be the output of another certificate DAG. The structure",
            "\treturned is of the same format as that returned from ListCertificates",
            "\t. }"
        ],
        "snippets": [
            "GetCertificateInfo(",
            "\tCertificateBLOB { Required. A buffer holding a DER-binary encoded",
            "\t\tcertificate BLOB (binary large object) of the certificate from which",
            "\t\tinformation is required. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetClientDiverts": {
        "comments": [
            "{ Description: Returns a one-dimensional array of flags, indicating",
            "\tthe divert status of each client. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager,",
            "\tand the System variable must be declared in AppRoot.src. Each client",
            "\tthat has service RPCs diverted to an auxiliary holding queue (as a",
            "\tresult of the SetDivert function) has its array element in the",
            "\treturned array set to one. If the 16-byte binary format of the GUID",
            "\tfor the application in which the service instance is located is not",
            "\tknown, the GetClientGUIDs function may be used to obtain it. }"
        ],
        "snippets": [
            "\\RPCManager.GetClientDiverts(",
            "\tService, { Required. Any text expression giving the name by which the",
            "\t\tservice is known. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetClientGUIDs": {
        "comments": [
            "{ Description: Returns a one-dimensional array of the application",
            "\tGUIDs of the clients of the specified RPC service instance. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager,",
            "\tand the System variable must be declared in AppRoot.src. The returned",
            "\tarray elements will all be the same, unless cross-application RPC is",
            "\tbeing used. }"
        ],
        "snippets": [
            "\\RPCManager.GetClientGUIDs(",
            "\tService, { Required. The name by which the service is known. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetClientIPs": {
        "comments": [
            "{ Description: Returns a one-dimensional array of the IP addresses of",
            "\tthe clients of the specified service instance. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager,",
            "\tand the System variable must be declared in AppRoot.src. On a",
            "\tmulti-homed system, any of the possible IPs may be returned for each",
            "\tclient. }"
        ],
        "snippets": [
            "\\RPCManager.GetClientIPs(",
            "\tService, { Required. The name by which the service is known. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetClientList": {
        "comments": [
            "{ Description: Returns a one-dimensional array of the names of the",
            "\tclients of the specified service instance. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager,",
            "\tand the System variable must be declared in AppRoot.src. On a",
            "\tmulti-homed system, any of the possible alias names may be returned",
            "\tfor each client. }"
        ],
        "snippets": [
            "\\RPCManager.GetClientList(",
            "\tService, { Required. The name by which the service is known. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetClientMode": {
        "comments": [
            "{ Description: Returns a one-dimensional array of the modes of the",
            "\tclients of the specified service instance. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager,",
            "\tand the System variable must be declared in AppRoot.src. The mode",
            "\tvalue represents the current synchronization state of the client, with",
            "\trespect to the local service instance. Presently, one of the following",
            "\tvalues may be returned in each array element \\RPC_ACCEPT_ALL - the",
            "\tclient is fully synchronized. \\RPC_SYNC_MODE - the client is being",
            "\tsynchronized. \\RPC_LINKCONTROL_ONLY - client requires synchronization.",
            "\t}"
        ],
        "snippets": [
            "\\RPCManager.GetClientMode(",
            "\tService, { Required. The name by which the service is known. }",
            "\tOptGUI { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetClientNodes": {
        "comments": [
            "{ Description: Returns a one-dimensional array of the object values of",
            "\tthe Machine Nodes of the clients of the specified service instance. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager,",
            "\tand the System variable must be declared in AppRoot.src. }"
        ],
        "snippets": [
            "\\RPCManager.GetClientNodes(",
            "\tService, { Required. The name by which the service is known. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetCodeObj": {
        "comments": [
            "{ Description: Retrieves the \"Code\" object associated with the layer.",
            "\t}"
        ],
        "snippets": [
            "LayerRoot.GetCodeObj();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetColorInfo": {
        "comments": [
            "{ Description: Returns the brush and pen information for a given",
            "\tgraphic statement. }",
            "{ The return value of this function is determined by Attribute. }"
        ],
        "snippets": [
            "GetColorInfo(",
            "\tCode, { Required. Any statement that gives the code pointer of the",
            "\t\tobject whose color information is desired. }",
            "\tPenBrushNum, { Required. Any numeric expression which gives the number",
            "\t\tof the pen or brush which the color information is desired for. The",
            "\t\tfirst pen or brush is numbered 1. }",
            "\tAttribute, { Required. Any numeric expression which gives the desired",
            "\t\tcolor attribute. Attribute Color Attribute 0 Type of the PenBrushNum",
            "\t\tsupplied. Return value is 19 (brush) or 20 (pen) 1 The foreground",
            "\t\tcolor of the brush or pen specified 2 For a brush, the background",
            "\t\tcolor, for a pen, the width 3 For a brush, the pattern number, for a",
            "\t\tpen, the style }",
            "\t0, { 1 }",
            "\t2 { 3 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetConfiguration": {
        "comments": [
            "{ Description: Returns the configuration parameters from the license",
            "\tkey for this copy of VTScada. }",
            "{ If the license key information fails certain consistency checks,",
            "\tthen this function returns Invalid for all values of Option. This",
            "\tfunction can be used to determine license restrictions pertaining to",
            "\tthe current copy of VTScada. GetConfiguration(0) is identical to the",
            "\tfunction SerialNum() and is preferred for all new code. }"
        ],
        "snippets": [
            "GetConfiguration(",
            "\tOption, { Required. Selects the configuration item for which",
            "\t\tinformation is required. See the following table: (GetConfiguration",
            "\t\treturns Invalid for any value outside the range shown. ) Option",
            "\t\tConfiguration Item 0 Serial number of this copy of VTS 1 Number of",
            "\t\thours for restricted run time (0 if unrestricted) 2 Expiry date for",
            "\t\tfree updates. (Must be handed to the Date function for a",
            "\t\thuman-readable format.) 3 Number of tags permitted (or 0 if no limit)",
            "\t\t4 Number of browser clients permitted 5 Run mode (0 = Full. 1 = Run",
            "\t\tTime. 2 = Configuration. 3 = View Mode) 6 Reserved 7 Returns the",
            "\t\tnumber of days remaining in the evaluation period. If this is not an",
            "\t\tevaluation license, then this option returns Invalid. 8 Returns the",
            "\t\tClient Connection Restriction. If TRUE (1). VTScada client systems",
            "\t\tinstalled with this license may only connect to servers with the same",
            "\t\tserial number. If FALSE (0), VTScada client systems installed with",
            "\t\tthis license may connect to any server. 9 The VTScada Alarm",
            "\t\tNotification System is an option controlled by the installation key in",
            "\t\tVTScada versions 7.1 and later. Option 9 returns the status of this",
            "\t\tenable - TRUE if the Alarm Notification System is supported. FALSE if",
            "\t\tthe Alarm Notification System is not supported. 10 Returns the",
            "\t\tcopyright statement built into VTScada. The format of the returned",
            "\t\ttext string is: \"Copyright Â© 1988-2022 Trihedral Engineering Ltd\" 11",
            "\t\tNot used. 12 Returns 1 if Remote Data Access is enabled. 0 if not 13",
            "\t\tNot used. 14 Returns 1 if the OPC server is enabled. 0 if not 15",
            "\t\tReturns 1 if this installation is licensed to run 64-bit VTScada. 0 if",
            "\t\tnot 16 Returns 1 if the key enables the Show Version Control option in",
            "\t\tthe Application Properties Dialog 17 Returns 1 if Synchronized",
            "\t\tConfiguration is enabled 18 Returns 1 if Application RPC Services are",
            "\t\tenabled 19 Returns 1 if machine is an RPC Server 20 Reserved 21 IVONA",
            "\t\t(Deprecated) 22 Reserved 23 Returns the installation key evaluation",
            "\t\tperiod type, as follows: 0 - unlimited 1 - 30 days from install 2 - 90",
            "\t\tdays from install 3 - same as maintenance expiration 24 Reserved 25",
            "\t\tReturns the location of the VTScada executable 26 Returns TRUE if the",
            "\t\tRemote Idea Studio is enabled. (VIC use only) }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10, { 11 }",
            "\t12, { 13 }",
            "\t14, { 15 }",
            "\t16, { 17 }",
            "\t18, { 19 }",
            "\t20, { 21 }",
            "\t22, { 23 }",
            "\t24, { 25 }",
            "\t26",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetConnList": {
        "comments": [
            "{ Description: Called to obtain a list of the available connections.",
            "\tThe list will be returned in the form of two pointers: one for an",
            "\tarray of the connection objects and the other for an array of the",
            "\tconnection names. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager\\, as shown in \"Format\" above.",
            "\tReturns 0 upon completion. The module may be called as a subroutine in",
            "\ta script or as a called function in a state. When called in a state,",
            "\tthere is no automatic updating of the connection list as it changes. }"
        ],
        "snippets": [
            "\\ODBCManager\\GetConnList(",
            "\tObjPtr, { Required. The list of object values to return. }",
            "\tNamePtr { Required. The list of names to return. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetContainerNumActive": {
        "comments": [
            "{ Description: Returns the number of active alarms within a hierarchy",
            "\tof tags. }",
            "{ In earlier versions of VTScada, if you had written a custom tag with",
            "\ta built-in alarm, you had to ensure that it contributed its active",
            "\talarms to the count maintained by a hierarchical accumulator module.",
            "\tThis is no longer true. }"
        ],
        "snippets": [
            "GetContainerNumUnacked(",
            "\tContainerObj { Required. The container tag to query. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetContainerNumUnacked": {
        "comments": [
            "{ Description: Returns the number of unacknowledged alarms within a",
            "\thierarchy of tags. }",
            "{ In earlier versions of VTScada, if you had written a custom tag with",
            "\ta built-in alarm, you had to ensure that it contributed its",
            "\tunacknowledged alarms to the count maintained by a hierarchical",
            "\taccumulator module. This is no longer true. }"
        ],
        "snippets": [
            "GetContainerNumUnacked(",
            "\tContainerObj { Required. The container tag to query. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetContributors": {
        "comments": [
            "{ Description: Returns a copy of an array of object values of",
            "\tcontributors for a given container. }",
            "{ Used only when writing custom tags with code (as opposed to creating",
            "\tthem from Context tags). See: Containers, Contributors and Site Tags",
            "\tThis function can be called from the contributor. }"
        ],
        "snippets": [
            "\\GetContributors(",
            "\tHandleName, { Required text. The name of the handle variable in the",
            "\t\tcontainer module. }",
            "\tContainerObj { Required. The object VTScada Value Types of the",
            "\t\tcontainer tag module. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetCryptoProvider": {
        "comments": [
            "{ Description: The GetCryptoProvider function is used to acquire a",
            "\thandle to a particular key container within a particular cryptographic",
            "\tservice provider (CSP). This returned handle can then be used to make",
            "\tcalls to the selected CSP. It is the VTScada analog of the CryptoAPI",
            "\tCryptAcquireContext call. }",
            "{ The return value for this function is a handle to the CSP. If an",
            "\terror occurs, then the return value is invalid. A CSP handle has a",
            "\tvalue type of 36. If cast to text then the name of the CSP will be",
            "\treturned. If ContainerName is omitted or invalid then a default key",
            "\tcontainer name is used. For example, the Microsoft Base Cryptographic",
            "\tProvider uses the account name of the user signed in as the key",
            "\tcontainer name. Other CSPs can also have default key containers that",
            "\tcan be acquired in this way. }"
        ],
        "snippets": [
            "GetCryptoProvider(",
            "\tCSPType, { Required text or numeric. The type of CSP required. . CAPI",
            "\t\t(Cryptography API) providers are specified using numeric identifiers.",
            "\t\tValues are defined in WinCrypt.h CNG (Cryptography New Generation)",
            "\t\talgorithm providers are specified using text identifiers. }",
            "\tCSPName, { An optional parameter that holds the name of the required",
            "\t\tCSP. If omitted or invalid, then a handle to the default CSP of the",
            "\t\tspecified type will be acquired. }",
            "\tContainerName, { An optional parameter that holds the name of the key",
            "\t\tcontainer. If omitted or invalid, then the default key container for",
            "\t\tthe CSP is used. }",
            "\tFlags, { An optional parameter specifying the flags to be passed to",
            "\t\tCryptAcquireContext. If omitted or invalid then the value 0 is used. }",
            "\tError { An optional variable in which the error code for the function",
            "\t\tis returned. It has the following meaning Error Meaning 0 CSP handle",
            "\t\tsuccessfully returned. 1 CSPType parameter invalid. x Any other value",
            "\t\tis an error from CryptAcquireContext. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetCurrentRecipe": {
        "comments": [
            "{ Description: Returns the name of the current recipe }",
            "{ \"RecipeBook\" must be a reference to a Recipe Book tag object, not",
            "\tthe name of the tag. }"
        ],
        "snippets": [
            "RecipeBook.GetCurrentRecipe(",
            "\tGetFromTag { Optional Boolean. If FALSE (default), the name of the",
            "\t\tselected recipe is returned. If TRUE, the name of the recipe as read",
            "\t\tout of the PLC is returned if the PLC supports this and if the Recipe",
            "\t\tName parameter tag has been given an address for reading this value. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetCurrentVersion": {
        "comments": [
            "{ Description: Returns the current version of the current recipe }",
            "{ \"RecipeBook\" must be a reference to a Recipe Book tag object, not",
            "\tthe name of the tag. }"
        ],
        "snippets": [
            "RecipeBook.GetCurrentVersion(",
            "\tGetFromTag { Optional Boolean. If FALSE (default), the name of the",
            "\t\tselected recipe is returned. If TRUE, the name of the recipe as read",
            "\t\tout of the PLC is returned if the PLC supports this and if the Recipe",
            "\t\tVersion parameter tag has been given an address for reading this",
            "\t\tvalue. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetDatePhrase": {
        "comments": [
            "{ Description: Returns a formatted date for the current user's locale",
            "\t}",
            "{ The Language property in the caller's scope is used to specify the",
            "\tlanguage name (e.g. en). Defaults to the Windows system's language. }"
        ],
        "snippets": [
            "\\GetDatePhrase(",
            "\tDay, { Required numeric. The number of days since January 1, 1970. }",
            "\tFormatID { Required text. The phrase identifier key specifying the",
            "\t\tdate format. See: Date and Time Phrase Keys }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetDefaultValue": {
        "comments": [
            "{ Description: Returns a variable's default value. }",
            "{ If the given variable does not have a default value this function",
            "\twill return Invalid. The current value of Variable does not affect the",
            "\treturn value of this function. }"
        ],
        "snippets": [
            "GetDefaultValue(",
            "\tVariable { Required. Any expression for the variable value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetDevices": {
        "comments": [
            "{ Description: Runs in the VoiceTalk thread and returns a list of",
            "\tdevices available on a SAPI text-to-speech stream. }",
            "{ This function will immediately return a 1-dimensional list of output",
            "\tdevice names available for the text-to-speech stream. The strings in",
            "\tthis array are suitable to pass as devices to the VoiceTalk\\Configure",
            "\tmodule. }"
        ],
        "snippets": [
            "VoiceTalkStream\\GetDevices(",
            "\tVoiceTalkStream { Required. A speech stream returned from VoiceTalk. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetDisplayIndex": {
        "comments": [
            "{ Description: Returns the index of the caller's display instance. }",
            "{ In a multi-monitor setup, the layout of the monitor indexes is",
            "\tstraightforward. For example, a 3x2 grid of monitors is indexed as:",
            "\t[1][2][3] [4][5][6] The primary purpose of using this API is to get",
            "\tthe index of the display instance belonging to the specific monitor",
            "\twhen the application is running in a multi-monitor setup. If this API",
            "\tis called from a single-monitor setup(not a multi-monitor), then it",
            "\twill always return index number 1 as there will always be a single",
            "\tdisplay instance. If called by a popup page, the display index of the",
            "\tpopup page's root page will be returned. }"
        ],
        "snippets": [
            "\\DisplayManager.GetDisplayIndex(",
            "\tContext { Optional. Module instance whose display instanceâs index",
            "\t\tneeds to be returned. If not provided, it represents the module",
            "\t\tinstance which is calling this API. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetDisplayRoot": {
        "comments": [
            "{ Description: Climbs the call tree looking for the best display",
            "\tcontext. }",
            "{ \"DisplayRoot\" is used as a standard variable name to identify the",
            "\tbest context for the monitor (as defined by VStatus(DisplayRoot, 35)",
            "\tto use. Any running object in an unexpected context (i.e. launched",
            "\twith a caller that might be in a different monitor than expected)",
            "\tshould have its own DisplayRoot variable or parameter which is set to",
            "\ta context in a window on the expected monitor. For example, the tag",
            "\tbrowser has a DisplayRoot parameter, because the tag browser is",
            "\tlaunched from many different locations with many callers. The",
            "\tDisplayRoot parameter allows us to specify the most natural context to",
            "\tuse as the originating display. }"
        ],
        "snippets": [
            "System.GetDisplayRoot(",
            "\tStartContext { Optional. Local window reference for where to start",
            "\t\tlooking for DisplayRoot. Defaults to Self(). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetEquipmentColor": {
        "comments": [
            "{ Description: Returns a defined equipment color as set in a Style",
            "\ttag. }",
            "{ If flash is enabled in the style and not suppressed by the second",
            "\tparameter of this function, GetEquipmentColor will cycle between the",
            "\tflash-on and flash-off colors. }"
        ],
        "snippets": [
            "\\FunctionLib.GetEquipmentColor(",
            "\tIOTagObject, { Required. An I/O tag object whose Equipment parameter",
            "\t\tcontains the equipment type to examine. }",
            "\tFlashNotRequired, { Optional Boolean. Set TRUE for flash to be",
            "\t\tdisabled. }",
            "\tSelectSecondary, { Optional Boolean. Relevant only if FlashNotRequired",
            "\t\tis set TRUE or if FlashNotRequired is set FALSE and Flash is disabled",
            "\t\tin the StyleTag for the specified state of the EquipmentType. If",
            "\t\tSelectSecondary is also set TRUE then the flash off color (secondary",
            "\t\tcolor) is returned. }",
            "\tStyleTagObject, { Optional tag object. A Style tag with the desired",
            "\t\tequipment type. Defaults to the style tag used by the indicated I/O",
            "\t\ttag (which in turn defaults to System Style). }",
            "\tValue { Optional numeric. If the equipment style has a set of values,",
            "\t\teach with a different color, use this to select which should be",
            "\t\treturned. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetEquipmentLabel": {
        "comments": [
            "{ Description: Returns a defined equipment label as set in a Style",
            "\ttag. }",
            "{ None }"
        ],
        "snippets": [
            "\\FunctionLib.GetEquipmentLabel(",
            "\tIOTagObject, { Required. An I/O tag object whose Equipment parameter",
            "\t\tcontains the equipment type to examine. }",
            "\tStyleTagObject, { Optional tag object. A Style tag with the desired",
            "\t\tequipment type. Defaults to the style tag used by the indicated I/O",
            "\t\ttag (which in turn defaults to System Style). }",
            "\tValue { Optional numeric. If the equipment style has a set of values,",
            "\t\teach with a different label, use this to select which should be",
            "\t\treturned. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetFileAttribs": {
        "comments": [
            "{ Description: Returns information about the specified file. }",
            "{ The return value will vary according to Mode. See tables above. }"
        ],
        "snippets": [
            "GetFileAttribs(",
            "\tFileName, { Required. Any text expression giving the name of the file.",
            "\t\tA known path Known Path Aliases for File-Related Functions may be",
            "\t\tprovided in the form, :{KnownPathAlias}. }",
            "\tMode, { Optional numeric value that controls what information is",
            "\t\treturned by this function. Defaults to 0 if missing or invalid. (See:",
            "\t\tBitwise Parameters & Operations ) Mode: Function Returns: 0 File",
            "\t\tattributes in the form of a value set to the sum of the following",
            "\t\tvalues: Value Bit No. Attribute 0 - Normal 1 0 Read only 2 1 Hidden 4",
            "\t\t2 System 8 3 Archive 16 4 Directory 1 Timestamp showing the date",
            "\t\tmodified (local) 2 File access and status flags as follows: Value Bit",
            "\t\tNo. Attribute 1 0 Open access (i.e. the file exists and is not",
            "\t\topen-locked) 2 1 Read access (i.e. the file can be read) 4 2 Write",
            "\t\taccess (i.e. the file can be written) 3 Timestamp showing the date",
            "\t\tmodified (UTC) }",
            "\t0,",
            "\t2",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetFullName": {
        "comments": [
            "{ Description: Returns the full, namespace-qualified name of the",
            "\tcallerâs account }"
        ],
        "snippets": [
            "\\SecurityManager.GetFullName();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetGroupName": {
        "comments": [
            "{ Description: Returns the namespace (realm) of the callerâs account.",
            "\t}"
        ],
        "snippets": [
            "\\SecurityManager\\GetGroupName();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetGUID": {
        "comments": [
            "{ Description: Creates a globally unique identifier or converts an",
            "\texisting GUID between the binary format used by most RPC functions and",
            "\tthe text format used otherwise. }",
            "{ Any generated GUID will be different from all others generated on",
            "\tthis or any other machine now or in the future. It is particularly",
            "\tuseful in generating unique variable or file names. The current",
            "\tapplication's GUID is stored in \\LocalGUID, using the 16-byte binary",
            "\tform. To use this in a function that requires the GUID in text format,",
            "\tuse: GetGUID(0, \\LocalGUID); }"
        ],
        "snippets": [
            "GetGUID(",
            "\tFormat, { Required numeric. Defines the format of the return value as",
            "\t\tfollows Format Format definition 0 36 byte text string 1 16 byte",
            "\t\tbinary string }",
            "\t0 { 1 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetHistory": {
        "comments": [
            "{ Description: Get History from a File written by Save or SaveHistory.",
            "\tThis threaded function retrieves an array of data from a .DAT file for",
            "\ta certain time span. If the parameters to GetHistory are valid and an",
            "\tattempt is made to get the data, the return value is 0, otherwise, if",
            "\tno attempt is made to get the data, the return value is 1. }",
            "{ This function is threaded - that is to say, it starts its own thread",
            "\tand VTScada will continue executing. When it is finished executing, it",
            "\twill set the data in Array. Note that Array will not be initially",
            "\tinvalidated upon execution of this statement, so if Array already",
            "\tcontained data when the GetHistory was executed, that data will remain",
            "\tuntouched until all of the data requested by GetHistory has been",
            "\tamassed, at which time Array will be set to its new value. Because",
            "\tArray could conceivably remain invalid indefinitely (i.e. there was no",
            "\tdata in the requested time span), Error will always be set to a valid",
            "\tvalue to indicate completion of execution. There is a return value for",
            "\tthis function that indicates if any of its parameters are invalid. The",
            "\tfunction will immediately return a value of false (0) unless a",
            "\tparameter was invalid, in which case it will return true (1). Note",
            "\tthat the return value only signals completion of the function's",
            "\texecution if it is true, otherwise the function will continue",
            "\texecuting in its thread. If PathPrefix is specified, then this changes",
            "\tthe interpretation of the File parameter. In this case, the referenced",
            "\tfile is not the source of the data, but a file containing references",
            "\tto other files which are the data sources. This file should be in",
            "\tstandard VTScada log file format and should contain a file reference",
            "\tas the first text value of each record (other values are ignored). The",
            "\trecords should be in the correct time order with respect to the data",
            "\tfiles. The value of the PathPrefix is a string, which when prefixed to",
            "\tone of the file references, will yield a full pathname to the target",
            "\tfile. If no prefix is required, but expansion of the dataset is",
            "\trequired, then PathPrefix should be an empty string. If a filename",
            "\tentry does NOT begin with a \"\\\" or \"<drive letter>:\\\", then the",
            "\tPathPrefix will be prepended to the filename. If a filename entry DOES",
            "\tbegin with \"<drive letter>:\\\", then the PathPrefix will NOT be",
            "\tprepended to the filename. If a filename entry does begin with a \"\\\",",
            "\tthen the \"<drive letter>:\" from the PathPrefix will be prepended to",
            "\tthe filename. If there is no \"<drive letter>:\" in the PathPrefix then",
            "\tthe \"<drive letter>:\" from the path of the File parameter will be used",
            "\tinstead. PathPrefix would normally be Invalid or the application path.",
            "\t}"
        ],
        "snippets": [
            "GetHistory(",
            "\tArray, { Required. A variable that will be set to an array upon",
            "\t\tcompletion of the data retrieval. The format of the array is",
            "\t\t[column][record]. Column 0 is the timestamp in seconds since January",
            "\t\t1, 1970. Each subsequent column is the data for that record. Array is",
            "\t\tnot set if there is no data for the requested period. }",
            "\tFile, { Required. Any text expression giving the file name for the",
            "\t\thistorical data file. The file extension must be included. If the file",
            "\t\tname is prefixed with a period, the path will be to the directory in",
            "\t\twhich the module is contained. }",
            "\tStartTime, { Required. Any numeric expression giving the start time of",
            "\t\tthe period for which data is requested in seconds since January 1,",
            "\t\t1970. }",
            "\tEndTime, { Required. Any numeric expression giving the end time of the",
            "\t\tperiod for which data is requested in seconds since January 1, 1970. }",
            "\tError { An optional variable that will always be set to a valid value",
            "\t\tupon completion of the GetHistory. Its meaning is as follows: Error",
            "\t\tError Description 0 No error 1 Parameter values out of described range",
            "\t\t2 File could not be opened 3 Corrupted .DAT file 4 Field requested",
            "\t\tcould not be found If Error is not required, but PathPrefix is, then",
            "\t\tError should be given as an Invalid value. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetHostByName": {
        "comments": [
            "{ Description: Calls the WinSock \"gethostbyname\" function and returns",
            "\tthe host name, address(es) and alias names for the named computer.",
            "\tAlso returns additional information identifying the network interface",
            "\tthat will be used to make a connection from the local machine to an IP",
            "\treturned from GetHostByName. IP addresses returned from GetHostByName",
            "\tare ordered by decreasing preference of use. }",
            "{ This function will return details of the TCP/IP interface to the",
            "\tnamed computer. The return value is an array with three elements",
            "\tcomprising a structure as follows: ElementInformation Official host",
            "\tname of the requested computer as known to the system. If using DNS or",
            "\ta similar resolution system, it is the Fully Qualified Domain Name",
            "\t(FQDN) that caused the server to return a reply. If using a local",
            "\t\"hosts\" file, it is the first entry after the IP address. An array of",
            "\taddresses. Each address is a text string giving a \"dotted quad\"",
            "\taddress (xx.xx.xx.xx). If the name being queried is a remote machine,",
            "\tthen there will be only one address. If the name being queried is the",
            "\tlocal machine, then there will be one address for each network",
            "\tinterface (including RAS), and no interpretation should be placed on",
            "\tthe ordering of the returned addresses. Invalid, or an array of alias",
            "\tnames. These are alternative names, defined in the local hosts file,",
            "\tby which the target computer may be referenced. If the name passed to",
            "\tthis function is irresolvable as belonging to a computer on the",
            "\tnetwork, the reply will be invalid. Depending upon the network",
            "\ttopology, it may be several seconds before this call returns, although",
            "\tother threads in the application will continue to run. }"
        ],
        "snippets": [
            "GetHostByName(",
            "\tName { Required. Any text expression giving the host name, alias, or",
            "\t\tIP address for which information is required. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetID": {
        "comments": [
            "{ Description: This returns the ID (opcode) of a given function. }",
            "{ This function is used by the compiler. While documented, it is not",
            "\tfor use application developers. }"
        ],
        "snippets": [
            "GetID(",
            "\tStatement { Required. Any expression for the code value of the",
            "\t\tfunction. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetInhibitedServiceList": {
        "comments": [
            "{ Description: Returns a one-dimensional array of the names of all",
            "\tservices inhibited from RPCManager servership control. }",
            "{ Requires that the application be running. }"
        ],
        "snippets": [
            "\\RPCManager\\GetInhibitedServiceList(",
            "\tOptGUID { The GUID of the application in which the service instance is",
            "\t\tlocated. Optional, the default is the application to which the caller",
            "\t\tbelongs. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetINIProperty": {
        "comments": [
            "{ Description: Given an array of INIProperty structures, returns the",
            "\tvalue of a given property from that array. }",
            "{ The INIProperty structure is as follows INIProperty Struct [ Name {",
            "\tVariable name in the .startup/.dynamic file }; Value { Simple value };",
            "\tComment { Text comment if present in the file }; Hidden { TRUE if not",
            "\tvisible in Edit Properties GUI }; ]; }"
        ],
        "snippets": [
            "System.GetINIProperty(",
            "\tInputArray, { Required. An array of INIProperty structures. See",
            "\t\tComment section. }",
            "\tName, { Required. The name of the property whose value is to be",
            "\t\treturned. }",
            "\tComment, { Optional pointer to a text value. The comment associated",
            "\t\twith the property will be returned in this field. }",
            "\tpFail { Optional Boolean pointer. If the property is not found, TRUE",
            "\t\twill be returned to the calling module in this parameter. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetInSyncServers": {
        "comments": [
            "{ Description: Returns a one-dimensional array of the names or IPs of",
            "\tthe potential, synchronized servers for the given service. }",
            "{ None }"
        ],
        "snippets": [
            "\\RPCManager.GetInSyncServers(",
            "\tService, { Name by which the service is known. }",
            "\tOptGUID { The GUID of the application in which the service instance is",
            "\t\tlocated. Optional, the default is the application to which the caller",
            "\t\tbelongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetInstance": {
        "comments": [
            "{ Description: Returns the object value of a module instance. }",
            "{ If the number requested is larger than the total number of instances",
            "\tfor the module, the return value will be invalid. }"
        ],
        "snippets": [
            "GetInstance(",
            "\tModule, { Required. Any expression for the code value of the module. }",
            "\tIndex { Required. Any numeric expression indicating which instance of",
            "\t\tModule to get. The most recently started instance is instance 0. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetIP": {
        "comments": [
            "{ Description: Returns an IP address for a workstation, given its",
            "\tname. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem.RPCManager., and the System variable must be declared in",
            "\tAppRoot.src. }"
        ],
        "snippets": [
            "\\RPCManager.GetIP(",
            "\tName { Required. Any of the names by which the remote workstation is",
            "\t\tknown to the RPC Manager. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetKeyCount": {
        "comments": [
            "{ Description: Return a count of the number of keys stored by the",
            "\tgiven dictionary. }",
            "{ Generally used in combination with ListKeys. The single parameter is",
            "\trequired and must contain a dictionary, otherwise INVALID will be",
            "\treturned. }"
        ],
        "snippets": [
            "GetKeyCount(",
            "\tDictionary { Required. Any dictionary for which you wish to retrieve",
            "\t\tthe key count. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetKeyParam": {
        "comments": [
            "{ Description: The CryptGetKeyParam function retrieves data that",
            "\tgoverns the operations of a key. It is the VTScada analog of the",
            "\tCryptoAPIâs CryptGetKeyParam call. }",
            "{ The parameter for the key is returned. If an error occurs, the",
            "\treturn value is invalid. The allowable values for Param vary with the",
            "\tkey type. }"
        ],
        "snippets": [
            "GetKeyParam(",
            "\tKey, { Required. The handle to the key being queried. }",
            "\tParam, { Required. A parameter specifying the query being made. CAPI",
            "\t\t(Cryptography API) providers are specified using numeric identifiers.",
            "\t\tValues are defined in WinCrypt.h CNG (Cryptography New Generation)",
            "\t\talgorithm providers are specified using text identifiers. }",
            "\tFlags, { An optional parameter specifying the flags to be passed to",
            "\t\tCryptGetKeyParam. If omitted or invalid then the value 0 is used. }",
            "\tError, { An optional variable in which the error code for the function",
            "\t\tis returned. It may have the following values Error Meaning 0 Key",
            "\t\tparameter successfully returned. 1 Key or Param parameters invalid. x",
            "\t\tAny other value is an error from CryptGetKeyParam. }",
            "\t0, { 1 }",
            "\tx",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetLastUsedSubnet": {
        "comments": [
            "{ Description: Returns the last CIDR representation of the subnet or",
            "\tremote IP used for communication with the specified machine. }",
            "{ If a network priority is not configured, this return value will",
            "\tbounce between all available subnets following the round-robin",
            "\thandling of RPCManager. (See: [RPCMANAGER-NETPRIORITY] Section ) }"
        ],
        "snippets": [
            "SetSubnetPriority(",
            "\tMachineName { Required Text. A single string machine name of the",
            "\t\tremote system. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetLiveMJPEG": {
        "comments": [
            "{ Description: This is a called module. It will return a reference to",
            "\tthe current frame retrieved from the IP camera that is connected to",
            "\tthe camera tag. }",
            "{ This function is an API that acts as a data access point. The feed",
            "\tfrom the camera is a motion JPEG. Each individual frame is a JPEG",
            "\timage. The raw data from each JPEG image is stored within a variable",
            "\tas text and updated concurrently as new frames are received by the",
            "\tcamera tag. The reference returned by the module will also be",
            "\trefreshed when the IP camera URL or credential has been updated in the",
            "\ttag configuration. See Camera Tag . If the URL or credentials",
            "\tconfigured in the camera tag are misconfigured or irretrievable or if",
            "\tthe camera feed is down the reference value will be invalid. }"
        ],
        "snippets": [
            "\\MyCameraTag.GetLiveMJPEG();"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetLoadedAppInstance": {
        "comments": [
            "{ Description: Retrieves the Layer object (LayerRoot) for a particular",
            "\tapplication specified by GUID }",
            "{ This function is similar to GetAppInstance, but is a synchronous",
            "\toperation, returning the Layer object directly rather than in a",
            "\tpointer parameter. If the target application is not yet loaded, then",
            "\tthis function will return Invalid rather than wait. }"
        ],
        "snippets": [
            "System.GetLoadedAppInstance(",
            "\tGUID { Required text. The 36-byte GUIDof the application to be found.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetLocalIP": {
        "comments": [
            "{ Description: Returns an IP address for the local workstation that is",
            "\tknown to the specified remote workstation. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager,",
            "\tand the System variable must be declared in AppRoot.src. }"
        ],
        "snippets": [
            "\\RPCManager.GetLocalIP(",
            "\tName { Required. Any of the names by which the remote workstation is",
            "\t\tknown to the RPC Manager. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetLocalNumber": {
        "comments": [
            "{ Description: Returns the index of the local workstation down the",
            "\tprioritized server list for the named service. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager,",
            "\tand the System variable must be declared in AppRoot.src. The machine",
            "\tat the top of the prioritized server list will return an index of",
            "\tzero. If the local machine cannot be a server for the specified",
            "\tservice, -1 is returned. }"
        ],
        "snippets": [
            "\\RPCManager.GetLocalNumber(",
            "\tService, { Required. The name by which the service is known. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetLockLevel": {
        "comments": [
            "{ Description: Returns the highest lock level priority (lowest number)",
            "\tapplied to a tag. }",
            "{ None }"
        ],
        "snippets": [
            "\\ControlLockManager.GetLockLevel(",
            "\tTagID, { Required text. The unique ID of tag being examined. }",
            "\tSnapshot { Optional Boolean. Set TRUEfor subroutine calls. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetLog": {
        "comments": [
            "{ Description: This launched module returns an array of logged data.",
            "\tGetTagHistory should be considered for use in new code. }"
        ],
        "snippets": [
            "\\GetLog(",
            "\tResult, { Required. A pointer to the array retrieved from file. The",
            "\t\tarray may be multidimensional as described in the Comments section.",
            "\t\tPlease review the information carefully. }",
            "\tTag, { Required. The object value of the tag from which to get the",
            "\t\tlogged data. }",
            "\tName, { Required. The name of the logged value in the tag. If Invalid",
            "\t\tor a valid empty string, a timestamp is used. It is possible to",
            "\t\tretrieve more than one field in a single GetLog statement. To do this,",
            "\t\tpass an array of values in as the Name parameter. Typically \"Value\"",
            "\t\tfor most tag values, or \"Value!\" for tag attribute data. (Value! was",
            "\t\tintroduced with VTScada version 12 and is not available in legacy",
            "\t\tdata. It cannot be retrieved by SQL queries.) }",
            "\tStart, { Required. The start time in seconds since January 1, 1970. }",
            "\tEnd, { Required. The end time in seconds since January 1, 1970. If",
            "\t\tinvalid, Size limits the number of tags retrieved. }",
            "\tTPP, { Required. The time span per tag. If Invalid, Size limits the",
            "\t\tnumber of tags retrieved. }",
            "\tSize, { Required. The maximum number of tags to get. If greater than",
            "\t\t0, data is accessed one at a time from file, rather than at equal time",
            "\t\tintervals. If TPP is valid, Size is ignored. }",
            "\tMode, { Required. Indicates the mode of data collection. Note: The",
            "\t\tmode is useful only when the TPP parameter is valid and greater than",
            "\t\t0. Mode may be one of: It is possible to retrieve more than one mode",
            "\t\tin a single GetLog statement. To do this, pass an array of values in",
            "\t\tas the Mode parameter. Mode Data Collection 0 Time-weighted average 1",
            "\t\tMinimum in range 2 Maximum in range 3 Change in value over the range 4",
            "\t\tValue at start of range 5 TimeOfMinInRange 6 TimeOfMaxInRange 7",
            "\t\tSumOfZtoNZTransitions 8 SumOfNonZeroTime 9 Totalizer. (Invalid is",
            "\t\tcounted as zero) 10 Deprecated. Equivalent to mode 4. 11 Difference",
            "\t\tbetween the start and end values of a range (see following note) 12",
            "\t\tBitwise OR (see following note) 13 Bitwise AND (see following note) 14",
            "\t\tValue at end of range Mode 11: This is for hardware that can count to",
            "\t\ta limited number, then rolls over to start a fresh count. For example,",
            "\t\ta tag that counts equipment starts, but which can only count from 0 to",
            "\t\t15 before wrapping around to start again. This gives a value of",
            "\t\tsixteen per roll-over since there must be one more start after fifteen",
            "\t\tto have the roll-over occur. A graph of a very simple case where there",
            "\t\tis a start every second would look like the following: (Each rollover",
            "\t\tmust be followed by a fresh start, not a gradually declining value. If",
            "\t\tthere are a series of declining values then, because each is less than",
            "\t\tthe previous, each counts as another rollover.) The formula used is",
            "\t\t(RolloverCount * RolloverValue) + (LastValidValue - FirstValidValue).",
            "\t\tWhere, for any given time interval: Rollovers are counted when a new",
            "\t\tvalue is smaller than the last valid value. The RolloverValue is",
            "\t\tpassed to the function in the parameter StaleTime. LastValidValue",
            "\t\tstarts with the last valid value in the previous time interval (if",
            "\t\tany), and is updated with each new valid value within the time",
            "\t\tinterval. FirstValidValue starts with the last valid value in the",
            "\t\tprevious time interval (if any), and is updated with only the first",
            "\t\tvalid value found in the current time span. Given this example,",
            "\t\tsuppose that you want a count of starts in each thirty-second",
            "\t\tinterval. In the first interval there is no previous valid value, one",
            "\t\twrap-around and a last valid value of 12. (1*16) + (12 - 0) = 28. This",
            "\t\tis an idealized case. Consider a more realistic case where not all",
            "\t\tvalues are logged. (This may be due to factors such as polling",
            "\t\tintervals, deadbands, hardware, etc.) The following graph shows the",
            "\t\tsame data where the orange dots represent values obtained and logged",
            "\t\tand the gray line represents what really happened: In the first 30",
            "\t\tseconds there is one roll-over when the value drops from 13 to 2. The",
            "\t\tfirst value is 0 and the last is 11. The Historian will return 27:",
            "\t\t(1*16) + (11-0) = 27. The Historian will return 30 for the period from",
            "\t\t30 to 60. The first valid value (carried from the previous period) is",
            "\t\t11. The last valid value is 9 and there are two roll-overs. (2*16) +",
            "\t\t(9-11) = 30. Modes 12 and 13: These are intended to provide a summary",
            "\t\tof the bit-wise Historian value attributes within a query. (Value",
            "\t\tattributes were added in VTScada version 11.5 / 12.0) With mode 12,",
            "\t\tthe first value is OR'd with zero, and each successive value in the",
            "\t\ttime period is OR'd with result of the last comparison. From the",
            "\t\tresult you will know whether any particular attribute bit was set on",
            "\t\tany values within the period. With mode 13, the first value is AND'd",
            "\t\twith a value having all bits set to 1 and each successive value is",
            "\t\tAND'd with the result of the last comparison. From the result you will",
            "\t\tknow whether any particular attribute bit was set on all values within",
            "\t\tthe period. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10, { 11 }",
            "\t12, { 13 }",
            "\t14",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetLogInfo": {
        "comments": [
            "{ Description: Interrogates a historical data file, or a set of",
            "\thistorical data files, and returns overall time, date, and record",
            "\tcount information either for the entire file(set), or for a specified",
            "\ttime range. }",
            "{ For any optional parameter that is to be set, all optional",
            "\tparameters preceding the desired one must be present, although they",
            "\tmay be Invalid. All timestamps are specified in seconds since January",
            "\t1, 1970. If the number of records found is zero, then Earliest and",
            "\tLatest are both set Invalid. If PathPrefix is specified, then this",
            "\tchanges the interpretation of the File parameter. In this case, the",
            "\treferenced file is not the source of the data, but a file containing",
            "\treferences to other files which are the data sources. This file should",
            "\tbe in standard VTScada logfile format and should contain a file",
            "\treference as the first text value of each record (other values are",
            "\tignored). The records should be in the correct time order with respect",
            "\tto the data files. The value of the PathPrefix is a string, which when",
            "\tprefixed to one of the file references, will yield a full pathname to",
            "\tthe target file. If no prefix is required, but expansion of the",
            "\tdataset is required, then PathPrefix should be an empty string. If a",
            "\tfilename entry does NOT begin with a \"\\\" or \"<drive letter>:\\\", then",
            "\tthe PathPrefix will be prepended to the filename. If a filename entry",
            "\tDOES begin with \"<drive letter>:\\\", then the PathPrefix will NOT be",
            "\tprepended to the filename. If a filename entry does begin with a \"\\\",",
            "\tthen the \"<drive letter>:\" from the PathPrefix will be prepended to",
            "\tthe filename. If there is no \"<drive letter>:\" in the PathPrefix then",
            "\tthe \"<drive letter>:\" from the path of the File parameter will be used",
            "\tinstead. PathPrefix would normally be Invalid or the application path.",
            "\t}"
        ],
        "snippets": [
            "GetLogInfo(",
            "\tFile, { Required. The historical data file (or index file for a file",
            "\t\tset) for which information is required. }",
            "\tEarliest, { Required. Any variable in which will be returned the",
            "\t\tearliest time stamp from the file(set). }",
            "\tLatest, { Required. Any variable in which will be returned the latest",
            "\t\ttime stamp from the file(set). }",
            "\tNRecords, { Required. Any variable in which will be returned the total",
            "\t\tnumber of records in the file(set). }",
            "\tPathPrefix, { An optional text expression parameter that enables and",
            "\t\tcontrols the retrieval of data from across a set of files. }",
            "\tStartTime, { An optional timestamp parameter that defines the start",
            "\t\ttime of the range to be examined. }",
            "\tEndTime { An optional timestamp parameter which defines the end time",
            "\t\tof the range to be examined. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetLogonCredentialsFromSmartcard": {
        "comments": [
            "{ Description: Monitors the card reader for a smartcard and reads the",
            "\tcertificate information from it. If Multiple usable certificates are",
            "\tfound (useable defined as the presence of subject alternate name",
            "\tfield), It will spawn a windows certificate selector and use the",
            "\tcertificate returned by that. }",
            "{ Only one instance of the function should be run on a system at once.",
            "\tHaving multiple instances of the function can result in multiple",
            "\tcertificate dialogs spawning for a single card insertion event. The",
            "\tfunction monitors the card reader in its own thread, so it doesnât",
            "\tcause any blocking. }"
        ],
        "snippets": [
            "GetLogonCredentialsFromSmartcard(",
            "\tMarshalledCredential, { Required. The marshalled credential used with",
            "\t\tWindowsLogon }",
            "\tUsername, { Required text. A variable in which the username found in",
            "\t\tthe certificate will be returned in UPN format (e.g.",
            "\t\ta.user@example.com). This is not a VTScada user name. }",
            "\tSha1 { Required. A variable in which the variable the Sha1 hash of the",
            "\t\tcertificate will be returned. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetMachineNode": {
        "comments": [
            "{ Description: Returns the object value of the MachineNode for the",
            "\tspecified name or IP. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager,",
            "\tand the System variable must be declared in AppRoot.src. }"
        ],
        "snippets": [
            "\\RPCManager.GetMachineNode(",
            "\tName { Required. Any of the names or IPs by which the workstation is",
            "\t\tknown to the RPC Manager. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetMakeAltPtr": {
        "comments": [
            "{ Description: Returns a pointer to a variable containing the",
            "\tAlternate status for the local service instance in the calling",
            "\tapplication for the specified service. Steady state or subroutine",
            "\tcall. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager,",
            "\tand the System variable must be declared in AppRoot.src. }"
        ],
        "snippets": [
            "\\RPCManager.GetMakeAltPtr(",
            "\tService { Required. The name by which the service is known. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetModuleContext": {
        "comments": [
            "{ Description: Given a module-in-context, this function returns the",
            "\tparent object of an instance of that module when it is launched or",
            "\tcalled. }",
            "{ A \"module-in-context\" is a reference to a module associated to a",
            "\tspecific context, or module instance. Refer to value type 49 in",
            "\tVTScada Value Types . }"
        ],
        "snippets": [
            "\\GetModuleContext(",
            "\tModuleInContext { Required. A module-in-context object. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetModuleRefBox": {
        "comments": [
            "{ Description: Returns the outer reference box for any selectable",
            "\t(GUI) graphics in a module. }",
            "{ A module's reference box defines an area that will exactly enclose",
            "\tall layered (GUI) graphics in the module regardless of state before",
            "\tany rotations and trajectories have been applied. A module reference",
            "\tbox, or MRB as it is sometimes called, is not a clipping region and",
            "\tobjects can and often will extend outside of their MRB as a result of",
            "\tapplied rotations or trajectories. When a module is transformed, the",
            "\ttransform is based on the size of the module as determined by its",
            "\treference box. The module's reference box will always exactly fill the",
            "\treference box of the transform. In the case of graphics that have had",
            "\ta rotation or trajectory applied to them, the graphics will be",
            "\ttransformed correctly, but the MRB may no longer contain the objects",
            "\tin their modified positions. If a SetModuleRefBox has been done within",
            "\tthe module in question, or its module reference box has been defined",
            "\tby following the module name with the four boundaries enclosed in",
            "\tparentheses, the return value will be based on these explicitly",
            "\tdefined boundaries. Otherwise the return value will define the minimum",
            "\treference box that will exactly enclose all (GUI) graphics in the",
            "\tmodule. This does not include any child graphics (i.e. graphics",
            "\tcreated by child modules of Module). Module does not need to be",
            "\trunning at the time that this statement is called to retrieve valid",
            "\tdata. }"
        ],
        "snippets": [
            "GetModuleRefBox(",
            "\tModule, { Required. Any expression for the code value of the module. }",
            "\tOption, { Required. Any expression that defines the return value as",
            "\t\tindicated by the following: Option Return Value 0 left side 1 bottom",
            "\t\tside 2 right side 3 top side 4 width 5 height }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4 { 5 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetModuleText": {
        "comments": [
            "{ Description: Returns information about a module's document file. }",
            "{ This function is used when automatically modifying modules. The file",
            "\tname (Info == 0) will include the full path. and will refer to the",
            "\tversion of the module within the .sync folders, not the version in the",
            "\tuser-acessible folders. }"
        ],
        "snippets": [
            "GetModuleText(",
            "\tModule, { Required. Any expression for the module. }",
            "\tInfo, { Required. Any numeric expression giving the information to",
            "\t\treturn, as shown in the following table: Info Information to return 0",
            "\t\tFile name which defines Module 1 Character offset to beginning of",
            "\t\tModule 2 Length of Module 3 Character offset to beginning of parameter",
            "\t\tdefinitions 4 Character offset to beginning of variable definitions 5",
            "\t\tCharacter offset to beginning of state definitions 6 Character offset",
            "\t\tto beginning of child module definitions 7 Character offset to first",
            "\t\tvariable definition 8 Length of variable definitions 9 Character",
            "\t\toffset to first parameter definition 10 Length of parameter",
            "\t\tdefinitions }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetModuleTimeStamp": {
        "comments": [
            "{ Description: Returns the timestamp of the module's source file,",
            "\tshowing the last time it was synchronized with the application. }",
            "{ The return value is a double that is the timestamp of the module's",
            "\tsource file the last time the ResyncDoc was called for the module in",
            "\tquestion. ResyncDoc is called by the core product during compilation",
            "\tas well as during page / widget editing actions. This provides a quick",
            "\tway to get the timestamp of the module's SRC file at the time it was",
            "\tedited. }"
        ],
        "snippets": [
            "GetModuleTimestamp(",
            "\tModule { Required. An object reference to the module whose source code",
            "\t\tfile timestamp you are interested in obtaining. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetNameOfRecord": {
        "comments": [
            "{ Description: Given an alarm record, returns the tag name. }",
            "{ This function is intended primarily for presentation purposes. The",
            "\tfunction will return whichever of the following, in order, for which",
            "\tit can find a valid value: the relative tag name, the full name, or",
            "\tthe unique ID (alarm name). }"
        ],
        "snippets": [
            "\\AlarmManager.GetNameOfRecord(",
            "\tAlarmRecord, { Required record. A reference to the alarm, as returned",
            "\t\tby the function GetAlarmObject. }",
            "\tParentTag { Optional. The parent tag's name. If valid, this value will",
            "\t\tbe stripped from the result. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetNextKey": {
        "comments": [
            "{ Description: Allows a linear search through a dictionary. }"
        ],
        "snippets": [
            "GetNextKey(",
            "\tDictionary, { Required. Any dictionary you wish to search. }",
            "\tStartKey, { Optional. The key, from which to start. If this is",
            "\t\tinvalid, or if the key is not found in the dictionary, then the first",
            "\t\tkey in the given order will be returned. }",
            "\tOrder, { An optional numeric expression. Defines the search according",
            "\t\tto the following table of values. Defaults to 0 if missing. Setting",
            "\t\tthis parameter to Invalid will result in the function returning",
            "\t\tInvalid. Order Meaning 0 Forward alphabetic search 1 Forward ordinal",
            "\t\tsearch. Returns the value associated with the next newer key. Begins",
            "\t\tat the oldest key if the parameter Key is invalid. 2 Backward",
            "\t\talphabetic search 3 Backward ordinal search. Returns the value",
            "\t\tassociated with the next older key. Begins at the newest key if the",
            "\t\tparameter Key is invalid. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\tKeyName { This parameter will receive the key of the record found,",
            "\t\twhich matches with the value of that record returned by the function.",
            "\t\tIf there are no further keys in the given order, this value will be",
            "\t\tset to INVALID. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetNumUnacked": {
        "comments": [
            "{ Description: Returns either the number of unacknowledged alarms or a",
            "\tYes/No flag to indicate that the alarms exist. Note that this function",
            "\twill place a heavy load on computer resources while searching. Subject",
            "\tto the current user's Realm Filtering limitations. }"
        ],
        "snippets": [
            "\\AlarmManager.GetNumUnacked(",
            "\tUserFilter { Obsolete. Set to Invalid. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetOEMLayer": {
        "comments": [
            "{ Description: Retrieves the layer root module of the OEMlayer (should",
            "\tone exist) of the layer this is called against. }",
            "{ The return value of the function will be set to Invalid upon",
            "\tcompletion. A pointer to the OEM layer's module will be returned in",
            "\tthe first parameter to this function. }"
        ],
        "snippets": [
            "LayerRoot\\GetOEMLayer(",
            "\tOEMLayerPtr { Required. A variable, into which a pointer to the OEM",
            "\t\tlayer's root module will be placed. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetOneParmText": {
        "comments": [
            "{ Description: Returns the text for one parameter of a function. }"
        ],
        "snippets": [
            "GetOneParmText(",
            "\tFunction, { Required. Any expression for the code value of the",
            "\t\tfunction. }",
            "\tParameter, { Required. Any numeric expression indicating which",
            "\t\tparameter's text to return. }",
            "\tType, { Optional numeric expression. Controls what will be returned by",
            "\t\tthe function according to the following table: Type Description 0",
            "\t\tdefault. Return the text for the parameter. 1 Return the offset in the",
            "\t\tfile for the start of the parameter. 2 Return the size (number of",
            "\t\tbytes) of the parameter. }",
            "\t0, { 1 }",
            "\t2",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetOPCServerRequestRate": {
        "comments": [
            "{ Description: Returns the total number of OPC Classic callbacks per",
            "\tsecond. }"
        ],
        "snippets": [
            "GetOPCServerRequestRate(",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetOutputTypes": {
        "comments": [
            "{ Description: Returns a list of available report output type plugins.",
            "\t}",
            "{ This subroutine, declared in ReportPanel, is a plug-in to help with",
            "\tcustom retrieval of output types. GetOutputTypes must be prefaced by",
            "\t\\ReportPanel\\, as shown in the \"Format\" section above. }"
        ],
        "snippets": [
            "\\ReportPanel\\GetOutputTypes(",
            "\tPtrTypeNames, { Required. A pointer to a variable storing output",
            "\t\tnames. }",
            "\tPtrTypeMods { Required. A pointer to a variable storing output module",
            "\t\tnames. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetOverrides": {
        "comments": [
            "{ Description: Returns an array of OpCodes and the module value that",
            "\twill run when each OpCode is executed }",
            "{ The target module will be queried for a list of overridden OpCodes.",
            "\tThe return value is a 2 dimensional array where the first dimension is",
            "\tthe override as set by SetOverride and second dimension will be [0]",
            "\tfor the OpCode and [1] for the corresponding module that has been set",
            "\tto override that opcode. Together with SetOverride, this provides the",
            "\tability to override a built-in function in a module with a module",
            "\tcall. It is used primarily for testing. See SetOverride for full",
            "\tdetails. }"
        ],
        "snippets": [
            "GetOverrides(",
            "\tTargetModule { Required. Any expression that can be resolved to a",
            "\t\tmodule value. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetParameter": {
        "comments": [
            "{ Description: Returns the requested parameters as a constant,",
            "\tvariable or code pointer. }",
            "{ If the parameter being retrieved is a constant number, then",
            "\tGetParameter just returns that number. The same goes for a constant",
            "\tstring parameter. If the parameter is just a variable, then",
            "\tGetParameter returns the variable (a value of type \\#VTypeVariable).",
            "\tIf the parameter is itself a function, then GetParameter returns a",
            "\tcode value for it. }"
        ],
        "snippets": [
            "GetParameter(",
            "\tCode, { Required. Any expression for the code value or code pointer of",
            "\t\tthe function. }",
            "\tIndex { Required. Parameter number to obtain. Starts with 0 for the",
            "\t\tfirst parameter. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetParmPhrase": {
        "comments": [
            "{ Description: Returns parameterized text in the currently selected",
            "\tlanguage for a given phrase identifier key. }",
            "{ The phrase need not have the %n placeholders in ascending numerical",
            "\torder, and parameters can to be used more than once. Some translations",
            "\tmay not require a parameter at all while other parameters may occur",
            "\tmultiple times. A maximum of 10 parameters are supported. The Language",
            "\tproperty in the caller's scope is used to specify the language name",
            "\t(e.g. en). Defaults to the Windows system's language. If using a",
            "\tphrase dictionary instead of one or more text phrases, the replaceable",
            "\tparameters can be named rather than numbered. For example: This report",
            "\tfor %[TagName] was created on %[RunTime] %[RunDate] The matching",
            "\tdictionary would have the form: PhraseDict = Dictionary();",
            "\tPhraseDict[\"TagName\"] = \"Station 1\"; PhraseDict[\"RunTime\"] = \"2:23",
            "\tPM\"; PhraseDict[\"RunDate\"] = \"Feb 26, 2024\"; As a specialized",
            "\tuse-case, GetParmPhrase also supports the use of translation",
            "\tdictionaries for the PhraseKey parameter. Use the following",
            "\tinformation only in the rare case that a standard .csv file of static",
            "\ttranslations is not suitable. Translation dictionaries should take the",
            "\tfollowing form, which is used in place of the PhraseKey parameter:",
            "\tSystem.MakeDictionary(\"en\", \"hello\", \"fr\", \"bonjour\", \"es\", \"hola\");",
            "\tGetParmPhrase will then return the translation corresponding to the",
            "\tuser's current language. If the dictionary does not include a",
            "\ttranslation for the user's current language but does for the default",
            "\tlanguage, then the default will be returned. If that also does not",
            "\texist, then return \"Missing translation\" (language dependent). Note",
            "\tthat the phrase may not update dynamically when the content for a",
            "\tgiven key in the dictionary changes. Translation dictionaries should",
            "\tnot be used in most applications. }"
        ],
        "snippets": [
            "\\GetParmPhrase(",
            "\tPhraseKey, { Required. The identifying key for a phrase. May be a",
            "\t\tstring ID that uniquely identifies given text. }",
            "\tP0, with optional parameters through P9orPhraseDictionary { In",
            "\t\tversions to 12.1.38 this could be any text that will be substituted",
            "\t\tinto placeholders in the phrase matching the index of the parameter.",
            "\t\t(%0 through %9) As of version 12.1.29 this could also be a single",
            "\t\tdictionary. See comments. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetParmPhraseForLang": {
        "comments": [
            "{ Description: Returns parameterized text in the specified language",
            "\tfor a given phrase identifier key or ParmPhrase structure. }",
            "{ For most purposes, \\GetParmPhrase is preferred over",
            "\t\\GetParmPhraseForLang, since \\GetParmPhrase will use the currently",
            "\tlogged-on user's selected language (or default to English). }"
        ],
        "snippets": [
            "\\GetParmPhraseForLang(",
            "\tPhraseKey, { Required. The identifying key for a phrase. May be either",
            "\t\ta string ID that uniquely identifies given text or a ParmPhrase",
            "\t\tstructure, which consists of a PhraseID and up to 10 parameters. }",
            "\tLanguage, { Required text. Name of the language for which the phrase",
            "\t\tis to be found. For example \"EN\" for English. }",
            "\tP0 through P9 { Any text that will be substituted into placeholders in",
            "\t\tthe phrase matching the index of the parameter. (%0 through %9) }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetParmText": {
        "comments": [
            "{ Description: Returns the text for all parameters of a function. }",
            "{ This function may only appear in a script. }"
        ],
        "snippets": [
            "GetParmText(",
            "\tFunction { Required. Any expression for the code value of the",
            "\t\tfunction. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetParserOffset": {
        "comments": [
            "{ Description: Returns the offset before the last compiled statement.",
            "\t}",
            "{ This is used by the compiler to give the location of an error. }"
        ],
        "snippets": [
            "GetParserOffset(",
            "\tParserStack { Required. Any expression for the parser stack value. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetPathBound": {
        "comments": [
            "{ Description: Returns the bounding box coordinates for a path. }"
        ],
        "snippets": [
            "GetPathBound(",
            "\tPath, { Required. Any expression that returns a Path value. }",
            "\tObject, { Required. Any object expression which defines the window",
            "\t\twhere Path is drawn. }",
            "\tTransform, { Required. Any expression for the transform value applied",
            "\t\tto Path. }",
            "\tSide, { Required. Any numeric expression for the coordinate to return:",
            "\t\tSide Side to Return 0 Left 1 Bottom 2 Right 3 Top }",
            "\t0, { 1 }",
            "\t2 { 3 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetPhrase": {
        "comments": [
            "{ Description: Returns text in the currently selected language for a",
            "\tgiven phrase identifier key or ParmPhrase structure. }",
            "{ If the input is a ParmPhrase, \\GetPhrase will recursively translate",
            "\tthe phrase. In the input is just text (not a phrase key) then it will",
            "\tbe passed back unchanged. \\GetPhrase(\"Hello World\") returns \"Hello",
            "\tWorld\". If working with parameterized phrases, \\GetParmPhrase may be",
            "\tpreferred in order to avoid the effort of assembling a ParmPhrase",
            "\tstructure, which can be built only in Script. When called in the",
            "\tcontext of a user session (e.g. from user-interface code such as a",
            "\tpage), the phrase will be returned in the user's currently selected",
            "\tlanguage. Otherwise, the phrase will be returned in the application's",
            "\tdefault language as specified in the Languages panel of the",
            "\tApplication Configuration dialog. As a specialized use-case, GetPhrase",
            "\talso supports the use of translation dictionaries. Use the following",
            "\tinformation only in the rare case that a standard .csv file of static",
            "\ttranslations is not suitable. Translation dictionaries should take the",
            "\tfollowing form, which is used in place of the PhraseKey parameter:",
            "\tSystem.MakeDictionary(\"en\", \"hello\", \"fr\", \"bonjour\", \"es\", \"hola\");",
            "\tGetPhrase will then return the translation corresponding to the user's",
            "\tcurrent language. If the dictionary does not include a translation for",
            "\tthe user's current language but does for the default language, then",
            "\tthe default will be returned. If that also does not exist, then return",
            "\t\"Missing translation\" (language dependent). Note that the phrase may",
            "\tnot update dynamically when the content for a given key in the",
            "\tdictionary changes. Translation dictionaries should not be used in",
            "\tmost applications. }"
        ],
        "snippets": [
            "\\GetPhrase(",
            "\tPhraseKey { Required. The identifying key for a phrase. May be either",
            "\t\ta string that uniquely identifies given text or a ParmPhrase",
            "\t\tstructure, which consists of a PhraseKey and up to 10 parameters. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetPhraseID": {
        "comments": [
            "{ Description: Returns the key matching a given phrase. }",
            "{ This module is a member of the Function Library, and must therefore",
            "\tbe prefaced by \\FunctionLib as shown in the \"Format\" section. Searches",
            "\tonly the application's language files, not those belonging to VTScada.",
            "\t}"
        ],
        "snippets": [
            "\\FunctionLib.GetPhraseID(",
            "\tPhrase, { Text, for which you want to retrieve the key. }",
            "\tLanguage, { Optional Text. The two-letter code specifying the language",
            "\t\tin which to look for the phrase. Defaults to the user's currently",
            "\t\tselected language. }",
            "\tIndex { Optional Numeric. Some words may be present several times,",
            "\t\teach with a different meaning. (For example, \"right\" might be the",
            "\t\topposite of \"left\", it might indicate that something is correct, or it",
            "\t\tmay refer to an entitlement.) }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetPhraseForLang": {
        "comments": [
            "{ Description: Returns text in the specified language for a given",
            "\tphrase identifier key or ParmPhrase structure. }",
            "{ For most purposes, \\GetPhrase is preferred over \\GetPhraseForLang,",
            "\tsince \\GetPhrase will use the currently logged-on user's selected",
            "\tlanguage (or default to English). }"
        ],
        "snippets": [
            "\\GetPhraseForLang(",
            "\tPhraseKey, { Required. The identifying key for a phrase. May be either",
            "\t\ta string ID that uniquely identifies given text or a ParmPhrase",
            "\t\tstructure, which consists of a PhraseKey and up to 10 parameters. }",
            "\tLanguage, { Required text. Name of the language for which the phrase",
            "\t\tis to be found. }",
            "\tLMHolder { Optional. An instance of the user session where the current",
            "\t\tlanguage is set. Defaults to the systemâs root object. Useful only",
            "\t\twhen a very large number of \\GetPhraseForLang calls are issued",
            "\t\tconsecutively. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetPlatformInfo": {
        "comments": [
            "{ Description: Gathers information about the current application and",
            "\tthe workstation it is running on. }",
            "{ This utility function makes use of WkStaInfo and Platform to gather",
            "\trelevant information about the application. The structure returned has",
            "\tthe following format: INIFiles Struct [ FileName { file name and",
            "\textension for the file }; OEM { TRUE if an OEM layer file };",
            "\tWorkstation { Name of the workstation or invalid if global }; Layer {",
            "\tInstance of application layer owning the file }; Dynamic { TRUE if a",
            "\tdynamic property }; Sections { Dictionary of sections, each element of",
            "\twhich is an array of Property structures (see following) }; Changed {",
            "\tUser sets to true if the file has been changed, initialized to false",
            "\t}; ] The property structures have the following format: INIProperty",
            "\tStruct [ Name { Variable name in the settings file }; Value { Simple",
            "\tvalue or an ordered array of values if the variable occurs more than",
            "\tonce in the section of the file }; Comment { Text comment if present",
            "\tin the file }; Hidden { TRUE if not shown in the Edit Properties GUI",
            "\t}; ] }"
        ],
        "snippets": [
            "LayerRoot\\GetPlatformInfo(",
            "\t&Info { Required. Pointer to a variable. The information gathered will",
            "\t\tbe returned in a structure that this variable points to. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetPowerState": {
        "comments": [
            "{ Description: Returns a structure that holds details of the",
            "\tcomputer's power supply status. }"
        ],
        "snippets": [
            "GetPowerState();"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetPreferredSubnet": {
        "comments": [
            "{ Description: Returns the highest priority CIDR representation of",
            "\tsubnet for the given machine name. }",
            "{ Any setting done through this module is lost on restart of VTScada.",
            "\tReturns a valid CIDR format string only if a priority is configured",
            "\tfor the local system. (See: [RPCMANAGER-NETPRIORITY] Section ) }"
        ],
        "snippets": [
            "GetPreferredSubnet(",
            "\tRemoteMachine { Required text. A single string for the machine name of",
            "\t\tthe remote system. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetRawPhrase": {
        "comments": [
            "{ Description: Returns a phrase in the provided language, if it",
            "\texists. }",
            "{ Unlike \\GetPhrase there is no defaulting to the default language or",
            "\tthe PhraseID itself. Also, this will not look at strings provided by",
            "\tsubordinate applications. }"
        ],
        "snippets": [
            "LayerRoot.GetRawForLang(",
            "\tPhraseID, { Required. The identifying key for a phrase. May be either",
            "\t\ta string ID that uniquely identifies given text or a ParmPhrase",
            "\t\tstructure, which consists of a PhraseID and up to 10 parameters. }",
            "\tLanguageID { Required text. Name of the language for which the phrase",
            "\t\tis to be found. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetRecipes": {
        "comments": [
            "{ Description: Returns an array of the recipes found in the selected",
            "\trecipe book }",
            "{ \"RecipeBook\" must be a reference to a Recipe Book tag object, not",
            "\tthe name of the tag. Returns a sorted list of the recipe phrase keys",
            "\t(not names) in the recipe book. The keys will be returned in",
            "\talphabetic order of the names as those would appear in the current",
            "\tuser's language. }"
        ],
        "snippets": [
            "RecipeBook.GetRecipes();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetReferencedValues": {
        "comments": [
            "{ Description: Collects all dynamically referenced values in the call",
            "\ttree rooted at the parameter and returns them in an array. Returns",
            "\tInvalid if none are found. }"
        ],
        "snippets": [
            "GetReferencedValues(",
            "\tObject { Required. The object for which referenced values are to be",
            "\t\tfound. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetRetainedValue": {
        "comments": [
            "{ Description: Given the name of a variable whose value was retained,",
            "\tthis function will load the retained value from storage. The function",
            "\talso provides the option of deleting the files holding that value. }"
        ],
        "snippets": [
            "GetRetainedValue(",
            "\tInstance, { Required object. The module instance for which we want to",
            "\t\tload the value. }",
            "\tVariableName, { Required text. The name of the variable to load. }",
            "\tSharedFlag, { Optional Boolean. Set TRUE to indicate that the variable",
            "\t\twas shared. Defaults to FALSE. }",
            "\tDeleteFlag { Optional Boolean. Set TRUE to delete the files storing",
            "\t\tthe retained variable for the identified module. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetRemoteVersion": {
        "comments": [
            "{ Description: Returns the version number of VTScada running on a",
            "\tspecified workstation. Steady state or subroutine call. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. }"
        ],
        "snippets": [
            "\\RPCManager.GetRemoteVersion(",
            "\tNameOrIP { Required. Any of the names or IPs by which the workstation",
            "\t\tis known to the RPC Manager. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetReportTypes": {
        "comments": [
            "{ Description: This subroutine returns a list of available report type",
            "\tplugins. }",
            "{ This subroutine, declared in ReportPanel, is a plugin to help with",
            "\tcustom retrieval of report types. GetReportTypes must be prefaced by",
            "\t\\ReportPanel\\, as shown in the \"Format\" section above. }"
        ],
        "snippets": [
            "\\ReportPanel.GetReportTypes(",
            "\tPtrTypeNames, { Required. A pointer to a variable storing report",
            "\t\tnames. }",
            "\tPtrTypeMods { Required. A pointer to a variable storing report module",
            "\t\tnames. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetReturnValue": {
        "comments": [
            "{ Description: Returns a module's return value. }",
            "{ While the description seems redundant, this function is useful for",
            "\tobtaining a return value from a module that has been called as a",
            "\tparameter to another module, and whose return value has been or will",
            "\tbe altered by a ResetParm statement. }"
        ],
        "snippets": [
            "GetReturnValue(",
            "\tObject { Required. An object expression for the module instance whose",
            "\t\treturn value is required. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetSelected": {
        "comments": [
            "{ Description: Returns a selected graphic item in a window. }",
            "{ This function may only appear in a script. }"
        ],
        "snippets": [
            "GetSelected(",
            "\tObject { Required. Any object expression for the window containing",
            "\t\tselected graphics. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetSelectedInfo": {
        "comments": [
            "{ Description: Returns information about selected graphic item(s) in a",
            "\twindow. }",
            "{ If no graphic objects are selected, the return value will be",
            "\tmeaningless. }"
        ],
        "snippets": [
            "GetSelectedInfo(",
            "\tObject, { Required. Any object expression for the window containing",
            "\t\tselected graphics. }",
            "\tMode, { Required. Any numeric expression that defines what information",
            "\t\tto return: Mode Information to return 0 Minimum left side user",
            "\t\tcoordinate 1 Minimum bottom side user coordinate 2 Maximum right side",
            "\t\tuser coordinate 3 Maximum top side user coordinate }",
            "\t0, { 1 }",
            "\t2 { 3 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetServer": {
        "comments": [
            "{ Description: Returns the name of the active server for a specified",
            "\tservice. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. If the 16-byte binary format of the GUID is not known,",
            "\tthe GetGUID function may be used to obtain it. To obtain a list of",
            "\tservice names for your application, open the Trace Viewer Application",
            "\t, connect to RPC Diagnostics, then open the Services Dialog }"
        ],
        "snippets": [
            "\\RPCManager.GetServer(",
            "\tServiceName, { Required. Any text expression giving the name of the",
            "\t\tservice for which to get the active server's name. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetServerChanges": {
        "comments": [
            "{ Description: Launched by RPC Manager on a service server to obtain",
            "\tthe service's synchronization data (i.e. called by RPC Manager during",
            "\tstartup synchronization on a server to get the package of RPCs that",
            "\tcreate a synchronizable state on the client which is in step with the",
            "\tserver). }",
            "{ This subroutine is expected to be found in the object value of the",
            "\tcaller of RPCManager\\Register. It should not be called as",
            "\t\"\\RPCManager\\GetServerChanges\", but it may be appropriate to call it",
            "\twithin the scope of the relevant service \"<service",
            "\tscope>\\GetServerChanges\". GetServerChanges() should not be written as",
            "\ta subroutine, as it will run on the RPCManager thread, thereby",
            "\tsuspending external machine communication during synchronization. If",
            "\tyour GetServerChanges() request takes a long time, this will lead to a",
            "\treduction in RPC throughput during RPC service synchronization, which",
            "\tmay have undesirable effects. If GetServerChanges() is instead written",
            "\tas a launched module that slays itself when complete, the RPC thread",
            "\twill continue to service other RPC requests while you are building",
            "\tyour synchronization data package. Further, if GetServerChanges() is",
            "\twritten as a subroutine, the RPC thread can be suspended while running",
            "\tyour GetServerChanges() script, allowing your service thread to get a",
            "\ttime slice and modify the service data that you are attempting to",
            "\tsample. This may cause two PCs running the same service to end up with",
            "\tmismatching data. You must write GetServerChanges() as a launched",
            "\tmodule and call \\RPCManager.SetDivert() as soon as you have finished",
            "\tsampling the synchronizable data for your service. If there is any",
            "\tpossibility that another execution thread in your application can",
            "\tmodify the data that GetServerChanges() is sampling during building of",
            "\tthe synchronization package, you must protect the acquisition of the",
            "\tsynchronization package with a CriticalSection(). }"
        ],
        "snippets": [
            "GetServerChanges(",
            "\tRevisionInfo, { Required. The revision information from the",
            "\t\tGetClientRevision call made on the synchronizing client. }",
            "\tPackStreamRef, { Required. A pointer to a variable to obtain changes.",
            "\t\t}",
            "\tClientName { Required. The name of the client. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetServerMode": {
        "comments": [
            "{ Description: Returns the mode in which the current server for a",
            "\tspecified service is running. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. The mode value represents the current synchronization",
            "\tstate of the server for the specified service. Presently, one of the",
            "\tfollowing values may be returned \\RPC_ACCEPT_ALL - the server is not",
            "\tperforming synchronization with any client. \\RPC_SYNC_MODE - the",
            "\tserver is performing synchronization with a client.",
            "\t\\RPC_LINKCONTROL_ONLY - the server is starting synchronization with a",
            "\tclient. }"
        ],
        "snippets": [
            "\\RPCManager.GetServerMode(",
            "\tService, { Required. The name by which the service is known. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetServerNumber": {
        "comments": [
            "{ Description: Returns the index down the prioritized server list of",
            "\tthe current server for the specified service. Steady state or",
            "\tsubroutine call. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. The workstation at the top of the prioritized server list",
            "\twill return an index of zero. }"
        ],
        "snippets": [
            "\\RPCManager.GetServerNumber(",
            "\tService, { Required. The name by which the service is known. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetServerSIDPtr": {
        "comments": [
            "{ Description: Returns a pointer to a variable that holds the session",
            "\tID for the current server for the specified service. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. If the server changes, the value referenced by the",
            "\treturned pointer will change. This could be used by clients as a",
            "\ttrigger to cause them to synchronize to the new server. }"
        ],
        "snippets": [
            "\\RPCManager.GetServerSIDPtr(",
            "\tService, { Required. The name by which the service is known. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetServersListed": {
        "comments": [
            "{ Description: This subroutine returns a one-dimensional array of the",
            "\tnames or IPs of the servers that has been derived from the \"-Servers\"",
            "\tsection of the service configuration file. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. The return value from this subroutine is a list of the",
            "\ttext names for all workstations listed as servers. If the 16-byte",
            "\tbinary format of the GUID is not known, the GetGUID function may be",
            "\tused to obtain it. To obtain a list of service names for your",
            "\tapplication, open the Trace Viewer Application , connect to RPC",
            "\tDiagnostics, then open the Services Dialog }"
        ],
        "snippets": [
            "\\RPCManager.GetServersListed(",
            "\tServiceName, { Required. Any text expression giving the name of the",
            "\t\tservice for which to get the list of servers. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetServiceScope": {
        "comments": [
            "{ Description: Returns the service instance for a service. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. }"
        ],
        "snippets": [
            "\\RPCManager.GetServiceScope(",
            "\tService, { Required. The name by which the service is known. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetSessionContainers": {
        "comments": [
            "{ Description: Returns an array of the names of tags that are",
            "\t\"container\" tags that exist at any level under the given context",
            "\t(parent) tag. }",
            "{ Returns Invalid if nothing is found. }"
        ],
        "snippets": [
            "\\GetSessionContainers(",
            "\tContext, { Optional. The name of the tag under which to look for",
            "\t\tcontainers. Defaults to VTSDB. }",
            "\tWithLocationOnly, { Boolean. When true, only tags that have valid",
            "\t\tLatitude and Longitude parameters will be returned }",
            "\tExcludeContextFromList { Boolean. When true, the returned list will",
            "\t\tnot include the tag specified in Context. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetSessionContainerTags": {
        "comments": [
            "{ Description: Returns a dictionary of tag items below a given context",
            "\t(parent) tag. }",
            "{ The returned dictionary will have the following structure: [\"Title\"]",
            "\t- The title to display for the returned data [\"Tags\"] - A list of tags",
            "\tthat either exist under or contribute to the provided Context tag",
            "\t[\"Containers\"] - A list of Container tags that exist under the",
            "\tprovided \"Context\" tag Note that container tags use this function to",
            "\tobtain the list to display in a Sites page. If the container tag also",
            "\tincludes a module named CustomSiteListGetSubTags or",
            "\tCustomSiteMapGetSubTags, (which must be a subroutine and must return",
            "\tan array of tag names) then GetSessionContainerTags will automatically",
            "\tcall that module rather than GetTagList. NavigationPath and",
            "\tPtrAutoDrilled are used only with Context tags that have an optional",
            "\thook: CustomSiteListGetSubTags or CustomSiteMapGetSubTags. }"
        ],
        "snippets": [
            "\\ GetSessionContainerTags(",
            "\tContext, { Optional. The name of the tag under which to look for",
            "\t\tcontainers. Defaults to VTSDB. }",
            "\tDoNotRecurseIntoContainer, { Optional Boolean. Set TRUE to not recurse",
            "\t\tinto container with details page (default is false). }",
            "\tNoContainersInTagsList, { Optional Boolean. Set TRUE to prevent",
            "\t\tcontainers from appearing in the Tags list. Defaults to FALSE. }",
            "\tIncludeTagsInSubContainers, { Optional Boolean. Dpecifies whether to",
            "\t\tfilter out descendents of containers. Normally defaults to false.",
            "\t\tDefaults to true if Context is an array or if Context tag has",
            "\t\tcontributors }",
            "\tNavigationPath, { Optional array. Unique ID values of the tags that",
            "\t\tmake up the path taken to get to our Context tag. }",
            "\tPtrAutoDrilled { Optional pointer to an array of the Unique ID values",
            "\t\tof tags that were skipped (drilled through) to arrive at the Context",
            "\t\ttag. These will be skipped by the \"Go Up\" button in the site list user",
            "\t\tinterface. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetSessionID": {
        "comments": [
            "{ Description: Returns the current session ID for a specified",
            "\tapplication on a workstation. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. }"
        ],
        "snippets": [
            "\\RPCManager.GetSessionID(",
            "\tNameOrIP, { Required. Any of the names or IPs by which the workstation",
            "\t\tis known to the RPC Manager. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetShapePath": {
        "comments": [
            "{ Description: Returns the path value which defines the shape of a",
            "\tpolygon. }"
        ],
        "snippets": [
            "GetShapePath(",
            "\tCodePointer { Required. Any expression for the code pointer value that",
            "\t\tdefines the graphic statement. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetSocketStatus": {
        "comments": [
            "{ Description: Returns a Boolean to indicate the connection status of",
            "\teither, 1) The machine node if the subnet is not valid, or 2) The",
            "\tspecified interface. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. This module returns the status of the connection between",
            "\ttwo PCs if no Subnet is specified. If the Subnet is specified, then",
            "\tthe return value is that of the Socketâs status on the specified",
            "\tSubnet. If a Subnet is not specified and you are using a multi-homed",
            "\tPC, the return value will indicate how many sockets are connected to a",
            "\tparticular PC. In a network using multi-homed PCs, it is possible for",
            "\ttwo PCs to be connected multiple times under a given Subnet. In such a",
            "\tcase, GetSocketStatus will return the status of the first applicable",
            "\tsocket found. }"
        ],
        "snippets": [
            "\\RPCManager.GetSocketStatus(",
            "\tMachineName, { Required. The name of the machine for which you wish to",
            "\t\tget the Socket status. }",
            "\tSubnet { An optional parameter that specifies which an interface ID or",
            "\t\tGUID the socket, in which you are interested, is on. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetState": {
        "comments": [
            "{ Description: Returns the code value for the specified state. }",
            "{ none }"
        ],
        "snippets": [
            "GetState(",
            "\tModule, { Required. Any expression for the code value that defines the",
            "\t\tmodule. }",
            "\tName, { Required. Any text expression which gives the text name of the",
            "\t\tstate. }",
            "\tCase { Required. Any logical expression. If true, the name will be",
            "\t\ttreated as case-sensitive. Otherwise the name will be treated as",
            "\t\tcase-insensitive. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetStatement": {
        "comments": [
            "{ Description: Returns the code value, statement offset or statement",
            "\ttext size for the specified statement. }",
            "{ none }"
        ],
        "snippets": [
            "GetStatement(",
            "\tLocation, { Required. Any expression for the code value which defines",
            "\t\tthe module and state. }",
            "\tIndex, { Required. Any numeric expression for the statement. }",
            "\tOption { Optional Boolean. If zero (the default) a suitable code value",
            "\t\twill be returned. If set to 1, the statement offset in the source file",
            "\t\twill be returned. If set to 2, the statement text size in the source",
            "\t\tfile will be returned. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetStatementNum": {
        "comments": [
            "{ Description: Returns the statement number for the specified",
            "\tstatement. }",
            "{ none }"
        ],
        "snippets": [
            "GetStatementNum(",
            "\tObject, { Required. Any expression for the module instance where the",
            "\t\tstatement is located. }",
            "\tStatement { Required. Any expression for the code value or code",
            "\t\tpointer value which defines the statement. If this is an object value,",
            "\t\tthe executing statement is used. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetStateText": {
        "comments": [
            "{ Description: Returns the text for the specified state. }",
            "{ none }"
        ],
        "snippets": [
            "GetStateText(",
            "\tState, { Required. Any expression for the code value which defines the",
            "\t\tstate. }",
            "\tMode, { Required. Any numeric expression for the desired information:",
            "\t\tMode Desired information 0 Character offset to beginning of state",
            "\t\tdefinition from start of module (includes state name and square",
            "\t\tbrackets enclosing state code). 1 Size of state in characters,",
            "\t\tincluding state name and square brackets. 2 Character offset to",
            "\t\tbeginning of first statement from start of state. 3 Size of state code",
            "\t\tin characters, excluding state name and square brackets. }",
            "\t0, { 1 }",
            "\t2 { 3 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetStatus": {
        "comments": [
            "{ Description: Returns a variable that holds the current service",
            "\tinstance status for the specified service. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager\\,",
            "\tand the System variable must be declared in AppRoot.src. The return",
            "\tvalue from this subroutine is the current status of a service on the",
            "\tlocal workstation. It is similar to the return value for the Register",
            "\tmodule, except that in that case it is a pointer to the value that is",
            "\treturned rather than the value itself. If the 16-byte binary format of",
            "\tthe GUID is not known, the GetGUID module may be used to obtain it. To",
            "\tobtain a list of service names for your application, open the Trace",
            "\tViewer Application , connect to RPC Diagnostics, then open the",
            "\tServices Dialog }"
        ],
        "snippets": [
            "\\RPCManager.GetStatus(",
            "\tServiceName, { Required. Any text expression giving the name of the",
            "\t\tservice for which to get the connection status. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetStreamLength": {
        "comments": [
            "{ Description: Returns the present length of a stream in bytes. }",
            "{ This function is useful in determining the size in bytes (not",
            "\tnecessarily in characters) of an existing stream. It is not necessary",
            "\tto do a Seek prior to executing the GetStreamLength. Note that, when",
            "\trunning in steady-state and monitoring a SerialStream, GetStreamLength",
            "\tdoes not return an up-to-date stream length for that SerialStream. }"
        ],
        "snippets": [
            "GetStreamLength(",
            "\tStream { Required. Any expression that returns a stream value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetStructInfo": {
        "comments": [
            "{ Description: Returns names and counts of all instantiated",
            "\tstructures. }",
            "{ This function returns a structure with two fields: TotalInstances",
            "\tThe total cumulative count of structures allocated in the engine.",
            "\tStructList An nx2 array of structure names, and a count of how many",
            "\tinstances of that structure exist. }"
        ],
        "snippets": [
            "GetStructInfo(",
            "\tMiniDumpHandle { Optional. A pointer to a data structure that holds",
            "\t\tinformation from a crash dump. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetStreamType": {
        "comments": [
            "{ Description: Returns a type indication for a stream. }"
        ],
        "snippets": [
            "GetStreamType(",
            "\tStream { Required. Any expression that returns a stream value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetSubnetPriority": {
        "comments": [
            "{ Description: This module returns a full set of network priority",
            "\tvalues configured }",
            "{ If a NetPriority section is defined on the workstation, the returned",
            "\tarray will represent this configuration. If no NetPriority section and",
            "\tno SetSubnetPriority calls defining a network priority have been made,",
            "\tthis module will return Invalid. (See: [RPCMANAGER-NETPRIORITY]",
            "\tSection ) }"
        ],
        "snippets": [
            "GetSubnetPriority();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetSystemColor": {
        "comments": [
            "{ Description: Returns the colors for the user-configured Windowsâ¢",
            "\tcolors. }",
            "{ This function is session aware. It will get VIC colors if called",
            "\tfrom within the VIC session. }"
        ],
        "snippets": [
            "GetSystemColor(",
            "\tOption, { Required. Any numeric expression that determines which color",
            "\t\tto return, as indicated in the following table. Option Color 0 Scroll",
            "\t\tbar 1 Desk top 2 Active window title bar 3 Inactive window title bar 4",
            "\t\tMenu background 5 Window background 6 Window frame 7 Text in menus 8",
            "\t\tText in windows 9 Active window title text, size button, scroll bar",
            "\t\tarrow button 10 Active window border 11 Inactive window border 12",
            "\t\tBackground in MDI window 13 Background of selected control item 14",
            "\t\tText of selected item in control 15 Button face 16 Button shadow 17",
            "\t\tGrayed text 18 Text on buttons 19 Inactive text title 20 Button",
            "\t\thighlight }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10, { 11 }",
            "\t12, { 13 }",
            "\t14, { 15 }",
            "\t16, { 17 }",
            "\t18, { 19 }",
            "\t20",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetTagConfiguredParameters": {
        "comments": [
            "{ Description: Fetches a dictionary of tag parameters. If the Deployed",
            "\tparameter is TRUE, fetches the tag parameters in the database for the",
            "\tlatest deployed revision. The latest deployed revision may not match",
            "\tthe parameters on your workstation if your workstation has local",
            "\tchanges to the tag. }",
            "{ If the Deployed parameter is FALSE, fetches the tag parameters in",
            "\tthe base cache for the latest application version. If the given tag is",
            "\tdeclared in the database, fetches all parameters that have been",
            "\texplicitly set for that tag. If the tag is declared in a type",
            "\tdatabase, fetches all the overrides that are defined in the database",
            "\tfor that tag. (returning an empty dictionary if there are none.) If",
            "\tthe given tag does not exist, the return is Invalid. To be used with",
            "\tOpChange and ModifyTags when they are called with the Merge==FALSE",
            "\tparameter. This API makes it possible to revert a tag parameter to its",
            "\tdefault or remove an override and modify some configured parameters",
            "\twhile keeping others. }"
        ],
        "snippets": [
            "\\Code.GetTagConfiguredParameters(",
            "\tTagName, { Required text. The name of the tag to retrieve",
            "\t\tchanged/overridden parameters }",
            "\tpParmsDict, { Required. Pointer to a value that will be set to the",
            "\t\tdictionary of configured tag parameters. }",
            "\tDeployed { Optional Boolean. TRUE to fetch deployed version of the",
            "\t\tgiven tag's parameters. Defaults to FALSE to get the current set of",
            "\t\ttag parameters on this workstation, regardless of whether or not they",
            "\t\thave been deployed. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetTagHistory": {
        "comments": [
            "{ Description: Launched module that retrieves historical data for a",
            "\ttag. Replaces GetLog. }",
            "{ This function is a replacement for GetLog. It has the following",
            "\tadvantages over GetLog: 1) Works purely in UTC. Any conversion to",
            "\tlocal timestamps should be done by the caller only when absolutely",
            "\tnecessary (only when they are about to display or be presented to an",
            "\tend-user). 2) Ambiguity removed from the StartTime, EndTime, TPP and",
            "\tNumEntries parameters: If TPP is non-zero, then EndTime is ignored and",
            "\tNumEntries explicitly specifies the number of periods to return. 3)",
            "\tAmbiguity removed from return values. There is an explicit return code",
            "\tset when the function is complete, rather than just returning a",
            "\tsingle-element array when an error occurs, which is ambiguous to",
            "\twhether it indicates an error or returned data. Moreover, the array",
            "\treturned is always a two-dimensional array. Note: if multiple modes",
            "\tare being returned from the same field, the array size of fields needs",
            "\tto match that of mode. This function forwards to GetLog if there is",
            "\tlegacy history data involved in the query. No downtime invalids are",
            "\tinserted when reading in the reverse order. }"
        ],
        "snippets": [
            "\\HistorianManager.GetTagHistory(",
            "\tPtrReturnCode, { Required. A pointer to a return code. If launching",
            "\t\tGetTagHistory multiple times for a set of tags this should be an array",
            "\t\twith an index incrementing for each launch. PtrReturnCode will be",
            "\t\tinvalid until this launched function finishes. Watch for this value to",
            "\t\tbecome valid before attempting to process the results. In the case of",
            "\t\tan array, use AValid to watch for every instance to finish. Defined",
            "\t\terror codes are provided in the reference chapter. See: Historian",
            "\t\tError Codes }",
            "\tPtrResult, { A pointer to the historical data that will be returned in",
            "\t\tthis parameter. Always returns an array with at least two dimensions",
            "\t\taccording to the parameter, Fields. }",
            "\tTagObj, { Object value of the tag for which the history is to be",
            "\t\tretrieved. }",
            "\tFieldNames, { Either the name or an array of names of the fields to",
            "\t\tretrieve. Typically, the field in which you are interested is \"Value\"",
            "\t\tfor most tag values, or \"Value!\" for tag attribute data (Value! was",
            "\t\tintroduced with VTScada version 12 and is not available in legacy",
            "\t\tdata. It cannot be retrieved by SQL queries.) Note that TagData will",
            "\t\tstill be a two-dimensional array even if FieldsNames is simply text.",
            "\t\tIn most cases, it is better to specify this parameter as a",
            "\t\tone-dimensional array containing two elements: \"Timestamp\" and",
            "\t\t\"Value\". Both dimensions of TagData will then have data. }",
            "\tStartTime, { UTC time stamp indicating the beginning of the data range",
            "\t\tto retrieve. A local time value should be converted to UTC as follows.",
            "\t\t(LocalTimeZone should be 0 in almost all cases.) UTCStartTime =",
            "\t\tConvertTimestamp(Start, LocalTimeZone, FALSE, Invalid); }",
            "\tEndTime, { UTC time stamp indicating the end of the data range to",
            "\t\tretrieve. (Selection is inclusive of this time.) Ignored if TPP is",
            "\t\tnon-zero. }",
            "\tTPP, { Required. Any numeric expression giving the time span in",
            "\t\tseconds for each array entry. Each array element will contain the data",
            "\t\twhich correspond exactly to this time period which corresponds to 0 or",
            "\t\tmore data points. If TPP is equal to 0, the data is read and placed in",
            "\t\tthe array on a one to one basis. If TPP is less than 0, an error will",
            "\t\tbe returned. If reading string values with TPP > 0 and Modes = 4 then",
            "\t\tvalid text values are returned. Attempting to do the same with any",
            "\t\tModes value other than 4 will return only Invalid. }",
            "\tNumEntries, { The number of log entries to be returned in the array.",
            "\t\tUse a negative value to retrieve values in reverse chronological",
            "\t\torder. }",
            "\tModes, { Optional numeric expression giving the method of handling the",
            "\t\tdata. If TPP is greater than 0, the values that fall in each time span",
            "\t\twill be represented as follows: Mode Data Collection 0 Time-weighted",
            "\t\taverage 1 Minimum in range 2 Maximum in range 3 Change in value over",
            "\t\tthe range 4 Value at start of range 5 TimeOfMinInRange 6",
            "\t\tTimeOfMaxInRange 7 SumOfZtoNZTransitions 8 SumOfNonZeroTime 9",
            "\t\tTotalizer. (Invalid is counted as zero) 10 Deprecated. Equivalent to",
            "\t\tmode 4. 11 Difference between the start and end values of a range (see",
            "\t\tfollowing note) 12 Bitwise OR (see following note) 13 Bitwise AND (see",
            "\t\tfollowing note) 14 Value at end of range Mode 11: This is for hardware",
            "\t\tthat can count to a limited number, then rolls over to start a fresh",
            "\t\tcount. For example, a tag that counts equipment starts, but which can",
            "\t\tonly count from 0 to 15 before wrapping around to start again. This",
            "\t\tgives a value of sixteen per roll-over since there must be one more",
            "\t\tstart after fifteen to have the roll-over occur. A graph of a very",
            "\t\tsimple case where there is a start every second would look like the",
            "\t\tfollowing: (Each rollover must be followed by a fresh start, not a",
            "\t\tgradually declining value. If there are a series of declining values",
            "\t\tthen, because each is less than the previous, each counts as another",
            "\t\trollover.) The formula used is (RolloverCount * RolloverValue) +",
            "\t\t(LastValidValue - FirstValidValue). Where, for any given time",
            "\t\tinterval: Rollovers are counted when a new value is smaller than the",
            "\t\tlast valid value. The RolloverValue is passed to the function in the",
            "\t\tparameter StaleTime. LastValidValue starts with the last valid value",
            "\t\tin the previous time interval (if any), and is updated with each new",
            "\t\tvalid value within the time interval. FirstValidValue starts with the",
            "\t\tlast valid value in the previous time interval (if any), and is",
            "\t\tupdated with only the first valid value found in the current time",
            "\t\tspan. Given this example, suppose that you want a count of starts in",
            "\t\teach thirty-second interval. In the first interval there is no",
            "\t\tprevious valid value, one wrap-around and a last valid value of 12.",
            "\t\t(1*16) + (12 - 0) = 28. This is an idealized case. Consider a more",
            "\t\trealistic case where not all values are logged. (This may be due to",
            "\t\tfactors such as polling intervals, deadbands, hardware, etc.) The",
            "\t\tfollowing graph shows the same data where the orange dots represent",
            "\t\tvalues obtained and logged and the gray line represents what really",
            "\t\thappened: In the first 30 seconds there is one roll-over when the",
            "\t\tvalue drops from 13 to 2. The first value is 0 and the last is 11. The",
            "\t\tHistorian will return 27: (1*16) + (11-0) = 27. The Historian will",
            "\t\treturn 30 for the period from 30 to 60. The first valid value (carried",
            "\t\tfrom the previous period) is 11. The last valid value is 9 and there",
            "\t\tare two roll-overs. (2*16) + (9-11) = 30. Modes 12 and 13: These are",
            "\t\tintended to provide a summary of the bit-wise Historian value",
            "\t\tattributes within a query. (Value attributes were added in VTScada",
            "\t\tversion 11.5 / 12.0) With mode 12, the first value is OR'd with zero,",
            "\t\tand each successive value in the time period is OR'd with result of",
            "\t\tthe last comparison. From the result you will know whether any",
            "\t\tparticular attribute bit was set on any values within the period. With",
            "\t\tmode 13, the first value is AND'd with a value having all bits set to",
            "\t\t1 and each successive value is AND'd with the result of the last",
            "\t\tcomparison. From the result you will know whether any particular",
            "\t\tattribute bit was set on all values within the period. In the case of",
            "\t\tmodes 5 and 6, FieldName should still be set to indicate the field on",
            "\t\twhich the mode is to act. The return values will be times indicating",
            "\t\tthe maximum or minimum in that field for each time span. If TPP is",
            "\t\tless than or equal to 0, Mode is ignored. If the data is text, the",
            "\t\tfirst entry in a given time range is used for the array entry and Mode",
            "\t\tis ignored. It is possible to retrieve more than one mode in a single",
            "\t\tGetTagHistory statement. To do this, pass an array of values in as the",
            "\t\tMode parameter. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10, { 11 }",
            "\t12, { 13 }",
            "\t14",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetTagList": {
        "comments": [
            "{ Description: Returns an array of tags, starting at a given point in",
            "\tthe tag tree and including all child tags below that point, subject to",
            "\tthe filtering parameters. }",
            "{ This function provides the search and filtering features seen in the",
            "\tTag Browser. You should select this function over the older PointList,",
            "\tsince GetTagList adds several options to control what will be",
            "\treturned. The IsText option in AdditionalFilters causes the code to",
            "\tcall GetPhrase on the Value. When using text, the Equal option (5) is",
            "\tcase sensitive. For case insensitive checks, use the Pattern Match",
            "\toption (8) }"
        ],
        "snippets": [
            "\\GetTagList(",
            "\tRootLevel, { Optional text. The name of the tag to begin with. May be",
            "\t\ta unique id or a tag name. Defaults to VTSDB if not specified. }",
            "\tDoRecursive, { Optional. A Boolean value which, when set TRUE, results",
            "\t\tin sub-tags being returned as well as tags at the current level of the",
            "\t\ttree. Defaults to false if Invalid. }",
            "\tSearchType, { Optional flag. Set 0 for a name search or 1 to search",
            "\t\tall parameters. Defaults to 0, name search. }",
            "\tSearchString, { Optional text. A value to filter for, using pattern",
            "\t\tmatching. }",
            "\tTagType, { Optional. The type of tag to be filtered for. Set to",
            "\t\tInvalid (not \"*\") for all tag types. }",
            "\tAreaSearch, { Optional text - the area name to filter for using",
            "\t\tpattern matching. }",
            "\tEnableRealmAreaFiltering, { Optional Numeric with possible values as",
            "\t\tfollows: 0 => no realm or user filtering. 1 => apply realm & user",
            "\t\tfiltering. (Default) 2 => apply only realm filtering. }",
            "\tIncludeGhosts, { Optional Boolean. Set TRUE to include disabled tags.",
            "\t\tDefaults to FALSE. }",
            "\tExcludeLeaves, { Optional Boolean. Set TRUE to filter for only tags",
            "\t\tthat have child tags. Defaults to FALSE. }",
            "\tExcludeMenuItems, { Optional Boolean. Set to TRUE to exclude Menu",
            "\t\tItemTags. Defaults to FALSE }",
            "\tExcludeSubordinateTags, { Optional Boolean. Set to TRUE to exclude",
            "\t\tSubordinate tags and tags from subordinate applications. Defaults to",
            "\t\tFALSE. }",
            "\tEquipTypeSearch, { Optional text. Provide an equipment type name to",
            "\t\tsearch for tags with that EquipmentType property. No default. }",
            "\tParmSearchString, { Optional text. Search string for full parameter",
            "\t\tsearch }",
            "\tAdditionalFilters, { Optional structure. Array of structures of",
            "\t\tadditional filters. AdditionalFiltersStruct Struct [ VariableName{",
            "\t\tVariable to check }; OperandID{ See table below for definitions };",
            "\t\tValue{ Value to compare against }; IsText{ Flag - Do this comparison",
            "\t\tas text }; ]; OperandID Meaning 0 Valid 1 True 2 False 3 Less Than 4",
            "\t\tLess Than Or Equal 5 Equal (Case sensitive for text) 6 Greater Than Or",
            "\t\tEqual 7 Greater Than 8 Pattern Match (Not case sensitive for text) Use",
            "\t\tthis to specify a parameter or variable name, the operand to use for",
            "\t\tthe comparison, and a value to compare against. As an example, the Tag",
            "\t\tBrowser uses this for the filter to show only tags with Questionable",
            "\t\tset. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8 { AddrSearchString }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetTagMode": {
        "comments": [
            "{ Description: Returns text or a structure to identify what kind of",
            "\ttag a given instance is. }",
            "{ If a structure is returned, it will contain the following fields:",
            "\tIsString - TRUE for string tags or non-string tags that are configured",
            "\tas text IsAnalog - TRUE for analog tags IsDigital - TRUE for digital",
            "\ttags IsDiscrete - TRUE for digital tags or IO discrete tags IsInput -",
            "\tTRUE for input tags IsOutput - TRUE for output tags IsPump - TRUE for",
            "\tpumps IsDriver - TRUE for drivers EquipmentType - The tag's equipment",
            "\ttype or default type IsAnalytics - TRUE for calculation modes",
            "\tIsMemoryTag - TRUEfor tags with no address, excepting 2-bit digitals.",
            "\tIsContainer - TRUEfor tags that are containers. Some Boolean",
            "\tattributes are mutually exclusive, such as IsAnalog and IsDigital.",
            "\tOthers such as IsAnalog and IsDiscrete, are not. }"
        ],
        "snippets": [
            "\\GetTagMode(",
            "\tTagObj, { Required. The tag instance being checked. }",
            "\tSpecifier { Optional text. The name of the tag attribute to return. If",
            "\t\tthis parameter is Invalid, a structure including all attributes will",
            "\t\tbe returned. May be any of: IsString IsAnalog IsDigital IsDiscrete",
            "\t\tIsInput IsOutput IsPump IsDriver EquipmentType IsAnalytic IsMemoryTag",
            "\t\tIsContainer }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetTagTypes": {
        "comments": [
            "{ Description: Returns an array of either the common names or the",
            "\tmodule names of all tag types. May optionally include the list of tag",
            "\tgroups. }",
            "{ This function is used to populate a selection list of types. }"
        ],
        "snippets": [
            "\\GetTagTypes(",
            "\tGetGroups, { Optional Boolean. If set TRUE, the list of tag groups",
            "\t\twill be retrieved and returned at the end of the list of types.",
            "\t\tDefaults to TRUE. }",
            "\tGetModuleNames { Optional Boolean. If set TRUE, this function will",
            "\t\treturn module names rather than the display name for each type. If",
            "\t\tset, Groups will be invalid. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetTimePhrase": {
        "comments": [
            "{ Description: Returns a formatted time for the current user's locale",
            "\t}",
            "{ The Language property in the caller's scope is used to specify the",
            "\tlanguage name (e.g. en). Defaults to the Windows system's language. }"
        ],
        "snippets": [
            "\\GetTimePhrase(",
            "\tTime, { Required numeric. The number of seconds since midnight }",
            "\tFormatID { Required text. The phrase identifier key specifying the",
            "\t\ttime format. See: Date and Time Phrase Keys }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetToken": {
        "comments": [
            "{ Description: Reads the next token from a stream and returns the",
            "\ttoken type. }"
        ],
        "snippets": [
            "GetToken(",
            "\tStream, { Required. Any stream expression for the input stream. }",
            "\tToken, { Required. A variable into which the next token read will be",
            "\t\tstored. }",
            "\tClassBuffer, { Required. Any text expression for the character",
            "\t\tclassifier table. }",
            "\tNumClasses, { Required. Any numeric expression for the number of",
            "\t\tcharacter classes. }",
            "\tStateBuffer, { Required. Any text expression for the tokenizer state",
            "\t\ttable. }",
            "\tActionBuffer, { Required. Any text expression for the tokenizer action",
            "\t\ttable. }",
            "\tSkipWhite, { Required. Any logical expression. If true, all white",
            "\t\tspaced is skipped. Otherwise all continuous white space is treated as",
            "\t\ta token. }",
            "\tLineCount, { Required. Must be a variable. The number of lines read is",
            "\t\tstored here. }",
            "\tColumn, { Required. Must be a variable. The current column is stored",
            "\t\there. }",
            "\tCharCount { Required. Must be a variable. The number of characters",
            "\t\tread is stored here. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetToken (Control Lock Module)": {
        "comments": [
            "{ Description: Checks if a token is applied directly to a tag or",
            "\t(optionally) to a tag's ancestor. Can also search for token requests.",
            "\t}",
            "{ For more information about alarm records and what an alarm record",
            "\tcontains, see Alarm API Structure Definitions Checking the validity of",
            "\tthe returned value is sufficient to determine if the tag in question",
            "\thas a token. Given a tag's unique ID, this module checks if a token is",
            "\tapplied directly to the tag (IncludeAncestry = FALSE). If",
            "\tIncludeAncestry = TRUE (default), this will search the tag's ancestry",
            "\tfor the nearest token. Returns Invalid if no token is found. Can",
            "\toptionally search the TokenRequests list instead if GetRequest = TRUE",
            "\t}"
        ],
        "snippets": [
            "\\ControlTokenManager.GetToken(",
            "\tTagID, { Required text. The unique IDof the tag to check. }",
            "\tIncludeAncestry, { Optional Boolean. Set TRUEto search the tag's",
            "\t\tancestry. Defaults to TRUE. }",
            "\tSnapshot, { Optional Boolean. Set TRUEif this function is called in",
            "\t\tscript. Defaults to FALSE. }",
            "\tGetRequest, { Optional Boolean. Set TRUE to search the TokenRequests",
            "\t\tlist instead of the Tokens list. Defaults to FALSE. }",
            "\tReturnAll, { Optional Boolean. Set TRUE to return all matching",
            "\t\trecords. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetTokenLevel": {
        "comments": [
            "{ Description: Checks if a token is applied directly to the tag or",
            "\t(optional)the tag's ancestors, and if so, returns the token's level. }"
        ],
        "snippets": [
            "\\ControlTokenManager.GetTokenLevel(",
            "\tTagID, { Required text. The UniqueIDof the tag. }",
            "\tIncludeAncestry, { Optional Boolean. Set TRUEto search the tag's",
            "\t\tancestry. Defaults to TRUE. }",
            "\tSnapshot { Optional Boolean. Set TRUEif calling this function in",
            "\t\tscript. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetTrajectoryPath": {
        "comments": [
            "{ Description: Returns the Path value which defines the trajectory of",
            "\ta graphic object. }"
        ],
        "snippets": [
            "GetTrajectoryPath(",
            "\tCodePointer { Required. Any expression for the code pointer value that",
            "\t\tdefines the graphic statement. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetTransform": {
        "comments": [
            "{ Description: Returns the transform value applied to a graphic",
            "\tstatement. }"
        ],
        "snippets": [
            "GetTransform(",
            "\tCodePointer { Required. Any expression for the code pointer value",
            "\t\twhich defines the graphic statement. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetTransitText": {
        "comments": [
            "{ Description: Get Transition Document Text. This function returns",
            "\tinformation about the documentation of an action. }"
        ],
        "snippets": [
            "GetTransitText(",
            "\tAction, { Required. Any expression for the code value that defines the",
            "\t\taction. }",
            "\tMode, { Required. Any numeric expression which defines the information",
            "\t\tdesired Mode Information desired 0 Script size in characters 1",
            "\t\tCharacter offset to script 2 Trigger size in characters 3 Character",
            "\t\toffset to trigger 4 Destination size in characters 5 Character offset",
            "\t\tto destination 6 Size of script excluding [ ] , in characters 7",
            "\t\tCharacter offset to first script statement 8 Total size of action, in",
            "\t\tcharacters }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetUserName": {
        "comments": [
            "{ Description: Returns the user name of the callerâs account. }"
        ],
        "snippets": [
            "\\SecurityManager.GetUserName();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetUserNameOfRecord": {
        "comments": [
            "{ Description: Given an alarm record, returns the user name associated",
            "\twith the transaction. }",
            "{ This function is intended primarily for presentation purposes. }"
        ],
        "snippets": [
            "\\AlarmManager.GetUserNameOfRecord(",
            "\tAlarmName, { Required record. A reference to the alarm, as returned by",
            "\t\tthe function GetAlarmObject. }",
            "\tTrimRealm { Optional Boolean. If TRUE, and if the user is a member of",
            "\t\ta security group, the realm (group) will be trimmed from the result. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetUserSession": {
        "comments": [
            "{ Description: The module this function returns is useful for",
            "\taccessing session-specific variables. The function will traverse the",
            "\tcall tree to find the session that called it. }",
            "{ This routine walks up the caller's call tree, looking for a variable",
            "\tnamed \"_UserSession_\", then returning the context containing that",
            "\tvariable. If none is found, then the Display Manager's root session",
            "\twill be returned unless the optional parameter is set to FALSE.",
            "\tGetUserSession is also useful for launching dialogs in the scope of a",
            "\tparticular user session. This means that a tag or service that is not",
            "\tassociated with any particular user can cause a dialog to open on a",
            "\tparticular VIC session. Note that the public variable, IsEditing, is",
            "\tobsolete. In place of GetUserSession\\IsEditing, new code should use",
            "\tParentWindow()\\Editing. }"
        ],
        "snippets": [
            "\\GetUserSession(",
            "\tDefaultToRootSession, { Optional Boolean. If TRUE (the default value)",
            "\t\tthen if a valid session is not found, this function will return the",
            "\t\tDisplay Manager's root session. (That is, the one pertaining to the",
            "\t\tactual running application as opposed to any remotely established",
            "\t\tsession.) If set FALSE, then Invalid will be returned if a valid",
            "\t\tsession is not found. }",
            "\tQueryVariable { Optional. The name of a variable to be queried.",
            "\t\tExamples include, but are not limited to: \\IsRootSession \\AppTitle",
            "\t\t\\CurrentWinInst\\PageInstance }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetValue": {
        "comments": [
            "{ Description: Returns the current count of the values within an",
            "\taccumulator dictionary. }",
            "{ This function is part of the HierarchicalAccumulator module, so must",
            "\talways be called as shown in the format. You will need this function",
            "\tif you have created your own accumulator and wish to retrieve the",
            "\tvalue. The accumulator allows a fresh count to be generated at",
            "\tdifferent levels in a tag tree, and as tags are moved or disabled. }"
        ],
        "snippets": [
            "HierarchicalAccumulator\\GetValue(",
            "\tTagObj, { Required. The tag object at the point in the hierarchy where",
            "\t\tyou want to collect the accumulated values. }",
            "\tAccumulatorName { Required. The name of the accumulator, from which to",
            "\t\tretrieve the current count. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetVariableText": {
        "comments": [
            "{ Description: Returns information about a variable. }"
        ],
        "snippets": [
            "GetVariableText(",
            "\tVariable, { Required. Any expression for a variable. }",
            "\tMode, { Required. Any numeric expression for the desired information.",
            "\t\tThe character offset is to the right after the declared variable (i.e.",
            "\t\tthe carriage return is not included, nor is the line feed that ends",
            "\t\tthe line), and length includes the CR, LF(2). Mode Desired information",
            "\t\t0 Character offset to variable declaration 1 Size of variable",
            "\t\tdeclaration in characters In the case of the offset to the variable",
            "\t\tdeclaration, this is located immediately following the variable",
            "\t\tpreceding this variable and will in fact include the carriage return",
            "\t\tand line feed from the previous variable. Likewise, the size of the",
            "\t\tvariable declaration includes the leading carriage return and line",
            "\t\tfeed, any spaces preceding the actual variable name and does not",
            "\t\tinclude the carriage return and line feed following the variable. }",
            "\t0 { 1 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetVariableType": {
        "comments": [
            "{ Description: Returns the type, BASEVALUE, stored within a variable.",
            "\t}",
            "{ If a structure is returned, the first element will be an integer",
            "\tgiving the data type. In the case where the variable is a module, the",
            "\tremaining elements will be text strings giving the names of modules",
            "\twithin the scope. }"
        ],
        "snippets": [
            "GetVariableType(",
            "\tVariable { Required. Any expression for a variable. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetVarMetadata": {
        "comments": [
            "{ Description: Every variable object contains an embedded value. This",
            "\tfunction is used to retrieve those values. }",
            "{ Commonly used in conjunction with SetVarMetadata, FindVariable or",
            "\tAddVariable. Note that type data for each variable is stored within",
            "\tthe variable using metadata. }"
        ],
        "snippets": [
            "GetVarMetadata(",
            "\tVariable { Required. A variable handle, such as would be returned from",
            "\t\tthe FindVariable or AddVariable functions. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetVersions": {
        "comments": [
            "{ Description: Returns an array of the versions found in the current",
            "\tor specified recipe }",
            "{ \"RecipeBook\" must be a reference to a Recipe Book tag object, not",
            "\tthe name of the tag. Returns a sorted list of the recipe versions in",
            "\tthe recipe book for the specified recipe. }"
        ],
        "snippets": [
            "RecipeBook.GetVersions(",
            "\tRecipeName, { Optional text. The recipe, from which the version array",
            "\t\tshould be retrieved. }",
            "\tSortAscending { Optional Boolean. If TRUE(the default), recipe",
            "\t\tversions are sorted in ascending order before being returned. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetVoices": {
        "comments": [
            "{ Description: Runs in the VoiceTalk thread and returns a list of",
            "\tvoices available on a SAPI text-to-speech stream. }",
            "{ VoiceTalkStream is a speech stream returned from VoiceTalk. This",
            "\tfunction will return immediately. Using the array information returned",
            "\tfrom this call, it is possible to determine whether a particular SAPI",
            "\ttext-to-speech mode exists on the system. If it does not, the array",
            "\tinformation can be used to select the voice that most closely matches",
            "\tthe desired characteristics, or build and display a dialog to allow",
            "\tthe user to choose. }"
        ],
        "snippets": [
            "VoiceTalkStream\\GetVoices(",
            "\tDetailed { Optional. A flag which, if set to a non-zero value, results",
            "\t\tin a detailed 2-dimensional array of information about the voices",
            "\t\tbeing returned. If this parameter is \"0\" or omitted, the return value",
            "\t\twill be a 1-dimensional list of voice names suitable for use in the",
            "\t\tVoiceTalk\\Configure function. If Detailed is specified, a",
            "\t\t2-dimensional array containing the available speech voices will be",
            "\t\treturned. Each row in the array represents a speech module as follows:",
            "\t\t[N][0] Text value that indicates the name of this voice This is a",
            "\t\thuman readable string (such as \"Microsoft Mary\") that may be passed to",
            "\t\tthe VoiceTalk\\Configure function. [N][1] Text value giving the",
            "\t\tlanguage of the voice. For example, American English will be returned",
            "\t\tas \"409,9\", where 409 is the hexadecimal representation of standard",
            "\t\tEnglish (decimal 1033), and 9 indicates American version of English.",
            "\t\t[N][2] Text value giving the gender of the voice. Either \"Male\" or",
            "\t\t\"Female\" [N][3] Text value giving the age of the voice (e.g., \"Adult\")",
            "\t\t[N][4] Text value vendor providing the voice (e.g. \"Microsoft\") }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetWCPath": {
        "comments": [
            "{ Description: Returns the file system path to the application's",
            "\tworking copy folder. }"
        ],
        "snippets": [
            "LayerRoot.GetWCPath();"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GetWCRevision": {
        "comments": [
            "{ Description: Returns the revision structure for the repository",
            "\trevision in use by the working copy. }"
        ],
        "snippets": [
            "LayerRoot.GetWCRevision();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GetXformRefBox": {
        "comments": [
            "{ Description: Get Transform Reference Box. This function returns the",
            "\treference box for any transform of a module. }",
            "{ This function will only return the reference box of a transform",
            "\timmediately acting upon the module indicated by Object. It will not",
            "\tsearch for a transform that may be acting upon the module's parent or",
            "\tancestors. If the module indicated by Object is not under the",
            "\tinfluence of a transform, the return value will be Invalid. This",
            "\tfunction is unaffected by the Untransform statement. Even if the",
            "\tmodule has been untransformed, it will still be able to retrieve the",
            "\treference box of a transform that would be otherwise acting upon it. }"
        ],
        "snippets": [
            "GetXformRefBox(",
            "\tObject, { Required. Any expression which gives the object value for",
            "\t\tthe transformed module instance. }",
            "\tOption, { Required. Any expression that defines the requested return",
            "\t\tvalue as indicated by the following: Option Return Value 0 Left side 1",
            "\t\tBottom side 2 Right side 3 Top side }",
            "\t0, { 1 }",
            "\t2 { 3 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GetXMLNodeArray": {
        "comments": [
            "{ Description: Searches the result returned from XMLParse and returns",
            "\tan array of XMLNode values of a given type. Returns Invalid if no",
            "\tmatches are found. }",
            "{ This helper function was created to work with the results of",
            "\tXMLParse. GetXMLNodeArray searches the immediate children of a given",
            "\tXMLNode value (first parameter) for elements with the type name",
            "\tprovided by the second parameter and returns those elements in an",
            "\tarray of XMLNodes. This serves to simplify parsing of XMLNode trees,",
            "\twhich may contain lists of repeating elements. Elements in the",
            "\treturned array will be in the same order as in they were in the",
            "\toriginal XML document. If no elements with the given name are found,",
            "\tthen this function will return INVALID. }"
        ],
        "snippets": [
            "System.GetXMLNodeArray(",
            "\tXMLContainer, { The XMLNode within which to search for element type",
            "\t\tname. Only the direct child nodes of this node are searched. This is",
            "\t\tthe equivalent of the first parameter of the Scope operator. }",
            "\tElementType { The element type name to search for. This is equivalent",
            "\t\tto the second parameter of the Scope operator. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "GoToOffset": {
        "comments": [
            "{ Description: Forces an editor to move to a location in its text. }"
        ],
        "snippets": [
            "GoToOffset(",
            "\tEditor, { Required. Any expression for the editor value. }",
            "\tOffset, { Required. Any numeric expression for the character offset to",
            "\t\tdisplay. }",
            "\tHighlight, { Required. Any logical expression. If true, characters",
            "\t\twill automatically be highlighted, beginning at Offset. }",
            "\tNumHighlight { Required. Any numeric expression for the number of",
            "\t\tcharacters to highlight if Highlight is true. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "GrantTokenRequest": {
        "comments": [
            "{ Description: Grants a control token request. }",
            "{ If someone currently has that same token, granting the request will",
            "\trelease the current token and replace it with the one requested. This",
            "\tfunction is intended for advanced users. The provided widgets should",
            "\tsuffice in most instances. }"
        ],
        "snippets": [
            "ControlTokenManager.GrantTokenRequest(",
            "\tTagID, { Required string. The UniqueID of the tag for which the token",
            "\t\trequest is to be granted. }",
            "\tTokenRequestGUID, { Required string. The GUID of the token request to",
            "\t\tgrant. (Must be obtained via your script code. See: GetToken (Control",
            "\t\tLock Module) ) }",
            "\tCustom, { Optional. A structure of custom fields to log }",
            "\tTimestamp, { Optional The UTC timestamp of this event. Defaults to",
            "\t\tcurrent time }",
            "\tSessionID, { Optional. The ID of session granting the request.",
            "\t\tRelevant only if the token ownership is tied to the session. }",
            "\tAccountID, { Optional. The Account ID of user granting the request.",
            "\t\tDefaults to the currently signed-in user. }",
            "\tMachineID, { Optional. The MachineIDof the workstation where this",
            "\t\taction originated. Defaults to the current machine. }",
            "\tDevice { Optional. Name of client device }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Grid": {
        "comments": [
            "{ Description: Places a (lined) grid pattern on the screen. }",
            "{ This statement is non-destructive unless Color is explicitly set",
            "\tdestructive. The outside perimeter of the grid area is not drawn. }"
        ],
        "snippets": [
            "Grid(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the grid area. }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the grid area. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the grid area opposite to X1. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the grid area, whichever is the",
            "\t\topposite to Y1. }",
            "\tStyle, { Required. Any numeric expression giving the line style for",
            "\t\tthe grid lines. Valid line styles are from 1 to 10, where 1 is a solid",
            "\t\tline. }",
            "\tColor, { Required. Any numeric expression giving the color of the grid",
            "\t\tlines. If the number is less than 10000, the grid lines are",
            "\t\tnon-destructive. If greater than or equal to 10000, the grid lines are",
            "\t\tdestructive and the actual color used is Color - 10000. RGB values and",
            "\t\tsystem color constants are not supported. }",
            "\tHorizontal, { Required. Any numeric expression giving the number of",
            "\t\thorizontal lines in the grid. This value may be zero. }",
            "\tVertical { Required. Any numeric expression giving the number of",
            "\t\tvertical lines in the grid. This value may be zero. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GridList": {
        "comments": [
            "{ Description: Draws a list in the style of a spreadsheet. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ Where parameters use arrays, they must be dynamic",
            "\tarrays. Using GridList, you may enable such functionality as column",
            "\tresizing, sorting when clicking on column headings, selection of",
            "\tcells, using the keyboard to move around the grid, and adding scroll",
            "\tbars. (See: Bitwise Parameters & Operations ) The GridList provides",
            "\tthe ability to define a callback function to draw in a cell Data[I] =",
            "\tSelf() { Module in which the CallBack exists }; DataForms[I] =",
            "\t\"DrawCell\" { The CallBack module used to display a cell in this column",
            "\t}; An example of a GetSortKey call-back module: GetSortKey ( Row { Row",
            "\tindex to get the sort key for }; Column { Column index to get the sort",
            "\tkey for }; Inverted { Bool: TRUE if the order is being reversed }; )",
            "\tMain [ If 1; [ Return(ToUpper(Data[Row][Column])); ] ] GridList has",
            "\tbeen configured to clip text on the right and display a tooltip if",
            "\tthere is not enough room to show the entire text string in a cell. Do",
            "\tnot place a Tooltip widget over a GridList. See previous note.",
            "\tHasFocus() - Accessor function Script only. You may call this function",
            "\tin on your GridList to determine whether it has focus. }"
        ],
        "snippets": [
            "System.GridList(",
            "\tTitles, { Required. The array of the titles you wish to use for the",
            "\t\tgrid column headings. The title bar for a grid can be disabled by",
            "\t\tsetting the Titles array to Invalid, or by setting TitleHeightParm to",
            "\t\t0. By default, users will be able to click each of your titles to sort",
            "\t\tthe grid (up or down) by the contents of that column. This (and all",
            "\t\tother) array parameters must use dynamic arrays. Alternatively, you",
            "\t\tmay provide the name of a callback module, which will provide the",
            "\t\ttitles. If doing so, your module must provide its own code to enable",
            "\t\tsorting by title. Refer to the comments section and example 4. }",
            "\tData, { Required. The array of data with which to populate the grid.",
            "\t\tArray elements match grid cells according to: Data[row][col]. }",
            "\tDataFormat, { Required. Usually an array of the data formats",
            "\t\tcorresponding to the values specified in the Data array, in which case",
            "\t\tthere must be one entry per column of data. Alternatively, this may be",
            "\t\ta single format that will be applied to all values, as shown in the",
            "\t\texample at the end of this topic. Available format codes are listed in",
            "\t\tmost text functions including GUIText }",
            "\tColWidthsParm, { Optional. The array of the widths of the columns in",
            "\t\tpixels. Alternatively, a single value may be used to if all columns",
            "\t\tare to be the same width. }",
            "\tNumDataRowsParm, { Optional. Specifies the number of data rows to",
            "\t\tdisplay. Extra cells may be shown according to the height available to",
            "\t\tthe grid, but no data will be displayed after the row set by this",
            "\t\tparameter. }",
            "\tNumDataColsParm, { Optional. Specifies the number of data columns to",
            "\t\tdisplay. No extra columns are shown if the Gridlist area is wider than",
            "\t\tthe sum of the column widths. }",
            "\tGridListBGndParm, { Optional. Sets the background color for the cells",
            "\t\tin the grid. }",
            "\tGridColorParm, { Optional. Indicates the color of the grid lines. }",
            "\tGridLineWidthParm, { Optional. Indicates the width of the grid lines.",
            "\t\t}",
            "\tGridStyleParm, { Optional. Indicates the style of the grid lines. }",
            "\tRowHeightParm, { Optional. Indicates the height of the rows in the",
            "\t\tgrid. }",
            "\tTitleHeightParm, { Optional. Indicates the height of the column",
            "\t\theadings row above the grid. The title bar for a grid can be disabled",
            "\t\tby setting TitleHeightParm to 0, or by setting the Title array to",
            "\t\tInvalid. }",
            "\tHCellPaddingParm, { Optional. Indicates the horizontal cell padding",
            "\t\tfor the grid. }",
            "\tVCellPaddingParm, { Optional. Indicates the vertical cell padding for",
            "\t\tthe grid. }",
            "\tHScrollPosParm, { Optional. Indicates the horizontal scroll bar",
            "\t\tposition. }",
            "\tVScrollPosParm, { Optional. Indicates the vertical scroll bar",
            "\t\tposition. }",
            "\tDisableVScroll, { Optional. A flag that may be set to TRUE (non-zero)",
            "\t\tto disable vertical scrolling, or FALSE (0) to enable vertical",
            "\t\tscrolling. }",
            "\tDisableHScroll, { Optional. A flag that may be set to TRUE (non-zero)",
            "\t\tto disable horizontal scrolling, or FALSE (0) to enable horizontal",
            "\t\tscrolling. }",
            "\tDisableColumnSizing, { Optional. A flag that may be set to TRUE",
            "\t\t(non-zero) to disable column resizing, or FALSE (0) to enable column",
            "\t\tresizing. }",
            "\tDisableSorting, { Optional. A flag that may be set to TRUE (non-zero)",
            "\t\tto disable sorting by clicking the column headings, or FALSE (0) to",
            "\t\tenable sorting by clicking the column headings. }",
            "\tDisableSelectedCellParm, { Optional bitwise flag. Set bit 0 to disable",
            "\t\tselected-cell tracking. Set bit 1 to disable highlighting of the",
            "\t\tselected cell. Defaults to neither bit being set, thereby enabling",
            "\t\tselected-cell tracking and highlighting. }",
            "\tDisableVGridLines, { Optional. A flag that may be set to TRUE",
            "\t\t(non-zero) to disable vertical grid lines, or FALSE (0) to enable",
            "\t\tvertical grid lines. }",
            "\tDisableHGridLines, { Optional. A flag that may be set to TRUE",
            "\t\t(non-zero) to disable horizontal grid lines, or FALSE (0) to enable",
            "\t\thorizontal grid lines. }",
            "\tLockFirstColumn, { An optional flag that may be set TRUE (non-zero) to",
            "\t\tlock the first column from horizontal scrolling (e.g. the first column",
            "\t\tcontains row titles). The default value if Invalid or not supplied is",
            "\t\tFALSE. }",
            "\tSort, { An optional parameter that specifies the column on which the",
            "\t\tGridList is to be sorted. The parameter is 1-based (i.e. a value of 1",
            "\t\trefers to the first column). If negative, the sort order is descending",
            "\t\tIf the user clicks a column title to sort the GridList, then the",
            "\t\tparameter is set to the appropriate value. . If Invalid or not",
            "\t\tsupplied, no column sorting will be applied. }",
            "\tSelectedRow, { An optional parameter that specifies the row of the",
            "\t\tselected cell. The parameter is 0-based (i.e. a value of 0 refers to",
            "\t\tthe first row). If the user clicks in a cell, then the parameter is",
            "\t\tset to the index of the selected row. If Invalid or not supplied, no",
            "\t\tcell is selected. }",
            "\tSelectedColumn, { An optional parameter that specifies the column of",
            "\t\tthe selected cell. The parameter is 0-based (i.e. a value of 0 refers",
            "\t\tto the first column). If the user clicks in a cell, then the parameter",
            "\t\tis set to the index of the selected column. If Invalid or not",
            "\t\tsupplied, no cell is selected. }",
            "\tGridFontParm, { An optional parameter that specifies the font to be",
            "\t\tused for Titles and Grid elements. The selected font will affect all",
            "\t\titems in the GridList. If using callbacks, it will allow the user to",
            "\t\tuse the same font in their callbacks or have a separate title font and",
            "\t\tuse their own font in their callbacks. Note: Nothing in a GridList is",
            "\t\tsized based on font size. The caller must ensure that the row and",
            "\t\ttitle heights are large enough to accommodate the font. No default",
            "\t\tvalue. }",
            "\tGetSortKeyScope, { An optional module value of GetSortKey call-back",
            "\t\t(example in comments section). Required only when using call-backs for",
            "\t\tthe cells of the Gridlist. }",
            "\tEnableBorderParm, { Optional Boolean. Set true to show a border around",
            "\t\tthe grid. Defaults to FALSE. }",
            "\tCellTextColorParm, { Optional color value. Color of the text in the",
            "\t\tcells. }",
            "\tTitleTextColorParm, { Optional color value. Color of the text in the",
            "\t\ttitle. }",
            "\tTitleBackColorParm, { Optional color value. Color of the title",
            "\t\tbackground. }",
            "\tTitleGridColorParm, { Optional color value. Color of the title grid or",
            "\t\tborder }",
            "\tLockFirstColColorParm, { Optional color value. Color of the locked",
            "\t\tfirst columns gridline. }",
            "\tCaseSortParm, { Optional Boolean. Set TRUE for case-insensitive",
            "\t\tsorting. Defaults to FALSE. }",
            "\tDisableControlsParm, { Optional bitwise flags to disable the keyboard",
            "\t\tor mouse so that the caller can define its own behavior for controls.",
            "\t\tSet bit 0 to disable keyboard input. Set bit 1 to disable cell",
            "\t\tselection by the mouse pointer. Default to neither bit set. }",
            "\tIsFocusableParm { Optional Boolean. If set TRUE, this allows the",
            "\t\tgridlist to take the focus when it is clicked on or tabbed to. Such a",
            "\t\tgridlist will only respond to keyboard input if it has focus. Defaults",
            "\t\tto FALSE. Note that the focus and keyboard-input behavior will also",
            "\t\thappen if the selected cell option is explicitly enabled. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GUIArc": {
        "comments": [
            "{ Description: Draws an arc in a window. Can return a Boolean when",
            "\tselected by a mouse button or when the <ENTER> key is pressed after",
            "\tthe graphic acquires focus. }",
            "{ This function is a layered graphics statement. For information about",
            "\tpositioning a layered graphic, please refer to \"Use Scaling to",
            "\tPosition GUI Objects\". The first four parameters must be constants.",
            "\tSee GUITransform for an example of how to compute the position",
            "\tdynamically. The Left and Right references are interchangeable.",
            "\tWhichever is smaller is taken as the left and the larger of the two",
            "\tvalues will be used as the right. The same is true of the top and",
            "\tbottom references. Note that the 1 st 42 pixels of a VTScada",
            "\tapplication will be obscured by the title bar, if present. }"
        ],
        "snippets": [
            "GUIArc(",
            "\tLeftReference, { A constant number that gives the left side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tBottomReference, { A constant number that gives the bottom side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. The top and bottom references are measured down",
            "\t\tfrom the top of the screen. The top and bottom references are measured",
            "\t\tdown from the top of the screen. }",
            "\tRightReference, { A constant number that gives the right side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. }",
            "\tTopReference, { A constant number that gives the top side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tScaleLeft, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleBottom, { Required. Either a numeric expression, or any",
            "\t\texpression that returns a Normalize value. This parameter scales this",
            "\t\tside from its reference position with respect to the opposite side. If",
            "\t\tit is a numeric expression, a value of 1 will place the side at its",
            "\t\treference position. A value of 0 will place it at the opposite side",
            "\t\treference position. Similarly, a Normalize value will scale the side",
            "\t\tbetween the high and low limits. If the value is at the high level,",
            "\t\tthe side will be at its reference position. If the value is at the low",
            "\t\tlevel, the side will be at the opposite side reference position. }",
            "\tScaleRight, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleTop, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleWhole, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales the horizontal",
            "\t\tand vertical dimensions by the specified factor before the left,",
            "\t\tbottom, right and top coordinates are scaled. }",
            "\tTrajectory, { Required. Either a Trajectory function, a variable",
            "\t\tcontaining a Trajectory value, or a numeric expression. If this is a",
            "\t\tTrajectory value or function, the appropriate translation is applied",
            "\t\tto the image after the rotation is applied. If it is a valid numeric",
            "\t\texpression, the image isn't translated, but is displayed. Any other",
            "\t\tvalue is Invalid. }",
            "\tRotation, { Required. Either a Rotate function, a variable containing",
            "\t\ta Rotate value, or a numeric expression. If this is a Rotate value or",
            "\t\tfunction, the appropriate rotation is applied to the image before the",
            "\t\ttrajectory is applied. If it is a valid numeric expression, the image",
            "\t\tis rotated clockwise the number of degrees specified. Any other value",
            "\t\tis Invalid. }",
            "\tOpacity, { Required. Any Numeric expression, setting the opacity of",
            "\t\tthe object. A value of one results in a solid, zero is invisible and",
            "\t\tvalues between zero and one are used as an alpha setting for opacity.",
            "\t\t}",
            "\tReserved, { Reserved for future use, set to 0. }",
            "\tButton, { Required. Any numeric expression giving the button",
            "\t\tcombination that activates this graphic. Button Locator Buttons 0 No",
            "\t\tbutton combination will activate this graphic 1 Right button 2 Middle",
            "\t\tbutton 3 Right and middle buttons 4 Left button 5 Left and right",
            "\t\tbuttons 6 Left and middle buttons 7 All three buttons If the above",
            "\t\tvalues are multiplied by 8, the meaning for multiple buttons pressed",
            "\t\tbecomes \"OR\" rather than \"AND.\" For example, to accept any button on a",
            "\t\t2 or 3 button mouse, use 56 (i.e. 8 * 7). To accept the left mouse",
            "\t\tbutton regardless of whether the right button is pressed, use 32 (i.e.",
            "\t\t8 * 4). If a 64 is added to this parameter, the function will become",
            "\t\ttrue when the mouse buttons are released rather than when they are",
            "\t\tpressed. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6 { 7 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GUIBitmap": {
        "comments": [
            "{ Description: Draws an image of any of the following formats in a",
            "\twindow. Can return a Boolean TRUE when selected by a mouse button or",
            "\twhen the <ENTER> key is pressed after focus has been acquired.",
            "\tAvailable formats include, BMP, EMF, WMF, APM, CUT, PCX, JPG, PNG, and",
            "\tTIF }",
            "{ 32-bit color is used for all VTScada image drawing. The performance",
            "\tof image drawing is heavily influenced by the presence or absence of",
            "\tgraphics acceleration hardware. An anti-aliased image draws much more",
            "\tslowly than one without this option set, and becomes much less",
            "\tcompatible with masking operations such as zColorChange. This function",
            "\tis a layered graphics statement. See \"Use Scaling to Position GUI",
            "\tObjects\" for information about positioning a layered graphic. The Left",
            "\tand Right references are interchangeable. Whichever is smaller is",
            "\ttaken as the left and the larger of the two values will be used as the",
            "\tright. The same is true of the top and bottom references. Note that",
            "\tthe 1 st 42 pixels of a VTScada application will be obscured by the",
            "\ttitle bar, if present. EMF/WMF images will not display in the Anywhere",
            "\tClient. }"
        ],
        "snippets": [
            "GUIBitmap(",
            "\tLeftReference, { A constant number that gives the left side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tBottomReference, { A constant number that gives the bottom side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. The top and bottom references are measured down",
            "\t\tfrom the top of the screen. }",
            "\tRightReference, { A constant number that gives the right side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. }",
            "\tTopReference, { A constant number that gives the top side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tScaleLeft, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleBottom, { Required. Either a numeric expression, or any",
            "\t\texpression that returns a Normalize value. This parameter scales this",
            "\t\tside from its reference position with respect to the opposite side. If",
            "\t\tit is a numeric expression, a value of 1 will place the side at its",
            "\t\treference position. A value of 0 will place it at the opposite side",
            "\t\treference position. Similarly, a Normalize value will scale the side",
            "\t\tbetween the high and low limits. If the value is at the high level,",
            "\t\tthe side will be at its reference position. If the value is at the low",
            "\t\tlevel, the side will be at the opposite side reference position. }",
            "\tScaleRight, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleTop, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleWhole, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales the horizontal",
            "\t\tand vertical dimensions by the specified factor before the left,",
            "\t\tbottom, right and top coordinates are scaled. }",
            "\tTrajectory, { Required. Either a Trajectory function, a variable",
            "\t\tcontaining a Trajectory value, or a numeric expression. If this is a",
            "\t\tTrajectory value or function, the appropriate translation is applied",
            "\t\tto the image after the rotation is applied. If it is a valid numeric",
            "\t\texpression, the image isn't translated, but is displayed. Any other",
            "\t\tvalue is Invalid. }",
            "\tRotation, { Required. Either a Rotate function, a variable containing",
            "\t\ta Rotate value, or a numeric expression. If this is a Rotate value or",
            "\t\tfunction, the appropriate rotation is applied to the image before the",
            "\t\ttrajectory is applied. If it is a valid numeric expression, the image",
            "\t\tis rotated clockwise the number of degrees specified. Any other value",
            "\t\tis Invalid. }",
            "\tVisibility, { Required. Any logical expression. If true, the image is",
            "\t\tdrawn normally. If false, the image is not drawn. }",
            "\tReserved, { Reserved for future use, set to 0. }",
            "\tButton, { Required. Any numeric expression giving the button",
            "\t\tcombination that activates this graphic. Value Locator Buttons 0 No",
            "\t\tbutton combination will activate this graphic 1 Right button 2 Middle",
            "\t\tbutton 3 Right and middle buttons 4 Left button 5 Left and right",
            "\t\tbuttons 6 Left and middle buttons 7 All three buttons If the above",
            "\t\tvalues are multiplied by 8, the meaning for multiple buttons pressed",
            "\t\tbecomes \"OR\" rather than \"AND.\" For example, to accept any button on a",
            "\t\t2 or 3 button mouse, use 56 (i.e. 8 * 7). To accept the left mouse",
            "\t\tbutton regardless of whether the right button is pressed, use 32 (i.e.",
            "\t\t8 * 4). If a 64 is added to this parameter, the function will become",
            "\t\ttrue when the mouse buttons are released rather than when they are",
            "\t\tpressed. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6 { 7 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GUIButton": {
        "comments": [
            "{ Description: Draws a push-button in a window. Can return a Boolean",
            "\tTRUE when selected by a mouse button or when the <ENTER> key is",
            "\tpressed after focus has been acquired. }",
            "{ GUIButtons drawn on a page cannot be modified using ribbons or",
            "\tproperties dialogs. Editing can only be done in code. Standard",
            "\tpractice is to use WinButtons if displaying plain text labels, and to",
            "\tuse images for the labels when using a GUIButton. There are three",
            "\tbasic types of buttons: Momentary Toggle (or latching) Radio (which is",
            "\tactually a group of buttons behaving as a unit) For details on how to",
            "\tcreate each of these types, see the Examples section. A momentary",
            "\tbutton is one that immediately releases when pressed (i.e. it does not",
            "\tremain in its pressed position). It is usually used in conjunction",
            "\twith an If statement as an action trigger for a script. A toggle or",
            "\tlatching button is a button that when pressed remains locked (latched)",
            "\tinto its pressed position until it is pressed again (unlatched). Its",
            "\tVariable parameter will be set according to the position of the button",
            "\t- if it is latched in (pressed), the variable will be set to 1,",
            "\totherwise it will be 0. Similarly, if the variable's value is set by",
            "\tan external source from 0 to 1, the button will become pressed to",
            "\tmatch the value. This latching/toggling effect is achieved by the",
            "\tUpValue parameter being set to ! Variable, which is the same as saying",
            "\t\"not the value of the Variable parameter\" or more simply, \"toggle the",
            "\tvalue from what it is\". A radio button is one of a set of latching",
            "\tbuttons that are mutually exclusive, that is to say, only one button",
            "\tin the set may be latched (down) at one time. When another button in",
            "\tthe same set is pressed, the current depressed button will \"pop out\".",
            "\tTwo buttons cannot be latched in at once. If the FocusID parameter of",
            "\ta GUIButton is to be used in a NextFocusID statement to force this",
            "\tgraphic to get the focus, it is important to note that this does not",
            "\tcause the GUIButton statement to become true (selected), but only for",
            "\tit to become focused. When the button is focused it may then be",
            "\tselected via the <CR> key on the keyboard. Because structures cannot",
            "\tbe initialized in steady state, the ImageSet parameter must be created",
            "\tin a script. You may create your own structures, or use one that has",
            "\tbeen created for you. The syntax to use the predefined structure",
            "\tvaries depending on whether you are working in a script application or",
            "\ta standard VTScada application. For script applications, use",
            "\tSystem.ImageSetStruct() For standard applications, use",
            "\t\\ImageSetStruct(). The following set of rules defines the ImageSet",
            "\tbehavior... In the absence of the ImageSet parameter or, if that",
            "\tparameter is present but is not valid, the GUIButton statement will",
            "\tdisplay a set of predefined renderings. In the presence of a valid",
            "\tImageSet parameter, the current GUIButton rendering will be disabled.",
            "\t(Note that providing a valid variable that holds Invalid for this",
            "\tparameter will not disable the older GUIButton rendering). It is",
            "\tpossible to specify the ImageSet parameter as Invalid and use only the",
            "\tClickSound parameter The ImageSet parameter, when valid, must consist",
            "\tof a structure holding the images. Each structure member must be named",
            "\tas described in the parameter listing above. The only valid formats",
            "\tfor each image in the structure are image values. You may declare your",
            "\town structure or use one of the pre-created structures in VTScada. For",
            "\tstandard apps you can simply use \\ImageSetStruct ()and for script apps",
            "\tyou can use System.ImageSetStruct() In addition to these rules for the",
            "\tImageSet structure, the following rules govern how the button will be",
            "\trendered: If no image is provided in the set, no images shall be",
            "\tdisplayed for the button. You will end up with a blank, click-able",
            "\tarea If the button is disabled, the \"Disabled\" image will be displayed",
            "\tat all times. If there is no Disabled image the \"Up\" image will be",
            "\tdisplayed. If the mouse cursor is not within the bounding box of the",
            "\tbutton: If the button state is logically up, the \"Up\" image (if any)",
            "\tshall be displayed. If there is no \"Up\" image, no image shall be",
            "\tdisplayed. If the button state is logically down, the \"Down\" image (if",
            "\tany) shall be displayed. If there is no \"Down\" image, no image shall",
            "\tbe displayed. If the mouse cursor is within the bounding box of the",
            "\tbutton: If the button state is logically up, the \"MouseOverUp\" image",
            "\t(if any) shall be displayed. If there is no \"MouseOverUp\" image, the",
            "\t\"Up\" image (if any) shall be displayed. If there is no \"Up\" image, no",
            "\timage shall be displayed. If the button state is logically down, the",
            "\t\"MouseOverDown\" image (if any) shall be displayed. If there is no",
            "\t\"MouseOverDown\" image, the \"Down\" image (if any) shall be displayed.",
            "\tIf there is no \"Down\" image, no image shall be displayed. If the mouse",
            "\tcursor is within the bounding box of the button: If the button state",
            "\tis logically up, the \"MouseOverUp\" image (if any) shall be displayed.",
            "\tIf there is no \"MouseOverUp\" image, the \"Up\" image (if any) shall be",
            "\tdisplayed. If there is no \"Up\" image, no image shall be displayed. If",
            "\tthe button state is logically down, the \"MouseOverDown\" image (if any)",
            "\tshall be displayed. If there is no \"MouseOverDown\" image, the \"Down\"",
            "\timage (if any) shall be displayed. If there is no \"Down\" image, no",
            "\timage shall be displayed. The control has the ability to display text",
            "\tlayered on top of the images. The text is displayed regardless of",
            "\twhich image is being displayed. The text must be provided by the",
            "\texisting UpLabel, DownLabel, TextColor and Font parameters. If the",
            "\tUpLabel and DownLabel parameters are images, then they will not be",
            "\tused if the ImageSet parameter has prevented old GUIButton rendering.",
            "\tThe following parameters do not affect how the new images are",
            "\tdisplayed: Brush, HighlightPen, ShadowPen, Sides. This function is a",
            "\tlayered graphics statement. See \"Use Scaling to Position GUI Objects\"",
            "\tfor information about positioning a layered graphic. The Left and",
            "\tRight references are interchangeable. Whichever is smaller is taken as",
            "\tthe left and the larger of the two values will be used as the right.",
            "\tThe same is true of the top and bottom references. Note that the 1 st",
            "\t42 pixels of a VTScada application will be obscured by the title bar,",
            "\tif present. Will not display tab characters. }"
        ],
        "snippets": [
            "GUIButton(",
            "\tLeftReference, { A constant number that gives the left side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tBottomReference, { A constant number that gives the bottom side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. The top and bottom references are measured down",
            "\t\tfrom the top of the screen. }",
            "\tRightReference, { A constant number that gives the right side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. }",
            "\tTopReference, { A constant number that gives the top side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tScaleLeft, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleBottom, { Required. Either a numeric expression, or any",
            "\t\texpression that returns a Normalize value. This parameter scales this",
            "\t\tside from its reference position with respect to the opposite side. If",
            "\t\tit is a numeric expression, a value of 1 will place the side at its",
            "\t\treference position. A value of 0 will place it at the opposite side",
            "\t\treference position. Similarly, a Normalize value will scale the side",
            "\t\tbetween the high and low limits. If the value is at the high level,",
            "\t\tthe side will be at its reference position. If the value is at the low",
            "\t\tlevel, the side will be at the opposite side reference position. }",
            "\tScaleRight, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleTop, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleWhole, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales the horizontal",
            "\t\tand vertical dimensions by the specified factor before the left,",
            "\t\tbottom, right and top coordinates are scaled. }",
            "\tTrajectory, { Required. Either a Trajectory function, a variable",
            "\t\tcontaining a Trajectory value, or a numeric expression. If this is a",
            "\t\tTrajectory value or function, the appropriate translation is applied",
            "\t\tto the image after the rotation is applied. If it is a valid numeric",
            "\t\texpression, the image isn't translated, but is displayed. Any other",
            "\t\tvalue is Invalid. }",
            "\tRotation, { Required. Either a Rotate function, a variable containing",
            "\t\ta Rotate value, or a numeric expression. If this is a Rotate value or",
            "\t\tfunction, the appropriate rotation is applied to the image before the",
            "\t\ttrajectory is applied. If it is a valid numeric expression, the image",
            "\t\tis rotated clockwise the number of degrees specified. Any other value",
            "\t\tis Invalid. }",
            "\tVisibility, { Required. Any logical expression. If true, the image is",
            "\t\tdrawn normally. If false, the image is not drawn. }",
            "\tReserved n/a, { Reserved for future use, set to 0. }",
            "\tButton, { Required. Any numeric expression giving the button",
            "\t\tcombination that activates this graphic. Value Locator Buttons 0 No",
            "\t\tbutton combination will activate this graphic 1 Right button 2 Middle",
            "\t\tbutton 3 Right and middle buttons 4 Left button 5 Left and right",
            "\t\tbuttons 6 Left and middle buttons 7 All three buttons If the above",
            "\t\tvalues are multiplied by 8, the meaning for multiple buttons pressed",
            "\t\tbecomes \"OR\" rather than \"AND.\" For example, to accept any button on a",
            "\t\t2 or 3 button mouse, use 56 (i.e. 8 * 7). To accept the left mouse",
            "\t\tbutton regardless of whether the right button is pressed, use 32 (i.e.",
            "\t\t8 * 4). If a 64 is added to this parameter, the function will become",
            "\t\ttrue when the mouse buttons are released rather than when they are",
            "\t\tpressed. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6 { 7 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GUIChord": {
        "comments": [
            "{ Description: Draws a chord in a window. Can return a Boolean TRUE",
            "\twhen selected by a mouse button or when the <ENTER> key is pressed",
            "\tafter focus has been acquired. }",
            "{ This function is a layered graphics statement. See \"Use Scaling to",
            "\tPosition GUI Objects\" for information about positioning a layered",
            "\tgraphic. The Left and Right references are interchangeable. Whichever",
            "\tis smaller is taken as the left and the larger of the two values will",
            "\tbe used as the right. The same is true of the top and bottom",
            "\treferences. Note that the 1 st 42 pixels of a VTScada application will",
            "\tbe obscured by the title bar, if present. }"
        ],
        "snippets": [
            "GUIChord(",
            "\tLeftReference, { A constant number that gives the left side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tBottomReference, { A constant number that gives the bottom side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. The top and bottom references are measured down",
            "\t\tfrom the top of the screen. }",
            "\tRightReference, { A constant number that gives the right side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. }",
            "\tTopReference, { A constant number that gives the top side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tScaleLeft, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleBottom, { Required. Either a numeric expression, or any",
            "\t\texpression that returns a Normalize value. This parameter scales this",
            "\t\tside from its reference position with respect to the opposite side. If",
            "\t\tit is a numeric expression, a value of 1 will place the side at its",
            "\t\treference position. A value of 0 will place it at the opposite side",
            "\t\treference position. Similarly, a Normalize value will scale the side",
            "\t\tbetween the high and low limits. If the value is at the high level,",
            "\t\tthe side will be at its reference position. If the value is at the low",
            "\t\tlevel, the side will be at the opposite side reference position. }",
            "\tScaleRight, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleTop, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleWhole, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales the horizontal",
            "\t\tand vertical dimensions by the specified factor before the left,",
            "\t\tbottom, right and top coordinates are scaled. }",
            "\tTrajectory, { Required. Either a Trajectory function, a variable",
            "\t\tcontaining a Trajectory value, or a numeric expression. If this is a",
            "\t\tTrajectory value or function, the appropriate translation is applied",
            "\t\tto the image after the rotation is applied. If it is a valid numeric",
            "\t\texpression, the image isn't translated, but is displayed. Any other",
            "\t\tvalue is Invalid. }",
            "\tRotation, { Required. Either a Rotate function, a variable containing",
            "\t\ta Rotate value, or a numeric expression. If this is a Rotate value or",
            "\t\tfunction, the appropriate rotation is applied to the image before the",
            "\t\ttrajectory is applied. If it is a valid numeric expression, the image",
            "\t\tis rotated clockwise the number of degrees specified. Any other value",
            "\t\tis Invalid. }",
            "\tOpacity, { Required. Any Numeric expression, setting the opacity of",
            "\t\tthe object. A value of one results in a solid, zero is invisible and",
            "\t\tvalues between zero and one are used as an alpha setting for opacity.",
            "\t\t}",
            "\tReserved n/a, { Reserved for future use, set to 0. }",
            "\tButton, { Required. Any numeric expression giving the button",
            "\t\tcombination that activates this graphic. Value Locator Buttons 0 No",
            "\t\tbutton combination will activate this graphic 1 Right button 2 Middle",
            "\t\tbutton 3 Right and middle buttons 4 Left button 5 Left and right",
            "\t\tbuttons 6 Left and middle buttons 7 All three buttons If the above",
            "\t\tvalues are multiplied by 8, the meaning for multiple buttons pressed",
            "\t\tbecomes \"OR\" rather than \"AND.\" For example, to accept any button on a",
            "\t\t2 or 3 button mouse, use 56 (i.e. 8 * 7). To accept the left mouse",
            "\t\tbutton regardless of whether the right button is pressed, use 32 (i.e.",
            "\t\t8 * 4). If a 64 is added to this parameter, the function will become",
            "\t\ttrue when the mouse buttons are released rather than when they are",
            "\t\tpressed. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6 { 7 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GUIEllipse": {
        "comments": [
            "{ Description: Draws an ellipse in a window. Can return a Boolean TRUE",
            "\twhen selected by a mouse button or when the <ENTER> key is pressed",
            "\tafter focus has been acquired. }",
            "{ This function is a layered graphics statement. See \"Use Scaling to",
            "\tPosition GUI Objects\" for information about positioning a layered",
            "\tgraphic. GUIEllipses whose Pen value has an even numbered width are",
            "\tsubject to pixel rounding errors, which is particularly obvious when",
            "\tdrawing two concentric ellipses, one with an even width outline and",
            "\tone with an odd. To avoid this, always use all even or all odd outline",
            "\twidths for concentric ellipses. The Left and Right references are",
            "\tinterchangeable. Whichever is smaller is taken as the left and the",
            "\tlarger of the two values will be used as the right. The same is true",
            "\tof the top and bottom references. Note that the 1 st 42 pixels of a",
            "\tVTScada application will be obscured by the title bar, if present. }"
        ],
        "snippets": [
            "GUIEllipse(",
            "\tLeftReference, { A constant number that gives the left side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tBottomReference, { A constant number that gives the bottom side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. The top and bottom references are measured down",
            "\t\tfrom the top of the screen. }",
            "\tRightReference, { A constant number that gives the right side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. }",
            "\tTopReference, { A constant number that gives the top side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tScaleLeft, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleBottom, { Required. Either a numeric expression, or any",
            "\t\texpression that returns a Normalize value. This parameter scales this",
            "\t\tside from its reference position with respect to the opposite side. If",
            "\t\tit is a numeric expression, a value of 1 will place the side at its",
            "\t\treference position. A value of 0 will place it at the opposite side",
            "\t\treference position. Similarly, a Normalize value will scale the side",
            "\t\tbetween the high and low limits. If the value is at the high level,",
            "\t\tthe side will be at its reference position. If the value is at the low",
            "\t\tlevel, the side will be at the opposite side reference position. }",
            "\tScaleRight, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleTop, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleWhole, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales the horizontal",
            "\t\tand vertical dimensions by the specified factor before the left,",
            "\t\tbottom, right and top coordinates are scaled. }",
            "\tTrajectory, { Required. Either a Trajectory function, a variable",
            "\t\tcontaining a Trajectory value, or a numeric expression. If this is a",
            "\t\tTrajectory value or function, the appropriate translation is applied",
            "\t\tto the image after the rotation is applied. If it is a valid numeric",
            "\t\texpression, the image isn't translated, but is displayed. Any other",
            "\t\tvalue is Invalid. }",
            "\tRotation, { Required. Either a Rotate function, a variable containing",
            "\t\ta Rotate value, or a numeric expression. If this is a Rotate value or",
            "\t\tfunction, the appropriate rotation is applied to the image before the",
            "\t\ttrajectory is applied. If it is a valid numeric expression, the image",
            "\t\tis rotated clockwise the number of degrees specified. Any other value",
            "\t\tis Invalid. }",
            "\tOpacity, { Required. Any Numeric expression, setting the opacity of",
            "\t\tthe object. A value of one results in a solid, zero is invisible and",
            "\t\tvalues between zero and one are used as an alpha setting for opacity.",
            "\t\t}",
            "\tReserved n/a, { Reserved for future use, set to 0. }",
            "\tButton, { Required. Any numeric expression giving the button",
            "\t\tcombination that activates this graphic. Value Locator Buttons 0 No",
            "\t\tbutton combination will activate this graphic 1 Right button 2 Middle",
            "\t\tbutton 3 Right and middle buttons 4 Left button 5 Left and right",
            "\t\tbuttons 6 Left and middle buttons 7 All three buttons If the above",
            "\t\tvalues are multiplied by 8, the meaning for multiple buttons pressed",
            "\t\tbecomes \"OR\" rather than \"AND.\" For example, to accept any button on a",
            "\t\t2 or 3 button mouse, use 56 (i.e. 8 * 7). To accept the left mouse",
            "\t\tbutton regardless of whether the right button is pressed, use 32 (i.e.",
            "\t\t8 * 4). If a 64 is added to this parameter, the function will become",
            "\t\ttrue when the mouse buttons are released rather than when they are",
            "\t\tpressed. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6 { 7 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GUIPie": {
        "comments": [
            "{ Description: Draws a pie-shaped wedge in a window. Can return a",
            "\tBoolean TRUE when selected by a mouse button or when the <ENTER> key",
            "\tis pressed after focus has been acquired. }",
            "{ This function is a layered graphics statement. See \"Use Scaling to",
            "\tPosition GUI Objects\" for information about positioning a layered",
            "\tgraphic. The Left and Right references are interchangeable. Whichever",
            "\tis smaller is taken as the left and the larger of the two values will",
            "\tbe used as the right. The same is true of the top and bottom",
            "\treferences. Note that the 1 st 42 pixels of a VTScada application will",
            "\tbe obscured by the title bar, if present. }"
        ],
        "snippets": [
            "GUIPie(",
            "\tLeftReference, { A constant number that gives the left side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tBottomReference, { A constant number that gives the bottom side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. The top and bottom references are measured down",
            "\t\tfrom the top of the screen. }",
            "\tRightReference, { A constant number that gives the right side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. }",
            "\tTopReference, { A constant number that gives the top side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tScaleLeft, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleBottom, { Required. Either a numeric expression, or any",
            "\t\texpression that returns a Normalize value. This parameter scales this",
            "\t\tside from its reference position with respect to the opposite side. If",
            "\t\tit is a numeric expression, a value of 1 will place the side at its",
            "\t\treference position. A value of 0 will place it at the opposite side",
            "\t\treference position. Similarly, a Normalize value will scale the side",
            "\t\tbetween the high and low limits. If the value is at the high level,",
            "\t\tthe side will be at its reference position. If the value is at the low",
            "\t\tlevel, the side will be at the opposite side reference position. }",
            "\tScaleRight, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleTop, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleWhole, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales the horizontal",
            "\t\tand vertical dimensions by the specified factor before the left,",
            "\t\tbottom, right and top coordinates are scaled. }",
            "\tTrajectory, { Required. Either a Trajectory function, a variable",
            "\t\tcontaining a Trajectory value, or a numeric expression. If this is a",
            "\t\tTrajectory value or function, the appropriate translation is applied",
            "\t\tto the image after the rotation is applied. If it is a valid numeric",
            "\t\texpression, the image isn't translated, but is displayed. Any other",
            "\t\tvalue is Invalid. }",
            "\tRotation, { Required. Either a Rotate function, a variable containing",
            "\t\ta Rotate value, or a numeric expression. If this is a Rotate value or",
            "\t\tfunction, the appropriate rotation is applied to the image before the",
            "\t\ttrajectory is applied. If it is a valid numeric expression, the image",
            "\t\tis rotated clockwise the number of degrees specified. Any other value",
            "\t\tis Invalid. }",
            "\tOpacity, { Required. Any Numeric expression, setting the opacity of",
            "\t\tthe object. A value of one results in a solid, zero is invisible and",
            "\t\tvalues between zero and one are used as an alpha setting for opacity.",
            "\t\t}",
            "\tReserved n/a, { Reserved for future use, set to 0. }",
            "\tButton, { Required. Any numeric expression giving the button",
            "\t\tcombination that activates this graphic. Value Locator Buttons 0 No",
            "\t\tbutton combination will activate this graphic 1 Right button 2 Middle",
            "\t\tbutton 3 Right and middle buttons 4 Left button 5 Left and right",
            "\t\tbuttons 6 Left and middle buttons 7 All three buttons If the above",
            "\t\tvalues are multiplied by 8, the meaning for multiple buttons pressed",
            "\t\tbecomes \"OR\" rather than \"AND.\" For example, to accept any button on a",
            "\t\t2 or 3 button mouse, use 56 (i.e. 8 * 7). To accept the left mouse",
            "\t\tbutton regardless of whether the right button is pressed, use 32 (i.e.",
            "\t\t8 * 4). If a 64 is added to this parameter, the function will become",
            "\t\ttrue when the mouse buttons are released rather than when they are",
            "\t\tpressed. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6 { 7 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GUIPipe": {
        "comments": [
            "{ Description: Draws a 3 dimensional, shaded pipe in a window and",
            "\treturns an indication when selected by a mouse button or the <ENTER>",
            "\tkey. }",
            "{ This function is a layered graphics statement. See \"Use Scaling to",
            "\tPosition GUI Objects\" for information about positioning a layered",
            "\tgraphic. The pipe will be drawn with a miter effect, such that pipe",
            "\tsegments meet at 45-degree angles. For best results, use a vertex mode",
            "\tof 4, which preserves right angles, as shown in the example. The Left",
            "\tand Right references are interchangeable. Whichever is smaller is",
            "\ttaken as the left and the larger of the two values will be used as the",
            "\tright. The same is true of the top and bottom references. Note that",
            "\tthe 1 st 42 pixels of a VTScada application will be obscured by the",
            "\ttitle bar, if present. }"
        ],
        "snippets": [
            "GUIPipe(",
            "\tLeftReference, { A constant number that gives the left side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tBottomReference, { A constant number that gives the bottom side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. The top and bottom references are measured down",
            "\t\tfrom the top of the screen. }",
            "\tRightReference, { A constant number that gives the right side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. }",
            "\tTopReference, { A constant number that gives the top side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tScaleLeft, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleBottom, { Required. Either a numeric expression, or any",
            "\t\texpression that returns a Normalize value. This parameter scales this",
            "\t\tside from its reference position with respect to the opposite side. If",
            "\t\tit is a numeric expression, a value of 1 will place the side at its",
            "\t\treference position. A value of 0 will place it at the opposite side",
            "\t\treference position. Similarly, a Normalize value will scale the side",
            "\t\tbetween the high and low limits. If the value is at the high level,",
            "\t\tthe side will be at its reference position. If the value is at the low",
            "\t\tlevel, the side will be at the opposite side reference position. }",
            "\tScaleRight, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleTop, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleWhole, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales the horizontal",
            "\t\tand vertical dimensions by the specified factor before the left,",
            "\t\tbottom, right and top coordinates are scaled. }",
            "\tTrajectory, { Required. Either a Trajectory function, a variable",
            "\t\tcontaining a Trajectory value, or a numeric expression. If this is a",
            "\t\tTrajectory value or function, the appropriate translation is applied",
            "\t\tto the image after the rotation is applied. If it is a valid numeric",
            "\t\texpression, the image isn't translated, but is displayed. Any other",
            "\t\tvalue is Invalid. }",
            "\tRotation, { Required. Either a Rotate function, a variable containing",
            "\t\ta Rotate value, or a numeric expression. If this is a Rotate value or",
            "\t\tfunction, the appropriate rotation is applied to the image before the",
            "\t\ttrajectory is applied. If it is a valid numeric expression, the image",
            "\t\tis rotated clockwise the number of degrees specified. Any other value",
            "\t\tis Invalid. }",
            "\tVisibility, { Required. Any logical expression. If true, the image is",
            "\t\tdrawn normally. If false, the image is not drawn. }",
            "\tReserved n/a, { Reserved for future use, set to 0. }",
            "\tButton, { Required. Any numeric expression giving the button",
            "\t\tcombination that activates this graphic. Value Locator Buttons 0 No",
            "\t\tbutton combination will activate this graphic 1 Right button 2 Middle",
            "\t\tbutton 3 Right and middle buttons 4 Left button 5 Left and right",
            "\t\tbuttons 6 Left and middle buttons 7 All three buttons If the above",
            "\t\tvalues are multiplied by 8, the meaning for multiple buttons pressed",
            "\t\tbecomes \"OR\" rather than \"AND.\" For example, to accept any button on a",
            "\t\t2 or 3 button mouse, use 56 (i.e. 8 * 7). To accept the left mouse",
            "\t\tbutton regardless of whether the right button is pressed, use 32 (i.e.",
            "\t\t8 * 4). If a 64 is added to this parameter, the function will become",
            "\t\ttrue when the mouse buttons are released rather than when they are",
            "\t\tpressed. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6 { 7 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GUIPolygon": {
        "comments": [
            "{ Description: Draws a multi-sided polygon in a window. Can return a",
            "\tBoolean TRUE when selected by a mouse button or when the <ENTER> key",
            "\tis pressed after focus has been acquired. }",
            "{ This function is a layered graphics statement. See \"Use Scaling to",
            "\tPosition GUI Objects\" for information about positioning a layered",
            "\tgraphic. The handle points on each vertex control the Bezier curve",
            "\tused to draw that segment of the polygon. The Left and Right",
            "\treferences are interchangeable. Whichever is smaller is taken as the",
            "\tleft and the larger of the two values will be used as the right. The",
            "\tsame is true of the top and bottom references. Note that the 1 st 42",
            "\tpixels of a VTScada application will be obscured by the title bar, if",
            "\tpresent. }"
        ],
        "snippets": [
            "GUIPolygon(",
            "\tLeftReference, { A constant number that gives the left side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tBottomReference, { A constant number that gives the bottom side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. The top and bottom references are measured down",
            "\t\tfrom the top of the screen. }",
            "\tRightReference, { A constant number that gives the right side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. }",
            "\tTopReference, { A constant number that gives the top side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tScaleLeft, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleBottom, { Required. Either a numeric expression, or any",
            "\t\texpression that returns a Normalize value. This parameter scales this",
            "\t\tside from its reference position with respect to the opposite side. If",
            "\t\tit is a numeric expression, a value of 1 will place the side at its",
            "\t\treference position. A value of 0 will place it at the opposite side",
            "\t\treference position. Similarly, a Normalize value will scale the side",
            "\t\tbetween the high and low limits. If the value is at the high level,",
            "\t\tthe side will be at its reference position. If the value is at the low",
            "\t\tlevel, the side will be at the opposite side reference position. }",
            "\tScaleRight, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleTop, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleWhole, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales the horizontal",
            "\t\tand vertical dimensions by the specified factor before the left,",
            "\t\tbottom, right and top coordinates are scaled. }",
            "\tTrajectory, { Required. Either a Trajectory function, a variable",
            "\t\tcontaining a Trajectory value, or a numeric expression. If this is a",
            "\t\tTrajectory value or function, the appropriate translation is applied",
            "\t\tto the image after the rotation is applied. If it is a valid numeric",
            "\t\texpression, the image isn't translated, but is displayed. Any other",
            "\t\tvalue is Invalid. }",
            "\tRotation, { Required. Either a Rotate function, a variable containing",
            "\t\ta Rotate value, or a numeric expression. If this is a Rotate value or",
            "\t\tfunction, the appropriate rotation is applied to the image before the",
            "\t\ttrajectory is applied. If it is a valid numeric expression, the image",
            "\t\tis rotated clockwise the number of degrees specified. Any other value",
            "\t\tis Invalid. }",
            "\tOpacity, { Required. Any Numeric expression, setting the opacity of",
            "\t\tthe object. A value of one results in a solid, zero is invisible and",
            "\t\tvalues between zero and one are used as an alpha setting for opacity.",
            "\t\t}",
            "\tReserved n/a, { Reserved for future use, set to 0. }",
            "\tButton, { Required. Any numeric expression giving the button",
            "\t\tcombination that activates this graphic. Value Locator Buttons 0 No",
            "\t\tbutton combination will activate this graphic 1 Right button 2 Middle",
            "\t\tbutton 3 Right and middle buttons 4 Left button 5 Left and right",
            "\t\tbuttons 6 Left and middle buttons 7 All three buttons If the above",
            "\t\tvalues are multiplied by 8, the meaning for multiple buttons pressed",
            "\t\tbecomes \"OR\" rather than \"AND.\" For example, to accept any button on a",
            "\t\t2 or 3 button mouse, use 56 (i.e. 8 * 7). To accept the left mouse",
            "\t\tbutton regardless of whether the right button is pressed, use 32 (i.e.",
            "\t\t8 * 4). If a 64 is added to this parameter, the function will become",
            "\t\ttrue when the mouse buttons are released rather than when they are",
            "\t\tpressed. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6 { 7 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GUIRectangle": {
        "comments": [
            "{ Description: Draws a rectangle in a window. Can return a Boolean",
            "\tTRUE when selected by a mouse button or when the <ENTER> key is",
            "\tpressed after focus has been acquired. }",
            "{ This function is a layered graphics statement. See \"Use Scaling to",
            "\tPosition GUI Objects\" for information about positioning a layered",
            "\tgraphic. The Left and Right references are interchangeable. Whichever",
            "\tis smaller is taken as the left and the larger of the two values will",
            "\tbe used as the right. The same is true of the top and bottom",
            "\treferences. Note that the 1 st 42 pixels of a VTScada application will",
            "\tbe obscured by the title bar, if present. }"
        ],
        "snippets": [
            "GUIRectangle(",
            "\tLeftReference, { A constant number that gives the left side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tBottomReference, { A constant number that gives the bottom side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. The top and bottom references are measured down",
            "\t\tfrom the top of the screen. }",
            "\tRightReference, { A constant number that gives the right side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. }",
            "\tTopReference, { A constant number that gives the top side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tScaleLeft, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleBottom, { Required. Either a numeric expression, or any",
            "\t\texpression that returns a Normalize value. This parameter scales this",
            "\t\tside from its reference position with respect to the opposite side. If",
            "\t\tit is a numeric expression, a value of 1 will place the side at its",
            "\t\treference position. A value of 0 will place it at the opposite side",
            "\t\treference position. Similarly, a Normalize value will scale the side",
            "\t\tbetween the high and low limits. If the value is at the high level,",
            "\t\tthe side will be at its reference position. If the value is at the low",
            "\t\tlevel, the side will be at the opposite side reference position. }",
            "\tScaleRight, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleTop, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleWhole, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales the horizontal",
            "\t\tand vertical dimensions by the specified factor before the left,",
            "\t\tbottom, right and top coordinates are scaled. }",
            "\tTrajectory, { Required. Either a Trajectory function, a variable",
            "\t\tcontaining a Trajectory value, or a numeric expression. If this is a",
            "\t\tTrajectory value or function, the appropriate translation is applied",
            "\t\tto the image after the rotation is applied. If it is a valid numeric",
            "\t\texpression, the image isn't translated, but is displayed. Any other",
            "\t\tvalue is Invalid. }",
            "\tRotation, { Required. Either a Rotate function, a variable containing",
            "\t\ta Rotate value, or a numeric expression. If this is a Rotate value or",
            "\t\tfunction, the appropriate rotation is applied to the image before the",
            "\t\ttrajectory is applied. If it is a valid numeric expression, the image",
            "\t\tis rotated clockwise the number of degrees specified. Any other value",
            "\t\tis Invalid. }",
            "\tOpacity, { Required. Any Numeric expression, setting the opacity of",
            "\t\tthe object. A value of one results in a solid, zero is invisible and",
            "\t\tvalues between zero and one are used as an alpha setting for opacity.",
            "\t\t}",
            "\tReserved n/a, { Reserved for future use, set to 0. }",
            "\tButton, { Required. Any numeric expression giving the button",
            "\t\tcombination that activates this graphic. Value Locator Buttons 0 No",
            "\t\tbutton combination will activate this graphic 1 Right button 2 Middle",
            "\t\tbutton 3 Right and middle buttons 4 Left button 5 Left and right",
            "\t\tbuttons 6 Left and middle buttons 7 All three buttons If the above",
            "\t\tvalues are multiplied by 8, the meaning for multiple buttons pressed",
            "\t\tbecomes \"OR\" rather than \"AND.\" For example, to accept any button on a",
            "\t\t2 or 3 button mouse, use 56 (i.e. 8 * 7). To accept the left mouse",
            "\t\tbutton regardless of whether the right button is pressed, use 32 (i.e.",
            "\t\t8 * 4). If a 64 is added to this parameter, the function will become",
            "\t\ttrue when the mouse buttons are released rather than when they are",
            "\t\tpressed. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6 { 7 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GUIText": {
        "comments": [
            "{ Description: Draws formatted text in a window. Can return a Boolean",
            "\tTRUE when selected by a mouse button or when the <ENTER> key is",
            "\tpressed after focus has been acquired. }",
            "{ This function is a layered graphics statement. See Use Scaling to",
            "\tPosition GUI Objects for information about positioning a layered",
            "\tgraphic. The Left and Right references are interchangeable. Whichever",
            "\tis smaller is taken as the left and the larger of the two values will",
            "\tbe used as the right. The same is true of the top and bottom",
            "\treferences. Note that the 1 st 42 pixels of a VTScada application will",
            "\tbe obscured by the title bar, if present. It produces formatted text",
            "\tin exactly the same manner as BuffWrite, FWrite, and SWrite. The text",
            "\tis displayed directly on the screen, centered in the reference box",
            "\tafter any animation is applied. Line breaks are not permitted. To",
            "\tdisplay text with line breaks, TextBox may be more suitable. Binary",
            "\tformats are not useful here and will produce strings with",
            "\tnon-printable characters. As of version 12.0, VTScada expects all",
            "\tstrings to be encoded using UTF-8. Will not display tab characters. }"
        ],
        "snippets": [
            "GUIText(",
            "\tLeftReference, { A constant number that gives the left side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tBottomReference, { A constant number that gives the bottom side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. The top and bottom references are measured down",
            "\t\tfrom the top of the screen. }",
            "\tRightReference, { A constant number that gives the right side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. }",
            "\tTopReference, { A constant number that gives the top side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tScaleLeft, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleBottom, { Required. Either a numeric expression, or any",
            "\t\texpression that returns a Normalize value. This parameter scales this",
            "\t\tside from its reference position with respect to the opposite side. If",
            "\t\tit is a numeric expression, a value of 1 will place the side at its",
            "\t\treference position. A value of 0 will place it at the opposite side",
            "\t\treference position. Similarly, a Normalize value will scale the side",
            "\t\tbetween the high and low limits. If the value is at the high level,",
            "\t\tthe side will be at its reference position. If the value is at the low",
            "\t\tlevel, the side will be at the opposite side reference position. }",
            "\tScaleRight, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleTop, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleWhole, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales the horizontal",
            "\t\tand vertical dimensions by the specified factor before the left,",
            "\t\tbottom, right and top coordinates are scaled. }",
            "\tTrajectory, { Required. Either a Trajectory function, a variable",
            "\t\tcontaining a Trajectory value, or a numeric expression. If this is a",
            "\t\tTrajectory value or function, the appropriate translation is applied",
            "\t\tto the image after the rotation is applied. If it is a valid numeric",
            "\t\texpression, the image isn't translated, but is displayed. Any other",
            "\t\tvalue is Invalid. }",
            "\tRotation, { Required. Either a Rotate function, a variable containing",
            "\t\ta Rotate value, or a numeric expression. If this is a Rotate value or",
            "\t\tfunction, the appropriate rotation is applied to the image before the",
            "\t\ttrajectory is applied. If it is a valid numeric expression, the image",
            "\t\tis rotated clockwise the number of degrees specified. Any other value",
            "\t\tis Invalid. }",
            "\tOpacity, { Required. Any Numeric expression, setting the opacity of",
            "\t\tthe object. A value of one results in a solid, zero is invisible and",
            "\t\tvalues between zero and one are used as an alpha setting for opacity.",
            "\t\t}",
            "\tOptions, { Required. Any numeric expression giving how a font behaves",
            "\t\twith regards to scaling, as follows: Options Font Behavior 0 The text",
            "\t\twill stay at its native font size, even though all the other graphics",
            "\t\taround it are being scaled with the page 1 The font size will scale",
            "\t\tproportionally to the vertical scaling of the page. If the text is",
            "\t\tdrawn by a widget, it will scale doubly, both with the containing",
            "\t\twidget and the containing page. 2 Typically used by a widget that",
            "\t\tdraws its own GUIText. By setting Options to 2, the text inside the",
            "\t\twidget will only scale in proportion to the topmost scaling, i.e. the",
            "\t\tpage's scaling, and will ignore any scaling of the intermediate",
            "\t\twidget(s). Text squeezing is on by default, reducing text by as much",
            "\t\tas 35% to fit within the available space. If you set bit 3 (add 0b1000",
            "\t\tto whatever value you are using in the Options parameter), then text",
            "\t\twill not scale down to fit within the available space. Text that does",
            "\t\tnot fit is clipped. }",
            "\t0, { 1 }",
            "\t2",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "GUITransform": {
        "comments": [
            "{ Description: Applies a graphical transformation to all graphics in a",
            "\tmodule and returns an indication when selected by a mouse button or",
            "\tthe <ENTER> key. }",
            "{ This function is a layered graphics statement. See \"Use Scaling to",
            "\tPosition GUI Objects\" for information about positioning a layered",
            "\tgraphic. The Left and Right references are interchangeable. Whichever",
            "\tis smaller is taken as the left and the larger of the two values will",
            "\tbe used as the right. The same is true of the top and bottom",
            "\treferences. Note that the 1 st 42 pixels of a VTScada application will",
            "\tbe obscured by the title bar, if present. This is typically used to",
            "\tdisplay a module which contains an active graphics symbol. The",
            "\ttransformation is applied by finding the minimum area box which",
            "\tcontains all reference box coordinates (the first 4) for all graphics",
            "\tactive in that module. A scaling is performed on all graphics in that",
            "\tmodule to make them appear in the reference box specified in the",
            "\ttransform. This is typically used to make a group of objects move and",
            "\tscale together. For example, a module (called PumpSymbol) could draw a",
            "\tsymbol (such as a pump). By applying a transform to this module, it",
            "\tcan be made to appear in a certain area of the screen. Any mouse",
            "\tfunctions contained by the transform will also be affected. For",
            "\texample, if the object is rotated 90 degrees XLoc will begin to behave",
            "\tlike YLoc. A draggable GUITransform has two renderings. The palette",
            "\trendering is what is displayed in the palette and is the image",
            "\tattached to the mouse at the start of dragging the transform onto a",
            "\tdrop-target window. When the mouse cursor is moved over a drop-target",
            "\twindow, the module called by the GUITransform is rendered at the",
            "\tnative size of the called module and displayed in its place. The",
            "\trendering is scaled according to the zoom factor of the drop-target",
            "\twindow. Moving off the drop target window again displays the palette",
            "\trendering. The relative mouse position within the graphic when the",
            "\tdrag operation is started is maintained throughout the operation.",
            "\tTherefore, when the image switches from the palette rendering to the",
            "\tcalled module rendering, the mouse position within the called module",
            "\trendering is over the same feature of the graphic as when the palette",
            "\trendering is used. }"
        ],
        "snippets": [
            "GUITransform(",
            "\tLeftReference, { A constant number that gives the left side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tBottomReference, { A constant number that gives the bottom side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. The top and bottom references are measured down",
            "\t\tfrom the top of the screen. }",
            "\tRightReference, { A constant number that gives the right side",
            "\t\treference coordinate. It must be a constant. A variable or expression",
            "\t\tis not valid here. }",
            "\tTopReference, { A constant number that gives the top side reference",
            "\t\tcoordinate. It must be a constant. A variable or expression is not",
            "\t\tvalid here. }",
            "\tScaleLeft, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleBottom, { Required. Either a numeric expression, or any",
            "\t\texpression that returns a Normalize value. This parameter scales this",
            "\t\tside from its reference position with respect to the opposite side. If",
            "\t\tit is a numeric expression, a value of 1 will place the side at its",
            "\t\treference position. A value of 0 will place it at the opposite side",
            "\t\treference position. Similarly, a Normalize value will scale the side",
            "\t\tbetween the high and low limits. If the value is at the high level,",
            "\t\tthe side will be at its reference position. If the value is at the low",
            "\t\tlevel, the side will be at the opposite side reference position. }",
            "\tScaleRight, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleTop, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales this side from",
            "\t\tits reference position with respect to the opposite side. If it is a",
            "\t\tnumeric expression, a value of 1 will place the side at its reference",
            "\t\tposition. A value of 0 will place it at the opposite side reference",
            "\t\tposition. Similarly, a Normalize value will scale the side between the",
            "\t\thigh and low limits. If the value is at the high level, the side will",
            "\t\tbe at its reference position. If the value is at the low level, the",
            "\t\tside will be at the opposite side reference position. }",
            "\tScaleWhole, { Required. Either a numeric expression, or any expression",
            "\t\tthat returns a Normalize value. This parameter scales the horizontal",
            "\t\tand vertical dimensions by the specified factor before the left,",
            "\t\tbottom, right and top coordinates are scaled. }",
            "\tTrajectory, { Required. Either a Trajectory function, a variable",
            "\t\tcontaining a Trajectory value, or a numeric expression. If this is a",
            "\t\tTrajectory value or function, the appropriate translation is applied",
            "\t\tto the image after the rotation is applied. If it is a valid numeric",
            "\t\texpression, the image isn't translated, but is displayed. Any other",
            "\t\tvalue is Invalid. }",
            "\tRotation, { Required. Either a Rotate function, a variable containing",
            "\t\ta Rotate value, or a numeric expression. If this is a Rotate value or",
            "\t\tfunction, the appropriate rotation is applied to the image before the",
            "\t\ttrajectory is applied. If it is a valid numeric expression, the image",
            "\t\tis rotated clockwise the number of degrees specified. Any other value",
            "\t\tis Invalid. }",
            "\tVisibility, { Required. Any logical expression. If true, the image is",
            "\t\tdrawn normally. If false, the image is not drawn. }",
            "\tOptions { Bit 1 (2^1) == Marks the transform as a GUIStretch.",
            "\t\tRendering of the transform is done by stretching the content. Bit 2",
            "\t\t(2^2) == Transform may be dragged onto a window from the palette. All",
            "\t\ttransforms in a palette that can be dragged must have both bits set. A",
            "\t\ttransform may be dragged even if its visibility flag is set to zero.",
            "\t\tNote that only Windows with bit 22 of the Style parameter set can",
            "\t\tfunction as a drop-target. Windows with bit 23 of the Style parameter",
            "\t\tset are palette windows. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "HasCompilationErrors": {
        "comments": [
            "{ Description: Reports if the working copy presently has unresolved",
            "\tcompilation errors }"
        ],
        "snippets": [
            "LayerRoot.HasCompilationErrors();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Hash": {
        "comments": [
            "{ Description: Generates a hash - a text string of bytes - of the",
            "\tgiven string. }",
            "{ The use of a seed string is functionally equivalent to the following",
            "\texample, but will execute slightly faster. X = Hash(Concat(\"XYZ\",",
            "\t\"ABCDE\"), 2); Does not support CNG (Cryptography New Generation). }"
        ],
        "snippets": [
            "Hash(",
            "\tPlainText, { Required. Any text string to create a hash from. }",
            "\tAlgID, { Specifies the algorithm to use when creating the hash. Valid",
            "\t\toptions are as follows: Defaults to 0 (SHA-1) if missing or invalid.",
            "\t\tAlgID Hash 0 SHA-1 (160 bit hash) 1 MD5 (128 bit hash) 2 SHA-2 (256",
            "\t\tbit hash) 3 SHA-2 (384 bit hash) 4 SHA-2 (512 bit hash) }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { Seed }",
            "\tHashHandle, { Optional. LValue. If Invalid, a hashing handle for the",
            "\t\tgiven AlgID is created and used for this and subsequent calls that",
            "\t\tsupply this handle. No output is generated until a call, with this",
            "\t\thandle, is made with an Invalid PlainText parameter, at which time the",
            "\t\thash built up using the handle is returned. At that time, the handle",
            "\t\tis destroyed and the LValue invalidated. For one-time hashing, the",
            "\t\thash value is returned from this function as a text string of bytes.",
            "\t\tFor progressive hashing the return value of this function is Invalid",
            "\t\tuntil a call with an Invalid PlainText parameter and a valid",
            "\t\tHashHandle is made. }",
            "\tCSP { Optional. The CSP to be used for hashing. This has the same type",
            "\t\tas used in ImportKey() and Encrypt(). Generated by a call to",
            "\t\tGetCryptoProvider. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "HasMetaData": {
        "comments": [
            "{ Description: Tests whether a given variable is a dictionary. Because",
            "\tthe default behavior of most operands and functions on dictionaries is",
            "\tto return just the value of the dictionaryâs root, this function",
            "\tprovides the only means to determine whether a variable contains a",
            "\tdictionary. }",
            "{ Returns TRUE if the object is a dictionary and FALSE otherwise.",
            "\tBecause the default behavior of most operands and functions on",
            "\tdictionaries is to return just the value of the dictionaryâs root,",
            "\tthis function provides the only means to determine whether a variable",
            "\tcontains a dictionary. }"
        ],
        "snippets": [
            "RVAL = HasMetaData(",
            "\tDictionary { Required. The name of any variable to test. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "HasReturnStatement": {
        "comments": [
            "{ Description: Examines a specified object to see if it is running a",
            "\treturn statement in steady-state. }",
            "{ This function examines a specified object to see if it is running a",
            "\treturn statement in steady-state. Returns 1 if such a statement is",
            "\trunning, 0 if no return statement is running in steady-state, or",
            "\tInvalid if the first parameter cannot be resolved to an object. }"
        ],
        "snippets": [
            "HasReturnStatement(",
            "\tObject { Required. Reference to the object of interest. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "HasUndeployedChanges": {
        "comments": [
            "{ Description: Finds whether the local machine is maintaining changes",
            "\tthat have not been deployed, including changes that have been recorded",
            "\tby EditFile but have yet to be committed. }"
        ],
        "snippets": [
            "LayerRoot.HasUndeployedChanges();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Help": {
        "comments": [
            "{ Description: Calls a topic in a help system. }",
            "{ If calling a help system compiled using the DocToHelp NetHelp",
            "\tsystem, use the string, \"MyHelpfolder\\NetHelp\". If calling your own",
            "\thelp system compiled using the Flare HTML5 system, use the string",
            "\t\"MyHelpFolder\\MadCapWebHelp\". DocToHelp and Flare are products of",
            "\tMadcap Software Ltd. and are recognized by VTScada. The .HLP format is",
            "\tobsolete and will not open in modern versions of Windows. }"
        ],
        "snippets": [
            "Help(",
            "\tFileName, { Required. Any text expression for the name of the help",
            "\t\tsystem to display. May be the name of a .CHM file. To call a topic in",
            "\t\tthe VTScada help system, use the system property, \\DevHelpFile. Refer",
            "\t\tto the comments section for more options. }",
            "\tOption, { Required. Any numeric expression controlling how the topic",
            "\t\twill be located within the help system, as indicated by the following",
            "\t\ttable. Not all options work with all help system formats. Calls to",
            "\t\ttopics using context sensitive help ID values should use option 3.",
            "\t\tOption Display Option SearchValue 0 Help contents 0 1 Key Key string 2",
            "\t\tPartial key Partial key string 3 ID ID number 4 Help Topics 0 }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "HexToBuff": {
        "comments": [
            "{ Description: Converts a hex string to a binary buffer. }",
            "{ Given an invalid parameter value, the function will return Invalid.",
            "\t}"
        ],
        "snippets": [
            "System.HexToBuff(",
            "\tHexValue { Required. Any string representing a hexadecimal value. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "HighlightModule": {
        "comments": [
            "{ Description: Highlighted a module in a module tree. }",
            "{ none }"
        ],
        "snippets": [
            "HighlightModule(",
            "\tModuleTree, { Required. Any expression for the module tree value. }",
            "\tModule, { Required. Any expression for the code value of the module. }",
            "\tMode { Required. Any numeric expression that indicates how to",
            "\t\thighlight Mode Highlight 0 Turn on highlighting 1 Turn off",
            "\t\thighlighting 2 Toggle highlighting }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "HistorianConnect": {
        "comments": [
            "{ Description: Opens a logging connection and controls the lifetime of",
            "\tall resources associated with that connection. }",
            "{ The connection to the data store is done asynchronously.",
            "\tHistorianHandle will become valid when the connection has been made.",
            "\tIf the connection fails Error will be set to some sort of error",
            "\tinformation. Each separate connection will create its own thread for",
            "\twriting data. Invalidating the connection handle will flush all",
            "\tpending write data and then terminate the thread, DB connections etc.",
            "\tThe Namespace parameter may be used to allow the same root storage",
            "\tlocation to be shared by multiple applications or machines or both.",
            "\tThe UptimeTagName parameter ensures that the uptime can be obtained",
            "\tregardless of whether StorageName parameters vary from one server to",
            "\tanother for the same Historian. Without this parameter, and with a",
            "\ttypical Historian tag configuration, the HistorianName is derived from",
            "\tthe Historian tag's \"Storage Name\" parameter. If this varies by",
            "\tmachine (for example where a parameter expression is used to derive a",
            "\tdifferent values across workstations), it can lead to an incomplete",
            "\tview of the overall VTScada uptime and in turn lead to inconsistent",
            "\tinvalidation of data returned from the historian depending on the",
            "\tworkstation performing the query. }"
        ],
        "snippets": [
            "HistorianConnect(",
            "\tConnectionType, { A text keyword that indicates the storage",
            "\t\tmethodology required. Permitted values are FileDB for storage on a",
            "\t\tlocal or networked hard drive, using the VTScada proprietary database",
            "\t\tformat. ODBC for storage using a local or networked DBMS, accessed via",
            "\t\tODBC drivers. The keywords are not case-sensitive. }",
            "\tConnectionString, { A text string that provides the information",
            "\t\trequired to connect to the database specified by the ConnectionType.",
            "\t\t(Non-ASCII characters will be removed.) ConnectionType",
            "\t\tConnectionString FileDB The root path to the storage folder. If a",
            "\t\trelative path is provided, then it is relative to the VTScada",
            "\t\tinstallation directory ODBC Any valid ODBC connection string. This may",
            "\t\tbegin with DSN= to specify a data source name, or it may be a complete",
            "\t\tconnection string. }",
            "\tFileDB { ODBC }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "HistorianDeleteRecords": {
        "comments": [
            "{ Description: Conditionally deletes full sequences of records from",
            "\tthe data store identified by the ConnectionHandle }",
            "{ This function will delete as many entire sequences from storage for",
            "\ta tag as it can so that at least NumRecordsToKeep records are kept,",
            "\tand only sequences with a lower group value than MinGroupValue are",
            "\tdeleted. While considered to be threaded, this function has no",
            "\tlifetime after it passes the records to another thread for deletion. }"
        ],
        "snippets": [
            "HistorianDeleteRecords(",
            "\tConnectionHandle, { As returned by an HistorianConnect call. }",
            "\tTagName, { A text string identifying the tag whose records are to be",
            "\t\tdeleted. }",
            "\tSchema, { This is a textual representation of a schema structure. }",
            "\tMinGroupValue, { All sequences with a Group Value (the last 4 bytes of",
            "\t\tthe 12-byte SequenceID) less than this value will be deleted, provided",
            "\t\tthat the NumRecordsToKeep condition is also met. }",
            "\tNumRecordsToKeep { A numeric expression, specifying a minimum number",
            "\t\tof records that are to be kept for the tag. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "HistorianGetData": {
        "comments": [
            "{ Description: Queries an Historian data store and returns an array of",
            "\tprocessed records. For most uses, GetTagHistory is recommended in",
            "\tplace of HistorianGetData. }"
        ],
        "snippets": [
            "HistorianGetData(",
            "\tConnectionHandle, { As returned by an HistorianConnect call. }",
            "\tTagName, { A text string representing the desired table name. Engine",
            "\t\tcode may modify this to conform with storage limitations. }",
            "\tSchema, { A text expression describing the schema from which to",
            "\t\tretrieve data. }",
            "\tData, { A variable in which the data will be returned. This will be a",
            "\t\ttwo-dimensional array representing the returned data, indexed by",
            "\t\t[col][row]. If TPP is non-zero, the number of rows in the result set",
            "\t\twill equal the value of the NumEntries parameter. If TPP is zero there",
            "\t\tcould be fewer rows than specified by NumEntries }",
            "\tFieldNames, { Names of the fields. Typically \"Value\" for most tag",
            "\t\tvalues, or \"Value!\" for tag attribute data. (Value! was introduced",
            "\t\twith VTScada version 12 and is not available in legacy data. It cannot",
            "\t\tbe retrieved by SQL queries.) }",
            "\tTPP, { Required. Any numeric expression giving the time span in",
            "\t\tseconds for each array entry. Each array element will contain the data",
            "\t\twhich correspond exactly to this time period which corresponds to 0 or",
            "\t\tmore data points. If TPP is positive and FieldNames selects a text",
            "\t\tvalue, the first entry which falls in a time is read and Mode is",
            "\t\tignored. If TPP is equal to 0, the data is read and placed in the",
            "\t\tarray on a one to one basis. If TPP is less than 0, an error will be",
            "\t\treturned. }",
            "\tStartTime, { Timestamp in UTC. The report will include values matching",
            "\t\tand later than this time. }",
            "\tEndTime, { Ending timestamp. Ignored if TPP is non-zero. The report",
            "\t\twill include values less than and matching this value. }",
            "\tNumEntries, { Number of log entries in the array (numEntriesRequested",
            "\t\t- determined by Size or TPP parameters of Getlog) Use a negative value",
            "\t\tto retrieve values in reverse chronological order. }",
            "\tModes, { Optional numeric expression giving the method of handling the",
            "\t\tdata. If TPP is greater than 0, the values that fall in each time span",
            "\t\twill be represented as follows: Mode Data Collection 0 Time-weighted",
            "\t\taverage 1 Minimum in range 2 Maximum in range 3 Change in value over",
            "\t\tthe range 4 Value at start of range 5 TimeOfMinInRange 6",
            "\t\tTimeOfMaxInRange 7 SumOfZtoNZTransitions 8 SumOfNonZeroTime 9",
            "\t\tTotalizer. (Invalid is counted as zero) 10 Deprecated. Equivalent to",
            "\t\tmode 4. 11 Difference between the start and end values of a range (see",
            "\t\tfollowing note) 12 Bitwise OR (see following note) 13 Bitwise AND (see",
            "\t\tfollowing note) 14 Value at end of range Mode 11: This is for hardware",
            "\t\tthat can count to a limited number, then rolls over to start a fresh",
            "\t\tcount. For example, a tag that counts equipment starts, but which can",
            "\t\tonly count from 0 to 15 before wrapping around to start again. This",
            "\t\tgives a value of sixteen per roll-over since there must be one more",
            "\t\tstart after fifteen to have the roll-over occur. A graph of a very",
            "\t\tsimple case where there is a start every second would look like the",
            "\t\tfollowing: (Each rollover must be followed by a fresh start, not a",
            "\t\tgradually declining value. If there are a series of declining values",
            "\t\tthen, because each is less than the previous, each counts as another",
            "\t\trollover.) The formula used is (RolloverCount * RolloverValue) +",
            "\t\t(LastValidValue - FirstValidValue). Where, for any given time",
            "\t\tinterval: Rollovers are counted when a new value is smaller than the",
            "\t\tlast valid value. The RolloverValue is passed to the function in the",
            "\t\tparameter StaleTime. LastValidValue starts with the last valid value",
            "\t\tin the previous time interval (if any), and is updated with each new",
            "\t\tvalid value within the time interval. FirstValidValue starts with the",
            "\t\tlast valid value in the previous time interval (if any), and is",
            "\t\tupdated with only the first valid value found in the current time",
            "\t\tspan. Given this example, suppose that you want a count of starts in",
            "\t\teach thirty-second interval. In the first interval there is no",
            "\t\tprevious valid value, one wrap-around and a last valid value of 12.",
            "\t\t(1*16) + (12 - 0) = 28. This is an idealized case. Consider a more",
            "\t\trealistic case where not all values are logged. (This may be due to",
            "\t\tfactors such as polling intervals, deadbands, hardware, etc.) The",
            "\t\tfollowing graph shows the same data where the orange dots represent",
            "\t\tvalues obtained and logged and the gray line represents what really",
            "\t\thappened: In the first 30 seconds there is one roll-over when the",
            "\t\tvalue drops from 13 to 2. The first value is 0 and the last is 11. The",
            "\t\tHistorian will return 27: (1*16) + (11-0) = 27. The Historian will",
            "\t\treturn 30 for the period from 30 to 60. The first valid value (carried",
            "\t\tfrom the previous period) is 11. The last valid value is 9 and there",
            "\t\tare two roll-overs. (2*16) + (9-11) = 30. Modes 12 and 13: These are",
            "\t\tintended to provide a summary of the bit-wise Historian value",
            "\t\tattributes within a query. (Value attributes were added in VTScada",
            "\t\tversion 11.5 / 12.0) With mode 12, the first value is OR'd with zero,",
            "\t\tand each successive value in the time period is OR'd with result of",
            "\t\tthe last comparison. From the result you will know whether any",
            "\t\tparticular attribute bit was set on any values within the period. With",
            "\t\tmode 13, the first value is AND'd with a value having all bits set to",
            "\t\t1 and each successive value is AND'd with the result of the last",
            "\t\tcomparison. From the result you will know whether any particular",
            "\t\tattribute bit was set on all values within the period. In the case of",
            "\t\tmodes 5 and 6, FieldName should still be set to indicate the field on",
            "\t\twhich the mode is to act. The return values will be times indicating",
            "\t\tthe maximum or minimum in that field for each time span. If TPP is",
            "\t\tless than or equal to 0, Mode is ignored. If the data is text, the",
            "\t\tfirst entry in a given time range is used for the array entry and Mode",
            "\t\tis ignored. It is possible to retrieve more than one mode in a single",
            "\t\tGetTagHistory statement. To do this, pass an array of values in as the",
            "\t\tMode parameter. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10, { 11 }",
            "\t12, { 13 }",
            "\t14",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "HistorianGetInfo": {
        "comments": [
            "{ Description: Retrieves information about a specified Historian or",
            "\tall Historians. }"
        ],
        "snippets": [
            "HistorianGetInfo(",
            "\tConnectionHandle, { As returned by an HistorianConnect call. }",
            "\tInfoType, { A numeric expression specifying the type of information to",
            "\t\tbe returned, as follows: InfoType Information requested 0 Counters. A",
            "\t\tdictionary of dictionaries of dictionaries containing full counter",
            "\t\tinformation for all sequences stored by this Historian. 1 Errors. A",
            "\t\tdictionary of write or deletion errors that occurred in this Historian",
            "\t\tsince the last time GetInfo(Historian, 1) was called. 2 Overall write",
            "\t\tqueue count. The number of records in the write queue for all",
            "\t\tHistorians (ConnectionHandle parameter is ignored). 3 Overall records",
            "\t\tstored. A rollover count of the records stored by all Historians",
            "\t\t(ConnectionHandle parameter is ignored). This counter rolls over",
            "\t\t(2^32) and therefore is only useful for performance diagnostics. It is",
            "\t\tnot a count of all records in storage. 4 Write queue count. The number",
            "\t\tof records in the write queue for this Historian. 5 Records stored. A",
            "\t\trollover count of the records stored by this Historian. This counter",
            "\t\trolls over and therefore is only useful for performance diagnostics.",
            "\t\tIt is not a count of all records in storage. 6 Overall write queue",
            "\t\tsize. The approximate memory size of the write queue for all",
            "\t\tHistorians (ConnectionHandle parameter is ignored). }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "HistorianReadRecords": {
        "comments": [
            "{ Description: Reads a range of records from the data store. The range",
            "\tis specified by the Start and End counter values supplied. }",
            "{ Data will be set on completion of the operation. ErrorCode will be",
            "\tset on completion of the operation. This will be set to zero if the",
            "\toperation was successful Together, the Schema and the MID-S parameters",
            "\tdefine the subset of records in the Index file from which the data in",
            "\tthe required Counter range will be retrieved. If this filtered subset",
            "\thas no data, then none will be returned. }"
        ],
        "snippets": [
            "HistorianReadRecords(",
            "\tConnectionHandle, { As returned by an HistorianConnect call. }",
            "\tTagName, { A text string representing the desired table name. Engine",
            "\t\tcode may modify this to conform with storage limitations. }",
            "\tSchema, { This is a textual representation of a schema structure. }",
            "\tData, { A variable in which the values will be returned. This will be",
            "\t\ta single dimension array representing the Fields (columns). The",
            "\t\tentries in the array will be an array of values (all fields will be",
            "\t\tthe same) and the size of one of these arrays gives the number of",
            "\t\trecords (rows) in the result set. }",
            "\tMid-S, { A 64 bit binary token. }",
            "\tStartCounter, { Starting counter number. Starts counting at 1 rather",
            "\t\tthan zero. }",
            "\tEndCounter, { Ending counter number. Starts counting at 1 rather than",
            "\t\tzero. }",
            "\tErrorCode { FileDB or SQL DB error code returned. Defined error codes",
            "\t\tare provided in the reference chapter. See: Historian Error Codes }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "HistorianWriteRecords": {
        "comments": [
            "{ Description: Writes records to the data store identified by the",
            "\tConnectionHandle }",
            "{ Data is always appended to the data store, and records are not",
            "\tdeleted or replaced unless HistorianDeleteRecords is called",
            "\texplicitly. The function returns the counter value for the last record",
            "\tbeing written. Note: At the point that the function returns, the data",
            "\thas not yet been written. Because the Counter is the actual record",
            "\tnumber (FileDB) or an index (SQL) the counter value returned here will",
            "\tbe a calculated value, based on the number of records that are",
            "\tpending. As well as defining the column format, the Schema defines the",
            "\tsubset of tables to which the supplied data will be written. While",
            "\tconsidered to be threaded, this function has no lifetime after it",
            "\tpasses the records to another thread for writing. Each record will be",
            "\trepresented by a Counter value which is one greater than the previous",
            "\tCounter value, unless either Schema or MID-S have changed from the",
            "\tprevious write. In this case, a new table/file set is started. The",
            "\tcounter value for a new table always starts from 1. }"
        ],
        "snippets": [
            "HistorianWriteRecords(",
            "\tConnectionHandle, { As returned by an HistorianConnect call. }",
            "\tTagName, { A text string representing the desired table name. Engine",
            "\t\tcode may modify this to conform with storage limitations. }",
            "\tSchema, { This is a textual representation of a schema structure. }",
            "\tRecords, { Array of data. This is a single dimension array",
            "\t\trepresenting the Fields (columns) to be written. Each entry in this",
            "\t\tarray may be either a single data value or an array of values. If any",
            "\t\tentry is an array, then the size of the largest array gives the number",
            "\t\tof records (rows) to be written. If any individual field is",
            "\t\tunderspecified, then a representation of INVALID is written for the",
            "\t\tmissing values. }",
            "\tSequenceID { A 12-byte, binary token. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "HoursEntry": {
        "comments": [],
        "snippets": [],
        "is_steady_state": false,
        "is_script": false
    },
    "HScrollbar": {
        "comments": [
            "{ Description: Draws a horizontal scrollbar and returns its position.",
            "\t}",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ Steps and Pages: Refer to the explanation in",
            "\tVScrollbar , substituting columns for rows. Custom script graphics",
            "\tusing the HScrollbar module directly must pass in a window object to",
            "\tserve as source for the mouse wheel messages. Typically this would be",
            "\tthe window that the VScrollbar module is controlling. Note that the",
            "\tHScrollbar module itself uses a native windows scrollbar, which will",
            "\ttherefore work automaticallywithout any script changes, so long as the",
            "\tmouse pointer is over the actual scrollbar. }"
        ],
        "snippets": [
            "System.HScrollBar(",
            "\tLeft, { Required. Any numeric expression for the left side coordinate",
            "\t\tof the scrollbar. }",
            "\tTop, { Required. Any numeric expression for the top coordinate of the",
            "\t\tscrollbar. }",
            "\tWidth, { Required. Any numeric expression for the width of the",
            "\t\tscrollbar in pixels. }",
            "\tSteps, { Any numeric expression giving the number of steps in the",
            "\t\tscrollbar. }",
            "\tPageLen, { Required. Any numeric expression giving the number of steps",
            "\t\tto jump per page. }",
            "\tPosition, { Optional numeric. This variable may be used to monitor or",
            "\t\tset the current scroll position. }",
            "\tStepSize, { Optional. Any numeric expression giving the number of",
            "\t\tlines to scroll through when the user clicks on an arrow. Defaults to",
            "\t\t1 if not specified. }",
            "\tWindowObj { Used by the Anywhere client. Enables redirection to the",
            "\t\tHScrollbar of horizontal panning over a given region. Required because",
            "\t\ton many touchscreens you cannot interact directly with the scrollbar",
            "\t\ttherefore this object is needed to make it possible to scroll",
            "\t\tHScrollbar on those platforms. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "HTTPSend": {
        "comments": [
            "{ Description: Sends HTTP requests to an HTTP server }",
            "{ Note that HTTPSend is part of the HTTPClient library, which is part",
            "\tof the System library, and therefore must be used in the form,",
            "\tSystem.HTTPClient.HTTPSend(... The response structure contains the",
            "\tfollowing fields: ReturnCode The response code. See following notes.",
            "\tBody The response body Headers A dictionary of response headers",
            "\tErrorText Supplementary error text beyond ReturnCode The ReturnCode",
            "\twill either be a standard HTTP status code, such as 200 for success,",
            "\tor one of the following: -1: Connection timed out -2: Response timed",
            "\tout -3: Invalid (non-HTTP) response -4: Incomplete response -5:",
            "\tUnsupported transfer-encoding -6: Missing parameters Related",
            "\tproperties in Setup.INI: HTTPClientKeepAliveTime The length of time to",
            "\tmaintain an inactive HTTP connection marked as \"keepalive\". Default is",
            "\t15 seconds. HTTPMaxDeflatedDataSize An integer that specifies the max",
            "\tsize of a payload to decompress. If the payload is bigger than this",
            "\tsize it will be truncated. Defaults to 65536 bytes. There is risk when",
            "\tchanging this setting: If it is too large, and a bad payload is",
            "\treceived, it could cause VTScada to allocate a buffer of the max size.",
            "\tMost users should not need to change this property. MaxSendRate The",
            "\tmaximum number of requests to send per second to the host. It defaults",
            "\tto an unlimited rate. This is necessary for situations where a host",
            "\tmay reject a client if it has received more than X requests per second",
            "\tfrom that client. By setting MaxSendRate, HTTPClient throttles the",
            "\trate at which it sends messages. }"
        ],
        "snippets": [
            "System.HTTPClient.HTTPSend(",
            "\tURL, { Full URL }",
            "\tpResponse, { [OUT] Pointer set to a response structure when request",
            "\t\tcompletes }",
            "\tUsername, { Optional text. Self explanatory. }",
            "\tPassword, { Optional text. Self explanatory. The HTTP client supports",
            "\t\tboth HTTP basic and digest authentication schemes }",
            "\tExtraHeaders, { Dictionary of extra HTTP headers where the dictionary",
            "\t\tkey is used as the header name and its value as the header value }",
            "\tMethod, { Typically \"POST\" or \"GET\"; default GET }",
            "\tMessageBody, { The \"payload\" of the HTTP message }",
            "\tContentType, { Meaningful only if MessageBody is valid; default",
            "\t\t\"text/xml; charset=\"UTF-8\"\" }",
            "\tTimeLimit, { Time in seconds to wait for response; default 60 }",
            "\tNConcurrent, { Number of concurrent keep-alive connections to maintain",
            "\t\tper server-port; default 1 }",
            "\tKeepAlive, { TRUE to keep the connection alive; default TRUE }",
            "\tMessageOnly, { TRUE to just send the message body; default FALSE }",
            "\tMaxSendRate { Optional numeric. the maximum number of requests to send",
            "\t\tper second to the host. Defaults to an unlimited rate if not",
            "\t\tspecified. (See comments) }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "IconMarker": {
        "comments": [
            "{ Description: Creates the question mark and exclamation mark",
            "\tgraphics, used to indicate questionable and manual data in a widget.",
            "\tThis module places a set of icons on the screen centered over a given",
            "\trectangular region. The icon displayed is cycled with each passage of",
            "\tthe period, measured in seconds }"
        ],
        "snippets": [
            "\\IconMarker(",
            "\tLeft, Bottom, Right and Top, { Are numeric expressions providing the",
            "\t\tbounds of the graphic to mark. The symbol will appear in the center of",
            "\t\tthis area. }",
            "\tPeriod, { A numeric expression setting the period (in seconds) at",
            "\t\twhich the symbol is changed }",
            "\tMode, { A numeric expression indicating the symbol to display",
            "\t\taccording to the following table Mode Symbol 0 Inhibit symbol display",
            "\t\t1 Questionable Data symbol 2 Manual Data symbol 3 Questionable and",
            "\t\tManual symbols 4 Error symbol 5+ User supplied symbols }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4 { 5+ }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "If": {
        "comments": [
            "{ Description: Trigger to perform an action. It changes the active",
            "\tstate in a module instance or executes a script or both. }"
        ],
        "snippets": [
            "If Trigger Destination; { Optional change to state, Destination }\r\n[\r\n  { Optional script  code }\r\n](",
            "\tTrigger, { Required. Any logical expression. If false, nothing",
            "\t\thappens. If true, the action is performed, and any functions in the",
            "\t\tTrigger expression that may be reset are automatically reset. }",
            "\tDestination { Optional. Destination is not an expression, it is the",
            "\t\ttext name of a state. If provided, it must be a legal name of a state",
            "\t\tin the module where this action is defined. It is not possible to",
            "\t\tchange to a state in another module. Each object must have one (and",
            "\t\tonly one) active state, unless the module has no states defined. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "IfElse": {
        "comments": [
            "{ Description: Executes one of two expressions depending upon the",
            "\tresult of a conditional expression. }",
            "{ Refer to the Style Guide for VTScada Code for guidance on when to",
            "\tuse IfElse versus the in-line Ternary Operator (IfElse) , versus Cond",
            "\t. }"
        ],
        "snippets": [
            "IfElse(",
            "\tCondition, { Required. An expression that returns TRUE or FALSE. If",
            "\t\tTRUE, the TRUECase is executed. If FALSE, the FALSECase is executed.",
            "\t\tIf Invalid, neither case is executed. }",
            "\tTRUECase, { Required. The expression (sometimes an Execute statement)",
            "\t\tthat is executed when Condition is TRUE. }",
            "\tFALSECase { Required. The expression (sometimes an Execute statement)",
            "\t\tthat is executed when the Condition is FALSE. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IfOne": {
        "comments": [
            "{ Description: Check for an If One Condition. This function checks for",
            "\tan infinite loop in an action script and returns the value of the",
            "\tlocation. }",
            "{ Check for an If 1 (If TRUE) Condition. This function is used for",
            "\tdebugging VTScada applications and returns the module, state and",
            "\tstatement value of the If statement that did not switch states, and",
            "\tthe predicate condition remain TRUE after the associated script block",
            "\texecuted, resulting in the script block executing again repeatedly.",
            "\tSymptoms of an If 1 condition are high CPU and slow responsiveness. }"
        ],
        "snippets": [
            "IfOne();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "IfThen": {
        "comments": [
            "{ Description: Conditionally execute statements. This statement",
            "\texecutes all provided statements or expressions if the condition",
            "\tparameter is true. }",
            "{ This statement may only appear in a script. }"
        ],
        "snippets": [
            "IfThen(",
            "\tCondition, { Required. An expression that will indicate whether the",
            "\t\tExpression parameters are executed. If this is true, the Expression",
            "\t\tparameters will be executed. }",
            "\tExpression1, Expression2, ... { Required. Any statements to be",
            "\t\texecuted when Condition is true. Any number of Expression parameters",
            "\t\tmay be listed. They are executed once in the order that they are",
            "\t\tlisted. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ImageArray": {
        "comments": [
            "{ Description: Reads an existing image handle and returns another one",
            "\tcontaining an image created from that handle by tiling the image a",
            "\tgiven number of times. }",
            "{ More commonly used in script than in steady-state. The cropping",
            "\tparameters work in contrast to the Clip function, which applies a",
            "\tclipping region to the image before tiling occurs. A regular image",
            "\tarray will allow for gaps between the tiles and some transformations",
            "\tof the original image. The algorithm for this is less than optimal if",
            "\tone wants an unspaced grid of images, such as in a wallpaper bitmap.",
            "\tFor the latter case, set the Tessellate parameter to true. }"
        ],
        "snippets": [
            "ImageArray(",
            "\tHandle, { Required. The image handle to copy and modify. }",
            "\tHorizontalSpacing, { Required. Any numeric expression for the",
            "\t\thorizontal space between each tile. }",
            "\tVerticalSpacing, { Required. Any numeric expression for the vertical",
            "\t\tspace between each tile. }",
            "\tRowCount, { Required. Any numeric expression for the number of tiles",
            "\t\trunning vertically. }",
            "\tColCount, { Required. Any numeric expression for the number of tiles",
            "\t\trunning horizontally. }",
            "\tOrientation, { Optional numeric value between 0 and 15, specifying the",
            "\t\torientation of the tiles. Defaults to zero. Orientation Value Meaning",
            "\t\tOrientation Value Meaning 0 No rotation, no flipping 8 No rotation,",
            "\t\tflip vertically 1 90-degree CW rotation without flipping 9 90-degree",
            "\t\tCW rotation and flip vertically 2 180-degree CW rotation without",
            "\t\tflipping 10 180-degree CW rotation and flip vertically 3 270-degree CW",
            "\t\trotation without flipping 11 270-degree CWrotation and flip vertically",
            "\t\t4 No rotation, flip horizontally. 12 No rotation, flip horizontally,",
            "\t\tthen vertically 5 90-degree CW rotation and flip horizontally 13",
            "\t\t90-degree CW rotation, flip horizontally, then vertically 6 180-degree",
            "\t\tCW rotation and flip horizontally 14 180-degree CW rotation, flip",
            "\t\thorizontally, then vertically 7 270-degree CWrotation and flip",
            "\t\thorizontally 15 270-degree CW rotation, flip horizontally, then",
            "\t\tvertically }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\tCropLeft, { Optional. Left coordinate of the cropping region. This and",
            "\t\tthe following three parameters must all be specified if any are",
            "\t\tspecified. Together, they apply a clipping rectangle that will be",
            "\t\tapplied to the tiled image after tiling occurs. }",
            "\tCropTop, { Optional. Top coordinate of the cropping region. }",
            "\tCropWidth, { Optional. Width of the cropping region. }",
            "\tCropHeight, { Optional. Height of the cropping region. }",
            "\tTessellate { Optional Boolean. Defaults to FALSE (0). Optimizes",
            "\t\tdrawing for a simple grid of images, but causes ImageArray to ignore",
            "\t\tspacing and transformation of the images. Does not improve the",
            "\t\tappearance of the result, but uses significantly less memory and may",
            "\t\tbe marginally faster. The result may be clipped and stretched. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ImageParmSet": {
        "comments": [
            "{ Description: Returns a structure of image attributes that can be",
            "\tpassed to an image-based widget. }",
            "{ ... }"
        ],
        "snippets": [
            "\\ImageParmSet(",
            "\tFilename, { Required. The relative path and file name of the image }",
            "\tColorMultiplier, { Optional color value in the form aRGB A colour",
            "\t\tvalue, defined as four, two-digit hexadecimal values. Alpha - Red -",
            "\t\tGreen - Blue. An Alpha value of FFis assumed if only the RGB values",
            "\t\tare provided. , used to apply a specific color to a gray-scale image.",
            "\t\t}",
            "\tMirror, { Optional Boolean. A logical value that can be set to 1 to",
            "\t\treflect the image about the vertical axis. The default is no",
            "\t\treflection (0). }",
            "\tAntiAlias, { Optional numeric. This is a bit-wise parameter where Bit",
            "\t\t0 controls whether anti-aliasing will be done when the image is",
            "\t\tstretched. Defaults to 1 (TRUE) if missing or invalid. By default,",
            "\t\tfeathering will be applied to an anti-aliased image when it is",
            "\t\tstretched. Set bit 1 to 1 (TRUE) to suppress feathering. }",
            "\tRotateAngle, { Optional floating point value, specifying the clockwise",
            "\t\trotation in degrees to be applied when the image is drawn. }",
            "\tOpacity, { Optional numeric expression for a multiplier to the",
            "\t\ttransparency (alpha value) of every color in the image. Range 0",
            "\t\t(transparent) to 1 (opaque). Defaults to 1 if missing or invalid. }",
            "\tLightness, { Optional numeric expression that is a multiplier to the",
            "\t\tbrightness of the image. Range 0+. Defaults to 1 if missing or",
            "\t\tinvalid. }",
            "\tContrast, { Optional numeric expression to enhance the differences",
            "\t\tbetween the colors in the image. Range 0+. Defaults to 1 if missing or",
            "\t\tinvalid. }",
            "\tHue, { Optional numeric expression for the hue rotation to apply to",
            "\t\tall of the colors in the image. Range -180 to 180. The default is no",
            "\t\thue rotation, (0). }",
            "\tSaturation, { Optional numeric expression that is a multiplier to the",
            "\t\tintensity of each primary color component of every color in the image.",
            "\t\tRange: 0+. Defaults to 1 if missing or invalid. }",
            "\tColorizeIntensity, { Optional numeric expression for the intensity of",
            "\t\tthe added color. Zero means that no color is added. Range 0-255.",
            "\t\tDefaults to 0 if missing or invalid. }",
            "\tColorizeHue { Optional numeric expression for the hue value of a color",
            "\t\tto be mixed with every color in the image. Range -180 to 180. Defaults",
            "\t\tto 0 if missing or invalid. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ImageSweep": {
        "comments": [
            "{ Description: Reads an existing image handle and returns another one",
            "\tcontaining an image created from that handle by tiling the image a",
            "\tgiven number of times along an arc-shaped path. }",
            "{ The result is a radial array of tiles. Drawing angles intersect the",
            "\tcenter of the tiles. The path is based upon the size and shape of an",
            "\tellipse traced out using the bounding box of the drawing transform.",
            "\tScaling is based upon a comparison of the described radius and the",
            "\tfinal size of the transform on the screen. In the case of an ellipse",
            "\tthe radius is assumed to be the smallest elliptical radius. Returns",
            "\tInvalid upon failure The cropping parameters work in contrast to the",
            "\tClip function, which applies a clipping region to the image before",
            "\ttiling occurs. }"
        ],
        "snippets": [
            "ImageSweep(",
            "\tHandle, { Required. The image handle to copy and modify. }",
            "\tCount, { Required. Any numeric expression for the number of tiles to",
            "\t\tdraw. }",
            "\tRadius, { Required. Any numeric expression for the natural radius of",
            "\t\tthe short axis of the ellipse, used to determine scaling. }",
            "\tStartAngle, { Required. Any numeric expression for the angle at which",
            "\t\tthe first tile is to be drawn. The range -180 to 180. The start point",
            "\t\tis the vertical axis. Angles are positive, counter-clockwise.. }",
            "\tEndAngle, { Required. Any numeric expression for the angle at which",
            "\t\tthe last tile is to be drawn. Range -180 to 180, start point is the",
            "\t\tvertical axis, angles are positive counter-clockwise.. }",
            "\tCropLeft, { Optional. Left coordinate of the cropping region. This and",
            "\t\tthe following three parameters must all be specified if any are",
            "\t\tspecified. Together, they apply a clipping rectangle that will be",
            "\t\tapplied to the tiled image after tiling occurs. }",
            "\tCropTop, { Optional. Top coordinate of the cropping region. }",
            "\tCropWidth, { Optional. Width of the cropping region. }",
            "\tCropHeight { Optional. Height of the cropping region. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ImportAPI": {
        "comments": [
            "{ Description: Imports objects of class API from a given module, for",
            "\tuse in the calling module. }",
            "{ When using modules such as TreeControl, the ImportAPI function can",
            "\treduce the programming workload by importing all the required",
            "\tconstants with one command. Only those constants that have been",
            "\tdeclared as class API in the source module will be imported. ImportAPI",
            "\t\"imports\" the source objects by creating variables with the same name",
            "\tin the destination module and assigning to these the default values",
            "\tfrom the source module. Results may be unpredictable if more than one",
            "\tinstance of the source module is found. Returns the number of",
            "\tvariables that were found to have the same name in the calling module",
            "\tand that therefore were not imported from the source module. }"
        ],
        "snippets": [
            "System.ImportAPI(",
            "\tSourceModule, { Required. Any expression for the module from which the",
            "\t\tAPI-class constants should be imported. }",
            "\tDestinationModule { An optional expression, giving the module that the",
            "\t\tAPI-class constants should be imported into. Used only if the",
            "\t\tconstants are not being imported into the current module. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ImportKey": {
        "comments": [
            "{ Description: The ImportKey function transfers a cryptographic key",
            "\tfrom a key BLOB into a CSP (cryptography service provider). It is the",
            "\tVTScada analog of the CryptoAPIâs ImportKey call. }",
            "{ The new key is returned as a Key handle. If an error occurs, the",
            "\treturn value is invalid. }"
        ],
        "snippets": [
            "ImportKey(",
            "\tCSP, { Required. The handle to the CSP which is receive the imported",
            "\t\tkey. }",
            "\tBlobType, { Required. A parameter specifying the type of key BLOB to",
            "\t\tbe imported. Values are defined in WinCrypt.h }",
            "\tKeyBLOB, { Required. Text string containing the KeyBLOB to be",
            "\t\timported. }",
            "\tEncryptKey, { An optional parameter containing a Key handle for a key",
            "\t\tto be used to encrypt the exported key so that it may only be",
            "\t\tencrypted by the destination user. If omitted or invalid, then the",
            "\t\tvalue NULL is used. }",
            "\tFlags, { An optional parameter specifying the flags to be passed to",
            "\t\tCryptExportKey. If omitted or invalid then the value 0 is used. }",
            "\tError, { An optional variable in which the error code for the function",
            "\t\tis returned. It may have the following values: Error Meaning 0 Key",
            "\t\tsuccessfully imported. 1 CSP, BlobType or KeyBLOB parameters invalid.",
            "\t\tX Any other value is an error from CryptImportKey. }",
            "\t0, { 1 }",
            "\tX",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "In": {
        "comments": [
            "{ Description: Read I/O Byte. This function returns the byte read from",
            "\tan I/O port. }",
            "{ This function requires that the VTSIO driver be installed. If In is",
            "\tused in a statement or an action trigger, it will be evaluated at a",
            "\tvery fast rate. In is a high priority function, and should be used",
            "\tsparingly to avoid reducing overall system performance. }"
        ],
        "snippets": [
            "In(",
            "\tPort { Required. Any numeric expression, which specifies which I/O",
            "\t\tport to read. Port must be in the range 0 to 65535 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "InsertArrayItem": {
        "comments": [
            "{ Description: Insert Array Item. This function inserts an element",
            "\tinto a dynamically allocated array and returns the modified array. }",
            "{ Building an array in this fashion has O(n^2) complexity, meaning it",
            "\tis an extremely slow way to build an array of any size. It is far more",
            "\tefficient to add elements to a Dictionary and use ListKeys to make an",
            "\tarray This function is intended for use on dynamically allocated",
            "\tarrays, created via the New function. If used with an array that has",
            "\tbeen statically declared, then unless otherwise specified in the Array",
            "\tparameter, the first element of the array will be used, and a",
            "\tdynamically allocated array will be created/added-to in this element.",
            "\t}"
        ],
        "snippets": [
            "InsertArrayItem(",
            "\tArray, { Required. Any variable whose value is invalid or contains a",
            "\t\tdynamically allocated array (one created via a New function call).",
            "\t\tThis should be a single dimension array or unexpected results may",
            "\t\toccur. }",
            "\tIndex, { An optional parameter that is any numeric expression for the",
            "\t\tindex at which to insert a new element. If this value is invalid, the",
            "\t\tnew element will be inserted at the end of the array. }",
            "\tValue { An optional parameter that is any expression for the value to",
            "\t\tassign to the new array element. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Instance": {
        "comments": [
            "{ Description: Limit module instances. This function limits the number",
            "\tof fixed module instances allowed to run simultaneously and returns",
            "\tthe old limit }",
            "{ This function is recommended for experienced users only and is not",
            "\tneeded for most applications. If this function is not used, the number",
            "\tof concurrent instances for a given fixed module defaults to 1. }"
        ],
        "snippets": [
            "Instance(",
            "\tModule, { Required. Any text expression that specifies the fixed",
            "\t\tmodule to limit. It must be in the current scope. Scope resolution",
            "\t\toperators ( \\ ) are not permitted. If the module does not exist,",
            "\t\tnothing is done. If the module is not a fixed module, the return value",
            "\t\tis -1. }",
            "\tCount { Required. Any numeric expression that specifies the number of",
            "\t\tfixed module instances allowed to run simultaneously. If Count is in",
            "\t\tthe range 1 to 2, 147,483,647, the new limit is set and the old limit",
            "\t\tis returned. If Count is 0, the limit is not changed, but the current",
            "\t\tlimit is returned. Count is ignored if the module is not a queued",
            "\t\tmodule. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Int": {
        "comments": [
            "{ Description: Integer Portion of Number. This function returns the",
            "\tportion of a number before the decimal point. Also used for rounding.",
            "\t}"
        ],
        "snippets": [
            "Int(",
            "\tX { Required. Any numeric expression. Normally this is a floating",
            "\t\tpoint value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Intgr": {
        "comments": [
            "{ Description: Time Integral. This function returns the time integral",
            "\tof a value. }",
            "{ The integral function takes the Value parameter, multiplies by the",
            "\telapsed time and adds it to the accumulated value so far. If the Value",
            "\tchanges from invalid to valid, the new valid result will start at",
            "\tzero. This function is the inverse of Deriv. The time parameter is",
            "\tnecessary because of VTScada's evaluation method of not doing any",
            "\tcalculations unless necessitated by a change in a parameter. This",
            "\tmeans that if Value remains unchanged, the Intgr function will be",
            "\tre-calculated after the time interval specified by the Time parameter.",
            "\tThis function is often used in control functions such as PID loops",
            "\twhere it makes up the \"I\" in the \"PID.\" The Intgr function is reset",
            "\twhen it appears in a true action trigger, when a state starts, or when",
            "\tit appears in a function which resets its parameters (e.g. Latch,",
            "\tToggle, and Save). When Intgr is reset, the integral starts from zero",
            "\tagain. This function does calculations with double-precision floating",
            "\tpoint values and does not support 64-bit integers computations. }"
        ],
        "snippets": [
            "Intgr(",
            "\tValue, { Required. Any numeric expression giving the value to",
            "\t\tintegrate with respect to time. }",
            "\tTime { Required. Any numeric expression giving the maximum time in",
            "\t\tseconds between integral function updates. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Invalid": {
        "comments": [
            "{ Description: Return Invalid Value. This function always returns an",
            "\tinvalid value. }",
            "{ This function is useful to invalidate data that are found to be",
            "\tincorrect, or to disable statements or functions that will not execute",
            "\twith invalid parameters. }"
        ],
        "snippets": [
            "Invalid();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "InWord": {
        "comments": [
            "{ Description: Read I/O Word. This function reads a 16 bit unsigned",
            "\tword from an I/O port. }",
            "{ This function requires that the VTSIO driver be installed. This is a",
            "\thigh priority function. If InWord is used in a state, it will be",
            "\tevaluated at a very fast rate. InWord should be used sparingly to",
            "\tavoid reducing system performance. }"
        ],
        "snippets": [
            "InWord(",
            "\tPort { Required. Any numeric expression that gives the I/O address.",
            "\t\tPort must be in the range 0 to 65535. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IPAddressList": {
        "comments": [
            "{ Description: Displays a list of IP address which can be added to or",
            "\tremoved from. }",
            "{ Control is read-only if BaseFID is zero. Addresses are validated by",
            "\ta utility function in SocketServerManager before being added to the",
            "\tlist. Controls are available for removing items and reordering. A",
            "\tdouble-click on a list item will copy it into the edit field. The",
            "\tresulting list is stored in the AddressList array, which also serves",
            "\tas the initial display on initialization. Note that addresses are only",
            "\tvalidated when the add button is pressed. }"
        ],
        "snippets": [
            "\\IPAddressList(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the object and its label. The smaller of X1 and",
            "\t\tX2 will always be to the left }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the object. The smaller of Y1",
            "\t\tand Y2 will always be the top. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the object and its label opposite to X1. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of the top or bottom of the object, whichever is the opposite",
            "\t\tto Y1. }",
            "\tAddressList, { Required. The array of IP addresses to display / the",
            "\t\tarray of IP addresses returned. }",
            "\tBaseFocusID, { Required. Reserves 10 focus ID values beginning at the",
            "\t\tvalue provided. Set to zero to disable user input. }",
            "\tTitle, { Optional. Any text expression to use as the title for the",
            "\t\tfield. No default value }",
            "\tDrawBevel, { Optional. Any logical expression. If TRUE, a bevel is",
            "\t\tdrawn around the graphic. Defaults to FALSE. }",
            "\tAlignTitle, { Optional. Any logical value. If TRUE then title affects",
            "\t\talignment }",
            "\tListBGndColor, { Optional. Any numeric expression setting a background",
            "\t\tcolor for the list. No default value. }",
            "\tOverlayCallback { Optional module value. Called from the listbox. No",
            "\t\tdefault value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "IPMaskToText": {
        "comments": [
            "{ Description: Extracts an IP mask from MaskSet and converts it to",
            "\ttext, returning the new text value. }",
            "{ For advanced use only. The returned text value will be the most",
            "\tgeneralized (canonicalized) representation of the IP address. If the",
            "\tMaskSet index being converted has a mask other than all 1s, a",
            "\tcanonicalized CIDR representation will be returned. In conjunction",
            "\twith MakeIPMask(), this allows you to validate and convert an",
            "\tarbitrary IP address string to the most canonicalized representation.",
            "\tFor example: }"
        ],
        "snippets": [
            "IPMaskToText(",
            "\tMaskSet, { Required. A \"maskset\", generated by one ore more calls to",
            "\t\tMakeIPMask }",
            "\tMaskSetIndex { Optional numeric. Specifies the index into MaskSet to",
            "\t\tuse, in the case where MaskSet has more than one mask and you want a",
            "\t\tmask other than the first one. Often obtained from a call to",
            "\t\tCheckIPMask. Defaults to zero. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "IsActive": {
        "comments": [
            "{ Description: Will indicate if an alarm is active. It can be used",
            "\teither as a subroutine or as a called function. }",
            "{ The IsActive subroutine returns a 1 if the alarm is active, and",
            "\treturns a 0 otherwise. }"
        ],
        "snippets": [
            "\\AlarmManager.IsActive(",
            "\tAlarmName, { Required. Unique name for the alarm. Typically the unique",
            "\t\tID, which can be obtained using GetAlarmName . If there are multiple",
            "\t\tbuilt-in alarms in a tag, the convention is to concatenate the",
            "\t\tUniqueID with a separator and a unique integer or string per alarm.",
            "\t\tFor example, Concat(Root\\UniqueID, \\AlarmSeparatorString, 0). }",
            "\tInclShelving { Optional Boolean. If TRUE, a shelved alarm will be",
            "\t\treported here as inactive, regardless of its status. Defaults to TRUE.",
            "\t\tIn most cases, shelving an alarm is considered the same as masking the",
            "\t\tActive status to FALSE. (Makes it look like inactive, regardless of",
            "\t\twhat it actually is.) For the rare use cases where shelving is to be",
            "\t\tignored, the IncludeShelving parameter can be set to FALSE }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IsAppEditable": {
        "comments": [
            "{ Description: Returns TRUE if the application can accept changes",
            "\twithout being re-started. }"
        ],
        "snippets": [
            "LayerRoot.IsAppEditable();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IsChild": {
        "comments": [
            "{ Description: Identify Child Module. This function returns an",
            "\tindication of whether one module is a child module of another. }",
            "{ This function returns true if Child is a descendant module of",
            "\tParent, false if it isn't, and invalid if either, or both arguments",
            "\tare invalid or not module or object values. }"
        ],
        "snippets": [
            "IsChild(",
            "\tChild, { Required. Any expression that returns an object or module",
            "\t\tvalue. }",
            "\tParent { Required. Any expression that returns an object or module",
            "\t\tvalue. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "IsClient": {
        "comments": [
            "{ Description: Is Client of a Service. This subroutine returns an",
            "\tindication of whether a particular workstation is a client connected",
            "\tto a service. Returns 1 for the specified service if the specified",
            "\tmachine is a client to the machine on which the IsClient() call is",
            "\tmade. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. The return value from this subroutine is a logical value,",
            "\tif true (1) the workstation is a client connected to the service, if",
            "\tfalse (0) it is not. If the 16-byte binary format of the GUID is not",
            "\tknown, the GetGUID function may be used to obtain it. To obtain a list",
            "\tof service names for your application, open the Trace Viewer",
            "\tApplication , connect to RPC Diagnostics, then open the Services",
            "\tDialog }"
        ],
        "snippets": [
            "\\RPCManager\\IsClient(",
            "\tServiceName, { Required. Any text expression giving the name by which",
            "\t\tthe service is known. }",
            "\tWorkstation, { Required. Any text expression giving the name or IP",
            "\t\taddress by which the workstation is known to the RPC Manager. }",
            "\tOptGUID { Any optional parameter that provides the GUID for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "IsEqual": {
        "comments": [
            "{ Description: Exists only for backward compatibility. Use",
            "\tStrictlyEqual or StrictlyNotEqual for all new code. Will return TRUE",
            "\tif the parameter values are equivalent, or if both are invalid. }",
            "{ This function is equivalent to the longer expression: !Valid(Parm1)",
            "\t== !Valid(Parm2) OR Parm1 == Parm2 If the parameters are text or",
            "\tnumeric, they will be compared directly. If the parameters are",
            "\texpressions, the strings that they evaluate to will be compared. If",
            "\tobject values, the Name variables will be used, thus allowing tag to",
            "\ttag comparisons. Other value types will be turned into strings before",
            "\tthe comparison. }"
        ],
        "snippets": [
            "\\IsEqual(",
            "\tParm1, { Required. Any value, to be compared to parameter 2. }",
            "\tParm2 { Required. Any value, to be compared to parameter 1. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IsDictionary": {
        "comments": [
            "{ Description: A synonym for HasMetadata. Tests whether the parameter",
            "\tis a dictionary. }",
            "{ Any value can be entered as the lone, required, parameter. The",
            "\tresult is TRUE if the value is of type Dictionary, regardless of the",
            "\tpresence of a root value. Otherwise, a FALSE will always be returned.",
            "\tAn invalid parameter will cause a response of FALSE. IsDictionary",
            "\tcannot have an invalid outcome. }"
        ],
        "snippets": [
            "IsDictionary(",
            "\tValue { Required. Any value to be tested. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IsDisabled": {
        "comments": [
            "{ Description: Will indicate if an alarm is disabled. It can be used",
            "\teither as a subroutine or as a function. }",
            "{ The IsDisabled subroutine returns a 1 if the alarm is disabled and",
            "\treturns a 0 otherwise. }"
        ],
        "snippets": [
            "\\AlarmManager.IsDisabled(",
            "\tAlarmName { Required. Unique name for the alarm. Typically the unique",
            "\t\tID, which can be obtained using GetAlarmName . If there are multiple",
            "\t\tbuilt-in alarms in a tag, the convention is to concatenate the",
            "\t\tUniqueID with a separator and a unique integer or string per alarm.",
            "\t\tFor example, Concat(Root\\UniqueID, \\AlarmSeparatorString, 0). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IsLoggedOn": {
        "comments": [
            "{ Description: Returns TRUE if the calling user is signed in, else",
            "\tFALSE. }"
        ],
        "snippets": [
            "\\SecurityManager.IsLoggedOn();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IsMatch": {
        "comments": [
            "{ Description: Determines whether two names or IPs indicate the same",
            "\tworkstation. This subroutine returns a \"1\" if the two names or IPs",
            "\t(any combination) refer to the same workstation. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. The return value from this function will be a \"1\" if the",
            "\ttwo names or IPs (any combination) refer to the same workstation. }"
        ],
        "snippets": [
            "\\RPCManager.IsMatch(",
            "\tName1, { Required. Any of the names or IPs by which the first",
            "\t\tworkstation is known to the RPC Manager. }",
            "\tName2 { Required. Any of the names or IPs by which the second",
            "\t\tworkstation is known to the RPC Manager. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "IsOnLocalBranch": {
        "comments": [
            "{ Description: Returns TRUE if the local machine is maintaining",
            "\tchanges that have not been deployed within the repository. }"
        ],
        "snippets": [
            "LayerRoot.IsOnLocalBranch();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IsPotentialServer": {
        "comments": [
            "{ Description: Is Potential Server for a Service. This subroutine",
            "\treturns an indication of whether the local workstation is a potential",
            "\tserver for a service. Returns \"1\" if the local workstation can be a",
            "\tserver for the specified service. IsPotentialServer should not be",
            "\tcalled in steady state. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. This function returns Invalid if the local service",
            "\tinstance is not running. If the 16-byte binary format of the GUID is",
            "\tnot known, the GetGUID function may be used to obtain it. To obtain a",
            "\tlist of service names for your application, open the Trace Viewer",
            "\tApplication , connect to RPC Diagnostics, then open the Services",
            "\tDialog }"
        ],
        "snippets": [
            "\\RPCManager\\IsPotentialServer(",
            "\tServiceName, { Required. The name by which the service is known. }",
            "\tOptGUID { Any optional parameter that provides the GUID of the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "IsPrimaryServer": {
        "comments": [
            "{ Description: Returns 1 if the local machine is connected to the",
            "\tprimary server for the specified service. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager\\,",
            "\tand the System variable must be declared in AppRoot.src. To obtain a",
            "\tlist of service names for your application, open the Trace Viewer",
            "\tApplication , connect to RPC Diagnostics, then open the Services",
            "\tDialog The return value from this module is a logical value, if true",
            "\t(1) the primary server is the active server for the service, if false",
            "\t(0) a backup or no server is active is active. If the 16-byte binary",
            "\tformat of the GUID is not known, the GetGUID function may be used to",
            "\tobtain it. To determine if a workstation is the current RPC server for",
            "\ta service call RPCManager\\GetStatus. To obtain a list of service names",
            "\tfor your application, open the Trace Viewer Application , connect to",
            "\tRPC Diagnostics, then open the Services Dialog }"
        ],
        "snippets": [
            "\\RPCManager\\IsPrimaryServer(",
            "\tServiceName, { Required. The name by which the service is known. }",
            "\tOptGUID { Any optional parameter that provides the GUID of the",
            "\t\tapplication in which the service instance is known. The default is the",
            "\t\tapplication to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "IsRunning": {
        "comments": [
            "{ Description: Check if an external program is running. This function",
            "\treturns an indication of whether a named program is running on the",
            "\tsame computer. }",
            "{ This function returns 1 if the specified program is running on the",
            "\tsame computer. If running under 32-bit, this statement will only be",
            "\tvalid if the value of Program refers to another 32-bit process. }"
        ],
        "snippets": [
            "IsRunning(",
            "\tProgram { Required. Any text expression giving the program name to",
            "\t\ttest (with or without the .EXE extension). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "IsRunOnly": {
        "comments": [
            "{ Description: Returns TRUE if the application is a run-file-only app,",
            "\taccording to the WC contents. }"
        ],
        "snippets": [
            "LayerRoot.IsRunOnly();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "IsSecured": {
        "comments": [
            "{ Description: Returns TRUE if the application has any user accounts",
            "\tdefined, else FALSE. }"
        ],
        "snippets": [
            "\\SecurityManager\\IsSecured();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IsServiceReady": {
        "comments": [
            "{ Description: Is Primary Server Active for a Service. This module",
            "\treturns an indication of whether the specified server is in",
            "\tsynchronization with the server instance. Returns \"1\" if the local",
            "\tinstance is in synchronization with the server instance. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager,",
            "\tand the System variable must be declared in AppRoot.src. If the",
            "\t16-byte binary format of the GUID is not known, the GetGUID function",
            "\tmay be used to obtain it. To obtain a list of service names for your",
            "\tapplication, open the Trace Viewer Application , connect to RPC",
            "\tDiagnostics, then open the Services Dialog }"
        ],
        "snippets": [
            "\\RPCManager.IsServiceReady(",
            "\tServiceName, { Required. The name by which the service is known. }",
            "\tOptGUID { Required. Any optional parameter that provides the GUID of",
            "\t\tthe application in which the service instance is known. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "IsShelved": {
        "comments": [
            "{ Description: Will indicate if an alarm is shelved. It can be used",
            "\teither as a subroutine or as a called function. }",
            "{ The IsShelved subroutine returns a 1 if the alarm is active and",
            "\treturns a 0 otherwise. }"
        ],
        "snippets": [
            "\\AlarmManager.IsShelved(",
            "\tAlarmName { Required. Unique name for the alarm. Typically the unique",
            "\t\tID, which can be obtained using GetAlarmName . If there are multiple",
            "\t\tbuilt-in alarms in a tag, the convention is to concatenate the",
            "\t\tUniqueID with a separator and a unique integer or string per alarm.",
            "\t\tFor example, Concat(Root\\UniqueID, \\AlarmSeparatorString, 0). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IsSuspended": {
        "comments": [
            "{ Description: Returns TRUE if the userâs account is suspended, else",
            "\tFALSE. }"
        ],
        "snippets": [
            "\\SecurityManager\\IsSuspended();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IsSuppressed": {
        "comments": [
            "{ Description: Will indicate if an alarm is suppressed. It can be used",
            "\teither as a subroutine or as a called function. }",
            "{ The IsSuppressed subroutine returns a 1 if the alarm is suppressed",
            "\tand returns a 0 otherwise. }"
        ],
        "snippets": [
            "\\AlarmManager.IsSuppressed(",
            "\tAlarmName { Required. Unique name for the alarm. Typically the unique",
            "\t\tID, which can be obtained using GetAlarmName . If there are multiple",
            "\t\tbuilt-in alarms in a tag, the convention is to concatenate the",
            "\t\tUniqueID with a separator and a unique integer or string per alarm.",
            "\t\tFor example, Concat(Root\\UniqueID, \\AlarmSeparatorString, 0). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IsTagOperable": {
        "comments": [
            "{ Description: Returns TRUE if the user is able to operate the",
            "\tselected tag from the Tag Browser using the right-click menu. }",
            "{ All of the following are examined to determine whether the tag in",
            "\tquestion can be operated from the Tag Browser: Security status The",
            "\tcurrent user's privilege set (if security is enabled) Any relevant",
            "\tdetails of the tag's configuration. }"
        ],
        "snippets": [
            "\\IsTagOperable(",
            "\tTagObj { Required object value. The tag to be examined. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "IsUnacked": {
        "comments": [
            "{ Description: Will indicate if an alarm is unacknowledged. It can be",
            "\tused either as a subroutine or as a function. }",
            "{ The IsUnacked subroutine returns a 1 if the alarm is unacknowledged",
            "\tand returns a 0 otherwise. In most cases, shelving an alarm is",
            "\tconsidered the same as masking the IsUnacked status to FALSE. (Makes",
            "\tit look like not unacknowledged, regardless of what it actually is.)",
            "\tFor the rare use cases where shelving is to be ignored, the",
            "\tIncludeShelving parameter can be set to FALSE }"
        ],
        "snippets": [
            "\\AlarmManager.IsUnacked(",
            "\tAlarmName, { Required. Unique name for the alarm. Typically the unique",
            "\t\tID, which can be obtained using GetAlarmName . If there are multiple",
            "\t\tbuilt-in alarms in a tag, the convention is to concatenate the",
            "\t\tUniqueID with a separator and a unique integer or string per alarm.",
            "\t\tFor example, Concat(Root\\UniqueID, \\AlarmSeparatorString, 0). }",
            "\tInclShelving { Optional Boolean. If TRUE, a shelved alarm will be",
            "\t\treported here as non-acknowledged, regardless of its status. Defaults",
            "\t\tto TRUE. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "IsVICSession": {
        "comments": [
            "{ Description: Returns TRUE to indicate that a call is being made from",
            "\ta VTScada Thin Client session. }",
            "{ Certain modulesneed to know whether they are being executed from a",
            "\tVTScada workstation or a VIC, and will adjust their behavior as",
            "\tneeded. IsVICSession provides a quick test to determine this. }"
        ],
        "snippets": [
            "IsVICSession(",
            "\tIsAnwhere { Optional Boolean. When set TRUE, makes IsVICSession only",
            "\t\treturn true if the session is an Anywhere client session. When FALSE",
            "\t\t(0), the function returns true if the client is either a VIC or an",
            "\t\tAnywhere client. Defaults to 0. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "JoinStrings": {
        "comments": [
            "{ Description: Joins an array of string elements together into one",
            "\tstring, with a given separator added between each element from the",
            "\tarray. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ }"
        ],
        "snippets": [
            "System.JoinStrings(",
            "\tStringArray, { Required. One-dimensional array containing text",
            "\t\telements to be joined into a string. Numeric elements will be treated",
            "\t\tas strings. }",
            "\tDelimiter, { Optional text. The character (or characters) to be",
            "\t\tinserted between array elements in the output string. Defaults to \"\".",
            "\t\t}",
            "\tCount { Optional integer. If provided, then no more than Count array",
            "\t\telements will be used in the resulting string. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "JSONEncode": {
        "comments": [
            "{ Description: Converts any given VTScada value into a JSON string",
            "\tusing UTF-8 encoding. }",
            "{ VTScada value types that do not have a string or numeric",
            "\trepresentation, and are not dictionaries, arrays or structures, will",
            "\tbe represented as JSON null. Arrays of up to three dimensions are",
            "\tsupported. }"
        ],
        "snippets": [
            "JSONEncode(",
            "\tInputValue, { Required. Any value to be encoded as JSON. Text is",
            "\t\texpected to use UTF-8 encoding. }",
            "\tPrettyPrint, { Optional Boolean. If TRUE, the output will have white",
            "\t\tspace and line breaks added for presentation. Defaults to FALSE. }",
            "\tAlphabetical, { Optional Boolean. If TRUE, dictionaries will be listed",
            "\t\talphabetically. If FALSE, dictionaries will be listed chronologically.",
            "\t\tDefaults to FALSE. }",
            "\tIndent, { Optional numeric. Ignored if PrettyPrint is FALSE. Sets the",
            "\t\tnumber of spaces to indent the encoding when PrettyPrint is TRUE. }",
            "\tStreamVar { Optional. If a valid stream is provided, the JSON encoded",
            "\t\tstring will be appended to that stream and returned. The default is",
            "\t\tfor JSONEncode to return a text string. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "JSON_Encode": {
        "comments": [
            "{ Description: Takes a VTScada dictionary, structure or array which",
            "\tmay be nested, and encodes it as JSON. }",
            "{ The return value will be the input encoded as JSON. Text will be",
            "\tencoded as UTF-8, unless there are any sequences of bytes in the input",
            "\tstring that cannot be represented as UTF-8, in which case the string",
            "\twill be substituted for JSON null. VTScada value types that are not",
            "\tdictionaries, arrays or structures, and that do not have a string or",
            "\tnumeric representation, will be represented as JSON null. }"
        ],
        "snippets": [
            "\\System.JSON_Encode(",
            "\tInput, { Required. Any stream expression for the socket. If this isn't",
            "\t\ta socket stream, invalid is returned. }",
            "\tPrettyPrint { Optional Boolean. If TRUE, the output will have white",
            "\t\tspace and line breaks added for presentation. Default to FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "JSONParse": {
        "comments": [
            "{ Description: Parse JSON text, converting it to VTScada arrays,",
            "\tobjects / structures, strings or other data types as appropriate. }",
            "{ Dictionaries and structures returned by JSONParse() are case",
            "\tsensitive. The order that JSON object names are inserted into VTScada",
            "\tdictionaries or structures should be treated as undefined. The input",
            "\ttext is expected to be encoded as UTF-8, as per the JSON standard.",
            "\tText using another encoding can be converted to UTF-8 with TextEncode",
            "\t(). }"
        ],
        "snippets": [
            "JSONParse(",
            "\tJSONInputText, { Required. JSON text to be parsed. }",
            "\tErrorMessageOut, { Optional text. Output parameter that is set to a",
            "\t\ttext representation of the error. If recoverable parsing errors occur,",
            "\t\tthis may be set in addition to the return value being valid. If for",
            "\t\texample an array of strings has one string that cannot be displayed in",
            "\t\tthe system's configured code page, only that element of the VTScada",
            "\t\tarray will be invalid and the ErrorMessageOut text will reflect this.",
            "\t\t}",
            "\tObjectsAsStructures { Optional Boolean. If this parameter is TRUE,",
            "\t\tJSON objects will be created as VTScada structures for compatibility",
            "\t\twith XMLParse(). If this is not specified or is false, JSON objects",
            "\t\twill be translated into VTScada dictionaries. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "KeyCount": {
        "comments": [
            "{ Description: Returns the number of keys pressed since the state",
            "\tbecame active, either edited or non-edited. }",
            "{ Edited keystrokes are printable characters and the enter key.",
            "\tNon-edited keystrokes are all keystrokes, including printable",
            "\tcharacters, enter key, special keys, and function keys. When the",
            "\tBackspace key is pressed, the key code for backspace is entered as a",
            "\tnon-edited keystroke, and the previous edited keystroke is removed.",
            "\tThat is, when Backspace is pressed the number of non-edited keystrokes",
            "\tincrements, and the number of edited keystrokes decrements (and",
            "\tpossibly goes negative). Count keys only while the calling state",
            "\t(window) has focus. }"
        ],
        "snippets": [
            "KeyCount(",
            "\tOption { Any logical expression. If true, the number of non-edited",
            "\t\tkeystrokes is returned; if false, the edited keystrokes is returned. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "KeyFake": {
        "comments": [
            "{ Description: Places a string of characters in a window's keyboard",
            "\tbuffer, simulating a key press. }"
        ],
        "snippets": [
            "KeyFake(",
            "\tObject, { Any expression that returns an object value that defines a",
            "\t\twindow. }",
            "\tString { Any text expression that gives the characters to place in the",
            "\t\twindow's keyboard buffer. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Keys": {
        "comments": [
            "{ Description: Returns the most recently pressed keys, optionally",
            "\tflagging virtual key codes. }",
            "{ In the non-edited mode, function keys and others that return a",
            "\tvirtual key code will have an escape code in the range [0xF8,0xFF].",
            "\tThere could be a 0xFB, 0xF8, etc. pre-pended to the return value. (See",
            "\tMicrosoft's online MSDN reference for a list of virtual key codes.)",
            "\tBecause of this, the return value may contain more bytes than",
            "\tspecified by the parameter, N. Keys does not work in the Anywhere",
            "\tClient. }"
        ],
        "snippets": [
            "Keys(",
            "\tN, { Any numeric expression giving the number of keys to get. }",
            "\tOption { Any logical expression indicating whether edited mode or",
            "\t\tnon-edited mode should be used. Set to TRUE for the non-edited mode. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "LargeSocketWrite": {
        "comments": [
            "{ Description: Paces the write speed to prevent exceeding the socket",
            "\toutput buffer limit. }",
            "{ LargeSocketWrite writes as many bytes as there is space in the",
            "\tsocket output buffer and then waits for there to be space for some",
            "\tmore before writing more bytes until all content in Source has been",
            "\tdrained. It is a launched module and so you should launch it and wait",
            "\tfor completion (the object value returned from the launch statement",
            "\tgoes Invalid). Failure to do so may result in not all data being",
            "\twritten. LargeSocketWrite is more efficient if a stream is passed in",
            "\tthe Source parameter - a text value is first converted to a BuffStream",
            "\tbefore writing and the BuffStream discarded after the write completes.",
            "\tIf the Source Parameter is a stream, writing to the socket starts from",
            "\tthe current position in the stream. The Source stream is not",
            "\trepositioned at the end of the write. Passing in a Stream parameter",
            "\tthat is not a ClientSocket or ServerSocket stream does nothing and",
            "\tLargeSocketWrite will terminate quickly. }"
        ],
        "snippets": [
            "System.LargeSocketWrite(",
            "\tStream, { The socket stream to which data will be written. }",
            "\tSource { A stream or text value containing the data to write. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "LastSelected": {
        "comments": [
            "{ Description: Returns the most recently selected graphics statement.",
            "\t}",
            "{ None }"
        ],
        "snippets": [
            "LastSelected(",
            "\tObject { Required. Any object value expression that defines the window",
            "\t\twhere the selected items are found. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Latch": {
        "comments": [
            "{ Description: Latch On or Off. This function allows a transient",
            "\tchange of a variable to be captured. Its return value is determined by",
            "\tthe rules listed in the comments section. }"
        ],
        "snippets": [
            "Latch(",
            "\tSet, { Required. Any numeric expression. When TRUE (i.e. not equal to",
            "\t\t0), the latch is set. }",
            "\tReset { Required. Any numeric expression. When TRUE (i.e. not equal to",
            "\t\t0), the latch is reset. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Launch": {
        "comments": [
            "{ Description: Runs a module instance and returns a pointer to it. }",
            "{ You should do implicit launches when possible, noting that it is",
            "\talmost always possible. The only time you need to do an explicit",
            "\tlaunch is if you need the code to execute with a different parent or",
            "\tcaller than it normally would. This use-case is quite specialized.",
            "\tThis function returns an object value of the newly started module. In",
            "\tgeneral, variables that are listed in the final parameter spots are",
            "\tpassed to the module as a value only. This means that if the launched",
            "\tmodule instance changes the value of one of the parameters, its value",
            "\twill not change outside of the scope of the module. If a launched",
            "\tmodule contains a Return statement it is will run as a subroutine,",
            "\twhether it is explicitly or implicitly launched. This is true even if",
            "\tthe Return statement is in a state that does not get executed. In that",
            "\tcase, the script that launches the sub-routine will stop its execution",
            "\tindefinitely, waiting for the sub-routine to return a value. If",
            "\t\"myMod\" is a subroutine, then in the statement, x = Launch(\"myMod\",",
            "\tâ¦); x will be set to the value returned by the subroutine's Return",
            "\tstatement upon completion. Prior to execution of the Return statement,",
            "\tx will be invalid, unlike a module that is not a subroutine, which",
            "\twould set x to the object value of the launched module. A common",
            "\tsyntactical problem with the use of the Launch function will result in",
            "\ttwo instances of a module running. The following example shows the",
            "\timproper syntax [ X Module; Y; ] Launch(X, Self, Self); (assuming that",
            "\t\"X\" is declared as a module.) The problem here is the first parameter.",
            "\tAs written above, the code will launch a module called \"X\", and use",
            "\tthe return value from the launch (an object value) as the first",
            "\tparameter for Launch . This will result in two copies of the \"X\"",
            "\tmodule running. If you copy the module value into Y (ie Y = \\X;), then",
            "\tLaunch(Y, Self, Self) does not launch two copies. The correct syntax",
            "\tis: Launch(\"X\", Self, Self); Use care in how you write a Launch",
            "\tstatement. For example: X = Launch(Scope(<variable>, \"Y\", TRUE)... If",
            "\tit is unknown whether Y exists in the module pointed to by <variable>",
            "\tor if in fact <variable> is valid, then setting the ScopeLocal",
            "\tparameter to TRUE as shown, may help to avoid undesirable results. In",
            "\tthe rare case that the module being launched is a child module of the",
            "\tcaller's module, and if there are variables external to the module",
            "\tthat the module itself will be required to alter, it is best to make",
            "\tthem within the scope of Parent. }"
        ],
        "snippets": [
            "Launch(",
            "\t\\Launchee, { Required. A module pointer or a text expression giving",
            "\t\tthe module to run. See Comments If this parameter is a module value",
            "\t\tthat has been returned from a LoadModule or FindVariable statement,",
            "\t\tthat module will be launched. If this parameter is type text it may",
            "\t\teither designate the module by its name, if it is in scope, or it may",
            "\t\tgive the name of a variable that contains the module value of the",
            "\t\tmodule to launch. }",
            "\tParent, { Required. The object value of the module where the Launchee",
            "\t\tis to resolve its global variable references. If a valid non-object",
            "\t\tvalue is supplied the Launchee will resolve its global variable",
            "\t\treferences to the scope defined by the first parameter. If this is",
            "\t\tinvalid, the module will still run, but global references will be",
            "\t\tinvalid. }",
            "\tCaller, { Required. . This specifies the module instance (object)",
            "\t\twhere the Launchee acts as if it were called from there. If this is",
            "\t\tinvalid, the module will still run but will not stop without a Slay. A",
            "\t\tReturn in the case of a subroutine. If it is valid, the module will",
            "\t\tstop when the Caller module instance stops, when a Slay is executed",
            "\t\tupon it, or (subroutine only) when it calls Return. Often, the object",
            "\t\tvalue of the window to draw within. }",
            "\tP1, P2, ... { Optional. Are any expressions that will be supplied as",
            "\t\tparameters to the launched module. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "LayerInUse": {
        "comments": [
            "{ Description: Returns true if the application is running or if there",
            "\tare any applications that depend on this layer, running or not. }"
        ],
        "snippets": [
            "LayerRoot.LayerInUse();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "LayerRoot\\Stop": {
        "comments": [
            "{ Description: Stop the application designated by LayerRoot }",
            "{ For a VTScada application, most of the work is done in",
            "\tStart\\VTSThread. After the app is stopped, AppStopMonObj does some",
            "\tpost-stop clean-up. The work is done there rather than here as a",
            "\tscript application often stops just by slaying itself, and",
            "\tAppStopMonitor picks up on both situations. This module launches a",
            "\tworker module into the Layer so that the operation is not interrupted",
            "\tby this module's caller being slain. }"
        ],
        "snippets": [
            "LayerRoot\\Stop(",
            "\tIsRestart { Optional Boolean. Set TRUE if the application is to be",
            "\t\tre-started. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Limit": {
        "comments": [
            "{ Description: Set Value Minimum and Maximum. This function returns a",
            "\tvalue that is limited both on the high and low ranges. }",
            "{ This function performs the same operation as Min(High, Max(Low, X))",
            "\tbut is simpler to write and requires less memory. If the value exceeds",
            "\tone of the limits, the function returns that limit. Otherwise, the",
            "\tvalue is returned unchanged. If Low is greater than High, the value",
            "\tfor High is returned. If any of the parameters is invalid, the",
            "\tfunction returns invalid. }"
        ],
        "snippets": [
            "Limit(",
            "\tX, { Required. The variable whose numeric value will be limited. }",
            "\tLow, { Required. Any numeric expression giving the lower limit for the",
            "\t\tvalue X. }",
            "\tHigh { Required. Any numeric expression giving the upper limit for the",
            "\t\tvalue X. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Line": {
        "comments": [
            "{ Description: Draws a line on the screen that may consist of multiple",
            "\tsegments. }",
            "{ This statement has been superseded by the GUIPolygon and ZLine",
            "\tstatements and is maintained for backwards compatibility only. The",
            "\tradius of curvature of the line corners is the radius of the arc that",
            "\tjoins the line endpoints. A Curvature of 0 results in sharp (square)",
            "\tline corners. Larger Curvature numbers result in greater rounding of",
            "\tthe line corners. As of version 11, this is now drawn in the same",
            "\tz-order as other graphics, making it similar to the z-graphics",
            "\tfunctions. Within an Anywhere Client session, this function does",
            "\tnothing. }"
        ],
        "snippets": [
            "Line(",
            "\tStyle, { Required. Any numeric expression giving the Line Types .",
            "\t\tValid line styles are from 1 to 5 inclusive. A line style of 1 is a",
            "\t\tsolid line }",
            "\tWidth, { Required. Any numeric expression giving the width of the line",
            "\t\tin units of X screen coordinates. The width is always rounded to",
            "\t\tresult in an odd number of pixels on the screen. The minimum width",
            "\t\tdisplayed will be 1 pixel. }",
            "\tColor, { Required. Any numeric expression giving the VTScada Color",
            "\t\tPalette of the line. }",
            "\tCurvature, { Required. Any numeric expression giving the radius of",
            "\t\tcurvature of the corners for the line. This is specified in units of X",
            "\t\tscreen coordinates. If the number of endpoints is 2, Curvature is",
            "\t\tignored. }",
            "\tX1, Y1, X2, Y2, ... { Required. Any numeric expressions giving the",
            "\t\tscreen coordinates of the line endpoints. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "LinearIndicator": {
        "comments": [
            "{ Description: Will draw a linear type indicator. A linear indicator",
            "\tcan be drawn in 3 different ways. Scaled from min to current position,",
            "\tcropped from min to current position or as a line that moves to the",
            "\tcurrent position. This function must be called inside a GUITransform",
            "\tto work properly. }",
            "{ This function must be called within a GUITransform statement in",
            "\torder for it to work correctly. The size of the indicator image is",
            "\tscaled with respect to the original size of the image and the size of",
            "\tthe transform. If you want a smaller indicator you can simply make a",
            "\tsmaller transform. }"
        ],
        "snippets": [
            "\\MeterParts\\LinearIndicator(",
            "\tDataSource, { Required. A Tag name, constant or expression that",
            "\t\tprovides the value to show. }",
            "\tIndicatorImage, { Required. The full path to the name of an image file",
            "\t\tto use as the indicator. Typically this is an image of a needle. }",
            "\tOrientation, { A flag indicating the orientation of the Indicator. Set",
            "\t\tto 0 for Horizontal and 1 for Vertical. The default is 0 (Horizontal).",
            "\t\t}",
            "\tDrawMode { Controls how the indicator is drawn. Details of the 3 modes",
            "\t\tare as follows DrawMode Meaning 0 Scaled. This mode will scale the",
            "\t\tIndicator image from the 0 position to the position that represents",
            "\t\tthe current value of the DataSource. 1 Cropped. This mode will scale",
            "\t\tthe indicator image from the 0 position to the full position and then",
            "\t\tcrop it to the position that represents the current value of the",
            "\t\tDataSource. 2 Moving This mode will keep the Indicator image at a",
            "\t\tconstant size and simply move it to the position that represents the",
            "\t\tcurrent value of the DataSource. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "LinearLegend": {
        "comments": [
            "{ Description: Draws a legend (i.e. the text labels) for a linear type",
            "\tmeter. They are drawn in a line, either horizontally or vertically,",
            "\twith consistent spacing. This function must be called inside a",
            "\tGUITransform to work properly. }",
            "{ This function must be called within a GUITransform statement in",
            "\torder for it to work correctly. The text should scale with the size of",
            "\tthe transform. If it does not, then you might have picked a font that",
            "\tdoesnât scale. Some non true-type fonts will not scale. }"
        ],
        "snippets": [
            "\\MeterParts\\LinearLegend(",
            "\tTagName, { Required. The name of the Tag to use for scaling. If no tag",
            "\t\tis specified, then tag scaling cannot be used to automatically obtain",
            "\t\tthe minimum and maximum scale values. }",
            "\tOrientation, { A flag indicating the orientation of the legend. Set to",
            "\t\t0 for horizontal and 1 for vertical. The default is 0 (Horizontal). }",
            "\tNumLabels, { The number of Labels to show. The default is 3. }",
            "\tFont, { The name of a Font tag to use for the legend text. }",
            "\tColor, { A color index for the color of the legend text. The default",
            "\t\tis 0 (black). }",
            "\tReserved n/a, { For use at a later time. Should be set to 0. }",
            "\tUseTagScaling, { A flag that indicates whether to use the supplied",
            "\t\ttagâs scaling values. The default is false. }",
            "\tMinScaleValue, { The minimum scale value to use if the UseTagScaling",
            "\t\tflag is not true. The default is 0. }",
            "\tMaxScaleValue { The maximum scale value to use if the UseTagScaling",
            "\t\tflag is not true. The default is 100. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ListAdd": {
        "comments": [
            "{ Description: This subroutine will add the alarm object to a list.",
            "\tThis is useful if a user-defined list has been created. }",
            "{ The ListAdd subroutine always returns \"0\". }"
        ],
        "snippets": [
            "\\AlarmManager\\ListAdd(",
            "\tAlarmObject, { Required. The object value for the alarm that was",
            "\t\tpassed to the Register subroutine. }",
            "\tEventTime, { The time stamp to use when adding this event to the alarm",
            "\t\tlists. If invalid, the default is CurrentTime(). }",
            "\tList { Required. Any numeric expression for the number of the list to",
            "\t\twhich to add the alarm. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Listbox": {
        "comments": [
            "{ Description: Draws a list box with scroll bar (if required) and",
            "\tindicates the selected item. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ If Multi is true, multiple items in the list may be",
            "\tselected by using the <Shift> or <Ctrl> keys along with mouse input.",
            "\tIf <Ctrl> is held while an item is clicked on by the mouse, it will",
            "\tbecome selected (or deselected if it is already selected) and will be",
            "\tadded to the list of chosen items. If <Shift> is held while an item is",
            "\tclicked on by the mouse, all items from the last selected item to the",
            "\tselected item will be selected. All other items outside of this list",
            "\twill be deselected. If both <Ctrl> and <Shift> are held while an item",
            "\tis clicked on by the mouse, all items from the last selected item to",
            "\tthe selected item will be set to the state of the last selected item.",
            "\tFor any optional parameter that is to be set, all optional parameters",
            "\tpreceding the desired one must be present, although they may be",
            "\tinvalid. }"
        ],
        "snippets": [
            "System.Listbox(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the Listbox, usually the left side. }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the Listbox, usually bottom. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the Listbox opposite to X1, usually the right",
            "\t\tside. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of the top or bottom of the Listbox, whichever is the opposite",
            "\t\tof Y1, usually the bottom. }",
            "\tData, { Required. An array of data to display in the Listbox. }",
            "\tIndex, { Required. The index of the highlighted item (i.e. any",
            "\t\tvariable whose value will be set to the index of the chosen item",
            "\t\t(highlight).) If Multi is true, this will be the index of the last",
            "\t\tchosen item. }",
            "\tPicked, { An optional parameter that may be a variable whose value is",
            "\t\tset to true (1) when an item is chosen in the Listbox. The setting of",
            "\t\tIndex by an external source will not trigger Picked. If this",
            "\t\tinformation is not required and the next parameter is used, a value of",
            "\t\tinvalid or a constant may be substituted. }",
            "\tFlat, { Obsolete. }",
            "\tDoubleClick, { An optional parameter that may be a variable whose",
            "\t\tvalue is set to true (1) when an item has been double clicked upon. If",
            "\t\tthis information is not required and the next parameter is used, a",
            "\t\tvalue of invalid or a constant may be substituted. }",
            "\tMaxLen, { An optional parameter that is any numeric expression giving",
            "\t\tthe maximum length of the list. If omitted or invalid, the maximum",
            "\t\tlist length is given by the size of the array Data. }",
            "\tRightClick, { An optional parameter that may be a variable whose value",
            "\t\tis set to true (1) when an item is selected with the right mouse",
            "\t\tbutton. If this information is not required and the next parameter is",
            "\t\tused, a value of invalid or a constant may be substituted. }",
            "\tPostIt, { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0), a tool tip will be displayed if the text in the list box",
            "\t\thas been truncated at its right edge. The default is true. }",
            "\tFocusID, { An optional parameter that is any numeric expression from 0",
            "\t\tto 32767 for the focus number of this graphic. If this value is zero,",
            "\t\tthe list box will not accept keyboard input, but mouse input will",
            "\t\tstill be recognized. If it is less than zero, the Listbox will not",
            "\t\taccept any input and will appear grayed out. The default value is 1. }",
            "\tMulti, { An optional parameter that is any logical expression. If true",
            "\t\t(non-0), multiple items may be selected in the list. The default is",
            "\t\tfalse. }",
            "\tPickList, { An optional parameter that is a variable whose value is",
            "\t\tset to the list of items selected if Multi is true (1). If invalid, no",
            "\t\titems are selected. This variable may initially be set to a",
            "\t\tdynamically allocated array (one created with the New function)",
            "\t\tcontaining items to be highlighted/selected upon the startup of the",
            "\t\tlistbox. }",
            "\tColWidths, { An optional parameter that indicates the starting widths",
            "\t\tfor multiple columns. }",
            "\tColLabels, { An optional parameter that provides an array of labels",
            "\t\tfor the columns. }",
            "\tColDivider { An optional parameter that indicates the type of divider",
            "\t\tto appear between columns. No border appears if the list is a single",
            "\t\tcolumn. ColDivider may have one of the following values: The default",
            "\t\tis \"2\". ColDivider Divider Type 0 No column divider shown. 1 Show a",
            "\t\tnon-moveable column divider. 2 Show a moveable column divider. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ListCertificates": {
        "comments": [
            "{ Description: Enumerates X.509 certificates in a certificate store",
            "\tresident on the local computer. }",
            "{ ListCertificates will return certificates that have either expired",
            "\tor are not yet valid. The array of information returned is an array of",
            "\tstructures, with one structure per certificate that meets the supplied",
            "\tcriteria. The structure has the following members: FriendlyName Text.",
            "\tThe friendly name of the certificate. Name Text. The Common Name of",
            "\tthe certificate. Description Text. The description of the certificate.",
            "\tCountry Text. The country code (e.g. CA, GB). State-Province Text. The",
            "\tstate/province on the certificate. Locality Text. The locality on the",
            "\tcertificate (e.g. town). Organization Text. The organization the",
            "\tcertificate is issued to. OrganizationUnit Text. The organization unit",
            "\tthe certificate is issued to. Issuer Text. The Common Name of the",
            "\tcertificate issuer. Serial Text. The certificate serial number.",
            "\tValidFrom Double. VTScada timestamp of the certificate start",
            "\tdate/time. ValidTo Double. VTScada timestamps of the certificate end",
            "\tdate/time. EKU Array. Each Extended Key Usage on the certificate is",
            "\tstored as a text OID in its array element. SHA1Thumbprint A binary",
            "\tbuffer holding the computed SHA1 thumbprint of the certificate. This",
            "\twill match with the thumbprint that the Windows certificate dialogâs",
            "\tDetails tab displays. SHA256Thumbprint A binary buffer holding the",
            "\tcomputed SHA256 thumbprint of the certificate. AlternateNames A",
            "\tstructure with the following members, extracted from the Subject",
            "\tAlternative Name certificate extension: DNS An array of DNS names. URL",
            "\tAn array of URLs. IP An array of IPs. Other An array of structures of",
            "\tother entries that are defined by an OID. The structure has the",
            "\tfollowing format: OID The Object Identifier of the quantity. Value The",
            "\tvalue of that quantity. Blob The DER-binary encoded certificate.",
            "\tPublicKey The public key of the certificate. This is held in a VTScada",
            "\tcryptographic key value and may be used as an input parameter to",
            "\tappropriate VTScada cryptographic statements. PrivateKey The private",
            "\tkey of the certificate, if one is stored on this computer and the",
            "\tcurrent user has permission to access it. This is held in a VTScada",
            "\tcryptographic key value and may be used as an input parameter to",
            "\tappropriate VTScada cryptographic statements. If the user has",
            "\tinsufficient permission or there is no private key, Invalid is stored",
            "\there. }"
        ],
        "snippets": [
            "ListCertificates(",
            "\tUseMachineStore, { Required Boolean. If TRUE, enumerates certificates",
            "\t\tfrom the Personal store in the Local Computer's certificate",
            "\t\tcollection. If FALSE enumerates certificates from the Personal store",
            "\t\tof the Current User. }",
            "\tStoreName, { Required text. The name of the certificate store to list.",
            "\t\t}",
            "\tExtendedKeyUsage, { Optional text. If valid, this must be an Object",
            "\t\tIdentifier (OID) for an extended key usage. This allows you to filter",
            "\t\tthe returned list of certificates by extended key usage (EKU). For",
            "\t\texample, \"1.3.6.1.5.5.7.3.1\" is the OID for an EKU allowing server",
            "\t\tauthentication. }",
            "\tIssuer, { Optional text. If valid, specifies the name of a certificate",
            "\t\tissuer. This allows you to filter the returned list of certificates by",
            "\t\tissuer. }",
            "\tRequirePrivateKey { Optional Boolean. If TRUE, only returns",
            "\t\tcertificates for which you hold a private key. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ListInstances": {
        "comments": [
            "{ Description: Returns an array of all instances of a module. }",
            "{ Returns Invalid if there are no instances. }"
        ],
        "snippets": [
            "ListInstances(",
            "\tModule { Required. Any expression for the code value of the module. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ListKeys": {
        "comments": [
            "{ Description: Returns an array of all keys used within a dictionary.",
            "\tUse this to discover what is in a dictionary. }"
        ],
        "snippets": [
            "ListKeys(",
            "\tDictionary, { Required. The name of the dictionary. }",
            "\tOrder, { An optional numeric expression. Defines the search according",
            "\t\tto the following table of values. Defaults to 0 if missing or invalid",
            "\t\tOrder Meaning 0 List in forward alphabetic order. 1 Ordered by when",
            "\t\tthe keys were added to the dictionary with the oldest key first. 2",
            "\t\tList in backward alphabetic order 3 Ordered by when the keys were",
            "\t\tadded to the dictionary with the newest key first. 4 Sparse Numeric.",
            "\t\tKeys must be numeric. Used to return a sparse array in order based on",
            "\t\tthe key values. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ListRemove": {
        "comments": [
            "{ Description: This subroutine will remove the alarm object from a",
            "\tlist. This is useful if a user-defined list has been added. }",
            "{ The ListRemove subroutine always returns a \"0\". }"
        ],
        "snippets": [
            "\\AlarmManager\\ListRemove(",
            "\tAlarmObject, { Required. The object value for the alarm that was",
            "\t\tpassed to the Register subroutine. }",
            "\tEventTime, { The time stamp to use when adding this event to the alarm",
            "\t\tlists. If invalid, the default is CurrentTime(). }",
            "\tList { Required. Any numeric expression for the number of the list",
            "\t\tfrom which to remove the alarm. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ListVars": {
        "comments": [
            "{ Description: Returns a list of variables. }",
            "{ The variable used to store the returned array does not need to be",
            "\tdeclared as an array. It will be dynamically allocated as such by the",
            "\tfunction. If no variables are found, the return value will be a valid",
            "\tpointer to an array with no elements. Data Handling in",
            "\tStatically-declared Arrays vs. Dynamically-allocated Arrays. ListVars",
            "\thandles data in statically declared arrays differently from data",
            "\tstored in dynamically allocated arrays. In the following example, two",
            "\tarrays have been declared. The first (A1) is statically-declared,",
            "\twhile the second (A2) is dynamically-allocated. A1[2][3]; A2; A2 =",
            "\tNew(2, 3); A1[0][0] = \"zerozero\"; A2[0][0] = \"zerozero\"; A1[1][0] =",
            "\tBuffStream(\"onezero\"); A2[1][0] = BuffStream(\"onezero\"); A1[1][1] =",
            "\t11; A2[1][1] = 11; A1[1][2] = 12; A2[1][2] = 12; AFiles =",
            "\tListVars(Self(), \"A*\", 0, 65535 { class limits }, 0, 0 { all matches",
            "\t}, 0 { local only }, 8 { ptr to variables }, 1 { sort }); To retrieve",
            "\tthe value of each element in the statically-declared array named,",
            "\t\"A1\", you can use: ElemA1_00 = AFiles[0][0][0]; ElemA1_10 =",
            "\tAFiles[0][1][0]; ElemA1_11 = AFiles[0][1][1]; â¦ and so forth.",
            "\tHowever, this same call for the dynamically-allocated array named,",
            "\t\"A2\", will not retrieve the expected elements. Rather, the correct",
            "\tsyntax for data retrieval in this case is: ElemA2_00 =",
            "\t(*AFiles[0])[0][0]; ElemA2_10 = (*AFiles[0])[1][0]; ElemA2_11 =",
            "\t(*AFiles[0])[1][1]; The data retrieval method displayed above for the",
            "\tdynamically-allocated array will also work for static arrays, thus it",
            "\tis recommended that this be the method used for general array data",
            "\tretrieval. }"
        ],
        "snippets": [
            "ListVars(",
            "\tModule, { Required. Any module or object value. This identifies the",
            "\t\tmodule where the variable list begins. }",
            "\tName, { Required. Any text value, which specifies a name to match when",
            "\t\tlisting. Wildcards are allowed. The wildcard \"?\" will match any",
            "\t\tcharacter in a name. The wildcard \"*\" will match any series of",
            "\t\tcharacters. The backslash character has special meaning, in that it",
            "\t\tcan be added in front of the characters *, ? or \\ to search for these",
            "\t\tcharacters explicitly. In these three cases, the leading backslash",
            "\t\twill be ignored. Other characters must match exactly. A leading",
            "\t\tbackslash in front of any characters other than the three noted will",
            "\t\tbe included in the search. }",
            "\tLowClass, { Required. Any numeric expression. This specifies the",
            "\t\tlowest class included in the list. Valid range is 0 to 65535. Default",
            "\t\tclass for variables is 0. See also: Variable Classes. }",
            "\tHighClass, { Required. Any numeric expression. This specifies the",
            "\t\thighest class included in the list. Valid range is 0 to 65535. Default",
            "\t\tclass for variables is 0. }",
            "\tType, { Required. Any numeric expression that specifies the type of",
            "\t\tvariable to match, as found by adding together values in the following",
            "\t\ttable: (See: Bitwise Parameters & Operations ) Type Bit No. Variable",
            "\t\tType 0 - Match all 1 0 Normal 2 1 Array 4 2 Parameter 8 3 Module }",
            "\t0, { 1 }",
            "\t2, { 4 }",
            "\t8",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Ln": {
        "comments": [
            "{ Description: Returns the natural logarithm (base e) of a value. }",
            "{ This is the inverse function to Exp. This function does calculations",
            "\twith double-precision floating point values and does not support",
            "\t64-bit integers computations. }"
        ],
        "snippets": [
            "Ln(",
            "\tX { Required. Any numeric expression. The value must be strictly",
            "\t\tgreater than 0 for the result to be valid. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "LoadDLL": {
        "comments": [
            "{ Description: Loads a Microsoft Windowsâ¢ dynamic link library.",
            "\t64-bit VTScada can load only 64-bit DLLs. 32-bit VTScada can load only",
            "\t32-bit DLLs. VTScada Internet Clients (VICs) can load only 32-bit DLLs",
            "\tregardless of whether the VTScada server is 32-bit or 64-bit. }",
            "{ Your DLL must return an object as a buffer in order for VTScada to",
            "\tbe able to read it. The return value is either the Windowsâ¢ handle of",
            "\tthe new DLL (ValueType == 38), or on failure, the least significant",
            "\t16-bits of operating system error code (ValueType < 3). There is no",
            "\tdynamic download of a DLL to the VIC. DLLs must be manually installed",
            "\ton the VIC in either the system program folder (e.g. \\Windows\\System",
            "\t32), or in a folder that is on the executable search path (the PATH",
            "\tenvironment variable). LoadDLL is a steady-state statement. If it",
            "\tstops, all VALUEs holding a copy of the DLLHandle returned from the",
            "\tLoadDLL statement will be invalidated, and if there are no other",
            "\tLoadDLLs running for the same DLL, the DLL will be unloaded. (LoadDLL",
            "\tis not an expensive operation, but it is good programming not to do",
            "\tthis very often.) Note: LoadDLL will block the calling interpreter",
            "\tthread until the DLL loaded has completed on the VIC. This means that",
            "\tnothing else will execute on the VIC session thread until the DLL load",
            "\tis complete. This has the advantage (from the programmer's",
            "\tperspective) that the DLL handle returned is immediately ready for",
            "\tuse. LoadDLL will return Invalid if there is a problem with the",
            "\tparameters, an integer error code if it cannot load the DLL, or a",
            "\tDLLHandle (ValueType ==38) if the load was successful. On failure, the",
            "\treturn value will be the least significant 16-bits of operating system",
            "\terror code (ValueType < 3). DLL calls do not need to consume the",
            "\treturn value, or have no return value should be written as such (i.e.",
            "\texplicitly specify a return type of zero to indicate that there is no",
            "\treturn value, or that the return value is irrelevant. If you specify",
            "\tother than zero for the return type, the DLL call will block the",
            "\tcalling interpret thread until the VIC has run the DLL call and",
            "\treturned the value. This means that scripts that rely on synchronous",
            "\tDLL calls will still work, even with the DLL remoted, however, they",
            "\twill slow down. If you specify a return value type of zero, a remoted",
            "\tDLL call is dispatched to the VIC asynchronously (i.e. your",
            "\tinterpreter thread will not block). If, for example, you have a",
            "\tsequence of DLL calls that will execute asynchronously, followed by",
            "\tone that is synchronous (because you want the return value), the",
            "\tcalling interpreter thread will block only on the synchronous call.",
            "\tThis may take a little longer because the order of the DLL calls is",
            "\tpreserved on the VIC, and all the asynchronous ones will have to",
            "\tcomplete execution before the synchronous one can be executed. This is",
            "\tmuch quicker than using all synchronous calls, because the",
            "\tasynchronous ones are batched together and require no reply (other",
            "\tthan a batch acknowledgment from the VIC), reducing comms latency. DLL",
            "\thandles should not be declared as shared if they are going to be",
            "\tremoted. Shared DLLs will only be created once, and so will only",
            "\toperate on the server OR client, depending upon which one started them",
            "\tfirst. }"
        ],
        "snippets": [
            "LoadDLL(",
            "\tFileName, { Required. Any text expression for the file name of the DLL",
            "\t\tto load. If the path is not specified, the standard Windows search",
            "\t\tpattern for DLLs will be used. Windows applications that load DLL's",
            "\t\twithout using a fully qualified pathname are vulnerable to DLL",
            "\t\thijacking where an attacker can place a malicious copy of the DLL in",
            "\t\tthe search path. Take care to specify the path in all cases. }",
            "\tVICRemoted { (Optional). A parameter that indicates whether the handle",
            "\t\treturned by LoadDLL will be remoted to the VIC. If VICRemoted is a",
            "\t\tvalid, non-zero, positive integer, and the LoadDLL function is being",
            "\t\texecuted in a module instance that is within a VIC session, then all",
            "\t\tDLL calls using the handle that LoadDLL returns will be remoted to the",
            "\t\tVIC. Whether the LoadDLL is in a VIC session is determined by the call",
            "\t\ttree from the module instance running the LoadDLL call. The root of",
            "\t\tthe call tree must be an instance of BrowserClient. In practical",
            "\t\tterms, this means that you cannot expect session-aware DLL calls to",
            "\t\tfunction if you explicitly launch a module with a caller other than a",
            "\t\tmodule instance within the VIC session tree. Defaults to 0 if not",
            "\t\totherwise specified. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "LoadMIB": {
        "comments": [
            "{ Description: Loads a specified MIB or set of MIBs and returns a",
            "\tdictionary describing the hierarchy of the MIBs. }"
        ],
        "snippets": [
            "LoadMIB(",
            "\tMIBPath, { Required. A path to any single MIB or a directory",
            "\t\tcontaining MIBs (possibly in further subdirectories). The returned MIB",
            "\t\tdictionary will also include those elements of the base MIBs found in",
            "\t\t<VTSInstallDir>\\MIBS that are referenced in the MIB found in MIBPath.",
            "\t\tIf Invalid, then the returned MIB dictionary will only include the",
            "\t\tbase MIBS. }",
            "\tSubIDIndexing, { An optional Boolean expression. If TRUE, then items",
            "\t\tin the returned MIB dictionary are keyed by numeric portion of the OID",
            "\t\tfor that element. If FALSE, then the items are keyed by the label for",
            "\t\tthe element. Defaults to TRUE. }",
            "\tLoadDescriptions, { An optional Boolean expression. If TRUE, then the",
            "\t\treturned MIB dictionary will contain any description for the element",
            "\t\t(which may be lengthy). If FALSE, then no description is loaded. The",
            "\t\tdefault is TRUE. }",
            "\tErrorOut { An optional variable into which any errors found in parsing",
            "\t\tthe MIBs will be returned. Will take the form of a linked list of",
            "\t\terror message structures. The message structure will contain two",
            "\t\tfields: Error, containing the error text and Next containing the next",
            "\t\terror message structure, if any. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "LoadModule": {
        "comments": [
            "{ Description: Loads a module from its .RUN files and returns a",
            "\tpointer to that module. }",
            "{ The return value is a pointer to the module. It can be used in a",
            "\tLaunch or Thread statement. The usage of the AppGUID parameter",
            "\tdetermines how the VTScada engine will treat the module load: If",
            "\tAppGUID is Invalid, this is a \"normal\" load. No special processing is",
            "\tperformed. If AppGUID is a text GUID, the load is a load of the root",
            "\tmodule for the application. This causes the loading module to become",
            "\tthe \"namespace root\" for the application. }"
        ],
        "snippets": [
            "LoadModule(",
            "\tFileName, { Required. Any text expression giving the name of the .RUN",
            "\t\tfile from which to load the module. }",
            "\tLibrary, { Required. Any module value that indicates the library",
            "\t\tmodule to which the loaded module will belong. }",
            "\tModuleName, { An optional parameter that is the text expression giving",
            "\t\tthe module's name. This name will then be associated with the module",
            "\t\twhen it is displayed in certain situations, such as in the debugger",
            "\t\tand the module tree diagram. If this parameter is invalid, the module",
            "\t\twill appear as \"System\" when its name is displayed. }",
            "\tLoadNow, { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0), the module and its entire sub-tree are loaded",
            "\t\timmediately. If false (0), the module and its subtree are loaded on",
            "\t\tdemand. The default is false. }",
            "\tAppGUID, { An optional parameter that should be included and hold the",
            "\t\ttext GUID of the application when the LoadModule is loading an",
            "\t\tapplication. }",
            "\tReserved, { Should be set to Invalid if provided. }",
            "\tTestCodeLoad { An optional parameter that has been reserved for use by",
            "\t\tthe Test Framework to indicate that the LoadModule is loading actual",
            "\t\tcode to be run. It can contain any Boolean expression that evaluates",
            "\t\tto TRUE to indicate that the code to run is being loaded. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "LocalGroup": {
        "comments": [
            "{ Description: Returns an indication of whether the current Windowsâ¢",
            "\tuser is a member of the specified local group. LocalGroup interrogates",
            "\tonly local groups, not domain groups. }"
        ],
        "snippets": [
            "LocalGroup(",
            "\tGroup { Required. The group parameter, which is a value from 0 to 5.",
            "\t\tThese values are defined in the following table: Group Local Group 0",
            "\t\tAdministrators 1 Backup Operators 2 Guests 3 Power Users 4 Replicator",
            "\t\t5 Users }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "LocalScope": {
        "comments": [
            "{ Description: Equivalent to Scope(Obj, Name, TRUE). LocalScope is",
            "\tmore clear, concise, and efficient. The Trihedral code style",
            "\tguidelines require LocalScope() as opposed to Scope(..., TRUE) for",
            "\tthese reasons. }",
            "{ This function is the same as the '.' operator, when the '.' operator",
            "\tis used between two operands. (Object.Member). As an example, the",
            "\tLocalScope() function is useful for referencing a tag object where its",
            "\tname contains special characters or spaces: TagObj = LocalScope(VTSDB,",
            "\t\"R&R Level\") }"
        ],
        "snippets": [
            "LocalScope(",
            "\tObject, { Required. Any expression for the object value where Member",
            "\t\tmay be found. }",
            "\tMember { Required. Any text expression for the member name. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Locate": {
        "comments": [
            "{ Description: Locates a text string, returning the offset of the",
            "\tfirst matching string in a buffer. }",
            "{ This function returns the buffer offset of the first string matching",
            "\tSearch. If no match is found, or if the length of Search plus Offset",
            "\tis larger than the length of Buffer, -1 is returned. The return value",
            "\tcould be used in the Offset parameter to perform successive searches.",
            "\tThis function can be used to perform fast table searches. Build a",
            "\ttable in a text variable using BuffWrite. Make sure that all entries",
            "\tin the table are the same length. You can now use Locate to find the",
            "\tbuffer offset of a matching text string. }"
        ],
        "snippets": [
            "Locate(",
            "\tBuffer, { Required. The text expression to search. }",
            "\tOffset, { Required. Any numeric expression giving the buffer offset",
            "\t\t(in characters or bytes), from which to start searching (i.e. to start",
            "\t\tat the beginning of the buffer, set this parameter to 0). }",
            "\tSearch, { Required. Any text expression for which to search. }",
            "\tMethod { An optional numeric expression that controls how the Search",
            "\t\tparameter is interpreted as per the following table. The default value",
            "\t\tfor Method is \"0\". Method Description 0 Treat Search as the exact",
            "\t\tstring for which to search (strstr). 1 Treat Search as the",
            "\t\tcase-insensitive string for which to search (stristr). 2 Treat Search",
            "\t\tas a set of characters to match against (strpbrk). 3 Treat Search as a",
            "\t\tcase-insensitive set of characters to match against. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "LocCapture": {
        "comments": [
            "{ Description: Capture Locator Input. This statement captures all",
            "\tsubsequent input from the locator device and routes it to a specific",
            "\twindow. }",
            "{ This statement captures all locator input and routes it to the",
            "\twindow containing the module instance that issued the LocCapture",
            "\tstatement. This is most useful when there are child windows present",
            "\tthat are graphically in front of the window with capture. With capture",
            "\tdisabled (the normal condition), the coordinates returned to a",
            "\tWinXLoc(Self( )) would change from being relative to the parent",
            "\twindow's coordinate origin to the child window's coordinate origin as",
            "\tthe locator moved over the child window. With capture enabled, the",
            "\tcoordinates would always be relative to the parent window's coordinate",
            "\torigin, no matter which window the locator was over. }"
        ],
        "snippets": [
            "LocCapture(",
            "\tObject, { Required. Any expression that returns an object value of a",
            "\t\twindow or an object within a window whose coordinate system is to be",
            "\t\tused for locator coordinate reports until capture is released. }",
            "\tEnable { Required. Any logical expression. If true (non-0), the",
            "\t\tlocator input will be captured by the window containing the module",
            "\t\texpressed by Object. If false (0), the locator capture is yielded. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "LocSwitch": {
        "comments": [
            "{ Description: Returns the current status of the locator (mouse)",
            "\tbuttons over the window which contains the LocSwitch statement. }"
        ],
        "snippets": [
            "LocSwitch();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Log": {
        "comments": [
            "{ Description: Returns the common logarithm (base 10) of a number. }",
            "{ The common antilogarithm can be found using the Pow function. This",
            "\tfunction does calculations with double-precision floating point values",
            "\tand does not support 64-bit integers computations. }"
        ],
        "snippets": [
            "Log(",
            "\tX { Required. Any numeric expression. The value must be strictly",
            "\t\tgreater than 0 for the result to be valid. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "LogNTEvent": {
        "comments": [
            "{ Description: Logs events to the system event log. }",
            "{ Event logs store important events for applications running on",
            "\tWindows. Because the logging function is designed to be general",
            "\tpurpose, you must decide what information is appropriate to log. As a",
            "\tgeneral rule, you should only log information that could be useful in",
            "\tdiagnosing a hardware or software problem. The event logging facility",
            "\tis not intended to be used as a tracing tool. Event logging consumes",
            "\tsystem resources such as disk space and processor time. The amount of",
            "\tdisk space that an event log requires depends on how much information",
            "\tyou choose to log. For this reason, it is important to log only",
            "\tessential information. Following, are some Microsoft guidelines",
            "\tregarding the types of events you may wish to log for each severity",
            "\tInformational Information events indicate significant successful",
            "\toperations that occur infrequently. It is not generally considered",
            "\tappropriate for an application to log an event each time it starts.",
            "\tWarning Warning events indicate problems that are not immediately",
            "\tsignificant, but that may indicate conditions that could cause",
            "\tproblems in the future. Generally, if an application can continue or",
            "\trecover from an event without loss of functionality or data, it can",
            "\tclassify the event as a warning. Error Error events indicate",
            "\tsignificant problems about which the user should know. Error events",
            "\tusually result in or from the loss of functionality or data. Audit",
            "\tFailure When a security access attempt fails, it is considered an",
            "\taudit failure. A failed logon attempt is a failure audit event. Audit",
            "\tSuccess When a security access attempt succeeds, then it is a success",
            "\taudit event. For example, a successful logon attempt is a success",
            "\taudit event. For more information on NT Event Logging, please see the",
            "\tMicrosoft MSDN documentation. The only required parameters for",
            "\tLogNTEvent are the severity code (Severity) and the string or array of",
            "\tstrings to log with the event (Strings) You may optionally specify:",
            "\tThe application event Source (the default value is \"VTScada\"). The",
            "\tCategory (numeric starting at \"1\", where \"0\" is the \"none\" category).",
            "\tThe default is \"0\" (none). The EventID (numeric, generally starting at",
            "\t1000 or so to not conflict with the category numbers. The first and",
            "\tonly defined EventID for source \"VTScada\" is \"1001\", which simply",
            "\tdisplays the passed-in string). Data and Datasize (used to store",
            "\tbinary data with the event). DataSize should be the size, in bytes, of",
            "\tthe Data array. Data is any array of binary data to be stored along",
            "\twith the event. And UNCServerName, which is the machine to which to",
            "\tlog the event (the default is Invalid, which results in the event",
            "\tbeing logged on the local machine. Otherwise, you may specify the UNC",
            "\tname for the machine to which you would like the event logged ). Note",
            "\tthat specifying values other than the defaults for Source or EventID",
            "\twill result in the event log displaying the event improperly, unless a",
            "\tcustom DLL is written to handle the case. However, this does not",
            "\tprevent the event from being logged, and a custom DLL can be added at",
            "\ta later time. }"
        ],
        "snippets": [
            "LogNTEvent(",
            "\tSeverity { Required. A numeric code indicating the type of event to",
            "\t\tlog. Severity can be one of: Severity Event 0 Informational 1 Warning",
            "\t\t2 Error 3 Audit Success (Security Event) 4 Audit Failure (Security",
            "\t\tEvent) }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "LogOff": {
        "comments": [
            "{ Description: Logs the calling user session off. }"
        ],
        "snippets": [
            "\\SecurityManager\\LogOff();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "LookUp": {
        "comments": [
            "{ Description: Looks up a value in an array and returns the index of",
            "\tthe element containing that value. This function replaces the",
            "\tdeprecated TextSearchList and SearchForListItem system modules. }",
            "{ It is acceptable for the array to contain invalid values - these",
            "\twill be skipped over in the search for Match. The return value will be",
            "\tinvalid if the value of Match isn't found in the array. Note that",
            "\tTextSearch should be used for large arrays due to its considerably",
            "\tfaster search algorithm. }"
        ],
        "snippets": [
            "Lookup(",
            "\tArrayElem, { Required. Any array element giving the starting index for",
            "\t\tthe array operation. The index for the array may be any numeric",
            "\t\texpression. If processing a multidimensional array, the usual rules",
            "\t\tapply to decide which dimension should be examined }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to compute. If N extends past the upper bound of the lowest",
            "\t\tarray dimension, this computation will \"wrap-around\" and resume at",
            "\t\telement 0, until N elements have been processed. }",
            "\tMatch, { Required. Any value of any type to look for in the array. In",
            "\t\tthe case of text, the search is case sensitive. If this value is",
            "\t\tinvalid, the return value will also be invalid. }",
            "\tCaseInsensitive { An optional parameter that is any logical",
            "\t\texpression. If true (non-0) and the array contains text strings, the",
            "\t\tcomparison will not be case sensitive. If false (0), the comparison",
            "\t\twill be case sensitive for text strings. The default is false. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "LValue": {
        "comments": [
            "{ Description: Left-hand Side Value. This function returns an",
            "\tindication of whether its argument can be used on the left-hand side",
            "\tof an assignment. }",
            "{ This is a compiler function that returns 1 (true) if data can be",
            "\tstored into Expr (i.e. if it is a variable, etc.) and 0 otherwise. }"
        ],
        "snippets": [
            "LValue(",
            "\tExpr { Required. Any expression. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MACID": {
        "comments": [
            "{ Description: Enumerates and returns the MAC IDs registered on a",
            "\tparticular machine. }",
            "{ MACIDs are unique to the NIC cards present within the machine but",
            "\tare NOT guaranteed to be unique for the virtual NICs generated for",
            "\tthings like virtual machines or NIC emulations. The name of the",
            "\tresource that generated the ID is provided with each ID to help sift",
            "\tout faux MACs. Note that Windows appears to always provide the real",
            "\tMACs first, and since almost all machines have a built-in NIC the",
            "\tfirst MAC can be assumed to be real. }"
        ],
        "snippets": [
            "MACID();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "MakeAlarmRecordSpeechFile": {
        "comments": [
            "{ Description: Creates a .wav file given an alarm record. }",
            "{ It also works out the length of the audio file. If the voice file",
            "\tfails to generate, then use the default voice file. The .wav file",
            "\taudibly speaks the alarm. Wait for VoiceReady to be TRUE before",
            "\tplaying VoiceFileName }"
        ],
        "snippets": [
            "\\AlarmManager.MakeAlarmRecordSpeechFile(",
            "\tAlarmRecord, { Required An Alarm Record Structure to be used as the",
            "\t\tbasis for voice file generation }",
            "\tpVoiceFilename, { Required text. (Pointer) Holds the voice filename -",
            "\t\tReturn variable. }",
            "\tpVoiceLength, { Required numeric. (Pointer) Holds the length of the",
            "\t\tvoice file in seconds - Return variable. }",
            "\tpVoiceReady, { Required Boolean (Pointer) Set to TRUE when voice file",
            "\t\tgeneration is complete - Return variable. }",
            "\tTemplate, { Optional text. Speech template. (See More Information...",
            "\t\tlater in this topic) }",
            "\tpError { Optional Boolean (Pointer) Error pointer - Return variable. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "MakeArray": {
        "comments": [
            "{ Description: Create and initialize a one-dimensional array with one",
            "\tline of code. }",
            "{ A maximum of 100 elements can be provided. Multi-dimensional arrays",
            "\tcan be created by calling MakeArray() for each of the elements. If the",
            "\tMakeArray() call is passed as a function argument, a temporary array",
            "\tis created and will be destroyed when the function ends. This module",
            "\tis a member of the System Library, and must therefore be prefaced by",
            "\t\\System. as shown in the \"Format\" section. If your application",
            "\tpredates version 11.2, use the backslash notation rather than dot:",
            "\t\\System\\ }"
        ],
        "snippets": [
            "\\System.MakeArray(",
            "\tElem1, Elem2 { Elements for the new array }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "MakeBitmap": {
        "comments": [
            "{ Description: Loads an image file of types BMP, EMF, WMF, APM, CUT,",
            "\tPCX, JPG, PNG, or TIF into memory and returns a handle to the result.",
            "\tReturns Invalid upon failure. }",
            "{ This function creates and returns an image value by loading an image",
            "\tfrom a file. All images are rendered in 32-bit color. An indexed color",
            "\tmust translate into an exact 32-bit match to cause transparency.",
            "\tColors may have their own transparency data via alpha values. Using an",
            "\timage value can improve speed and reduce memory requirements over",
            "\tusing a file name directly in a function or statement. EMF/WMF images",
            "\twill not display in the Anywhere Client. }"
        ],
        "snippets": [
            "MakeBitmap(",
            "\tFileName, { Required. Any text expression giving the name of the file",
            "\t\tcontaining the image. A known path Known Path Aliases for File-Related",
            "\t\tFunctions may be provided in the form, :{KnownPathAlias}. }",
            "\tTransparent1 { An optional parameter giving the first color value to",
            "\t\tmake transparent. Any of the following may be used: a palette index",
            "\t\tVTScada Color Palette a system color (constant) an RGB string in the",
            "\t\tformat, \"<RRGGBB>\" If this value is negative 1 (-1), this parameter is",
            "\t\tignored and no first color is made transparent. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MakeBuff": {
        "comments": [
            "{ Description: Creates a buffer and returns its address. }",
            "{ This function can be used to create buffers for BuffWrite or similar",
            "\tfunctions that require an existing buffer. The return value is an",
            "\taddress to a buffer of Length bytes, with each byte equal to Value. If",
            "\tthe two parameters are integer constants and the buffer length is no",
            "\tmore than 256 bytes, the compiler will convert this statement",
            "\tinternally to a constant text string for speed at execution time. The",
            "\tmaximum buffer size is 0x7FFFFFFF (2, 147,483,648) characters. Any",
            "\tsize larger than this will result in an invalid value. }"
        ],
        "snippets": [
            "MakeBuff(",
            "\tLength, { Required. Any numeric expression giving the length (number",
            "\t\tof bytes) of the buffer to create. This value must be between 0 and",
            "\t\t0x7FFFFFFF. }",
            "\tValue { Required. Any numeric expression giving the initial value from",
            "\t\tthe ASCII Character Set for every byte in the new buffer (see \"ASCII",
            "\t\tCharacter Set\"). It must be in the range 0 to 255. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MakeCall": {
        "comments": [
            "{ Description: This subroutine queues a call request. }",
            "{ Returns one if the call is successfully queued. If a zero is",
            "\treturned, the call has not been queued, and will not be queued. As",
            "\tsoon as MakeCall() is called, the tag's DataPort variable is set to a",
            "\tvalid value. This value will be changed many times subsequently, but",
            "\twill remain valid until the call is completed or canceled. Shortly",
            "\tafter calling MakeCall(), DataPort will become a pointer to an array.",
            "\tThis indicates that the call is queued. When call setup is initiated,",
            "\tDataPort will become an integer value >= \"0\". Should the call fail in",
            "\tany way, then DataPort will become negative. If the call setup",
            "\tcompletes successfully, then DataPort will change to a Stream value",
            "\t(ValueType(DataPort)==8). The call requestor may now read and write to",
            "\tthat stream to communicate with the called party. To hang-up the call,",
            "\tcall CloseStream(). If the other end hangs up or the call fails, then",
            "\tDataPort will go invalid. If the call setup fails, then the call will",
            "\tbe retried according to the configured retry settings. If the call is",
            "\tretried, then DataPort will again become an array pointer while the",
            "\tcall is queued. DataPort will not go Invalid until the call is",
            "\tabandoned. If the originator requires that a call be canceled before",
            "\tit is completed, then the CancelCall() method should be used. If the",
            "\toriginator changes the DataPort value, the effect is undefined. }"
        ],
        "snippets": [
            "\\ModemManager\\MakeCall(",
            "\tPhoneNumber, { Any text expression for the phone number to be called.",
            "\t\tIf required, this may be the canonical international format. }",
            "\tBaud, { Any numeric expression giving the baud rate to be used on the",
            "\t\tmodem connection. The baud rate must be in the range of 0 to 115200,",
            "\t\tand must divide evenly into 115200 with no more than a 2.5% error. The",
            "\t\tvalue of \"0\" has special significance. This corresponds to the maximum",
            "\t\tbaud rate available for the particular device. See Baud Rate. }",
            "\tDataBits, { Any numeric expression giving the number of data bits per",
            "\t\tcharacter to be used on the modem connection. DataBits must be 5, 6,",
            "\t\t7, or 8. }",
            "\tStopBits, { Any numeric expression giving the number of stop bits per",
            "\t\tcharacter to be used on the modem connection. StopBits must be 1 or 2.",
            "\t\t}",
            "\tParity { Any numeric expression giving the parity checking to be used",
            "\t\ton the modem connection. This may be one of: Value Parity 0 No parity",
            "\t\t1 Odd parity 2 Even parity 3 0 Stick (space parity) 4 1 Stick (mark",
            "\t\tparity) }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "MakeDAG": {
        "comments": [
            "{ Description: Constructs a Directed Acyclic Graph (DAG - an internal",
            "\tfunction representation). }",
            "{ This function constructs a Directed Acyclic Graph (an internal",
            "\tfunction representation). This may be used to build up a function or",
            "\tstatement without compiling. This is only intended to be used to",
            "\tdefine a new VTScada code syntax. }"
        ],
        "snippets": [
            "MakeDag(",
            "\tOpcode, { Required. Any numeric expression for the opcode of the DAG",
            "\t\tto construct. }",
            "\tParms { Required. Any numeric expression that indicates the number of",
            "\t\tadditional parameters to be included in the new DAG. This is normally",
            "\t\t0, except in cases such as a new FWrite DAG. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "MakeDictionary": {
        "comments": [
            "{ Description: Create and initialize a dictionary with one line of",
            "\tcode. }",
            "{ Up to 50 key + value pairs can be provided as parameters. If the",
            "\tMakeDictionary() call is passed as a function argument, a temporary",
            "\tdictionary is created and will be destroyed when the function ends.",
            "\tThis module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ }"
        ],
        "snippets": [
            "\\System.MakeDictionary(",
            "\tKey1, { The first key of the dictionary }",
            "\tValue1 { Value for that key }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "MakeEditor": {
        "comments": [
            "{ Description: Returns an editor value which is used by an editor }"
        ],
        "snippets": [
            "MakeEditor();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "MakeIPMask": {
        "comments": [
            "{ Description: Make an IP MaskSet that can then be passed into",
            "\tCheckIPMask and IPMaskToText, by returning text holding the encoded",
            "\tbinary IP address and mask. Works for IPv4 and IPv6. }",
            "{ For advanced use only. As a general process, use MakeIPMask to",
            "\tgenerate a MaskSet that can then be passed into CheckIPMask and",
            "\tIPMaskToText. Use to generate a value that can then be fed into",
            "\tCheckIPMask to verify if an IP address is in the set of subnet ranges",
            "\tspecified by the mask set built by this function. In typical usage,",
            "\tOldMaskSet would initially be Invalid and a new MaskSet created as a",
            "\tresult of the first call. Each time a successful call is made, the",
            "\tMaskSet grows by a fixed size (32 bytes), being 16 bytes of binary IP",
            "\taddress 16 bytes of matching mask bits, held in a binary buffer. IPv4",
            "\taddresses/masks are expanded into IPv4-mapped IPv6 addresses to make",
            "\tthem the same size. No ordering or coalescence is done to reduce the",
            "\tmask to the minimum set needed. An Invalid IPAddress parameter simply",
            "\tresults in the first parameter (mask set) being returned unchanged. A",
            "\tbad one has no effect. This also means that this statement can be used",
            "\tto check the syntactic validity of an IP address or CIDR notation by",
            "\tpassing Invalid for the OldMaskSet and checking the return value is",
            "\tvalid. }"
        ],
        "snippets": [
            "MakeIPMask(",
            "\tOldMaskSet, { Required. The result of previous calls to this method,",
            "\t\tor Invalid when starting afresh. }",
            "\tIPAddress, { Required. This can be a single IP address, in which case",
            "\t\tthe Mask parameter will be used if valid, OR an IP subnet address.",
            "\t\tIPv4 and IPv6 both have their subnet representations and either is",
            "\t\tacceptable here, as are IPv4-mapped IPv6 addresses. }",
            "\tMask { Optional text. An optional IP mask, used as an alternative way",
            "\t\tof specifying a subnet range, in conjunction with a non-CIDR IPv4 or",
            "\t\tIPv6 second parameter. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "MakeNonPersistent": {
        "comments": [
            "{ Description: Takes a variable and makes it not persistent. }",
            "{ A persistent variable saves its current value on disk and is",
            "\tautomatically restored upon restarting the module. This function will",
            "\talso make the variable not shared. See MakeNonShared for the results",
            "\tof making the variable a non-shared value. The variable will be",
            "\tremoved from the persistent (.VAL) file as well. }"
        ],
        "snippets": [
            "MakeNonPersistent(",
            "\tVariable { Required. Any expression for the variable value. This value",
            "\t\tis typically returned from a FindVariable or an AddVariable call. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MakeNonShared": {
        "comments": [
            "{ Description: Takes a shared variable and makes it not shared. }",
            "{ A shared variable has the same value for all instances of its owning",
            "\tmodule. An instance will be created for the variable in every running",
            "\tinstance where the variable is used. The instance will be initialized",
            "\twith the value of the shared variable. If Variable is a module value,",
            "\tit will be unaffected. }"
        ],
        "snippets": [
            "MakeNonShared(",
            "\tVariable { Required. Any expression for the variable value. This value",
            "\t\tis typically returned from a FindVariable or an AddVariable call. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MakeParmPhrase": {
        "comments": [
            "{ Description: Returns a \\ParmPhrase structure given a phrase key and",
            "\tparameters. }",
            "{ MakeParmPhrase returns a structure of parameterized phrase",
            "\tinformation for use in tag parameters. It must be used when creating",
            "\tnon-optimized tag parameter expressions for properties that take a",
            "\tPhraseID as a parameter (for example, Description or Units) For",
            "\toptimized parameter expressions, \\ParmPhrase() is the preferred method",
            "\tof building a parameterized phrase structure and should be used",
            "\tinstead. Refer to Phrases in tag parameters Do not use for text drawn",
            "\ton a page. Instead, use \\GetParmPhrase(...) or",
            "\t\\GetPhrase(\\MakeParmPhrase(...)) as applicable. As a specialized",
            "\tuse-case, MakeParmPhrase also supports the use of translation",
            "\tdictionaries for any of its parameters. Use the following information",
            "\tonly in the rare case that a standard .csv file of static translations",
            "\tis not suitable. Translation dictionaries should take the following",
            "\tform, which is used in place of a PhraseKey:",
            "\tSystem.MakeDictionary(\"en\", \"hello\", \"fr\", \"bonjour\", \"es\", \"hola\");",
            "\tMakeParmPhrase will then return the translation corresponding to the",
            "\tuser's current language. If the dictionary does not include a",
            "\ttranslation for the user's current language but does for the default",
            "\tlanguage, then the default will be returned. If that also does not",
            "\texist, then it returns \"Missing translation\" (language dependent).",
            "\tNote that the phrase may not update dynamically when the content for a",
            "\tgiven key in the dictionary changes. Translation dictionaries should",
            "\tnot be used in most applications. }"
        ],
        "snippets": [
            "\\MakeParmPhrase(",
            "\tPhraseID, { Required text. The key for a parameterized phrase. }",
            "\tP1, { Required text. By definition, a parameterized phrase requires at",
            "\t\tleast one parameter. }",
            "\tP2 - P10 { Optional text. A parameterized phrase can have up to 10",
            "\t\tparameters. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MakePersistent": {
        "comments": [
            "{ Description: Takes a variable and makes it persistent (static). }",
            "{ Because a variable can not be persistent without being shared as",
            "\twell it will make Variable shared. (see MakeShared for the results of",
            "\tthis). If the variable is already persistent,. there will be no change",
            "\tmade to the variable. In particular, the persistent size of the",
            "\tvariable will not change. }"
        ],
        "snippets": [
            "MakePersistent(",
            "\tVariable, { Required. Any expression for the variable value. This",
            "\t\tvalue is typically returned from a FindVariable or an AddVariable",
            "\t\tcall. }",
            "\tSize { Required. Any numeric expression giving the number of bytes of",
            "\t\tstorage allocated in the .VAL persistent variable file for this",
            "\t\tvariable. For array types, set this to the byte size of the largest",
            "\t\tarray element (normally 8 bytes for numeric values). For arrays",
            "\t\tcontaining text, enter the character length of the longest string",
            "\t\telement. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MakeSelfSignedCertificate": {
        "comments": [
            "{ Description: Creates a new self-signed certificate. }",
            "{ This statement creates a self-signed certificate. A self-signed",
            "\tcertificate is one that has no chain of trust and, hence, to be",
            "\ttrusted requires to be installed in a trusted root store or (better)",
            "\tthe software that uses it is explicitly allowed to trust it. The",
            "\tissuer name written into the self-signed certificate is the same as",
            "\tthe Common Name field in the Subject parameter. The Subject parameter",
            "\thas a familiar form to many other certificate generation packages. It",
            "\tis a sequence of: <identifier>=<value> separated by semi-colons, where",
            "\tidentifier is one of the RFC 5280/X.520-specified fields. For example:",
            "\tCN=LPoint;O=Trihedral;OU=Engineering defining the Common Name as",
            "\t\"LPoint\", the Organization as \"Trihedral\" and the Organizational Unit",
            "\tas \"Engineering\". The KeyAlgorithm and HashAlgorithm are the Microsoft",
            "\tCryptography Next Generation (CNG) algorithm names. For example \"RSA\"",
            "\tis a valid KeyAlgorithm and \"SHA256\" is a valid HashAlgorithm. The",
            "\tValidityPeriod is expressed in days from the time of certificate",
            "\tcreation. KeyStrength specifies the length of the key, in bits. For",
            "\tRSA this should be at least 2048 bits. Larger sizes are permitted but",
            "\tnot commonly used at present. KeyUsage is a set of bit values that",
            "\tspecify the intended usages for the private / public key pair. These",
            "\tare defined as: Constant #KeyUsageSignature = 0x80; Constant",
            "\t#KeyUsageNonRepudiation = 0x40; Constant #KeyUsageKeyEncipherment =",
            "\t0x20; Constant #KeyUsageDataEncipherment = 0x10; Constant",
            "\t#KeyUsageKeyAgreement = 0x08; Constant #KeyUsageCertSign = 0x04;",
            "\tConstant #KeyUsageCRLSign = 0x02; Constant #KeyEncipherOnly = 0x01;",
            "\tThese bits are combined for use with a certificate. RFC 5280 describes",
            "\tthese bits and their purpose. For example, a combination of 0xF0 is",
            "\ttypically used for client authentication purposes. EKU is a text value",
            "\tor an array of text values that define Extended Key Usages (sometimes",
            "\tcalled Enhanced Key Usages) that the keys are intended for. The text",
            "\tvalues are Object Identifiers (OIDs). Commonly used ones include:",
            "\tServer authentication 1.3.6.1.5.5.7.3.1 Client authentication",
            "\t1.3.6.1.5.5.7.3.2 Code signing 1.3.6.1.5.5.7.3.3 SAN is a text value",
            "\tor an array of text values that define Subject Alternative Names to be",
            "\twritten into the certificate. These are specified in the form:",
            "\t<identifier>=<value> where <Identifier> is one of \"DNS\" or \"URL\".",
            "\tSupport for other types may be added in the future. Value is a string",
            "\trepresenting the value. }"
        ],
        "snippets": [
            "MakeSelfSignedCertificate(",
            "\tMachineStore, { Required Boolean. If TRUE (non-zero) attempts to find",
            "\t\tthe certificate in a store in the Local Computer certificate hive. If",
            "\t\tFALSE (zero) attempts to find a certificate in a store in the Current",
            "\t\tUser certificate hive. }",
            "\tStoreName, { Required text. The name of the store in which to search",
            "\t\tfor the certificate. }",
            "\tSubject, { Required text. The subject that will be written into the",
            "\t\tcertificate. }",
            "\tKeyAlgorithm, { Optional text. The name of the algorithm used with the",
            "\t\tpublic / private key pair and to sign the certificate. }",
            "\tHashAlgorithm, { Optional text. The name of the algorithm used to hash",
            "\t\tthe certificate prior to signing. }",
            "\tValidityPeriod, { Optional numeric. The number of days for which the",
            "\t\tnew certificate will be valid. }",
            "\tKeyStrength, { Optional numeric. The key strength in bits. }",
            "\tKeyUsage, { Optional numeric. The permitted usages for the private /",
            "\t\tpublic key pair. }",
            "\tEKU, { Optional text or array of text values. The Extended Key Usages",
            "\t\tpermitted for the private / public key pair. }",
            "\tSAN { Optional text or array of text values. A set of Subject",
            "\t\tAlternative Names to be written into the certificate. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "MakeShared": {
        "comments": [
            "{ Description: Takes a variable and makes it shared. }",
            "{ There will only be one instance of the variable's value so anywhere",
            "\tthe variable is set it will set it for all uses. Care must be",
            "\texercised that by making a variable shared you do not create a \"double",
            "\tset\" on the variable (i.e. setting it in two different statements at",
            "\tthe same time). If you do the result will be that the variable will",
            "\tbecome invalid. For more information on double sets see the \"Variable\"",
            "\tsection in Chapter 3. If Variable is a module value, it will be",
            "\tunaffected. }"
        ],
        "snippets": [
            "MakeShared(",
            "\tVariable { Required. Any expression for the variable value. This value",
            "\t\tis typically returned from a FindVariable or an AddVariable call. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MakeValidFName": {
        "comments": [
            "{ Description: Create a file name that is guaranteed to contain only",
            "\tlegal characters. }",
            "{ Any characters in FileName that cannot be used in a file name will",
            "\tbe traded for a unique, two-character set: the Delete character (7F)",
            "\tfollowed by an integer. The integer increments with each successive",
            "\treplacement. It is important that the parameter FileName not contain",
            "\tthe Delete character. This function was designed to deal with the",
            "\tsituation of saving (new format) tags to a database for later",
            "\tretrieval. Defined at the VTScada level - not available to script",
            "\tapplications. }"
        ],
        "snippets": [
            "\\MakeValidFName(",
            "\tFileName { Required. Any string to be turned into a valid file name. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "MapDraw": {
        "comments": [
            "{ Description: Draws a \"slippy\" map, showing a list of site tags as",
            "\tpins on that map. }",
            "{ The zoom factor corresponds to the tile set that should be used",
            "\twithin the area of the map. To zoom in or zoom out means switching to",
            "\ta tile set that shows a greater or lesser amount of detail, and",
            "\ttherefore a corresponding smaller or larger area of geography. Tiles",
            "\tare downloaded on request from the url specified in the property,",
            "\tSlippyMapRemoteTileSource1, found in Setup.INI file If a sites array",
            "\tto be used, it is created by first making a call to",
            "\tGetSessionContainers. This returns an array of tag names to be used.",
            "\tThis is used as the basis for a new array that contains structures for",
            "\teach site, build using the site's latitude, longitude and a call-back",
            "\tto a method for drawing the site. The structure of the array is",
            "\tdefined as follows: {***** Structure that holds information for",
            "\tdrawing a Site on a map *****} MapSite Struct [ PtrLatitude { Pointer",
            "\tto site's latitude in decimal degrees }; PtrLongitude { Pointer to",
            "\tsite's longitude in decimal degrees }; Callback { Scope where",
            "\tDraw(MapObj, Lat, Lon) is called to draw marker on map}; ]; The",
            "\tfollowing example shows how this would be done. }"
        ],
        "snippets": [
            "\\MapDraw(",
            "\tLatitude, { Optional numeric expression specifying the Y-axis center",
            "\t\tof the map. If not provided, the calculated center of all sites to be",
            "\t\tdrawn on the map will be used. }",
            "\tLongitude, { Optional numeric expression specifying the X-axis center",
            "\t\tof the map. If not provided, the calculated center of all sites to be",
            "\t\tdrawn on the map will be used. If there are no sites to display on the",
            "\t\tmap, the initial display will be centered on North America. }",
            "\tSites, { Optional array of sites to display. Each site item in the",
            "\t\tarray must be a structure, containing valid pointers for latitude,",
            "\t\tlongitude and a callback object. See comments. }",
            "\tInitZoom, { Optional numeric expression, specifying the initial zoom",
            "\t\tfactor to use for the map. Ranges from 2 to 18. If not specified, the",
            "\t\tmaximum zoom level (smallest area) that encompasses all the sites will",
            "\t\tbe used. }",
            "\tMinZoom, { Optional numeric expression, setting the lowest permitted",
            "\t\tzoom level (corresponding to the set of the largest tiles to be used,",
            "\t\tin the sense of maximum displayed area per tile). }",
            "\tMaxZoom, { Optional numeric expression, setting the greatest permitted",
            "\t\tzoom level (corresponding to the set of the smallest tiles to be used,",
            "\t\tin the sense of minimum displayed area per tile). }",
            "\tUserInput, { Optional Boolean. Set FALSE to disable user input.",
            "\t\tAffects only the map, not pins on the map. Defaults to TRUE. }",
            "\tDisableTools, { Optional bit-wise value controlling which tools are",
            "\t\tdisabled. Default to zero - all tools enabled. (See: Bitwise",
            "\t\tParameters & Operations ) Bit # Tool disabled 0 Zoom tools 1 Reset",
            "\t\ttool 2 Style tool }",
            "\t0, { 1 }",
            "\t2 { Reserved }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "MatchKeys": {
        "comments": [
            "{ Description: Returns true if the specified keyboard keys have been",
            "\tpressed in the sequence given. }"
        ],
        "snippets": [
            "MatchKeys(",
            "\tEnable, { Required. Any numeric expression that enables the function.",
            "\t\tTesting of keyboard input is enabled when this parameter is true (i.e.",
            "\t\tnot 0). If it is 0 (false), then the function's value is false. In",
            "\t\taddition, the Enable parameter controls the type of comparison done.",
            "\t\tIf the Enable is 1, a case-sensitive match is made. If the Enable is",
            "\t\t2, then the match is not case-sensitive. (Any non-zero value other",
            "\t\tthan 2 will cause a case-sensitive match. The use of 1 and 2 is",
            "\t\trecommended for clarity.) }",
            "\tKeys { Required. A text expression giving the key sequence to watch",
            "\t\tfor. The case of individual letters may be significant, depending on",
            "\t\tthe Enable parameter. To generate extended keys that are not already",
            "\t\tavailable as constants defined in the system layer, use MakeBuff to",
            "\t\tturn the character code(s) into a text expression. For example: PageUp",
            "\t\t= Concat(MakeBuff(1, 253), MakeBuff(1, 0x49)); F2 =",
            "\t\tConcat(MakeBuff(1,253), MakeBuff(1,60)); F3 = Concat(MakeBuff(1,253),",
            "\t\tMakeBuff(1,61)); CtrlZKey = MakeBuff(1, 26); }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Max": {
        "comments": [
            "{ Description: Returns the maximum of a group of parameters. }",
            "{ The order of the values is irrelevant. If any of the parameters is",
            "\tinvalid, the return value is invalid also. }"
        ],
        "snippets": [
            "Max(",
            "\tParm1, Parm2, Parm3, ... { Required. Any number of parameters giving",
            "\t\tany numeric expressions, from which a maximum value will be selected.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MCSInstance": {
        "comments": [
            "{ Description: Module Calling Structure Instance. This function",
            "\treturns the object value of a module called by another module. }"
        ],
        "snippets": [
            "MCSInstance(",
            "\tCode { Required. The code value in which the module call is embedded.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MCSMod": {
        "comments": [
            "{ Description: Module Calling Structure Module. This function returns",
            "\tthe module value from a line of code that calls that particular",
            "\tmodule. }",
            "{ This is an advanced function for use in writing and implementing the",
            "\tmain toolbar. }"
        ],
        "snippets": [
            "MCSMod(",
            "\tCode { Required. The code value in which the module call is embedded.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Mean": {
        "comments": [
            "{ Description: Returns the mean (average) of a portion of a numerical",
            "\tarray. }",
            "{ Invalid array elements are not included as part of the calculation,",
            "\tunless there are no valid numerical array elements in the specified",
            "\trange, in which case the function returns invalid. Invalid is also",
            "\treturned if either parameter is invalid, or if the number of elements",
            "\tto use is 0. }"
        ],
        "snippets": [
            "Mean(",
            "\tArrayStart, { Required. Any numeric array element giving the starting",
            "\t\telement of the array. The index for the array may be any numeric",
            "\t\texpression and specifies the starting point for the array search. If",
            "\t\tprocessing a multi-dimensional array, the usual rules apply to decide",
            "\t\twhich dimension should be examined. }",
            "\tN { Required. Any numeric expression giving the number of array",
            "\t\telements to use starting at the element given by the first parameter.",
            "\t\tIf N extends past the upper bound of the lowest array dimension, this",
            "\t\tcomputation will \"wrap-around\" and resume at element 0, until N",
            "\t\telements have been processed. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MemIn": {
        "comments": [
            "{ Description: Returns a byte, word, or longword of RAM memory. }",
            "{ This function requires that the VTSIO driver be installed. This is a",
            "\thigh priority function. If used in a statement or action trigger, it",
            "\twill be evaluated at a very fast rate. MemIn should be used sparingly",
            "\tto avoid reduced system performance. In certain cases, the registry",
            "\tmay need to be modified to allow access to the memory location. }"
        ],
        "snippets": [
            "MemIn(",
            "\tAddress, { Required. Any numeric expression which gives the RAM",
            "\t\taddress to read. This may be specified using the @ operator. }",
            "\tType { Required. Any numeric expression giving the type of read to",
            "\t\tperform. Type Read Type 0 Read 8 bit byte 1 Read 16 bit word 2 Read 32",
            "\t\tbit long word }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Memory": {
        "comments": [
            "{ Description: Returns the amount of memory that VTScada has acquired",
            "\tfrom the OS heap for internal use. }"
        ],
        "snippets": [
            "Memory(",
            "\tReserved, { Leave blank or set to Invalid if using the second",
            "\t\tparameter. }",
            "\tJustThisBubble { Optional Boolean. Set to TRUE to get just the memory",
            "\t\tuse for the current bubble. FALSE (the default) gets the global memory",
            "\t\tuse across all of VTScada. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "MemOut": {
        "comments": [
            "{ Description: Writes a byte, word, or longword of RAM memory. }"
        ],
        "snippets": [
            "MemOut(",
            "\tAddress, { Required. Any numeric expression that gives the RAM address",
            "\t\tto write. This may be specified using the @ operator. }",
            "\tType { Required. Any numeric expression giving the type of write: Type",
            "\t\tWrite Type 0 Write 8 bit byte 1 Write 16 bit word 2 Write 32 bit long",
            "\t\tword }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MemTrace": {
        "comments": [
            "{ Description: Writes memory allocation information to a file. }",
            "{ If the file was generated, TRUE is returned, otherwise, FALSE is",
            "\treturned. This function traces only the memory used by the bubble that",
            "\tcalls the MemTrace function. In most cases, this will be the top-level",
            "\tSystem bubble. If you want to trace memory across multiple bubbles,",
            "\tcall MemTrace with ApendMode FALSE in the first bubble, and then call",
            "\tit in each other bubble (one at a time) with the parameter set to",
            "\tTRUE. }"
        ],
        "snippets": [
            "MemTrace(",
            "\tTracefile, { Required. Any text expression for the name of the file to",
            "\t\tgenerate. }",
            "\tLowstamp, { Required. The low timestamp range specifier. Defaults to 0",
            "\t\tif Invalid. }",
            "\tHighstamp, { Required. The high timestamp range specifier. Defaults to",
            "\t\t1E99 if Invalid. }",
            "\tLowsize, { Required. The low size range specifier. Defaults to 0 if",
            "\t\tInvalid. }",
            "\tHighsize, { Required. The low size range specifier. Defaults to",
            "\t\t0xFFFFFFFF if Invalid. }",
            "\tLowID, { Required. The low caller id range specifier. Defaults to",
            "\t\t0x0000 if Invalid. }",
            "\tHighID, { Required. The high caller id range specifier. Defaults to",
            "\t\t4096 if Invalid. }",
            "\tDone, { Required. A return variable, which will be set TRUE after the",
            "\t\tmemory trace file has been written. MemTrace is a threaded function. }",
            "\tAppendMode { Optional Boolean. When TRUE, causes the function to skip",
            "\t\twriting the output file's header and appends to the output file rather",
            "\t\tthan rewriting it. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Merge": {
        "comments": [
            "{ Description: Applies a set of changes (the output of a Diff",
            "\toperation) to a buffer. }",
            "{ The source buffer must be identical to the origin buffer used to",
            "\tcreate the Diff buffer in the first place. This operation cannot fail,",
            "\tbut will produce unexpected results if either input buffer is corrupt",
            "\tor if the wrong origin buffer is used. This function is synchronous",
            "\tand returns the result of the operation. The operations in the",
            "\tDiffBuff are formatted as follows: The low 31 bits of the first four",
            "\tbytes hold the length of the data portion, measured in bytes. The",
            "\thighest bit of those first four bytes will be a 0 to indicate that",
            "\tthis is a delete operation or a 1 to indicate that this is an add",
            "\toperation. The next four bytes hold the offset into the source buffer",
            "\twhere the operation should take place. The final \"length\" bytes (where",
            "\tlength was defined in the first 31 bits) hold the data to be added in",
            "\tthe case that this is an add operation. \"DiffBuff\" could be the result",
            "\tfrom the Diff function. Merge assumes that the diffs in DiffBuff are",
            "\tordered and correct, hence does no checking for offsets outside",
            "\tSourceBuff, etc. It is the responsibility of the caller to get it",
            "\tright. Merge relies on \"Modify\" operations being ordered as an \"Add\"",
            "\tin a particular location followed by a \"Delete\" in the same location.",
            "\tThis is the ordering generated by the Diff function. Reversing the",
            "\torder will cause undesirable results. }"
        ],
        "snippets": [
            "Merge(",
            "\tSourceBuff, { Required. The buffer or stream to be modified. }",
            "\tDiffBuff { Required. The buffer or stream containing formatted",
            "\t\tinstructions for how to modify the source buffer. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Merge2": {
        "comments": [
            "{ Description: Attempts to apply two different Diff buffers to a",
            "\tsingle origin buffer. }",
            "{ Similar to Combine, but without automatic conflict resolution or",
            "\tchange priority. Both Diff buffers must have started from the same",
            "\torigin and that origin must be the one provided. It is assumed that",
            "\tthe Diff buffers represent different changes to the same origin. This",
            "\tfunction fails if the changes cannot be applied cleanly, without",
            "\tinterfering or conflicting with one another. A conflict is defined as",
            "\tany of the following: Two additions occurring at the same location and",
            "\tadding different data. One deletion and one addition where the",
            "\taddition occurs within the range of the deletion. Information",
            "\tdescribing the nature of the failure is provided to the fourth and",
            "\tfifth parameters. The sixth parameter is provided with a combined Diff",
            "\tbuffer containing all of the changes that did not conflict. Rules",
            "\tapplied to detect conflicts: 1. Both operations delete and overlapping",
            "\tdeletes are combined to create a composite delete. If the composite",
            "\tdelete conflicts with a subsequent add, all of the constituent deletes",
            "\tof the composite delete are also marked as being conflicts. 2. Both",
            "\tare addition operations. Conflict can only occur at the offset. If",
            "\tadditions occur at different offsets then there is no Conflict. If",
            "\tadditions occur at the same offset with the same data, then there is",
            "\tno conflict. If additions occur at the same offset, but adding",
            "\tdifferent data then there is a conflict. 3. One operation adds and the",
            "\tother deletes. If addition occurs within the range of the deletion",
            "\toperation then there is a conflict. If addition occurs outside of the",
            "\trange of the deletion operation, then there is no conflict. When two",
            "\trecords are determined to be conflicting based on the previous rules,",
            "\twe need to go through all previously saved records marked #Pending to",
            "\tmove them to the conflicting dictionary. If there are conflicts",
            "\tbetween the two Diffs, the subroutine returns conflict information,",
            "\twhereas if there are none then the two diffs are simultaneously",
            "\tapplied to the source buffer. This operation is synchronous, the",
            "\tresult buffer is returned by the call. }"
        ],
        "snippets": [
            "System.Merge2(",
            "\tSource, { Required. Buffer or stream to be modified . }",
            "\tDiff1, { Required. Buffer or stream containing the first set of Diffs",
            "\t\tfor modifying \"SourceBuff\" }",
            "\tDiff2, { Required.Buffer or stream containing the second set of Diffs",
            "\t\tfor modifying \"SourceBuff\" }",
            "\tpConflict1, { Optional, pointer to a dictionary of conflicting records",
            "\t\tof Diff1 }",
            "\tpConflict2, { Optional, pointer to a dictionary of conflicting records",
            "\t\tof Diff2 }",
            "\tpDiffStream { Optional, pointer to a stream contains all",
            "\t\tnon-conflicting records from Diff1 and Diff2. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "MetaData": {
        "comments": [
            "{ Description: If used with a variable which is not a dictionary, this",
            "\tcommand attaches meta data to that variable, thereby creating a",
            "\tdictionary object. The primary purpose in this case is to provide a",
            "\tmeans of associating extended data with a variable. If used with a",
            "\tvariable which is a dictionary, this command will return the value",
            "\tassociated with the specified key. }"
        ],
        "snippets": [
            "MetaData(",
            "\tDictionary, { Required. A variable name that will become the",
            "\t\tdictionary. }",
            "\tKey, { Required. A text value. Integers may be used, but will be cast",
            "\t\tto text. This will become the first key within the dictionary. }",
            "\tCase { An optional Boolean, controlling whether the dictionary will",
            "\t\tuse case sensitive keys or non case sensitive. TRUE (default) defines",
            "\t\ta non-case sensitive key. FALSE defines case sensitive. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Min": {
        "comments": [
            "{ Description: Returns the minimum of a group of parameters. }",
            "{ The order of the values is irrelevant. If any of the parameters is",
            "\tinvalid, the return value is invalid also. }"
        ],
        "snippets": [
            "Min(",
            "\tParm1, Parm2, Parm3, ... { Required. Any number of parameters, giving",
            "\t\tany numeric expressions, from which a minimum value will be selected.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MkDir": {
        "comments": [
            "{ Description: Create a new folder (directory) and returns its own",
            "\terror code. }"
        ],
        "snippets": [
            "MkDir(",
            "\tName { Required. Any text expression which is the full path name of",
            "\t\tthe directory to create. A known path Known Path Aliases for",
            "\t\tFile-Related Functions for File-Related Functions may be provided in",
            "\t\tthe form, :{KnownPathAlias}. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ModemCount": {
        "comments": [
            "{ Description: Returns the number of data modems configured and",
            "\toperational in the system. }"
        ],
        "snippets": [
            "ModemCount();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ModemDev": {
        "comments": [
            "{ Description: Obtains the identifier for a modem sub-device. (In",
            "\torder to use the audio capabilities of a voice modem, the device",
            "\tidentifier for the wave output device is required.) }",
            "{ When called with a DeviceName of \"wave/out\", this function returns a",
            "\tvalue suitable for use with the Sound function. }"
        ],
        "snippets": [
            "ModemDev(",
            "\tModemStream, { Required. The connected modem stream (returned from a",
            "\t\tModemStream or ModemDial function call). }",
            "\tDeviceName { Required. A text value describing the device whose",
            "\t\tidentifier is required. Only \"wave/out\" is supported. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ModemDial": {
        "comments": [
            "{ Description: Dials and attempts to connect to a remote modem and",
            "\treturns the modem stream or an error code. }"
        ],
        "snippets": [
            "ModemDial(",
            "\tModem, { Required. Either a numeric expression giving the modem number",
            "\t\tbetween 1 and the number of modems in the system (the return from",
            "\t\tModemCount), or a modem stream opened via the ModemStream function. }",
            "\tPhoneNumber, { Required. Any text expression specifying the phone",
            "\t\tnumber to dial. It can contain any of the special dialing characters",
            "\t\tthat Windows Ã allows. If this parameter is invalid a pass-through",
            "\t\tconnection will be obtained. }",
            "\tReceiveLen, { Required. Any numeric expression giving the size of the",
            "\t\treceive buffer for the serial stream in bytes. ReceiveLen must be in",
            "\t\tthe range 2 to 32 766. If more bytes are received than can fit in the",
            "\t\treceive buffer before the application removes them, the additional",
            "\t\tdata will be lost. }",
            "\tTransmitLen, { Required. Any numeric expression giving the size of the",
            "\t\ttransmit buffer for the serial stream in bytes. TransmitLen must be in",
            "\t\tthe range 2 to 32 766. The buffer must be large enough to hold the",
            "\t\tmaximum number of bytes pending transmission at any instance. }",
            "\tMinBaud, { Required. Any numeric expression giving the minimum baud",
            "\t\trate which will be acceptable on the modem connection. The baud rate",
            "\t\tat which the connection is made may actually be higher than this value",
            "\t\tbut may not exceed MaxBaud. The baud rate must be in the range 0 to",
            "\t\t115,200, and must divide evenly into 115,200 with no more than 2.5%",
            "\t\terror. The value of 0 has special significance. This corresponds to",
            "\t\tthe maximum baud rate available for the particular device. }",
            "\tMaxBaud, { Required. Any numeric expression giving the maximum baud",
            "\t\trate which will be acceptable on the modem connection. The baud rate",
            "\t\tat which the connection is made may actually be lower than this value",
            "\t\tbut may not be less than MinBaud. The baud rate must be in the range 0",
            "\t\tto 115,200, and must divide evenly into 115,200 with no more than 2.5%",
            "\t\terror. The value of 0 has special significance. This corresponds to",
            "\t\tthe maximum baud rate available for the particular device. }",
            "\tDataBits, { Required. Any numeric expression giving the number of data",
            "\t\tbits per character. DataBits must be 5, 6, 7, or 8. }",
            "\tStopBits, { Required. Any numeric expression giving the number of stop",
            "\t\tbits per character. StopBits must be 1 or 2. }",
            "\tParity { Required. Any numeric expression giving the parity checking",
            "\t\tto use: Parity Checking Type 0 No parity 1 dd parity 2 Even parity 3",
            "\t\tStick (space parity) 4 1 Stick (mark parity) }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ModemDigits": {
        "comments": [
            "{ Description: Controls the receipt of DTMF digits entered from the",
            "\tkeypad of a telephone engaged on a voice call via a voice modem. }",
            "{ After digit monitoring is enabled, any digits detected by the modem",
            "\twill appear as text characters (0123456789#*) in the ModemStream. The",
            "\tpresence of these characters can be determined by using the",
            "\tGetStreamLength function and they can be read using the SRead",
            "\tfunction. }"
        ],
        "snippets": [
            "ModemDigits(",
            "\tModemStream, { Required. The connected modem stream (returned from a",
            "\t\tModemStream or ModemDial function call). }",
            "\tEnable { Required. Any logical value that is \"true\" (non-zero) to",
            "\t\tenable digit monitoring, and \"false\" (zero) to cancel digit",
            "\t\tmonitoring. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ModemList": {
        "comments": [
            "{ Description: Returns a list of the modems in the system. This",
            "\tfunction should be used to determine the correct parameter for the",
            "\tModemStream or ModemDial functions. }"
        ],
        "snippets": [
            "ModemList();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ModemMedia": {
        "comments": [
            "{ Description: Enables you to determine the media mode of a serial",
            "\tstream open on a modem, and change it if necessary (for example, if",
            "\tyou require the ability to be able to handle both incoming voice mode",
            "\tand data mode calls). }",
            "{ MediaMode is important when handling multi-mode calls. It may be",
            "\tspecified when dialing a call (ModemDial) or preparing a modem for",
            "\tanswering incoming calls (ModemStream), and is a consideration before",
            "\thanding off a call to another service (ModemTransfer). If more than",
            "\tone MediaMode bit is set, then the call type is undetermined, and",
            "\tUnknown (2) should also be set. It is not possible to change the media",
            "\tmode to a mode other than those specified when the ModemStream was",
            "\tcreated. If the requested Media change cannot be implemented, the",
            "\tfunction will return Invalid. The function will also return Invalid if",
            "\tthere is no active call in progress on ModemStream. If Interactive",
            "\tVoice (4), or Automated Voice (8) is specified, then the modem will be",
            "\tinitialized in voice mode. On outgoing calls, this has the effect that",
            "\tprogress indication is unreliable - the call will be reported as",
            "\tconnected as soon as dialing completes. This is a limitation of analog",
            "\tvoice modems. Changes to media mode may not happen instantly. For",
            "\texample, changing a call from voice mode to data mode initiates the",
            "\tmodem training sequence that may take several seconds to complete. The",
            "\treturn value of the ModemMedia function indicates the current state,",
            "\tand so can be used to determine when the change has completed. }"
        ],
        "snippets": [
            "ModemMedia(",
            "\tModemStream, { Required. The connected modem stream (returned from a",
            "\t\tModemStream function call) that is to be handed off to another",
            "\t\tinterested application. }",
            "\tMediaMode { Optional. Specifies the desired media mode for the call.",
            "\t\tValid values are bit significant, and more than one may be specified.",
            "\t\tMediaMode Meaning Comments 2 Unknown Is set whenever more than one of",
            "\t\tthe other values is set. 4 Interactive Voice A voice mode call using",
            "\t\tthe modem microphone/speaker. 8 Automated Voice For simulated speech",
            "\t\tand wave files. Allows DTMF digit detection. 16 Datamodem For data",
            "\t\tcalls. 32 Group 3 Fax For FAX calls. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ModemStream": {
        "comments": [
            "{ Description: Open a serial stream on a modem and returns its status",
            "\t(prior to the connection being made), a modem stream (after the",
            "\tconnection has been established), or an error code. }"
        ],
        "snippets": [
            "ModemStream(",
            "\tModem, { Required. Any numeric expression giving the modem number",
            "\t\tbetween 1 and the number of modems in the system (the return from",
            "\t\tModemCount). }",
            "\tRingCount, { An optional parameter that is any numeric expression",
            "\t\tdesignating the number of rings after which the modem should be",
            "\t\tanswered. If this parameter is 0 the modem will not answer the call.",
            "\t\tThe default is 1. }",
            "\tReceiveLen, { An optional parameter that is any numeric expression",
            "\t\tgiving the size of the receive buffer for the serial stream in bytes.",
            "\t\tReceiveLen must be in the range 2 to 32 766. The default length is",
            "\t\t1024. If more bytes are received than can fit in the receive buffer",
            "\t\tbefore the application removes them, the additional data will be lost.",
            "\t\t}",
            "\tTransmitLen, { An optional parameter that is any numeric expression",
            "\t\tgiving the size of the transmit buffer for the serial stream in bytes.",
            "\t\tTransmitLen must be in the range 2 to 32 766. The default length is",
            "\t\t1024. The buffer must be large enough to hold the maximum number of",
            "\t\tbytes pending transmission at any instance. }",
            "\tMediaMode { An optional numeric expression, specifying the desired",
            "\t\tmedia mode for the call. See ModemMedia for a description of valid",
            "\t\tvalues and their meanings. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ModemTransfer": {
        "comments": [
            "{ Description: Transfers a modem call to another application and",
            "\treturns an indication of success. }",
            "{ The call is transferred to the next highest priority application",
            "\tinterested in the call. When the transfer is made, the stream value",
            "\twill be set to 8. This function will return true (1) to indicate a",
            "\tsuccessful transfer or false (0) if the transfer was unsuccessful.",
            "\tPassing an incoming call to a RAS would be a common use for this",
            "\tfunction. }"
        ],
        "snippets": [
            "ModemTransfer(",
            "\tModemStream { Required. The connected modem stream (returned from a",
            "\t\tModemStream function call) that is to be handed off to another",
            "\t\tinterested application. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ModifyAccount": {
        "comments": [
            "{ Description: Used to change any of the elements of an account",
            "\tdefinition that may be modified. }",
            "{ To use this API, the calling code must be running in a security",
            "\tsession that has Manager privilege. Modifying an account is an",
            "\tasynchronous operation. If the asynchronous operation was not",
            "\tattempted, due to detection of an error, the return value will be",
            "\tInvalid. If the asynchronous operation is attempted, the return value",
            "\twill be an object value. The object value will become Invalid when the",
            "\tasynchronous operation completes. At that time (or when the method",
            "\treturns Invalid), the value addressed by PtrReturnCode can be examined",
            "\tto determine the status of the operation. The contents of the value",
            "\taddressed by PtrReturnCode is undefined until the method returns",
            "\tInvalid. A single account can be modified by supplying a single",
            "\tAccountData structure in NewAccountData. Multiple accounts can be",
            "\tmodified in one operation by providing a single dimension array or",
            "\tdictionary of AccountData structures in NewAccountData. The result",
            "\tcode returned in the value addressed by PtrReturnCode will be a scalar",
            "\tvalue if a single structure was supplied in NewAccountData. If an",
            "\tarray of structures or a dictionary of structures was supplied, a",
            "\tsingle dimension array of the same size as NewAccountData will be",
            "\treturned in the value addressed by PtrReturnCode, each element",
            "\tcontaining the result code for the corresponding NewAccountData",
            "\telement. Modifying an account requires a working copy write lock. If",
            "\tsuch a lock is held by the calling code, the HaveLock parameter must",
            "\tbe set to TRUE. Otherwise omit this parameter or set it to FALSE. If",
            "\tthe calling code holds a read lock on the working copy, this must be",
            "\treleased before ModifyAccount can complete its operation. The",
            "\tAccountData structure(s) provided must have the AccountID member set",
            "\tto an existing account ID. Any other member of the structure can be",
            "\tInvalid, in which case no change is made to that member of the account",
            "\trecord. Only valid members cause modification. If the password is",
            "\tbeing changed, the new password must meet application password",
            "\tstrength settings. On return the Password member is not erased. It is",
            "\thighly recommended that calling code be careful to ensure that",
            "\tunencrypted passwords are destroyed as soon as possible after",
            "\tcompletion of this operation. }"
        ],
        "snippets": [
            "\\SecurityManager\\ModifyAccount(",
            "\tNewAccountData, { Required. An AccountData structure, a single",
            "\t\tdimension array of AccountData structures or a dictionary of",
            "\t\tAccountData structures containing the data to modify in each account.",
            "\t\t}",
            "\tPtrReturnCode, { Optional. A pointer to a value that will contain one",
            "\t\tof the defined result codes at the conclusion of the operation. }",
            "\tHaveLock { Optional. A Boolean value that indicates whether the",
            "\t\tworking copy lock is held by the calling code. Default FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ModifyBitmap": {
        "comments": [
            "{ Description: Reads an existing image handle and produces a new one",
            "\twith modifications. The original image is not altered. Returns invalid",
            "\tupon failure. }",
            "{ Some image modifications have a greater performance impact than",
            "\twould typically be assumed, due to the way image rendering is",
            "\toptimized. Scaling and cropping changes are slow, for example }"
        ],
        "snippets": [
            "ModifyBitmap(",
            "\tHandle, { Required. The image handle to copy and modify. }",
            "\tReflect, { An optional logical value that can be set to 1 to reflect",
            "\t\tthe image about the vertical axis. The default is no reflection (0). }",
            "\tHue, { An optional numeric expression for the hue rotation to apply to",
            "\t\tall of the colors in the image. Range -180 to 180. The default is no",
            "\t\thue rotation, (0). }",
            "\tSaturation, { An optional numeric expression that is a multiplier to",
            "\t\tthe intensity of each primary color component of every color in the",
            "\t\timage. Range: 0 to 255. Defaults to 1 if missing or invalid. }",
            "\tLightness, { An optional numeric expression that is a multiplier to",
            "\t\tthe brightness of the image. Range 0+. Defaults to 1 if missing or",
            "\t\tinvalid. }",
            "\tTransparency, { An optional numeric expression for a multiplier to the",
            "\t\ttransparency (alpha value) of every color in the image. Range 0",
            "\t\t(transparent) to 1 (opaque). Defaults to 1 if missing or invalid. }",
            "\tContrast, { Optional numeric expression to enhance the differences",
            "\t\tbetween the colors in the image. Range 0+. Defaults to 1 if missing or",
            "\t\tinvalid. }",
            "\tColorizeHue, { Optional numeric expression for the hue value of a",
            "\t\tcolor to be mixed with every color in the image. Range -180 to 180.",
            "\t\tDefaults to 0 if missing or invalid. }",
            "\tColorizeSaturation, { Optional numeric expression for the intensity of",
            "\t\tthe added color. Zero means that no color is added. Range 0-1.",
            "\t\tDefaults to 0 if missing or invalid. }",
            "\tAntiAlias, { Bit 0 controls whether anti-aliasing will be done when",
            "\t\tthe image is stretched. Defaults to 1 (TRUE) if missing or invalid. By",
            "\t\tdefault, feathering will be applied to an anti-aliased image when it",
            "\t\tis stretched. Set bit 1 to 1 (TRUE) to suppress feathering. }",
            "\tScalarColor, { Optional color value in the form aRGB A colour value,",
            "\t\tdefined as four, two-digit hexadecimal values. Alpha - Red - Green -",
            "\t\tBlue. An Alpha value of FFis assumed if only the RGB values are",
            "\t\tprovided. , used to apply a specific color to a gray-scale image. }",
            "\tRotation { Optional floating point value, specifying the clockwise",
            "\t\trotation in degrees to be applied when the image is drawn. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ModifyConfiguration": {
        "comments": [
            "{ Description: Provides a safe way to write to configuration files. }",
            "{ If the caller of ModifyConfiguration is subscribed to working copy",
            "\tchanges (via WCSubscribe), then it will not get subscription callbacks",
            "\tfor its own changes following a call to this function. The callback",
            "\tmodule, named in the second parameter, must be either a launched",
            "\tmodule or a subroutine that returns Invalid. The callback module is",
            "\tallowed to write configuration files and is guaranteed that, for the",
            "\tlife of the module, no other configuration code can modify that file.",
            "\tThe callback module must have the following parameters }"
        ],
        "snippets": [
            "\\ModifyConfiguration(",
            "\tpSuccess, { A required pointer to a value, which will be set to 1 on",
            "\t\tsuccessful completion or 0 on failure. }",
            "\tCallBackModuleName, { A required text value, containing the name of",
            "\t\tthe callback module to be launched into the caller. }",
            "\tExtraInfo, { An optional parameter which may be any value. If present,",
            "\t\tit will be passed through to the callback module. }",
            "\tDeploy { Optional Boolean. Has no effect while the application is",
            "\t\trunning in automatic-deploy mode. If auto-deploy is off, then when",
            "\t\tthis parameter is TRUE (or Invalid) the modified files will be",
            "\t\tdeployed immediately after the changes occur. Defaults to TRUE. Deploy",
            "\t\tmust be present and set to FALSE to prevent ModifyConfiguration from",
            "\t\tacting as if auto-deploy is always on. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ModifyTags": {
        "comments": [
            "{ Description: Can be used to create, modify, or delete running tags.",
            "\tReplacement for StartTag for the case where persisted tags were",
            "\tcreated. See comments for more detail. }",
            "{ Some readers may have used non-persisted StartTag calls to create",
            "\tparent/child tag structures. Now that StartTag is obsolete, those",
            "\tstructures should be created with the Tag Browser, not in code. This",
            "\tmodule launches a worker module into Code so that the operation is not",
            "\tinterrupted by this module's caller being slain. The return value of",
            "\tthe function is a reference to this worker module. By watching for",
            "\tthis to become invalid, you can discover when the module has finished.",
            "\tModifyTags works by modifying root tag declarations or adding",
            "\toverrides for child tags not defined in the root tag database. It does",
            "\tnot modify tag type definitions. The TagParameters dictionary is",
            "\tformatted as follows: TagParameters[FullFriendlyName] = {TheChange};",
            "\tFor tag deletion, {TheChange} is simply Invalid. For a creation or",
            "\tupdate, {TheChange} is a dictionary of parameter values, keyed by",
            "\tparameter name. When creating a new tag, the NewTags dictionary must",
            "\thave an entry specifying the tag type. If there is a tag with the",
            "\tgiven name already running, it will be deleted and the new tag will be",
            "\tcreated with a new unique ID, even if the type specified in NewTags is",
            "\tthe same as the type of the currently-running tag. Hence, this is a",
            "\tway to stop a tag and create a tag having the same friendly name, but",
            "\ta different unique ID and possibly a different type, all in a single",
            "\toperation. When updating a tag, what will happen to tag parameters",
            "\tthat are not specified in the TagParameters dictionary will depend on",
            "\tthe value of the Merge parameter. If TRUE (the default), then those",
            "\tparameters remain unchanged by the operation. If FALSE, then those",
            "\tparameters revert to their default, where default for a root tag is",
            "\tthe default specified in the tag type, and the default for a child tag",
            "\tis the value specified by its parent's type's child tag definition",
            "\trecord (that is, the value it would have without any root overrides).",
            "\tThe Merge parameter has no effect on tag additions or deletions. To",
            "\tset parameters to expressions, you can set metadata on individual",
            "\tparameter values. For example: TagParms[TagName][ParmName] =",
            "\tExpressionText; Metadata(TagParms[TagName][ParmName],",
            "\tSystem.#EXPRESS_META) = System.#EXPRESS_REFRESH; {non-optimized",
            "\texpression} Metadata(TagParms[TagName][ParmName],",
            "\tSystem.#EXPRESS_META) = System.#EXPRESS_SNAPSHOT; {optimized",
            "\texpression} If HaveLock is TRUE, then when this module finishes, the",
            "\tmemory cache of tag parameters will have been updated, and those",
            "\tchanges will be pending to be written out to tag files and",
            "\tincorporated into running tags. Note that there is no guarantee that",
            "\tthose actions have been performed. That will happen during the next",
            "\tcommit. If HaveLock is FALSE, then it is guaranteed that all running",
            "\ttags affected by these changes will have been updated or stopped",
            "\t(whichever applies). Also, while all root tags and all child tags",
            "\t(whose parents are running and that the changes cause to bring into",
            "\texistence) will be running, it is not guaranteed that they will have",
            "\trun their Refresh modules. It is also not guaranteed that children of",
            "\ttags just started will be running yet let alone Refreshed. When called",
            "\twith the Merge==FALSE parameter it is possible to revert a tag",
            "\tparameter to its default or remove an override using the API",
            "\tGetTagConfiguredParameters . If ModifyTags is called with Merge=FALSE",
            "\twithout using this API, there is no way to remove some configured",
            "\tparameters while keeping others. To make changes to some configured",
            "\tparameters, called GetTagConfiguredParameters, modify the dictionary",
            "\tof parameters (add/modify/remove), then pass the modified dictionary",
            "\tinto a call to ModifyTags. }"
        ],
        "snippets": [
            "\\ModifyTags(",
            "\tpSuccess, { An optional pointer to a value, which will be set to 1 on",
            "\t\tsuccessful completion or 0 on failure. }",
            "\tTagParameters, { Dictionary of tag parameters, each of which is also a",
            "\t\tdictionary. See examples. }",
            "\tNewTags, { Optional. Dictionary of tag additions. Key is tag friendly",
            "\t\tname and value is tag type. If you have a NewTags entry for a tag that",
            "\t\talready exists, then the action will be a deletion and an add of that",
            "\t\ttag. The added tag will not have the same UniqueID as the original",
            "\t\ttag, and therefore page references and history for the old tag will",
            "\t\tnot be associated with the new tag, }",
            "\tUserID, { Optional. User making change }",
            "\tComment, { Optional. Comment to store with changes }",
            "\tMerge, { Optional. On update, true to retain parameters not specified",
            "\t\tin parameter dictionary, false to revert all other parameters to their",
            "\t\tdefaults. Defaults to TRUE }",
            "\tHaveLock, { Optional. If false, this module gets the working copy lock",
            "\t\tand commits changes and update tags when finished. If true, caller",
            "\t\tmust have WC lock ModifyTags will not get WC lock, commit changes, or",
            "\t\tupdate running tags. Defaults to FALSE }",
            "\tpErrors { Optional output: dictionary of errors, keyed by name of tag",
            "\t\twith error, containing #MODTAGS_* error code. Defined in Code.",
            "\t\tConstants used as error codes, returned in the pErrors dictionary",
            "\t\tparameter of ModifyTags: Constant Value Description #MODTAGS_BADNAME 1",
            "\t\tName of added tag is not allowed. Refer to tag naming rules.",
            "\t\t#MODTAGS_BADTYPE 2 Provided type is not an existing type",
            "\t\t#MODTAGS_MISSINGTAG 3 Attempting to modify a non-existent tag.",
            "\t\t#MODTAGS_MISSINGPARENT 4 Attempting to add a child to a non-existing",
            "\t\tparent. Constants used as global error codes returned in root value of",
            "\t\tModifyTags's pErrors dictionary parameter: Constant Value Description",
            "\t\t#MODTAGS_NOERROR 0 No error. #MODTAGS_TAGERROR 1 One of the errors",
            "\t\tlisted in the preceding table. #MODTAGS_NOTEDITABLE 2 Application",
            "\t\tcannot be edited at this time. (Most likely, a restart is required.) }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ModifyUserPrivilege": {
        "comments": [
            "{ Description: Modifies a privilege for the specified username. }",
            "{ May only be called from a user-context that has the Manager general",
            "\tprivilege. The return value of the function is the object value of the",
            "\tlaunched worker module. This will be set to Invalid when the operation",
            "\thas completed and may be used to discover when that occurs. Use of",
            "\tthis function requires an understanding of the VTScada security system",
            "\tand the general privileges. Please refer to System Privileges in the",
            "\tchapter Security Manager Service. }"
        ],
        "snippets": [
            "\\SecurityManager\\ModifyUserPrivilege(",
            "\tPtrReturnCode { Required. A pointer to a variable that will be used",
            "\t\tfor the return code. PtrReturnCode Meaning 1 Privilege modified. 2",
            "\t\tDenied. The calling context does not have the Manager general",
            "\t\tprivilege. 3 The privilege is not valid - no action taken. 4 The",
            "\t\tspecified user does not exist - no action taken. 5 The SetPrivilege",
            "\t\tflag is invalid - no action taken. 6 The application cannot be edited.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ModuleFileName": {
        "comments": [
            "{ Description: Returns the full path (including the drive letter) and",
            "\tfile name of the document (.SRC) file of a module. }"
        ],
        "snippets": [
            "ModuleFileName(",
            "\tModule { Required. Any expression for the module to enquire about. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ModuleHighlighted": {
        "comments": [
            "{ Description: Returns true if the module is highlighted. }"
        ],
        "snippets": [
            "ModuleHighlighted(",
            "\tModuleTree, { Required. Any expression for the module tree value. }",
            "\tModule { Required. Any expression for the module. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Month": {
        "comments": [
            "{ Description: Returns the month for a given date number. }",
            "{ This function works in conjunction with the Day and Year functions",
            "\tto decompose a date number into the corresponding day, month and year.",
            "\tJanuary is month 1. }"
        ],
        "snippets": [
            "Month(",
            "\tDate { Required. Any numeric expression giving the number of days",
            "\t\tsince January 1, 1970. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MoveEditor": {
        "comments": [
            "{ Description: Moves the Editor to the given line and column. }"
        ],
        "snippets": [
            "MoveEditor(",
            "\tEditorVal, { Required. An editor Value which is returned by",
            "\t\tMakeEditor. }",
            "\tLine, { Required. Any numeric expression that specifies the line to",
            "\t\tmove the editor to. }",
            "\tColumn { Required. Any numeric expression that specifies the column to",
            "\t\tmove the editor to. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "MoveSibling": {
        "comments": [
            "{ Description: Moves the position of a module in a module tree",
            "\tdiagram. }",
            "{ Source will be moved to the position occupied by Destination. Source",
            "\tand Destination must have exactly the same parent object. }"
        ],
        "snippets": [
            "MoveSibling(",
            "\tSource, { Required. Any expression for the module to be moved. }",
            "\tDestination { Required. Any expression for the module code value of",
            "\t\tthe sibling module where Source will be moved. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "MoveWindow": {
        "comments": [
            "{ Description: Will move a window to the specified coordinates. }",
            "{ The pixel coordinates given are relative to the upper left hand",
            "\tcorner of the screen if this is a non-child window. If this is a child",
            "\twindow, then the coordinates are relative to the top left corner of",
            "\tthe virtual client area of the parent window. This is consistent with",
            "\tthe Window function. The corner being point (0, 0). The X coordinates",
            "\tincrease as you move right across the screen. The Y coordinates",
            "\tincrease as you move towards the bottom of the screen. Use with care",
            "\tin pages: your code will run when the page is displayed in the Idea",
            "\tStudio and when the Page Menu page shows a live preview, possibly with",
            "\tundesirable results in those situations. In a page, the trigger for",
            "\tthis function should be a user action rather than anything that runs",
            "\tautomatically. }"
        ],
        "snippets": [
            "MoveWindow(",
            "\tWin, { Required. Any expression that gives an object value contained",
            "\t\tin the window to move. Often, Self(). }",
            "\tX, { Required. Any numeric expression giving the pixel coordinate to",
            "\t\tplace the left hand side of the window. }",
            "\tY { Required. Any numeric expression giving the pixel coordinate to",
            "\t\tplace the top of the window. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "MultiCheckboxParameterEdit": {
        "comments": [
            "{ Description: (A wrapper for NumericParameterEdit.) Use this function",
            "\tto make any number of check boxes in a group. }",
            "{ There are two public variables that can be accessed from the object",
            "\tvalue returned from the wrapper. These are \"Height\" and \"TitlesWidth\".",
            "\t\"Height\" is the total height of all the checkboxes and the space",
            "\tbetween them. \"TitlesWidth\" is the largest width that the titles in",
            "\tthe wrapper require in order to be displayed properly. (Or, the manual",
            "\twidth if one is provided and it is greater than that of any of the",
            "\ttitles.) }"
        ],
        "snippets": [
            "MultiCheckboxParameterEdit(",
            "\tLeft, { Required numeric. Left placement coordinate. }",
            "\tRight, { Required numeric. Right placement coordinate. }",
            "\tTop, { Required numeric. Top placement coordinate. }",
            "\tParmPtrArray, { Required. An array of pointers to the value of each",
            "\t\tparameter. }",
            "\tCodePtrArray, { Required. An array of pointers to the definition of",
            "\t\teach parameter. }",
            "\tTitleArray, { Required. An array of titles to display. }",
            "\tPtrWaitClose, { Required. A pointer to the SubwaitClose of that panel",
            "\t\tif applicable. (Note that only one is used, rather than an array. It",
            "\t\twill trigger if any of the checkboxes are being edited.) }",
            "\tDialogRoot, { Required. The root dialog calling this control. It will",
            "\t\tbe passed on to each individual check box's NumericParameterEdit. }",
            "\tFIDArray, { Optional. An array of Focus IDs for each check box. This",
            "\t\tallows for conditional statements to change the ability of each check",
            "\t\tbox to interact. Each defaults to TRUE if Invalid. }",
            "\tManualWidth, { Optional numeric. Use to provide a value for",
            "\t\tconsideration when calculating the width needed for titles. A manual",
            "\t\twidth smaller than the required width of a title will be ignored. }",
            "\tPTypePtrArray, { Optional. An array of PTypes that are handed directly",
            "\t\tinto each checkbox's numericParameterEdit. }",
            "\tDescArray { Optional. An array of descriptions that are placed under",
            "\t\teach related title. This allows for comments, clarification, or the",
            "\t\tsplitting of a long title. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "MuteSound": {
        "comments": [
            "{ Description: This subroutine is used to turn off alarms sounds for",
            "\tall alarms, both current and future. }",
            "{ This subroutine will check the current user session to ensure that",
            "\tthe logged-on user has the required privilege to toggle alarm muting",
            "\tbefore proceeding. The alarm Mute button can be selected or released",
            "\tfor each individual user or for computers in the network, according to",
            "\tapplication configuration. See: ApplyMuteSilencePerComputer , and",
            "\tApplyMuteSilencePerUser }"
        ],
        "snippets": [
            "\\AlarmManager\\MuteSound(",
            "\tInvalid, { Placeholder. This parameter is now obsolete. }",
            "\tMuteState, { Optional Boolean. Set TRUE to mute sound or FALSE to",
            "\t\tunmute. Defaults to TRUE. }",
            "\tExpiryTime { Optional numeric. Time at which a muted alarm should",
            "\t\tunmute (UTC). Leave empty to toggle alarm muting immediately according",
            "\t\tto the MuteState setting. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "New": {
        "comments": [
            "{ Description: Allocates memory for an array from RAM and returns a",
            "\tpointer to that array. }"
        ],
        "snippets": [
            "New(",
            "\tSize { Required. A numeric value specifying the size of a",
            "\t\tone-dimensional array }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "NextFocusID": {
        "comments": [
            "{ Description: Moves the focus position to a specific ID number. }",
            "{ This statement is useful for forcing the focus to a specific object",
            "\tin a window. }"
        ],
        "snippets": [
            "NextFocusID(",
            "\tObject, { Required. Any expression for the object that defines the",
            "\t\twindow where the focus is found. }",
            "\tID, { Required. Any numeric expression for the new focus ID number. }",
            "\tLocal { Optional Boolean. If True then focus calls are module-specific",
            "\t\t(i.e. local to the module calling Focus.) }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Normal": {
        "comments": [
            "{ Description: Use this function to tell the Alarm Manager when an",
            "\talarm clears. This subroutine will deactivate the alarm. It will not",
            "\taffect the unacknowledged status. }",
            "{ The Normal subroutine always returns \"0\". }"
        ],
        "snippets": [
            "\\AlarmManager\\Normal(",
            "\tAlarmObject, { Required. The object value for the alarm that was",
            "\t\tpassed to the Register subroutine. }",
            "\tEventTime { Optional. The time stamp to use when adding this event to",
            "\t\tthe alarm lists. If invalid or not defined, the default is",
            "\t\tCurrentTime(). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Normalize": {
        "comments": [
            "{ Description: Returns a normalized value. }",
            "{ This function encapsulates an expression with low and high scale",
            "\tvalues. Typically, this is used in a trajectory, rotation or layered",
            "\tgraphics function for scaling. The return value is a Normalize value.",
            "\tThe function does not limit the value to be within the range defined",
            "\tby LowScale and HighScale, but rather, makes it such that when Value",
            "\tequals HighScale the object (if using in a layered graphics function)",
            "\twill fill its bounding box. If Value exceeds HighScale, the object",
            "\twill extend past its bounding box. Low and high scale values may be",
            "\tcalculated expressions. The compiler will reduce them to constants if",
            "\tthey evaluate to constants. If any parameters are invalid, the",
            "\tresulting value will still be valid normalized value. For example:",
            "\tValid(Normalize(Invalid, 1, 2)) will evaluate to 1 (true) and",
            "\tValueType(Valid(Normalize(Invalid, 1, 2))) will evaluate to 21 - a",
            "\tnormalize value. }"
        ],
        "snippets": [
            "Normalize(",
            "\tValue, { Required. Any numeric expression which represents the value",
            "\t\tto normalize. }",
            "\tLowScale, { Required. Any numeric expression, which represents the",
            "\t\tlowest normal scaled value of Value. This is not a limit. }",
            "\tHighScale { Required. Any numeric expression, which represents the",
            "\t\thighest normal scaled value of Value. This is not a limit. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "NormalTrip": {
        "comments": [
            "{ Description: This subroutine will deactivate an alarm and signal it",
            "\tas unacknowledged. }",
            "{ The NormalTrip subroutine always returns \"0\". }"
        ],
        "snippets": [
            "\\AlarmManager\\NormalTrip(",
            "\tAlarmObject, { Required. The object value for the alarm that was",
            "\t\tpassed to the Register subroutine. }",
            "\tEventTime { Optional. The time stamp to use when adding this event to",
            "\t\tthe alarm lists. If invalid or not defined, the default is",
            "\t\tCurrentTime(). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Not": {
        "comments": [
            "{ Description: Returns the result of a bitwise logical NOT operation.",
            "\t}",
            "{ This function produces the binary compliment of a value. It takes",
            "\tall the bits of a binary number and flips them. Each 1 becomes 0 and",
            "\teach 0 becomes 1. This function takes signed 64-bit integers values.",
            "\tIf a number is passed outside the range of a signed 64-bit integer,",
            "\tthen the function will return invalid. If Value is invalid, the return",
            "\tvalue is invalid. (See: Bitwise Parameters & Operations ) }"
        ],
        "snippets": [
            "Not(",
            "\tValue { Required. Any numeric expression. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "NotifyVIC": {
        "comments": [
            "{ Description: Sends a message to a VTScada Thin Client. The message",
            "\tsent depends on the parameter given to the function. }",
            "{ none }"
        ],
        "snippets": [
            "NotifyVIC(",
            "\tValue { Required. Any numeric expression from the following table.",
            "\t\tValue Meaning 0 No Op 1 App is stopping 2 Authentication Failure 3",
            "\t\tUser stopped the session 4 User logged out 5 The operator terminated",
            "\t\tthe session (from the Thin Client Monitor) 6 The operator forced a",
            "\t\tserver changeover (from the Thin Client Monitor) 7 Refused due to",
            "\t\tlicense limits }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Now": {
        "comments": [
            "{ Description: Returns the current time in seconds since midnight. }",
            "{ This function is similar to Seconds, except that the update interval",
            "\tcan be specified. The Now function is re-evaluated every Interval",
            "\tseconds, and the return value is the time in seconds since midnight,",
            "\trounded to the next lowest whole multiple of Interval. Now will report",
            "\ttime to an accuracy of 0.001 seconds, however it would be unreasonable",
            "\tto expect the function to trigger reliably each millisecond under",
            "\tnormal operating conditions. Your CPU speed and the load placed upon",
            "\tit by other processes will both affect the maximum number of times",
            "\tthat Now can be triggered each second. }"
        ],
        "snippets": [
            "Now(",
            "\tInterval { Required. Any numeric expression giving the update time in",
            "\t\tseconds. Fractions of a second may be specified however, Interval must",
            "\t\tbe greater than or equal to 0. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "NParm": {
        "comments": [
            "{ Description: Returns the number of parameters listed in a module",
            "\tinstance. }",
            "{ This function is for experienced users, and is not needed for normal",
            "\toperation. Any user-defined module can be called with any number of",
            "\tparameters. This function returns the actual number of parameters in",
            "\tthe call made to the module instance Object. For launched modules the",
            "\treturn value is the minimum of the actual and the formal parameters. }"
        ],
        "snippets": [
            "NParm(",
            "\tObject { Required. Any object value, variable, or expression for a",
            "\t\tModule. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "NumericParameterEdit": {
        "comments": [
            "{ Description: Wrapper for ParameterEdit, used when adding a numeric",
            "\tparameter to a control. }",
            "{ Automatically determines what module to use for display and entry of",
            "\tthe existing value. If DroplistChoices is valid, selecting the first",
            "\tentry in the droplist sets the value to 0, the second to 1... }"
        ],
        "snippets": [
            "NumericParameterEdit(",
            "\tLeft, { Required. Any numeric expression for the left edge of the",
            "\t\tobject. }",
            "\tBottom, { Required. Any numeric expression for the bottom edge of the",
            "\t\tobject. }",
            "\tRight, { Required. Any numeric expression for the right edge of the",
            "\t\tobject. }",
            "\tTop, { Required. Any numeric expression for the top edge of the",
            "\t\tobject. }",
            "\tParmVal, { The parameter value to be altered. Typically, one element",
            "\t\tof the array of parameters passed to the panel. }",
            "\tParmCodePtr, { The code pointer to the parameter. Typically, one",
            "\t\telement of the array of parameter definition structures that",
            "\t\tcorrespond to the ParmVal. }",
            "\tTagObjPreferred, { Set to TRUE to obtain a tag object when possible. }",
            "\tTitle, { The title to display. }",
            "\tPtrWaitClose, { Wait to close. The parameter edit module will set the",
            "\t\tvalue of this pointer to true when the caller should wait to close.",
            "\t\tFor example, if the parameter edit is displaying a dialog, or",
            "\t\tcompleting a calculation. }",
            "\tDialogRoot, { Root dialog calling this control. Typically provided by",
            "\t\tthe panel module. }",
            "\tMinLimit, { Minimum limit of the selection. }",
            "\tMaxLimit, { Maximum limit of the selection. }",
            "\tPTypeIdx, { Index of the Parameter type selection. }",
            "\tTitleWidth, { Optional, number of pixels allotted for the width of the",
            "\t\ttitle. }",
            "\tShowDrawnTagProperty, { Optional Boolean, set to TRUE to show \"Drawn",
            "\t\tTag Property\". Defaults to TRUE. }",
            "\tFocusID, { Optional value from 0 to 32767 for the focus ID of this",
            "\t\tcontrol. }",
            "\tType, { Optional value specifying the type for the parameter. Defaults",
            "\t\tto Double. }",
            "\tIsSpinBox, { Optional Boolean. When TRUE the numeric option is",
            "\t\tdisplayed as a spin box. }",
            "\tToolTitleWidthOut, { Optional numeric output value. Holds the width of",
            "\t\tthe parameter edit's tool and title. }",
            "\tDescription, { Optional text describing this parameter. }",
            "\tDroplistChoices { Optional. Dynamic array. Contains the array of",
            "\t\tlabels for a droplist. If it is valid, the NumericParamterEdit's value",
            "\t\twill be displayed as a droplist. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "NumInstances": {
        "comments": [
            "{ Description: Returns the number of module instances currently",
            "\trunning. }",
            "{ This function is useful for counting both the number of active",
            "\tinstances of the current module as well as the number of active",
            "\tinstances of another module. }"
        ],
        "snippets": [
            "NumInstances(",
            "\tModule { Required. Any module or object value of the module to count.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "NumParms": {
        "comments": [
            "{ Description: Returns the number of parameters of a statement. }",
            "{ This function returns the number of parameters of a statement. }"
        ],
        "snippets": [
            "NumParms(",
            "\tStatement { Required. Any expression for the statement code value or",
            "\t\tcode pointer value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "NumSelected": {
        "comments": [
            "{ Description: Returns the number of selected graphics statements in a",
            "\twindow. }"
        ],
        "snippets": [
            "NumSelected(",
            "\tObject { Required. Any expression for the object that defines the",
            "\t\twindow. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "NumSets": {
        "comments": [
            "{ Description: Returns the number of statements that are currently",
            "\tactive in setting a particular variable. }"
        ],
        "snippets": [
            "NumSets(",
            "\tVariable { Required. Any variable for which the number of sets is",
            "\t\trequired. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "NumVariables": {
        "comments": [
            "{ Description: Returns the number of variables in a module. }"
        ],
        "snippets": [
            "NumVariables(",
            "\tModule { Required. Any expression for the object or module value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ODBC": {
        "comments": [
            "{ Description: Performs an ODBC command and returns a dynamically",
            "\tallocated array if required. }"
        ],
        "snippets": [
            "ODBC(",
            "\tDB, { Required. An ODBC value for the ODBC database as returned by",
            "\t\tODBCConnect. }",
            "\tSQLCommand, { Required. Any text expression for the SQL command to",
            "\t\tperform on the ODBC database driver. If the query involves long binary",
            "\t\tdata types, then a structure should be used. See examples. }",
            "\tAttrib { An optional parameter that returns a 2D array, with each row",
            "\t\tin the array holding detailed attributes for one column of the result",
            "\t\tset, as per the following Attrib Attribute Attrib[col][0] Name of the",
            "\t\tcolumn Attrib[col][1] Type of data VTScada will return for the column:",
            "\t\t0 == text 1 == numeric Attrib[col][2] Type SQL ODBC Types indication",
            "\t\tfor the field: Attrib[col][3] A numeric value that is either the",
            "\t\tmaximum or actual character length of a character string or binary",
            "\t\tdata type. It is the maximum character length for a fixed-length data",
            "\t\ttype, or the actual character length for a variable-length data type.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ODBCBeginTrans": {
        "comments": [
            "{ Description: Indicates to a specified ODBC-compliant database that a",
            "\ttransaction is to be started. }",
            "{ A transaction is a unit of work that is done as a single operation.",
            "\tThe operation succeeds or fails as a whole. ODBCBeginTrans indicates",
            "\tthat a transaction is to be started on the specified ODBC database.",
            "\tNote that each ODBC database driver may have different levels of",
            "\ttransaction support (or none at all), and the documentation for that",
            "\tdriver should be consulted to determine the level of transaction",
            "\tsupport. The transaction should be terminated either with an",
            "\tODBCCommit or an ODBCRollback. If any error (no matter how minor)",
            "\toccurs as a result of the statement, and the TODBCConnect or",
            "\tODBCConnect that connected to the database had its Disconnect",
            "\tparameter set to true, the value of DB will become invalid (i.e. the",
            "\tconnection to the database will be dropped). }"
        ],
        "snippets": [
            "ODBCBeginTrans(",
            "\tDB, { Required. An ODBC-compliant database as returned by ODBCConnect.",
            "\t\t}",
            "\tErrorMsg, { A descriptive error or status message, returned by the",
            "\t\tfunction. If valid, both ErrorMsg and SQLState will be valid. }",
            "\tSQLState, { A 5-character SQL State code. SQL State codes are defined",
            "\t\tby Microsoft and by the vendor of each ODBC driver. }",
            "\tErrorCode { An unsuccessful operation always returns a non-zero value,",
            "\t\twhich is a numeric error code specific to the DBMS vendor's ODBC",
            "\t\tdriver or Microsoft's ODBC Driver Manager. A successful operation will",
            "\t\talways return a 0. ErrorMsg and SQLState may or may not be set valid",
            "\t\tin the event of a successful connection. If set valid, they should be",
            "\t\texamined for relevant status information. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ODBCCommit": {
        "comments": [
            "{ Description: Indicates to a specified ODBC-compliant database that a",
            "\ttransaction is to be committed. }",
            "{ Commits a transaction defined as all the SQL statements executed on",
            "\tan ODBC-compliant database since the transaction began. If any error,",
            "\tno matter how minor, occurs as a result of the statement, and the",
            "\tTODBCConnect or ODBCConnect that connected to the database had its",
            "\tDisconnect parameter set to true, the value of DB will become invalid",
            "\t(i.e. the connection to the database will be dropped). }"
        ],
        "snippets": [
            "ODBCCommit(",
            "\tDB, { Required. An ODBC value for the specified ODBC database as",
            "\t\treturned by ODBCConnect. }",
            "\tErrorMsg, { A descriptive error or status message, returned by the",
            "\t\tfunction. If valid, both ErrorMsg and SQLState will be valid. }",
            "\tSQLState, { A 5-character SQL State code. SQL State codes are defined",
            "\t\tby Microsoft and by the vendor of each ODBC driver. }",
            "\tErrorCode { An unsuccessful operation always returns a non-zero value,",
            "\t\twhich is a numeric error code specific to the DBMS vendor's ODBC",
            "\t\tdriver or Microsoft's ODBC Driver Manager. A successful operation will",
            "\t\talways return a 0. ErrorMsg and SQLState may or may not be set valid",
            "\t\tin the event of a successful connection. If set valid, they should be",
            "\t\texamined for relevant status information. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ODBCConfigureData": {
        "comments": [
            "{ Description: Configures an ODBC data source and returns its error",
            "\tcode. }"
        ],
        "snippets": [
            "ODBCConfigureData(",
            "\tMode { Required. Any numeric expression for the mode as follows: Mode",
            "\t\tMeaning 0 Add data source 1 Configure data source 2 Remove data source",
            "\t\tIn order for 64-bit VTScada to work with 64-bit data sources, add 64",
            "\t\tto the Mode parameter. 32-bit VTScada cannot configure a 64-bit data",
            "\t\tsource. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ODBCConnect": {
        "comments": [
            "{ Description: Forms a connection to an ODBC-compliant database and",
            "\treturns the ODBC value associated with that database. }",
            "{ If the UserName and Password parameters are specified as invalid,",
            "\tthe DSName parameter is treated as a literal connection string for the",
            "\tODBC connection. For example, in the statement",
            "\tODBCConnect(\"DSN=MyData;UID=;PWD=\", Invalid, Invalid), the first",
            "\tparameter is used to set the attributes of the connection, which makes",
            "\tthis statement equivalent to ODBCConnect(\"MyData\", \"\", \"\"). In the",
            "\tcase of the optional parameters, any parameter that is not required",
            "\tmay be set to 0 if it is followed by a valid parameter, or may be",
            "\tsimply omitted if no valid parameters follow it. On successful",
            "\tcompletion of the ODBC and ODBCConnect functions, the native error",
            "\tcode will be set to 0, allowing the user to tell if a command that has",
            "\tno result set has been completed. The user should not assume that",
            "\tsince a 0 is returned, then the command has been executed",
            "\tsuccessfully. Some drivers (such as Excel) will return a 0 in the",
            "\tnative error code, even when an error has occurred. All ODBC",
            "\toperations can result in one or more status or error conditions",
            "\tarising. VTScada records the entire set of status/error conditions",
            "\tarising and buffers them internally. Use the ODBCStatus function to",
            "\tretrieve the entire set. Only the first condition that occurred or, if",
            "\tboth error and advisory conditions occur, the first error condition,",
            "\tis returned in the ErrorMsg and SQLState values. From VTS 10.0",
            "\tonwards, VTS uses ODBC 3.x compliant operations (formerly ODBC 2.x).",
            "\tThis has the side effect that different SQLState return values are",
            "\treturned for some SQLState values. If you have written code that",
            "\tdepends on the value returned by SQLState, you may need to change the",
            "\tvalue you expect. See",
            "\thttp://msdn.microsoft.com/en-us/library/ms712451%28VS.85%29.aspx for a",
            "\treference on the value changes. 64-bit VTScada is able to connect to",
            "\teither 64-bit or 32-bit ODBC data sources. ODBCConnect will first try",
            "\tto connect to the database through a 64-bit ODBC driver. If this fails",
            "\tfor any reason it will then try the connection through a 32-bit ODBC",
            "\tdriver. This means that any ODBC code that worked under 32-bit VTScada",
            "\tshould not need to be modified for use with 64-bit VTScada, but 64-bit",
            "\tVTScada has the extra ability of being able to use 64-bit ODBC",
            "\tdrivers. }"
        ],
        "snippets": [
            "ODBCConnect(",
            "\tDSName, { Required. Any text expression for the ODBC data source name,",
            "\t\tas configured in the ODBC setup menu under Microsoft Windowsâ¢. }",
            "\tUserName, { Required. Any text expression for the ODBC login user",
            "\t\tname. }",
            "\tPassword, { Required. Any text expression for the ODBC login password.",
            "\t\t}",
            "\tErrorMsg, { A descriptive error or status message, returned by the",
            "\t\tfunction. If valid, both ErrorMsg and SQLState will be valid. }",
            "\tSQLState, { A 5-character SQL State code. SQL State codes are defined",
            "\t\tby Microsoft and by the vendor of each ODBC driver. }",
            "\tErrorCode, { An unsuccessful operation always returns a non-zero",
            "\t\tvalue, which is a numeric error code specific to the DBMS vendor's",
            "\t\tODBC driver or Microsoft's ODBC Driver Manager. A successful operation",
            "\t\twill always return a 0. ErrorMsg and SQLState may or may not be set",
            "\t\tvalid in the event of a successful connection. If set valid, they",
            "\t\tshould be examined for relevant status information. }",
            "\tDisconnect, { An optional parameter that is any logical expression",
            "\t\tthat determines how errors are to be handled. If true (non-0), the",
            "\t\tconnection to the database will be disconnected should any error (no",
            "\t\tmatter how minor) occur. If false (0) an error will not cause a",
            "\t\tdisconnect to occur. The default value is false. }",
            "\tLoginTimeout, { Optional. An SQLUINTEGER (unsigned long) value",
            "\t\tcorresponding to the number of seconds to wait for a login request to",
            "\t\tcomplete before returning to the application. The default is",
            "\t\tdriver-dependent. If the value is 0, then the timeout is disabled and",
            "\t\ta connection attempt will wait indefinitely. If the specified timeout",
            "\t\texceeds the maximum login timeout in the data source, then the driver",
            "\t\tsubstitutes that value and returns SQLSTATE 01S02 (Option value",
            "\t\tchanged). }",
            "\tConnectTimeout { Optional. An SQLUINTEGER value corresponding to the",
            "\t\tnumber of seconds to wait for any request on the connection to",
            "\t\tcomplete before returning to the application. The driver should return",
            "\t\tSQLSTATE HYT00 (Timeout expired) any time that it is possible to time",
            "\t\tout in a situation not associated with query execution or login. If",
            "\t\tthe value is equal to 0 (the default) then there is no timeout. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ODBCDisconnect": {
        "comments": [
            "{ Description: Stops a connection to the ODBC database. }",
            "{ none. }"
        ],
        "snippets": [
            "ODBCDisconnect(",
            "\tDB { Required. An ODBC value for the ODBC database as returned by",
            "\t\tODBCConnect. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ODBCRollback": {
        "comments": [
            "{ Description: Indicates to a specified ODBC-compliant database that a",
            "\ttransaction is to be rolled back (discarded). }",
            "{ Discards a transaction defined as all the SQL statements executed on",
            "\tan ODBC-compliant database since the transaction began. If any error,",
            "\tno matter how minor, occurs as a result of the statement, and the",
            "\tTODBCConnect or ODBCConnect that connected to the database had its",
            "\tDisconnect parameter set to true, the value of DB will become invalid",
            "\t(i.e. the connection to the database will be dropped). }"
        ],
        "snippets": [
            "ODBCRollback(",
            "\tDB, { Required. An ODBC value for the specified ODBC database as",
            "\t\treturned by ODBCConnect. }",
            "\tErrorMsg, { A descriptive error or status message, returned by the",
            "\t\tfunction. If valid, both ErrorMsg and SQLState will be valid. }",
            "\tSQLState, { A 5-character SQL State code. SQL State codes are defined",
            "\t\tby Microsoft and by the vendor of each ODBC driver. }",
            "\tErrorCode { An unsuccessful operation always returns a non-zero value,",
            "\t\twhich is a numeric error code specific to the DBMS vendor's ODBC",
            "\t\tdriver or Microsoft's ODBC Driver Manager. A successful operation will",
            "\t\talways return a 0. ErrorMsg and SQLState may or may not be set valid",
            "\t\tin the event of a successful connection. If set valid, they should be",
            "\t\texamined for relevant status information. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ODBCSources": {
        "comments": [
            "{ Description: Retrieves a list of ODBC data sources and returns it as",
            "\ta dynamically allocated array. }"
        ],
        "snippets": [
            "ODBCSources();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ODBCStatus": {
        "comments": [
            "{ Description: Returns the requested information about the last ODBC",
            "\tstatement to execute. }",
            "{ The return value for this function may be a single value, an array",
            "\tof values (if more than one error was generated), or invalid (if the",
            "\tlast ODBC operation did not generate any status information). This",
            "\tfunction may be used with threaded ODBC calls, however, if multiple",
            "\tODBC calls are executing simultaneously, there is no indication as to",
            "\twhich one generated the message. }"
        ],
        "snippets": [
            "ODBCStatus(",
            "\tOption { Required. Any numeric expression for the option to indicate",
            "\t\twhat information is desired about the last ODBC statement executed as",
            "\t\tfollows: Option Information desired 0 Return 0 if information or 1 if",
            "\t\terror 1 SQL state text 2 Native error code 3 ODBC error text 4 Error",
            "\t\ttext length }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ODBCTables": {
        "comments": [
            "{ Description: Retrieves a list of the tables present in an",
            "\tODBC-compliant database and returns it as a dynamically allocated",
            "\tarray. }",
            "{ If TableType is not an empty string, it must contain a list of",
            "\tcomma-separated values for the types of interest. Each value may be",
            "\tenclosed in single quotation marks (') or unquoted for example,",
            "\t'TABLE', 'VIEW' or TABLE, VIEW. An application should always specify",
            "\tthe table type in uppercase. If the data source does not support a",
            "\tspecified table type, no results will be returned for that type }"
        ],
        "snippets": [
            "ODBCTables(",
            "\tDB, { Required. An ODBC value for the ODBC database as returned by",
            "\t\tODBCConnect. }",
            "\tSearch, { An optional parameter which is any text string indicating",
            "\t\tthe pattern to match for table names. If this parameter is omitted,",
            "\t\tthe search pattern defaults to \"%\", where the percent sign is the SQL",
            "\t\twildcard (i.e. all table names are returned). }",
            "\tTableType { An optional parameter which is a list of table types to",
            "\t\tmatch. Parameters include the following: \"TABLE\", \"VIEW\", \"SYSTEM",
            "\t\tTABLE\",..., or a data source-specific type name. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "OffNormal": {
        "comments": [
            "{ Description: This subroutine will activate the alarm. However, it",
            "\twill not affect the unacknowledged status. }",
            "{ The OffNormal subroutine always returns \"0\". }"
        ],
        "snippets": [
            "\\AlarmManager\\OffNormal(",
            "\tAlarmObject, { Required. The object value for the alarm that was",
            "\t\tpassed to the Register subroutine. }",
            "\tEventTime { Optional. The time stamp to use when adding this event to",
            "\t\tthe alarm lists. If invalid or not defined, the default is",
            "\t\tCurrentTime(). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "OilVolumeCorrectionFactor": {
        "comments": [
            "{ Description: Returns a coefficient to adjust a volume of oil to",
            "\tdifferent temperature and pressure conditions. }",
            "{ The function computes an oil volume correction factor based on the",
            "\tAmerican Petroleum Institute Manual of Petroleum Measurement Standards",
            "\tChapter 11.1.6. This factor is used to correct a volume from a set of",
            "\tobserved conditions to a set of alternate conditions due to changes in",
            "\ttemperature and pressure. Note that if the observed density is given",
            "\tat a set of conditions different from the current conditions, the",
            "\tfunction will be need to be evaluated twice. Once to determine the",
            "\tvolume correction to the density conditions, and again to determine",
            "\tthe volume correction from the density conditions to the alternate",
            "\tconditions. For simple volume corrections from observed conditions to",
            "\tbase conditions (60Â°F,0psig) use OilVolumeCorrectionToBase . }"
        ],
        "snippets": [
            "OilVolumeCorrectionFactor(",
            "\tFluidType, { Required numeric. An integer to identify the commodity",
            "\t\tgroup as follows: 0 for Crude Oil 1 for Refined Liquids 2 for",
            "\t\tLubricating Oil 3 for Special Fluids }",
            "\tAlpha60In, { Optional numeric. A thermal expansion factor that is",
            "\t\trequired for special fluids, where FluidType is 3. }",
            "\tRhoIn, { Required numeric. The observed density of the fluid in kg per",
            "\t\tmeter cubed. }",
            "\tTRhoIn, { Required numeric. The temperature in Â°F at which the",
            "\t\tdensity of the fluid is observed. }",
            "\tPRhoIn, { Required numeric. The pressure in psig at which the density",
            "\t\tof the fluid is observed. }",
            "\tTAltIn, { Required numeric. The temperature in degrees F of the fluid",
            "\t\tfor the volume correction. }",
            "\tPAltIn, { Required numeric. The pressure in psig of the fluid for the",
            "\t\tvolume correction. }",
            "\tErrorTag, { An optional tag object that will be set to the error",
            "\t\tvalue. Error values include: 0 No error 1 Fluid type outside range 2",
            "\t\tThermal expansion factor required but not specified 3 Density outside",
            "\t\trange 4 TRholn outside range 5 PRholn outside range 6 TAltln outside",
            "\t\trange 7 PAltln outside range 8 Rho60ln outside range 9 Too many",
            "\t\titerations }",
            "\t1, { 2 }",
            "\t3, { 4 }",
            "\t5, { 6 }",
            "\t7, { 8 }",
            "\t9",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "OilVolumeCorrectionToBase": {
        "comments": [
            "{ Description: Wrapper for OilVolumeCorrectionFactor, used to",
            "\tdetermine the volume correction factor for shifting a fluid at",
            "\talternate conditions to standard conditions (60Â°F, 0 psig). }",
            "{ The function computes an oil volume correction factor based on the",
            "\tAmerican Petroleum Institute Manual of Petroleum Measurement Standards",
            "\tChapter 11.1.6.1. This factor is used to correct a volume from an",
            "\talternate set of conditions to base conditions (60Â°F, 0 psig). This",
            "\tfunction uses the more generic OilVolumeCorrectionFactor to compute",
            "\tthe volume correction factor from base conditions to alternate",
            "\tconditions and then inverts the answer. For oils where the density is",
            "\tprovided at conditions other than base, use OilVolumeCorrectionFactor",
            "\t. }"
        ],
        "snippets": [
            "OilVolumeCorrectionToBase(",
            "\tFluidType, { Required numeric. An integer to identify the commodity",
            "\t\tgroup as follows: 0 for Crude Oil 1 for Refined Liquids 2 for",
            "\t\tLubricating Oil 3 for Special Fluids }",
            "\tAlpha60In, { Optional numeric. A thermal expansion factor that is",
            "\t\trequired for special fluids, where FluidType is 3. }",
            "\tRho, { Required numeric. The density of the fluid at base conditions",
            "\t\t(60Â°F,0psig). }",
            "\tT, { Required numeric. The current temperature of the fluid in Â°F. }",
            "\tP, { Required numeric. The current pressure of the fluid in psig. }",
            "\tErrorTag, { An optional tag object that will be set to the error",
            "\t\tvalue. Error values include: 0 No error 1 Fluid type outside range 2",
            "\t\tThermal expansion factor required but not specified 3 Density outside",
            "\t\trange 6 Temperature T outside range 7 Pressure P outside range }",
            "\t1, { 2 }",
            "\t3, { 6 }",
            "\t7",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "OkToWrite": {
        "comments": [
            "{ Description: Returns true if a user is permitted to control a",
            "\tparticular tag on a particular workstation. }",
            "{ All widgets that are used for writing a value to a PLC or storing a",
            "\tvalue in a memory tag should call OkToWrite prior to calling the tag's",
            "\tSet() module. It can also be called in steady state to determine",
            "\twhether to visually enable or disable the widget's graphics.",
            "\tPermission is granted based on several factors including user",
            "\tsecurity, tag configuration, read-only-workstation configuration,",
            "\trealm filtering, control locks and control tokens. If OkToWrite is to",
            "\tbe used as a Called module (such as, within a widget) FeedBack must be",
            "\tFalse, otherwise the Popup dialog would show by switching users or",
            "\tpages, which is not the intent. }"
        ],
        "snippets": [
            "\\OkToWrite(",
            "\tSecurityPrivilege, { Optional integer. The tag's custom security",
            "\t\tprivilege, if it has one. Most often set to \\Root.SecurityBit. Whether",
            "\t\tor not this is provided, the user must also have the Control Outputs",
            "\t\tprivilege. }",
            "\tFeedback, { Optional Boolean. TRUE to allow a feedback dialog to",
            "\t\tappear if permission cannot be granted. FASLE to suppress the dialog.",
            "\t\tDefaults to FALSE. }",
            "\tEnableOutput, { Optional Boolean. TRUE if the I/O tag has its output",
            "\t\tcapability is enabled. Most often set to \\Root.EnableOutput. Defaults",
            "\t\tto TRUE. }",
            "\tTagObj, { Optional tag object. The I/O tag being controlled. Defaults",
            "\t\tto the calling tag }",
            "\tDisableControl { Optional. TRUE to disable control. Most often set by",
            "\t\tthe widget according to its own internal logic or parameters. Defaults",
            "\t\tto FALSE. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Ones": {
        "comments": [
            "{ Description: Returns the number of bits set in an integer number. }",
            "{ Value must be a valid number, truncated to an integer, whose",
            "\tabsolute value lies in the range of 0 to 9223372036854775807 (This is",
            "\tthe largest 64-bit signed integer.) The number of bits set is",
            "\treturned. }"
        ],
        "snippets": [
            "Ones(",
            "\tValue { Required. Any numeric expression. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "OpChange": {
        "comments": [
            "{ Description: Wrapper for TagMigrator\\OpChange. Performs an immediate",
            "\tdeploy of a single tag change without disturbing any other tag changes",
            "\talready in place on the local branch. The tags must already exist. }",
            "{ If your application is set to auto-deploy, then OpChange and",
            "\tModifyTags accomplish the same result. If auto-deploy is not set, then",
            "\tthere is a difference in the result of the two functions. ModifyTags",
            "\tmakes a tag change locally, whereas OpChange will immediately deploy",
            "\tthat tag change. Running a deploy operation after ModifyTags' change,",
            "\tresults in the entire tag file (and all the included tags and their",
            "\tparameters) being deployed. OpChange is able to deploy just the one",
            "\tchange to the one tag within the file, leaving other modified tags in",
            "\tthat file as local changes. OpChanges are used for any tag change that",
            "\tis expected to be performed during systems operation, as opposed to",
            "\tchanges made during configuration. The example is an operator changing",
            "\ta tag's questionable status by using the context menu rather than",
            "\topening the configuration dialog. When called with the Merge==FALSE",
            "\tparameter it is possible to revert a tag parameter to its default or",
            "\tremove an override using the API GetTagConfiguredParameters . If",
            "\tOPChange is called with Merge=FALSE without using this API, there is",
            "\tno way to remove some configured parameters while keeping others. To",
            "\tmake changes to some configured parameters, called",
            "\tGetTagConfiguredParameters, modify the dictionary of parameters",
            "\t(add/modify/remove), then pass the modified dictionary into a call to",
            "\tOPChange. }"
        ],
        "snippets": [
            "\\OpChange(",
            "\tTagname, { Required. The name of the tag to be changed. }",
            "\tParmsDict, { Required. A dictionary of tag parameters to change. The",
            "\t\tkeys are parameter names and the values are the parameter values. For",
            "\t\texample: { \"Address\": 40001, \"Questionable\": 0 } }",
            "\tUser, { Required. The user responsible for the operational change. }",
            "\tComment, { Optional text. A descriptive comment about the change. }",
            "\tMerge { Optional Boolean. Defaults to TRUE. Controls whether the",
            "\t\tparameters are to be merged with the existing tag's parameters. If",
            "\t\tfalse, the parameters replace the tag's parameters and are expected to",
            "\t\tcontain user and timestamp metadata. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "OPCServer": {
        "comments": [
            "{ Description: Adds a new top-level branch to the VTScada OPC Serverâs",
            "\tnamespace hierarchy. }"
        ],
        "snippets": [
            "OPCServer(",
            "\tBranchName, { Required. The name of the branch added at the highest",
            "\t\tlevel of the hierarchy. }",
            "\tCallbackContext { Required. The object value of a running module",
            "\t\tcontaining some or all of the following callback modules (these",
            "\t\tcallback modules must be implemented by the programmer). In each case",
            "\t\tthe Item ID passed to the callback will *not* contain the top-level",
            "\t\tbranch name specified in the call to OPCServer. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Or": {
        "comments": [
            "{ Description: Performs a bit-wise OR operation and returns the",
            "\tresult. }",
            "{ The OR operation takes two binary numbers and compares their bits.",
            "\tEach corresponding bit in the result is 1 if at least one of the",
            "\tcorresponding bits is 1. If both bits are 0, the corresponding bit in",
            "\tthe result is 0. This function takes signed 64-bit integers values. If",
            "\ta number is passed outside the range of a signed 64-bit integer, then",
            "\tthe function will return invalid. If Value is invalid, the return",
            "\tvalue is invalid. (See: Bitwise Parameters & Operations ) }"
        ],
        "snippets": [
            "Or(",
            "\tParm1, Parm2[, Parm3 ...]) { Required. Any number of numeric",
            "\t\texpressions. The expressions will be truncated to 32 bit unsigned",
            "\t\tintegers. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Out": {
        "comments": [
            "{ Description: Writes an 8 bit byte to an I/O port. }",
            "{ This function requires that the VTSIO driver be installed. If Port",
            "\tor Value is out of range or invalid, nothing is written. If this",
            "\tstatement appears in a state, Value is written when its value changes.",
            "\tIf it is in a script, Value is written when the script is executed. }"
        ],
        "snippets": [
            "Out(",
            "\tPort, { Required. Any numeric expression giving the I/O address of the",
            "\t\tport to write. Port must be in the range 0 to 65535. }",
            "\tValue { Required. Any numeric expression giving the byte to write.",
            "\t\tValue must be in the range 0 to 255. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Output": {
        "comments": [
            "{ Description: Places formatted numbers or text on the screen. }",
            "{ Should not be used for new code. Maintained for",
            "\tbackward-compatibility only. This statement is the general statement",
            "\tfor displaying numbers and text on the screen. For small characters,",
            "\tor large characters with a negative Size, the statement is",
            "\tnon-destructive (can change without destroying the underlying image).",
            "\tLarge character output is destructive. For non-destructive out put,",
            "\tcare must be taken when choosing the colors on a colored (non-zero)",
            "\tbackground since the characters are exclusive ORed with the",
            "\tbackground. This gives a more general method of displaying text than",
            "\tthe Text statement but requires more parameters. }"
        ],
        "snippets": [
            "Output(",
            "\tX, { Required. Any numeric expression giving the X screen coordinate",
            "\t\tof the lower left corner of the number or text on the screen. }",
            "\tY, { Required. Any numeric expression giving the Y screen coordinate",
            "\t\tof the lower left corner of the number or text on the screen. }",
            "\tType { Required. Any numeric expression giving the type of the data to",
            "\t\tdisplay. The valid values for this parameter are: Type Data Type 1",
            "\t\tShort 2 Long 3 Float 4 Text 5 Binary 6 Octal 7 Hexadecimal Status",
            "\t\tvariables can be output using a Type value of 1 that will produce",
            "\t\teither a 0 or 1 on the screen. The type of the Value parameter does",
            "\t\tnot have to match the Type parameter, except for text. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "OutWord": {
        "comments": [
            "{ Description: Writes a 16 bit word to an I/O port. }",
            "{ This function requires that the VTSIO driver be installed. This",
            "\tfunction writes a 16 bit unsigned value to a CPU I/O port. If this",
            "\tstatement appears in a state, Value is written when its value changes.",
            "\tIf it is in a script, Value is written when the script is executed. }"
        ],
        "snippets": [
            "OutWord(",
            "\tPort, { Required. Any numeric expression giving the I/O address of the",
            "\t\tport to write. Port must be in the range 0 to 65535. }",
            "\tValue { Required. Any numeric expression giving the word to write.",
            "\t\tValue must be in the range 0 to 65535. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "OwningModule": {
        "comments": [
            "{ Description: Returns the module which contains a certain variable. }",
            "{ None }"
        ],
        "snippets": [
            "OwningModule(",
            "\tVariable { Required. Any expression for the variable value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Pack": {
        "comments": [
            "{ Description: Serializes an array of data or a set of parameters to",
            "\tthe object parameter into a stream }",
            "{ Pack() is recursive. If the values contain arrays, then those are",
            "\tpacked and so on. StreamVar must be a pointer to a variable, not",
            "\tsimply the name of a variable that holds a stream. This is because the",
            "\tPack function will create a new stream under certain circumstances and",
            "\tstore the packed data in it. If the variable that StreamVarPtr",
            "\taddresses contains a stream, then the data will be packed into that",
            "\tstream. If the variable that StreamVarPtr addresses contains Invalid,",
            "\tPack will create a new buffer stream, pack the data into it and store",
            "\tthe new stream in the variable pointed at by StreamVarPtr. If a buffer",
            "\tstream is supplied, or Pack creates a buffer stream, it will be",
            "\treplaced by a temporary file stream if the output stream exceeds 2Mb.",
            "\tThis provides a balance between performance and memory use. If a",
            "\tstream is provided, packing starts at the current stream position.",
            "\tAfter packing, the stream current position is left at the end of the",
            "\tpacked data. Only variables of numeric, text, or stream types will be",
            "\tpacked. Arrays of those types, up to and including 3 dimensions, will",
            "\talso be packed. Any illegal values are packed as Invalid. Further, the",
            "\tPack function has been designed in such a way that multidimensional",
            "\tarrays that have not had a value assigned can be handled. After the",
            "\tstream is unpacked, the array elements are allocated, but are assigned",
            "\tInvalid. Generally called in the form: Pack(Self(), 1, NParm(Self()),",
            "\t&Stream); This works because NParm(Self()) equals the highest index. }"
        ],
        "snippets": [
            "Pack(",
            "\tData, { Required. An object value, an array, or a structure. Contains",
            "\t\tthe data or the object value of the module whose parameters are to be",
            "\t\tpacked. For example, if you have 5 numeric values to pack, you would",
            "\t\tallocate a 1-dimensional array, 5 elements in length. You would then",
            "\t\tassign the 5 numerics to this array's elements, and pass the array to",
            "\t\tthis parameter. You would specify that you wish to pack from subscript",
            "\t\t1 to 5. Refer to the example section for more information. }",
            "\tStart, { Required. The starting array index (zero-based), or parameter",
            "\t\tnumber (one-based) of the data to pack. }",
            "\tEnd, { Required. For arrays this is the last array index. For",
            "\t\tparameters, it is the parameter number of the data to pack. If packing",
            "\t\ta structure rather than an array, this must be the number of elements",
            "\t\trather than the final index. }",
            "\tStreamVarPtr, { Required. A pointer to a variable holding the stream",
            "\t\tinto which the data will be packed. The variable can also hold Invalid",
            "\t\t- see Comments section for more details. }",
            "\tKeyDictionary { Optional. A dictionary that maps structure names to a",
            "\t\tnumber that will represent the structure in the packed stream. Within",
            "\t\tthe dictionary, the key is the structure name and the value is the",
            "\t\tassigned number. There is no requirement for the Pack KeyDictionary",
            "\t\tparameter and the Unpack MirrorKey parameter to have the same number",
            "\t\tof elements. All that is required is that the Unpack MirrorKey",
            "\t\tdictionary has all of the structures that are in that particular",
            "\t\tpacked stream. If the KeyDictionary doesnât have the structure that",
            "\t\twas packed, the returned data is a simple array rather than a",
            "\t\tstructure. IfKeyDictionary is not used at all, structures packed using",
            "\t\tPack() will also include additional data to allow UnPack to generate",
            "\t\tan equivalent structure. So use the KeyDictionary mechanism if you",
            "\t\tneed to avoid the associated code bloat. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "PackParms": {
        "comments": [
            "{ Description: This method packs supplied parameters into a stream.",
            "\tSubroutine call only. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. The stream contents can be unpacked into variables using",
            "\tthe UnpackParms method. The parameters can be any of the permitted RPC",
            "\tdata types. If a parameter is provided which is other than one of",
            "\tthose data types, an Invalid is packed in its place. }"
        ],
        "snippets": [
            "\\RPCManager\\PackParms(",
            "\tStream, { Required. The initial packed RPC stream. The parameters",
            "\t\tprovided in parameters P1, P2, etc. will be packed and appended onto",
            "\t\tthis stream. If Invalid, a new BuffStream will be created to hold the",
            "\t\tpacked parameters. }",
            "\tP1, P2, â¦ { Optional parameters that will be packed into the stream.",
            "\t\tUp to 100 parameters are allowed. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "PackRPC": {
        "comments": [
            "{ Description: Packs an RPC call and a set of parameters into a",
            "\tstream. Subroutine call only. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. The return value from this method is a BuffStream",
            "\tcontaining the original contents as specified in the Stream parameter",
            "\twith the new RPC appended. This can be used to build a stream of RPCs",
            "\tfor transmission as one atomic unit. }"
        ],
        "snippets": [
            "\\RPCManager\\PackRPC(",
            "\tStream, { Required. The initial packed RPC stream. The RPC specified",
            "\t\tin this call will be appended onto the end of this stream. If Invalid,",
            "\t\ta new BuffStream will be created to hold the RPC. }",
            "\tModuleName, { Required. The textual name of the RPC subroutine to be",
            "\t\texecuted. Must be valid. }",
            "\tModuleContext, { Required. The context in which the \"ModuleName\" will",
            "\t\tbe executed. The \"base\" context for a VTScada layer-based application",
            "\t\tis \"Code\". For a non-VTScada (pure script) application, the base",
            "\t\tcontext is \"\\System\". Must be valid. }",
            "\tParameters { Required. A set of up to 32 parameters to the RPC",
            "\t\tsubroutine. Can be any mixture of the legal types. Supplying a",
            "\t\tparameter of an illegal type will cause it to be replaced with Invalid",
            "\t\twhen the RPC subroutine is invoked. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "PAddressEntry": {
        "comments": [
            "{ Description: To be used for Tag I/O address entry. Checks whether",
            "\tthe attached driver has an AddressAssist module and uses that if",
            "\tavailable. Otherwise, presents a standard edit field into which the",
            "\tI/O address may be entered. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary\\. The \"P\" tools (Pcheck box, PContributor,",
            "\tPColorSelect, PDroplist, and PEditField) were intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. PAddressEntry should not be",
            "\tused with the AnalogStatus tag as that tag stores Address, History",
            "\tAddress and History Scan Rate together in one parameter. Use",
            "\tAddressEntry instead. Usual height of the GUITransform: 45 - 55",
            "\tpixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PAddressEntry(",
            "\tParmNum, { Any numeric expression giving the parameter number (from 0)",
            "\t\tin the caller to alter. }",
            "\tIODevice, { Any expression for the object value of the I/O device",
            "\t\tdriver being used. }",
            "\tSupportedData, { A bitwise expression, indicating the data type. (See:",
            "\t\tBitwise Parameters & Operations ) Bit Meaning when set 0 Digital 1",
            "\t\tAnalog 2 Text }",
            "\t0, { 1 }",
            "\t2",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PAlmPriority": {
        "comments": [
            "{ Description: Draws a droplist of the currently available alarm",
            "\tpriorities with an optional title and bevel. }",
            "{ This module is a member of the VTScada Dialog Library, and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary.. The \"P\" tools are intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. This parameter tool expects",
            "\tthe first parameter of its calling module to contain an array of tag",
            "\tparameters. It will then set the element indicated by ParmNum to the",
            "\ttext string displayed in the selected line of the droplist. The height",
            "\tof the unopened droplist is constant, with the horizontal boundaries",
            "\tof its calling transform defining its width, and the vertical",
            "\tboundaries of its calling transform defining its opened height, which",
            "\twill include the added height of the bevel above the field, but may or",
            "\tmay not include the title, depending on the alignment used. Note that",
            "\tif the entire list can be displayed in a smaller area than indicated",
            "\tby the vertical boundaries of the calling transform, the dropped list",
            "\theight will be decreased. The dropped height of the list will always",
            "\thave a minimum height of 1 line (below the field). Usual height: 45",
            "\tpixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PAlmPriority(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTitle, { Required. Any text expression to be used as a title for the",
            "\t\tdroplist. }",
            "\tAlignTitle, { Optional. Any logical expression. Indicates the title",
            "\t\talignment such that if it is TRUE (non-zero), the title is included in",
            "\t\tthe calculation for vertical alignment. If FALSE (0), it is added to",
            "\t\tthe droplist after it, and its bevel (if one exists) has been",
            "\t\tvertically aligned. The default is TRUE. }",
            "\tFocusID, { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tTrigger, { Optional. Any logical expression. A variable whose value is",
            "\t\tset to true (1) when the ParmNum parameter's value has been set by the",
            "\t\tdroplist. The setting of the parameter will not cause Trigger to be",
            "\t\tset. If this information is not required, a constant may be used. }",
            "\tInit, { Optional. Any expression for the initial value displayed in",
            "\t\tthe field. The default value is Data[Index]. If Index is invalid, then",
            "\t\tthe droplist will initially appear blank. }",
            "\tDrawBevel, { Optional. Any logical expression. If TRUE (non-0), a",
            "\t\tbevel is drawn around the droplist. If FALSE (0), no bevel is drawn.",
            "\t\tThe default value is TRUE. }",
            "\tVertAlign { Optional. Any numeric expression that sets the vertical",
            "\t\talignment of the unopened droplist according to one of the following:",
            "\t\tValue Vertical Alignment 0 Top 1 Center 2 Bottom Whether the title is",
            "\t\tincluded when the vertical alignment is calculated is determined by",
            "\t\tthe value of AlignTitle. The default value is 0. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PalStatus": {
        "comments": [
            "{ Description: Returns the color intensities of the current palette.",
            "\tMaintained for backward compatibility only. }",
            "{ The returned number ranges from 0 to 1, and indicates the red,",
            "\tgreen, or blue color content of a color index, or the alpha channel",
            "\t(opacity) in the case of index 3. }"
        ],
        "snippets": [
            "PalStatus(",
            "\tColor, { Required. Any expression giving the color to examine. May be",
            "\t\ta number from 0 to 255 (from the VTScada palette) or an RGB value with",
            "\t\talpha channel, expressed as \"<AARRGGBB>\". }",
            "\tRGBIndex { Required. Any numeric expression giving the color component",
            "\t\tto return. Red, green, blue, or alpha. RGBIndex Color Content 0 Red 1",
            "\t\tGreen 2 Blue 3 Alpha channel }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Parameter": {
        "comments": [
            "{ Description: Returns the value of (or may assign a value to) a",
            "\tparameter of a module, specified by the index. }",
            "{ This function returns the value passed in the module call in the",
            "\tposition Index. It may also appear on the left side of an assignment",
            "\toperator (=), in which case it will try to assign the value to the",
            "\tparameter in Index. The parameter must be a reference type parameter",
            "\tto receive an assignment (all undeclared parameters default to",
            "\treference type). Assignment to a non-reference parameter or function",
            "\thas no effect. The return value of Parameter is invalid if there is no",
            "\tparameter at Index. For launched modules, this function will not look",
            "\tat parameters beyond the number of formal parameters. }"
        ],
        "snippets": [
            "Parameter(",
            "\tObject, { Required. Any object (the object value of any module",
            "\t\tinstance). }",
            "\tIndex { Required. Any numeric expression giving the number of the",
            "\t\tparameter of interest, starting from 1. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ParameterEdit": {
        "comments": [
            "{ Description: Draws an interface to allow the user to choose how to",
            "\tedit a parameter. Used in tag widgets. }",
            "{ Metadata indicating the version number must be added to the ParmVal",
            "\tparameter. For example, { Set up variables for ParameterEdit }",
            "\tMetaData(Value, \"Revision\") = 0; Do not attempt to modify parameter",
            "\tvalues directly. Rather, set this to a copy of the Parms array value",
            "\tand then reassign this when updated. For example: { In the init state:",
            "\t} MyPanelParm = MyOldPanelParm = Parms[#MyParm]; { In the main panel:",
            "\t} ParameterEdit(MyPanelParm, ParmDefs[#MyParm], ...); If MyPanelParm",
            "\t!= MyOldPanelParm || Valid(MyPanelParm) != Valid(MyOldPanelParm); [",
            "\tMyOldPanelParm = Parms[#MyParm] = RootValue(MyPanelParm); ] Wrappers",
            "\tsuch as NumericParameterEdit exist to make this function easier to",
            "\tuse. See: ParameterEdit Snap-ins }"
        ],
        "snippets": [
            "\\ParameterEdit(",
            "\tParmVal, { The variable to be changed. Metadata indicating the",
            "\t\trevision number (always 0) must be attached. }",
            "\tParmPtr, { Code Pointer to the parameter value so the ParameterEdit",
            "\t\tmodules can dissect and categorize it }",
            "\tEnable, { Flag - TRUE to enable the drawing of this parameter edit",
            "\t\tmodule. }",
            "\tTitle, { Title for this parameter }",
            "\tModules, { Array of module names (snap-ins such as ParmEditColor,",
            "\t\tetc.) for parameter editing }",
            "\tContexts, { No longer used. Should be set to INVALID. Context is",
            "\t\talways Code. }",
            "\tParameters, { Parameters for the parameter edit modules. A",
            "\t\tmultidimensional array, where each sub-array is a parameter list for",
            "\t\teach of the entries in the Modules array. }",
            "\tTitleWidth, { Width allotted for the title. If Invalid, uses a",
            "\t\tstandard size (160px). }",
            "\tStartIndex, { Starting Index for Parm Edit Modules }",
            "\tPtrWaitClose, { Set to true to tell caller to wait to close }",
            "\tDialogRoot, { Calling dialog window }",
            "\tFocusID, { Optional focus ID value from 0 to 32767 . Defaults to 1 if",
            "\t\tthe control is enabled, otherwise 0. The parameter edit control will",
            "\t\thave two parts and thus use two ID values: the one specified (or the",
            "\t\tdefault) and one greater than that. }",
            "\tDescription { Optional text, describing this parameter }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ParameterSet": {
        "comments": [
            "{ Description: When passed a set of up to 256 parameters, will return",
            "\tthem as an array. }",
            "{ The returned array of parameters is suitable for use with",
            "\tParameterEdit. }"
        ],
        "snippets": [
            "\\ParameterSet(",
            "\tParm0, { The first parameter to include. }",
            "\tParm1 to Parm256 { More parameters. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "PAreaSelect": {
        "comments": [
            "{ Description: Draws a droplist of area options with optional title",
            "\tand bevel. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary.. This parameter tool expects the first parameter of",
            "\tits calling module to contain an array of tag parameters. It will then",
            "\tset the second element (element 1) to the text string that designates",
            "\tthe selected area. The height of the (unopened) area droplist is",
            "\tconstant, with the horizontal boundaries of its calling transform",
            "\tdefining its width, and the vertical boundaries of its calling",
            "\ttransform defining its opened height, which will include the added",
            "\theight of a bevel, but may or may not include the title, depending on",
            "\tthe alignment used. Note that if the entire list can be displayed in a",
            "\tsmaller area than indicated by the vertical boundaries of the calling",
            "\ttransform, the dropped list height will be decreased. The dropped",
            "\theight of the list will always have a minimum height of 1 line (below",
            "\tthe field). Usual height: 100 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PAreaSelect(",
            "\tCanEdit, { Any logical expression. If true (non-0) the text displayed",
            "\t\tin the area droplist can be edited in the same manner as an editfield,",
            "\t\tif false (0) it cannot be edited directly. Defaults to true (1) if",
            "\t\tinvalid. }",
            "\tFocusID, { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tInit, { Any numeric expression indicating the initial value. No",
            "\t\tdefault is provided. }",
            "\tDrawBevel, { Any logical expression. If true (non-0) a bevel is drawn",
            "\t\taround the area droplist, if false (0) no bevel is drawn. Defaults to",
            "\t\ttrue (1) if invalid. }",
            "\tVertAlign, { Any numeric expression that sets the vertical alignment",
            "\t\tof the unopened area droplist according to one of the following:",
            "\t\tVertAlign Vertical Alignment 0 Top 1 Center 2 Bottom Whether the title",
            "\t\tis included when the vertical alignment is calculated, is determined",
            "\t\tby the value of AlignTitle. Defaults to 0 if invalid. }",
            "\t0, { 1 }",
            "\t2",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ParentModule": {
        "comments": [
            "{ Description: Returns the parent module of a module. }",
            "{ The parent module is the module in which Module is defined. }"
        ],
        "snippets": [
            "ParentModule(",
            "\tModule { Required. Any expression for the module. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ParentObject": {
        "comments": [
            "{ Description: Returns the parent of an object. }",
            "{ Returns the parent object of the given object instance. }"
        ],
        "snippets": [
            "ParentObject(",
            "\tObject { Required. The object you are inquiring about. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ParentWindow": {
        "comments": [
            "{ Description: Returns the object value of the nearest non-child",
            "\twindow. }",
            "{ This function will start at the object value given and find the",
            "\tfirst window which is not a child window. If there is no window found",
            "\tthe return value will be invalid. For modules in non-child windows",
            "\t(i.e. one without bit 9 set), RootWindow and ParentWindow will return",
            "\tthe same value. For child windows, RootWindow will return the root",
            "\tmodule in the child window, while ParentWindow will return the root",
            "\tmodule in the child window's closest non-child calling window. To test",
            "\twhether a custom widget is being displayed while in \"editing mode\"",
            "\t(that is, in the Idea Studio) you can test whether",
            "\tParentWindow()\\Editing is TRUE or FALSE. }"
        ],
        "snippets": [
            "ParentWindow(",
            "\tObject { Required. Any object (the object value of any running module",
            "\t\tinstance). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ParmPhrase": {
        "comments": [],
        "snippets": [],
        "is_steady_state": false,
        "is_script": false
    },
    "ParmToBuff": {
        "comments": [
            "{ Description: Returns a buffer of formatted numeric parameter values.",
            "\t}"
        ],
        "snippets": [
            "ParmToBuff(",
            "\tObject, { Required. Any object (the object value of any running module",
            "\t\tinstance). }",
            "\tIndex, { Required. Any numeric expression giving the first parameter",
            "\t\tto format, starting from 1. }",
            "\tN, { Required. Any numeric expression giving the number of parameters",
            "\t\tto format. If there are fewer actual parameters than N + Index, this",
            "\t\tstatement stops at the last parameter. }",
            "\tOption { Required. Any numeric expression which specifies the format",
            "\t\tof the buffer read. Option Format 0 Unsigned binary (low byte first) 1",
            "\t\tSigned binary (low byte first) 2 BCD (binary coded decimal) (low byte",
            "\t\tfirst) 3 ASCII octal (high byte first) 4 ASCII decimal (high byte",
            "\t\tfirst) 5 ASCII hex (high byte first) 6 ASCII floating point (high byte",
            "\t\tfirst) 7 IEEE float/double (low byte first) 8 <obsolete> 9",
            "\t\tAllen-BradleyÂ® PLC/3 floating point 10 VAX single precision floating",
            "\t\tpoint }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ParserSRO": {
        "comments": [
            "{ Description: Adds a scope resolution reference to a variable on the",
            "\ttop of the PARSER_STACK given the stack and the object variable. }",
            "{ The ParserStack is returned from the Compile function. This assumes",
            "\tthat the text value for the variable after the \\ is already added as a",
            "\tparameter. This is only used when compiling text and is not required",
            "\tfor normal operation. }"
        ],
        "snippets": [
            "ParserSRO(",
            "\tParserStack, { Required. Any expression for the parser stack value. }",
            "\tVariable { Required. Any expression for the variable value that will",
            "\t\tbe referenced by scope resolution. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "PasteObjects": {
        "comments": [
            "{ Description: Pastes the code for multiple GUITransforms into a page",
            "\tsource file. }"
        ],
        "snippets": [
            "PasteObjects(",
            "\tObjectText, { Required. The text string containing objects. }",
            "\tSelDAGs { Required. An array of code pointers of the pasted objects. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Path": {
        "comments": [
            "{ Description: Returns a graphics path value. }",
            "{ A path is a series of Vertex values, connected by either straight",
            "\tlines or Bezier curves. A path may be open, with two separate ends, or",
            "\tclosed, with one continuous loop from the last vertex to the first. A",
            "\tPath value is used in such things as the GUIPolygon layered graphics",
            "\tfunction to specify its shape or in a Trajectory value to specify the",
            "\tpath of animation or translation. }"
        ],
        "snippets": [
            "Path(",
            "\tClosed, { Required. Any logical expression. If true, this is a closed",
            "\t\tpath, and the last Vertex is considered to be connected to the first",
            "\t\tpoint. If false, this is an open path ending at the last Vertex. }",
            "\tV1, V2, ... { Required. Any expressions that return Vertex values. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PathDraw": {
        "comments": [
            "{ Description: Used within a Idea Studio handler to inform the engine",
            "\tthat a path is being drawn, and to set the appearance of that path.",
            "\tUsed for both lines and pipes. The resulting object will be a",
            "\tGUIPolygon. }",
            "{ Do not confuse PathDraw with the function DrawPath(). This function",
            "\twill work only inside the context of a window with the Drop Target bit",
            "\t(22) set. The path may have multiple vertices. If the function stops",
            "\tduring drawing, no portion will be drawn. When drawing a pipe, set the",
            "\tstyle for the Pen() to 100. }"
        ],
        "snippets": [
            "PathDraw(",
            "\tPen, { Required. Defines the color, style and width of the path. May",
            "\t\tbe any of the following: Value Notes Pen object If the pen color is",
            "\t\ttransparent, invisible, or has a zero width, then a 1-pixel black line",
            "\t\twill be shown only while the path is being drawn to show the position.",
            "\t\tPalette index Defines only the color of the line. A 1-pixel, solid",
            "\t\tline will be drawn. System color Defines only the color of the line. A",
            "\t\t1-pixel, solid line will be drawn. -1 (transparent line) The line will",
            "\t\tnot be shown, except that a 1-pixel solid black line will be used",
            "\t\twhile the path is being drawn. aRGB string Defines only the color of",
            "\t\tthe line. A 1-pixel, solid line will be drawn. }",
            "\tPen object, { Palette index }",
            "\tSystem color, { -1 (transparent line) }",
            "\taRGB string, { Brush }",
            "\tBrush object, { Palette index }",
            "\tSystem color, { -1 (transparent line) }",
            "\taRGB string",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PatternMatch": {
        "comments": [
            "{ Description: Compares a string against a reference pattern and",
            "\treturns true if the string matches the pattern. Along with literal",
            "\tcharacters, PatternMatch currently supports the * and ? wildcard",
            "\tcharacters within the reference pattern (see Pattern parameter). }",
            "{ If any of the arguments to PatternMatch are Invalid, PatternMatch",
            "\treturns Invalid. }"
        ],
        "snippets": [
            "PatternMatch(",
            "\tString, { Required. The string you wish to compare to Pattern. }",
            "\tPattern, { Required. The reference pattern to which you wish String to",
            "\t\tbe compared. Wildcards are allowed. The wildcard \"?\" will match any",
            "\t\tcharacter in a name. The wildcard \"*\" will match any series of",
            "\t\tcharacters. The backslash character has special meaning, in that it",
            "\t\tcan be added in front of the characters *, ? or \\ to search for these",
            "\t\tcharacters explicitly. In these three cases, the leading backslash",
            "\t\twill be ignored. Other characters must match exactly. A leading",
            "\t\tbackslash in front of any characters other than the three noted will",
            "\t\tbe included in the search. }",
            "\tCaseInsensitive { An optional Boolean parameter that indicates whether",
            "\t\tPatternMatch should be case insensitive when it performs the matching.",
            "\t\tThe default for this parameter is FALSE, indicating that PatternMatch",
            "\t\tshould be case sensitive. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "PCheckbox": {
        "comments": [
            "{ Description: Parameter Setting check box. This module draws a check",
            "\tbox with optional label. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary\\. The \"P\" tools (Pcheck box, PContributor,",
            "\tPColorSelect, PDroplist, and PEditField) were intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. This parameter tool expects",
            "\tthe first parameter of its calling module to contain an array of tag",
            "\tparameters. It will then set the element indicated by ParmNum to the",
            "\tlogical value set by the check box. The size of the check box is",
            "\tconstant, with the boundaries of its calling transform defining the",
            "\tposition of the check box and its label. Usual height: 12 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PCheckBox(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tLabel, { An optional parameter that is any text expression to be used",
            "\t\tas a label with the check box. The default value is a blank label. }",
            "\tBoxOnLeft, { An optional parameter that is any logical expression. If",
            "\t\tTRUE (non-0) the check box will appear to the left of the label, if",
            "\t\tFALSE (0) it will be to the right. The default value is TRUE. }",
            "\tAlignment, { An optional parameter that is any numeric expression that",
            "\t\tsets the alignment of the check box and its label according to one of",
            "\t\tthe following options: Alignment Horizontal Alignment Vertical",
            "\t\tAlignment 0 Left Top 1 Right Top 2 Full Top 3 Left Centered 4 Right",
            "\t\tCentered 5 Full Centered 6 Left Bottom 7 Right Bottom 8 Full Bottom }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PColorEdit": {
        "comments": [
            "{ Description: Wrapper module for the standard color editing",
            "\tparameters including hue, saturation, brightness, transparency,",
            "\tcontrast, colorizing hue and intensity. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary\\. The \"P\" tools (Pcheck box, PContributor,",
            "\tPColorSelect, PDroplist, and PEditField) were intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. This parameter tool expects",
            "\tthe first parameter of its calling module to contain a pointer to an",
            "\tarray of tag parameters. It will then set the elements indicated by",
            "\tHue, Saturation, Brightness, Transparency, Contrast, ColorizeHue and",
            "\tColorizeInt to the logical value set by the matching input field. This",
            "\tmodule provides an easier way to add color editing to a Panel module.",
            "\tIt will default invalid parameters. Usual height: 260 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PColorEdit(",
            "\tParms, { Required. A pointer to the array of parameters. }",
            "\tHue, { The parameter number for the Hue. }",
            "\tSaturation, { The parameter number for the Saturation. }",
            "\tBrightness, { The parameter number for the Brightness. }",
            "\tTransparency, { The parameter number for the Transparency. }",
            "\tContrast, { The parameter number for the Contrast. }",
            "\tColorizeHue, { The parameter number for the ColorizeHue. }",
            "\tColorizeInt, { The parameter number for the Colorize Intensity. }",
            "\tTitle, { An optional parameter that is any expression for a title to",
            "\t\tbe applied. }",
            "\tFocusID, { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tTrigger { Set when the variable is changed. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PColorSelect": {
        "comments": [
            "{ Description: Draws a button that opens a color selection dialog and",
            "\tan area that displays the currently selected color. }"
        ],
        "snippets": [
            "\\DialogLibrary.PColorSelect(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tBtnLabel, { An optional parameter that is any text expression to be",
            "\t\tused as a label on the color selection button. }",
            "\tBtnOnLeft, { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0) the button will appear to the left of the color display",
            "\t\tarea, if false (0) it will be to the right. The default value is true.",
            "\t\t}",
            "\tStandard, { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0) the button and color display area will be standard system",
            "\t\tsize, if false (0) they will be sized to fit their boundaries and",
            "\t\tVertAlign will be ignored. The default value is true. }",
            "\tVertAlign { An optional parameter that is any numeric expression that",
            "\t\tsets the vertical alignment of the button and display area according",
            "\t\tto one of the following options: VertAlign Vertical Alignment 0 Top 1",
            "\t\tCenter 2 Bottom Note: If Standard is true, this parameter is ignored.",
            "\t\tThe default value is 0, top alignment. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PContributor": {
        "comments": [
            "{ Description: Draws a split list displaying all contributors to a",
            "\tspecific tag. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary\\. The \"P\" tools (Pcheck box, PContributor,",
            "\tPColorSelect, PDroplist, and PEditField) were intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. This parameter tool expects",
            "\tthe first parameter of its calling module to contain an array of tag",
            "\tparameters. It will then set the element indicated by ParmNum to the",
            "\tchosen tag's name. For any optional parameter that is to be set, all",
            "\toptional parameters preceding the desired one must be present,",
            "\talthough they may be invalid. This function provides a split list",
            "\tcontaining the names and descriptions of all contributors stored in",
            "\tHolderName. Double-click on an item in this list to obtain the",
            "\tProperties dialog for the tag. Click on the Add button to add a new",
            "\tcontributor of the tag type \"PointType\", which is owned by",
            "\t\"ContainerObj\", and which has a contribution type \"ContribType\". Click",
            "\ton the Delete button to terminate the container/contributor",
            "\trelationship for the currently highlighted contributor. The former",
            "\tcontributor is not deleted from the application, or from the database.",
            "\tUsual height: 200-250 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PContributor(",
            "\tHolderName, { Required. Any text expression giving the variable name",
            "\t\tfor container information. }",
            "\tContainerObj, { Required. The object value of the container. }",
            "\tContribType, { Required. Any text expression giving the contribution",
            "\t\ttype. }",
            "\tTagType, { Required. Any text expression for the type of Tag for which",
            "\t\tthe contributors are being sought. }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a title for the splitlist. }",
            "\tFocusID, { Required. A parameter that is any numeric expression for",
            "\t\tthe focus number of the splitlist and its two buttons. The splitlist",
            "\t\twill have a focus ID equal to FocusID, the left button will have one",
            "\t\tof FocusID + 1, while the right button will have a focus ID of FocusID",
            "\t\t+ 2. If FocusID is 0, the splitlist will display its current setting,",
            "\t\tbut its accompanying buttons will not be able to be selected. }",
            "\tNoAdd { An Boolean optional expression. Set TRUE when the Add button",
            "\t\tis disabled. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PDroplist": {
        "comments": [
            "{ Description: Parameter Setting Droplist. This module draws a",
            "\tdroplist with (optional) title and bevel. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary\\. The \"P\" tools (Pcheck box, PContributor,",
            "\tPColorSelect, PDroplist, and PEditField) were intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. This parameter tool expects",
            "\tthe first parameter of its calling module to contain an array of tag",
            "\tparameters. It will then set the element indicated by ParmNum to the",
            "\ttext string displayed in the selected line of the droplist. The height",
            "\tof the (unopened) droplist is constant, with the horizontal boundaries",
            "\tof its calling transform defining its width, and the vertical",
            "\tboundaries of its calling transform defining its opened height, which",
            "\twill include the added height of the bevel above the field, but may or",
            "\tmay not include the title, depending on the alignment used. Note that",
            "\tif the entire list can be displayed in a smaller area than indicated",
            "\tby the vertical boundaries of the calling transform, the dropped list",
            "\theight will be decreased. The dropped height of the list will always",
            "\thave a minimum height of 1 line (below the field). For any optional",
            "\tparameter that is to be set, all optional parameters preceding the",
            "\tdesired one must be present, although they may be invalid. Usual",
            "\theight: 40 }"
        ],
        "snippets": [
            "\\DialogLibrary.PDropList(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTitle, { Required. Any text expression to be used as a title for the",
            "\t\tdroplist. }",
            "\tDataOrAlignTitle, { Required. A flexible parameter that is either an",
            "\t\tarray of data to display in the droplist, or a logical expression",
            "\t\tindicating the alignment of the droplist's title. If this is an array,",
            "\t\tthe parameter called AlignTitleOrL1 indicates the title alignment. If",
            "\t\tthis parameter is invalid or numeric, it indicates the title alignment",
            "\t\tsuch that if it is TRUE (non-0) the title is included in the",
            "\t\tcalculation for vertical alignment, if FALSE (0) it is added to the",
            "\t\tdroplist after it (and its bevel if one exists) has been vertically",
            "\t\taligned. The default is TRUE. }",
            "\tCanEdit, { An optional parameter that is any logical expression. If",
            "\t\tTRUE (non-0) the text displayed in the droplist can be edited in the",
            "\t\tsame manner as an editfield, if FALSE (0) it cannot be edited",
            "\t\tdirectly. The default value is FALSE. }",
            "\tIndex, { An optional parameter that is a variable whose value",
            "\t\tindicates the array index of the highlighted item in the list. If this",
            "\t\tinformation is not required, a constant may be used. This value will",
            "\t\tbe used to calculate the initial value displayed in the droplist (see",
            "\t\tInit). }",
            "\tFocusID, { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tTrigger, { Optional. If the droplist is editable, Trigger provides",
            "\t\tfeedback. While editing, the value will be 0. When editing is complete",
            "\t\t(tab, enter or loss of focus) the value will change to non-zero, 1 if",
            "\t\tenter is pressed, and 2 otherwise. }",
            "\tInit, { An optional parameter that is any expression for the initial",
            "\t\tvalue displayed in the field. The default value is Parms[ParmNum]. If",
            "\t\tIndex is invalid, the droplist will initially appear blank. }",
            "\tDrawBevel, { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0) a bevel is drawn around the droplist, if false (0) no",
            "\t\tbevel is drawn. The default value is true. }",
            "\tVertAlign, { An optional parameter that is any numeric expression that",
            "\t\tsets the vertical alignment of the unopened droplist according to one",
            "\t\tof the following: VertAlign Vertical Alignment 0 Top 1 Center 2 Bottom",
            "\t\tWhether the title is included when the vertical alignment is",
            "\t\tcalculated is determined by the value of AlignTitle. The default value",
            "\t\tis 0. }",
            "\t0, { 1 }",
            "\t2",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PEditfield": {
        "comments": [
            "{ Description: Parameter Setting Editfield. This module draws an",
            "\teditfield with (optional) title and bevel. Note: PPhraseEdit is",
            "\trecommended for use instead of PEditField in most situations where the",
            "\tparameter is text. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary\\. The \"P\" tools (Pcheck box, PContributor,",
            "\tPColorSelect, PDroplist, and PEditField) were intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. This parameter tool expects",
            "\tthe first parameter of its calling module to contain an array of tag",
            "\tparameters. It will then set the element indicated by ParmNum to the",
            "\tvalue in the editfield. The height of the editfield is constant, with",
            "\tthe horizontal boundaries of its calling transform defining its width,",
            "\tand the vertical boundaries of its calling transform defining the",
            "\tboundaries in which it is to be confined vertically, which will",
            "\tinclude the added height bevel, but may or may not include the title,",
            "\tdepending on the alignment used. Usual height: 45 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PEditField(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a title for the field. }",
            "\tDataType, { Defaults to 4 unless otherwise specified. DataType Type 0",
            "\t\tByte (unsigned) 1 Short (2 byte signed) 2 Long (4 byte signed) 3",
            "\t\tDouble precision floating point (8 byte signed) 4 Text 5 Octal (4 byte",
            "\t\tunsigned) 6 Hexadecimal (4 byte unsigned) For types 0 - 2, if the",
            "\t\tnumber entered into the field is prefaced by a \"0x\" the value is taken",
            "\t\tto be hexadecimal format, and if it is prefaced by a \"0\" it is",
            "\t\tconsidered to be octal. In either case, the value is converted to",
            "\t\tdecimal format when return is pressed or the focus is lost. For type",
            "\t\t5, regardless of whether the number entered into the field is prefaced",
            "\t\tby a \"0\" the value is taken to be octal and will be displayed as such.",
            "\t\tThe actual type of Variable will be text. Type 6, like type 5 will be",
            "\t\tkept in its declared format of hexadecimal regardless of whether the",
            "\t\tnumber entered into the field is prefaced by a \"0x\". The actual type",
            "\t\tof Variable will be text }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6 { FocusID }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PEditName": {
        "comments": [
            "{ Description: An edit field for setting tag names. This module draws",
            "\tan edit field that is to be connected to the name of a tag. Should be",
            "\tused by all tag ConfigFolder modules for setting the name parameter. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary.. The \"P\" tools (PCheckBox, PContributor, PColorSelect,",
            "\tPDroplist, and PEditField) were intended only for use in configuration",
            "\tfolders and drawing panel modules, and therefore are subject to the",
            "\tsystem security restraints. Usual height: 45 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PEditName(",
            "\tTrigger, { Required. Set when the name variable is changed. }",
            "\tDrawBevel, { Optional Boolean expression that when set to TRUE, causes",
            "\t\ta bevel to be drawn around the control. }",
            "\tTitle, { Optional. Any text that you would like display as the title",
            "\t\tof the edit field. Defaults to \"Name\". }",
            "\tID { Optional. Any numeric expression providing the Focus ID of the",
            "\t\tedit field. Defaults to 1. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PFileChooser": {
        "comments": [
            "{ Description: Parameter setting file selection. Provides an edit box",
            "\tfor specifying a file name, along with a label and a browse button. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary\\. The \"P\" tools (Pcheck box, PContributor,",
            "\tPColorSelect, PDroplist, and PEditField) were intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. This parameter tool expects",
            "\tthe first parameter of its calling module to contain an array of tag",
            "\tparameters. It will then set the element indicated by ParmNum to the",
            "\tvalue in the editfield. }"
        ],
        "snippets": [
            "\\DialogLibrary.PFileChooser(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a title for the field. Defaults to \"\" if invalid. }",
            "\tButtonLabel, { An optional parameter that is any text expression to be",
            "\t\tused as a label for the browse button. Defaults to \"...\" if invalid. }",
            "\tID, { Boolean. If this value is FALSE (0), the field will display its",
            "\t\tcurrent setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tTrigger, { Required. Trigger provides feedback. While editing, the",
            "\t\tvalue will be 0. When editing is complete (tab, enter or loss of",
            "\t\tfocus) the value will change to non-zero: 1 if enter is pressed, 2",
            "\t\totherwise. }",
            "\tView, { Required. Indicates how to display the editfield, as follows.",
            "\t\tThe default value is 2 if FocusID is 0 and 1 otherwise. View Display",
            "\t\tmode 0 Invisible 1 Normal (color scheme - no graying) 2 Grayed-out",
            "\t\t(only if FocusID is 0) 3 Non-gray text on a shaded background This",
            "\t\tparameter may be used to force an editfield with a FocusID of 0 to",
            "\t\tdisplay normally, rather than allowing it to default to its grayed",
            "\t\tcolor. Note that if the FocusID is not 0, setting this value as 2 will",
            "\t\tnot force the field to gray out. }",
            "\tSave, { Save Save Mode 0 Open dialog 1 Save dialog -1 Browse for",
            "\t\tfolder -2 Browser for folder + add trailing \"\\\" }",
            "\tFilterPattern, { Required text. An array or a semicolon-separated list",
            "\t\tof wildcard file patterns for the types that will appear. Defaults to",
            "\t\t\"\" if invalid. }",
            "\tFilterDesc, { Required text. An array or a semicolon-separated list of",
            "\t\ttext values describing the corresponding FilterPatterns. Defaults to",
            "\t\t\"\" if invalid. }",
            "\tDialogTitle, { Required text. The title to apply to the file dialog.",
            "\t\tDefaults to \"\" if invalid. }",
            "\tExtensionToUse, { Required text. For save dialogs (Save parameter ==",
            "\t\t1) the file extension to use if not specified by the user. Defaults to",
            "\t\t\"\" if invalid. }",
            "\tDrawBevel, { OptionalBoolean. If TRUE, the bevel is drawn }",
            "\tVertAlign, { Optional. Any numeric expression that sets the vertical",
            "\t\talignment of the edit field according to one of the following options",
            "\t\tVertAlign Vertical Alignment 0 Top 1 Center 2 Bottom Whether the title",
            "\t\tis included when the vertical alignment is calculated is determined by",
            "\t\tthe value of AlignTitle. The default value is 0. }",
            "\tAlignTitle { Optional Boolean. TRUE if title affects alignment }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PeekStream": {
        "comments": [
            "{ Description: Returns a string of bytes from a stream without",
            "\tremoving them from the stream. }",
            "{ Execution of this function doesn't affect the stream position",
            "\tpointer. The second parameter may specify up to 2,147,483,647",
            "\tcharacters. Beyond that, Invalid will be returned. }"
        ],
        "snippets": [
            "PeekStream(",
            "\tStream, { Required. Any expression returning a pipe stream. }",
            "\tN { Required. Any numeric expression giving the number of bytes to get",
            "\t\tfrom the pipe. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Pen": {
        "comments": [
            "{ Description: Returns a pen value. }",
            "{ Pen values are used in layered graphics statements that draw lines",
            "\t(such as GUIArc or GUIRectangle). }"
        ],
        "snippets": [
            "Pen(",
            "\tColor { Required. Any numeric expression giving the color of the",
            "\t\tline.. Any of the following may be used: a palette VTScada Color",
            "\t\tPalette a Constants for System Colors (constant) -1 (transparent) an",
            "\t\tRGB string with optional Alpha value in the format, \"<AARRGGBB>\", or",
            "\t\t\"<RRGGBB>\", where AA, RR, GG and BB are hexadecimal digits. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Pending": {
        "comments": [
            "{ Description: Returns the number of statements of a certain type",
            "\tpending. }"
        ],
        "snippets": [
            "Pending(",
            "\tStatementType { Required. Any numeric expression giving the type of",
            "\t\tstatement for which to get the number pending as follows:",
            "\t\tStatementType Pending type 0 Always returns 0. High priority",
            "\t\tstatements are no longer supported. 1 Normal priority statement 2",
            "\t\tTimer 3 Priority statement 4 Logger queue length (logQsize in",
            "\t\tLogFile.cpp) }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "PercentDifference": {
        "comments": [
            "{ Description: Returns the percentage difference between two numbers }",
            "{ This module is a member of the Function Library, and must therefore",
            "\tbe prefaced by \\FunctionLib as shown in the \"Format\" section. Performs",
            "\tthe following calculation: Return(Abs(Value1 - Value2)/Value2); }"
        ],
        "snippets": [
            "\\FunctionLib.PercentDifference(",
            "\tValue1, { The first numeric value. }",
            "\tValue2 { The second numeric value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "PersistentSize": {
        "comments": [
            "{ Description: Returns the size in bytes of a variable's persistent",
            "\tvalue size in the persistent value (.VAL) file. }",
            "{ If Variable is not a persistent variable the function will return",
            "\tinvalid. }"
        ],
        "snippets": [
            "PersistentSize(",
            "\tVariable { Required. Any expression for the variable value. This value",
            "\t\tis usually returned from a call to AddVariable or FindVariable. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "PhraseDroplist": {
        "comments": [
            "{ Description: Language sensitive Droplist. }",
            "{ Droplist used to select a PhraseID by presenting the user with a",
            "\tdroplist full of translated phrases. If CanEdit is TRUE then it is",
            "\tpossible for the user to input new labels, in which case they will be",
            "\tadded to the list and will be added to the language manifest. }"
        ],
        "snippets": [
            "\\System.PhraseDroplist(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the graphic. }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of thegraphic. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the graphic opposite to X1. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of the top or bottom of the graphic, whichever is the opposite",
            "\t\tof Y1. }",
            "\tPhraseIDArr, { Required. An array containing Phrase IDs (keys) for the",
            "\t\tlist. }",
            "\tTitle, { Optional text expression to be used as a title for the",
            "\t\tdroplist. Set to Invalid for no title. }",
            "\tIndex, { Required Numeric. The index variable to update within the",
            "\t\tarray. }",
            "\tFocusID { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PhraseEdit": {
        "comments": [
            "{ Description: Language-sensitive editfield. This module draws an",
            "\teditfield with (optional) title and bevel. Recommended in place of the",
            "\tolder Edit function. }",
            "{ Allows a user to enter a multilingual phrase. Input is done in the",
            "\tuser's active language and a pop-up dialog is available for editing",
            "\tall other languages in the application. If a new phrase is typed, the",
            "\tdialog will automatically open to allow the user to provide",
            "\ttranslations. If an existing phrase is typed, an indicator appears if",
            "\tthere are missing translations. The dialog will not pop up in this",
            "\tcase. If a phrase is typed that has multiple matching entries",
            "\t(homographs) then a dialog will open to allow selection and",
            "\tmodification of the matches. }"
        ],
        "snippets": [
            "\\System.PhraseEdit(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the edit field. }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the edit field. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the edit field opposite to X1. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of the top or bottom of the edit field, whichever is the",
            "\t\topposite of Y1. }",
            "\tTitle, { Optional. The text expression to be used as a title for the",
            "\t\tfield. Set Invalid if not shown. }",
            "\tPhraseID, { Required. Output variable. Set to the phrase ID of the new",
            "\t\ttext. }",
            "\tID, { Boolean. If this value is FALSE (0), the field will display its",
            "\t\tcurrent setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tTrigger, { Optional numeric. Set when the text changes and provides",
            "\t\tfeedback as follows. Initially set to Invalid. Set to 0 while the",
            "\t\tphrase editor dialog is open Set to Invalid if user opens the phrase",
            "\t\teditor manually and does not change the PhraseID Set to 1 if the user",
            "\t\tselects a different PhraseID using the phrase editor dialog }",
            "\tView, { Optional numeric. Directs how to display the editfield , as",
            "\t\tfollows. View Display mode 0 Invisible 1 Normal (color scheme - no",
            "\t\tgraying) 2 Grayed-out (only if FocusID is 0) 3 Non-grayed text on a",
            "\t\ttype 2 background. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\tDrawBevel, { Optional Boolean. Set to TRUE to draw a bevel around the",
            "\t\tcontrol. }",
            "\tVertAlign, { Optional numeric. Sets the vertical alignment of the",
            "\t\teditfield according to one of the following options: VertAlign",
            "\t\tVertical Alignment 0 Top 1 Center 2 Bottom Whether the title is",
            "\t\tincluded when the vertical alignment is calculated as determined by",
            "\t\tthe value of AlignTitle. }",
            "\t0, { 1 }",
            "\t2, { AlignTitle }",
            "\tMinVal, { Optional. The minimum acceptable value. }",
            "\tMaxVal, { Optional. The maximum acceptable value. }",
            "\tStyle, { An optional parameter indicating the style of the EditField",
            "\t\tobject. It is a bit-wise field made up of the sum of the following",
            "\t\tvalues, to yield the desired effects. (See: Bitwise Parameters &",
            "\t\tOperations ) Bit Value Definition 0 1 Reserved for bit compatibility",
            "\t\twith WinComboCtrl, and should be set to \"0\" 1 2 Reserved for bit",
            "\t\tcompatibility with WinComboCtrl, and should be set to \"0\" 2 4 Input is",
            "\t\tconverted to all uppercase (note 1) 3 8 Input is converted to all",
            "\t\tlowercase (note 1) 4 16 Input is masked. Any characters typed will",
            "\t\tappear as asterisks. This is useful for such things as password fields",
            "\t\t5 32 Multiline editing. Setting this bit causes a typed <CR> (Enter or",
            "\t\tReturn) to be interpreted as \"move to the start of the next line\".",
            "\t\tText that contains <CR> characters has a line break inserted at each 6",
            "\t\t64 Reserved 7 128 8 256 Reserved 9 512 Not used. Height is defined by",
            "\t\t\\EditHt or TEditHt (with title). If neither values 4 or 8 are set,",
            "\t\tinput is passed to script code as typed. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\tPrefixValue, { Optional text. An expression that should be displayed",
            "\t\timmediately before (i.e. to the left of) the editable part of the",
            "\t\tcontrol. }",
            "\tSuffixValue, { Optional text. An expression that should be displayed",
            "\t\timmediately after (i.e. to the right of) the editable part of the",
            "\t\tcontrol. No Default }",
            "\tBGColor, { Optional background color of the edit box }",
            "\tFGColor, { Optional foreground color of the edit box }",
            "\tFontParm, { Optional Font value. }",
            "\tTitleBGColor, { Optional. Background color under title }",
            "\tTitleFGColor, { Optional. Foreground (text) color of the title. }",
            "\tBevelColor, { Optional. Color of the bevel line. }",
            "\tPlaceHolder { Optional text. Information to display in place of",
            "\t\tinvalid entry. Typically a phrase describing how the field is to be",
            "\t\tused. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PHSliderBar": {
        "comments": [
            "{ Description: Called graphic module that connects a horizontal slider",
            "\tbar to a given parameter number. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary\\. The \"P\" tools (Pcheck box, PContributor,",
            "\tPColorSelect, PDroplist, and PEditField) were intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. This parameter tool expects",
            "\tthe first parameter of its calling module to contain an array of tag",
            "\tparameters. It will then set the value of the element indicated by",
            "\tParmNum. Usual height: 40 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PHSliderBar(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a the title to put on the bevel. }",
            "\tFocusID, { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tTrigger, { Set when the variable is changed. }",
            "\tDrawBevel, { Any Boolean expression which, when set to TRUE, indicates",
            "\t\tthat a bevel is to be drawn around the control. }",
            "\tMinValue, { Any numeric expression for the minimum of Value's range. }",
            "\tMaxValue, { Any numeric expression for the maximum of Value's range. }",
            "\tEnableEditField { An optional parameter that is any logical",
            "\t\texpression. If true (non-0) the edit field will be shown. The default",
            "\t\tis FALSE. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PHueSelect": {
        "comments": [
            "{ Description: Called graphic module that connects a hue selection",
            "\ttool to a given parameter number. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary\\. The \"P\" tools (Pcheck box, PContributor,",
            "\tPColorSelect, PDroplist, and PEditField) were intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. This parameter tool expects",
            "\tthe first parameter of its calling module to contain an array of tag",
            "\tparameters. It will then set the value of the element indicated by",
            "\tParmNum. Usual height: 77 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PHueSelect(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a the title to put on the bevel. }",
            "\tFocusID, { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tTrigger, { Set when the variable is changed. }",
            "\tDrawBevel, { Optional Boolean expression that when set to TRUE, causes",
            "\t\ta bevel to be drawn around the control. }",
            "\tEnableEditField { An optional parameter that is any logical",
            "\t\texpression. If TRUE (non-0) the edit field will be shown. The default",
            "\t\tis FALSE. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Pick": {
        "comments": [
            "{ Description: Returns an indication of whether the locator (e.g.",
            "\tmouse) has had a specified change in its button status. }",
            "{ This function returns true if the locator button combination changes",
            "\tas specified by the Button parameter while the locator position is",
            "\twithin the boundaries of the \"target\" ((X1,Y1) - (X2,Y2)). This",
            "\tfunction is \"edge triggered\" which means that it only acts upon the",
            "\tchanges in locator button status. Making the button combination",
            "\tspecified by the Button parameter outside the target area and then",
            "\tsliding the cursor into the target will not cause the function to",
            "\treturn true. If the locator is not installed, the function will return",
            "\tfalse (0). This function is very useful for capturing fast mouse",
            "\tbutton presses by the operator. VTScada remembers the locations where",
            "\tthe mouse buttons were pressed and released. The actual buttons do not",
            "\thave to be pressed when the Pick is actually executed since it will",
            "\texamine the list of all button changes since the last time it was",
            "\texecuted. This function is latched on after it becomes true. Use",
            "\tClick() for steady state feedback rather than Pick(). Note: This",
            "\tfunction is disabled when using a GUITransform as a GUIStrectch. }"
        ],
        "snippets": [
            "Pick(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the screen area (\"target\"). }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the screen area (\"target\"). }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the \"target\" opposite to X1. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the target, whichever is the",
            "\t\topposite of Y1. }",
            "\tButton { Required. Any numeric expression giving the button",
            "\t\tcombination that activates this graphic when the locator cursor is",
            "\t\twithin the \"target\" screen area. Button Button Locator 0 No buttons 1",
            "\t\tRight button 2 Middle button 3 Right and middle buttons 4 Left button",
            "\t\t5 Left and right buttons 6 Left and middle buttons 7 All three buttons",
            "\t\tIf the value is: - multiplied by 8 the meaning for multiple buttons",
            "\t\tpressed becomes \"OR\" rather than \"AND.\" For example, to accept any",
            "\t\tbutton on a 2 or 3 button mouse, use 56 (8 * 7). To accept the left",
            "\t\tmouse button regardless of whether the right button is pressed, use 32",
            "\t\t(8 * 4) - increased by 64, the function will become true when the",
            "\t\tmouse buttons are released rather than when they are pressed -",
            "\t\tincreased by 128, the button(s) must be double-clicked - increased by",
            "\t\t256, forces the control with the input focus (in the same window as",
            "\t\tthe Pick) to simulate the Enter key being pressed prior to the Pick",
            "\t\tfunction returning a value of true. In other words, with code similar",
            "\t\tto: If Pick(X1, Y1, X2, Y2, 0X104); [ â¦script statementsâ¦ ] any",
            "\t\tvalue affected by the control with input focus will be set to the",
            "\t\tcurrent value of the control prior to the script statements being run.",
            "\t\t- increased by 512, horizontal panning is disabled over the region. -",
            "\t\tincreased by 1024, vertical panning is disabled over the region. These",
            "\t\tlast two options, 512 and 1024, allow Pick, WinLocSwitch and other",
            "\t\tevents to be handled by a region within the window - for example a map",
            "\t\twithin a Sites page when viewed using the VTScada Anywhere Client.",
            "\t\tThese should be used only by advanced users. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PickBMP": {
        "comments": [
            "{ Description: Displays a\"Select Image\" dialog box with samples of",
            "\tbitmaps available for selection. }",
            "{ The selected image can be drawn using either \\Bitmap or",
            "\t\\AnimatedBitmap. }"
        ],
        "snippets": [
            "PickBMP(",
            "\tInvalid x 3, { The first three parameters are obsolete. Provide",
            "\t\tInvalid as a placeholder. }",
            "\tLeft, { Required numeric. The coordinates for the left edge of the",
            "\t\tdialog box. }",
            "\tTop, { Required numeric. The coordinates for the top edge of the",
            "\t\tdialog box. }",
            "\tpFName, { Required pointer. The file name of the selected image will",
            "\t\tbe returned via this parameter. Returns zero (0) if no valid file name",
            "\t\tcan be returned. }",
            "\tInvalid, { Obsolete parameter }",
            "\tAnimated, { Required Boolean. The dialog can provide animated bitmaps",
            "\t\tif this parameter is set TRUE. }",
            "\tpParms { Required pointer. In the case of a selection of animations,",
            "\t\tthis is a pointer to the parameters array of the selected Animated",
            "\t\tbitmap. These include Image directory, scale, FPS, etc. In the case of",
            "\t\tan image, this is set to the image directory path. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "PickValid": {
        "comments": [
            "{ Description: Attempts to return a valid value given a list of",
            "\tparameters. }",
            "{ This function continues its search through its parameter list in",
            "\torder until the first valid value is found. If no valid parameters are",
            "\tsupplied, INVALID is returned. Use True(X) instead of PickValid(X,",
            "\tFalse). This is simpler and cleaner. If executed in a script, after",
            "\tthe first valid parameter is found, no further parameters are",
            "\tevaluated. If executed in steady state, all parameters are always",
            "\tevaluated. A relevant example might be an attempt to display one of",
            "\ttwo objects, depending on which is valid: PickValid(Obj1.Widget(),",
            "\tObj2.Widget()); In steady state, even if Obj1 is valid, both widgets",
            "\twill run. For the desired behavior, you should instead use code such",
            "\tas the following: PickValid(Obj1.Widget, Obj2.Widget)(); }"
        ],
        "snippets": [
            "PickValid(",
            "\tParm1, Parm2, Parm3... { Required. Any number of parameters giving any",
            "\t\texpressions, from which the first valid value will be selected. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "PID": {
        "comments": [
            "{ Description: Perform PID Controller Function. This function returns",
            "\ta control value to maintain a parameter at a given setpoint. }",
            "{ Typically, this function is used to set a variable that controls a",
            "\tprocess output point. The equations used for this function follow.",
            "\tIndependent Gains Equation: CV = P * E + I *â« E dt + D * dA/dt + Bias",
            "\tDependent Gains Equation (ISA): CV = P * (E + 1/I *â« E dt + D *",
            "\tdA/dt) + Bias Where: CV PID function output. E Error. E = (SP - PV)",
            "\tfor normal action modes and E = (PV - SP) for reverse action modes. A",
            "\tDerivative selection. For modes with the derivative based upon the PV",
            "\tvalue, A = PV. For modes with the derivative based upon the error",
            "\tvalue, A = E. PID control may be done by a PLC or other device rather",
            "\tthan VTScada. Setpoints, coefficients, and so forth may be read and",
            "\twritten by VTScada I/O drivers. This form of PID control does not",
            "\tinvolve use of the VTScada PID function. See the reference manual of",
            "\tthe PLC or other device and the VTScada I/O driver manual for more.",
            "\tThis function does calculations with double-precision floating point",
            "\tvalues and does not support 64-bit integers computations. }"
        ],
        "snippets": [
            "PID(",
            "\tPV, { Required. Any numeric parameter which gives the \"process",
            "\t\tvariable\" to be maintained at the given setpoint. }",
            "\tSP, { Required. Any numeric parameter that gives the value to use for",
            "\t\tthe \"setpoint.\" The PID function will change its return value to make",
            "\t\tthe PV value match the SP value. }",
            "\tMode { Required. Any numeric parameter giving the manual/auto mode for",
            "\t\tthe function. When the parameter is not equal to 0, the function is in",
            "\t\tauto mode and uses the PID algorithm to control the output. When the",
            "\t\tparameter is equal to 0, the function simply returns the value of the",
            "\t\tTrack parameter. When the mode switches from manual to auto, the PID",
            "\t\tfunction implements a \"bumpless transfer.\" This results in a smooth",
            "\t\toutput change rather than an abrupt change. This is done by forcing",
            "\t\tthe internal integral to assume a value which forces the PID function",
            "\t\tto output a value which matches the Track parameter at the moment of",
            "\t\tthe change. The integral value will not, however, exceed the value",
            "\t\timposed upon it by the LowLimit and HighLimit parameters. Mode",
            "\t\tAlgorithm Derivative Gains 0 Manual N/A N/A 1 Normal Uses PV",
            "\t\tIndependent 2 Normal Uses PV Dependent 3 Normal Uses Error Independent",
            "\t\t4 Reverse Uses Error Dependent 5 Reverse Uses PV Independent 6 Reverse",
            "\t\tUses PV Dependent 7 Reverse Uses Error Independent The PID function",
            "\t\toperates in eight automatic modes and one manual mode. These modes are",
            "\t\tlisted in the above table. If in doubt, use mode 1 or 5. The Action",
            "\t\tcolumn in the above table indicates whether the PID function operates",
            "\t\tusing normal action (SP - PV) or reverse action (PV - SP). With normal",
            "\t\taction, when PV increases, the function output decreases. With reverse",
            "\t\taction, when PV increases, the function output increases also. The",
            "\t\tDerivative column in the above table indicates whether the PID",
            "\t\tfunction derivative bases its value upon PV or the error between PV",
            "\t\tand SP. For normal action, the error is (SP - PV). For reverse action,",
            "\t\tthe error is (PV - SP). The difference between the two modes is only",
            "\t\tclear when the setpoint (SP) is changed. If the derivative uses PV,",
            "\t\tthe response to setpoint changes is normal. If the derivative uses the",
            "\t\terror, the response to setpoint changes is faster but usually produces",
            "\t\tan abrupt change in the PID function output which is often",
            "\t\tundesirable. The Gains column in the above table indicates which PID",
            "\t\tequation is used. Refer to the \"Comments\" section for these equations.",
            "\t\tThe independent gains equation uses seconds as the time base and the",
            "\t\tgain parameter (P) does not affect either the integral or derivative.",
            "\t\tThe dependent gain equation is the ISA equation. It uses minutes as",
            "\t\tthe time base and the gain parameter (P) affects both the integral and",
            "\t\tderivative. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Pie": {
        "comments": [
            "{ Description: Draws a pie shaped wedge on the screen. }",
            "{ This statement has been superseded by the GUIPie function and is",
            "\tmaintained for backwards compatibility only. The pie is drawn in a",
            "\tcounterclockwise direction from the Angle1 to Angle2. As of version",
            "\t11, this is now drawn in the same z-order as other graphics, making it",
            "\tsimilar to the z-graphics functions. }"
        ],
        "snippets": [
            "Pie(",
            "\tX, { Required. Any numeric expression giving the X coordinate of the",
            "\t\tcenter of the pie on the screen. }",
            "\tY, { Required. Any numeric expression giving the Y coordinate of the",
            "\t\tcenter of the pie on the screen. }",
            "\tRadius, { Required. Any numeric expression giving the radius of the",
            "\t\tpie specified in units of X screen coordinates. }",
            "\tAngle1, { Required. Any numeric expression giving the starting angle",
            "\t\tof the pie in radians. An angle of 0 lies on the X axis to the right",
            "\t\tof the center of the pie. }",
            "\tAngle2, { Required. Any numeric expression giving the ending angle of",
            "\t\tthe pie in radians. }",
            "\tForeground, { Required. Any numeric expression giving the color index",
            "\t\tfor the foreground color of the pie fill pattern. }",
            "\tPattern, { Required. Any numeric expression giving the hatch Fill",
            "\t\tPatterns to use for the fill. The valid hatch style numbers are from 1",
            "\t\tto 25 inclusive. }",
            "\tBackground { Required. Any numeric expression giving the background",
            "\t\tcolor for the hatch pattern. This value is only significant if the",
            "\t\tPattern parameter is not equal to 1. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PImageSelect": {
        "comments": [
            "{ Description: Called graphic module that connects an image selection",
            "\ttool to a given parameter number. Buttons and dialogs for Select,",
            "\tAdjust and Clear operations are provided. }",
            "{ Further information about parameter information structures may be",
            "\tfound in examples of the ParameterEdit function. }"
        ],
        "snippets": [
            "\\DialogLibrary.PImageSelect(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) to alter in the caller. }",
            "\tParmDef, { Required. The parameter definition structure. }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a the title to put on the bevel. }",
            "\tPtrWaitClose, { Pointer to a bit-wise value. Prevents the Idea Studio",
            "\t\tclosing while a dialog is open. (*PtrWaitClose != 0) Bit 0 indicates a",
            "\t\tregular wait condition Bit 1 indicates a wait condition due to an",
            "\t\texpression (compilation) error. *PtrWaitClose being set to 2 (or 3)",
            "\t\tcauses the warning dialog regarding an expression with errors in it to",
            "\t\tbe shown by the caller. (See: Bitwise Parameters & Operations ) }",
            "\tShowBevel, { Any Boolean expression that when set to TRUE causes a",
            "\t\tbevel to be drawn around the control. Defaults to TRUE }",
            "\tColorReplaceParmDef, { Optional. Parameter definition structure for",
            "\t\tlegacy color to use in place of orange 241. }",
            "\tDisableRotation { Optional Boolean. Rotation controls will be disabled",
            "\t\twhen set TRUE. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PIPAddressList": {
        "comments": [
            "{ Description: Uses an IPAddressList to set a parameter with a",
            "\tsemicolon-delimited IP address list. }",
            "{ This module should be used whenever the user needs an IP Allow",
            "\tfilter for use with the SocketManagerServer. This module is a member",
            "\tof the VTScada Dialog Library and must therefore be called from within",
            "\ta GUITransform and prefaced by \\DialogLibrary\\. The \"P\" tools (Pcheck",
            "\tbox, PContributor, PColorSelect, PDroplist, and PEditField) were",
            "\tintended only for use in configuration folders and drawing panel",
            "\tmodules, and therefore are subject to the system security restraints.",
            "\tThis parameter tool expects the first parameter of its calling module",
            "\tto contain an array of tag parameters. It will then set the value of",
            "\tthe element indicated by ParmNum. The recommended minimum height",
            "\tranges from 100 pixels for a plain list to 130 pixels for a list with",
            "\tan aligned titled bevel. The up/down buttons will hide if there is not",
            "\tenough room for them to display. }"
        ],
        "snippets": [
            "\\DialogLibrary.PIPAddressList(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTrigger, { Set when the variable is changed. }",
            "\tFocusID, { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a the title to put on the bevel. }",
            "\tDrawBevel, { Optional Boolean expression that when set to TRUE, causes",
            "\t\ta bevel to be drawn around the control. }",
            "\tAlignTitle { An optional parameter that is any logical expression. If",
            "\t\tTRUE (non-0) the title is included in the calculation for vertical",
            "\t\talignment, if FALSE (0) it is added to the droplist after it and its",
            "\t\tbevel has been vertically aligned. The default is true. Usual height:",
            "\t\t130 pixels. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PIPListenerGroup": {
        "comments": [
            "{ Description: Draws a droplist of all available IP Listener Groups.",
            "\t(In general, the groups will be the IP Listener tag names.) }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary.. The \"P\" tools are intended for use only in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. This parameter tool expects",
            "\tthe first parameter of its calling module to contain an array of tag",
            "\tparameters. It will then set the value of the element indicated by",
            "\tParmNum. Usual height: 45 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PIPListenerGroup(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter }",
            "\tTrigger, { Set when the variable is changed. }",
            "\tFocusID, { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a the title to put on the bevel. }",
            "\tDrawBevel, { Optional Boolean expression that when set to TRUE, causes",
            "\t\ta bevel to be drawn around the control. }",
            "\tVertAlign, { An optional parameter that is any numeric expression that",
            "\t\tsets the vertical alignment of the droplist according to one of the",
            "\t\tfollowing options: VertAlign Vertical Alignment 0 Top 1 Center 2",
            "\t\tBottom Whether the title is included when the vertical alignment is",
            "\t\tcalculated is determined by the value of AlignTitle. The default value",
            "\t\tis 0. }",
            "\tAlignTitle { An optional parameter that is any logical expression. If",
            "\t\tTRUE (non-0) the title is included in the calculation for vertical",
            "\t\talignment, if FALSE (0) it is added to the droplist after it and its",
            "\t\tbevel has been vertically aligned. The default is true. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Pipe": {
        "comments": [
            "{ Description: Draw a double line }",
            "{ The radius of curvature of the pipe corners is the radius of the arc",
            "\tthat joins the line endpoints. A Curvature of 0 results in sharp",
            "\t(square) pipe corners. Larger Curvature numbers result in greater",
            "\trounding of the pipe corners. This statement is useful for drawing",
            "\tpiping on the screen, especially if it changes dynamically. Within an",
            "\tAnywhere Client session, this function does nothing. }"
        ],
        "snippets": [
            "Pipe(",
            "\tWidth, { Required. Any numeric expression giving the spacing of the",
            "\t\tlines in units of X screen coordinates. The width is always rounded to",
            "\t\tresult in an odd number of pixels on the screen. The minimum width",
            "\t\tdisplayed will be 1 pixel. }",
            "\tColor, { Required. Any numeric expression giving the VTScada Color",
            "\t\tPalette of the pipe. }",
            "\tCurvature, { Required. Any numeric expression giving the radius of",
            "\t\tcurvature of the corners for the pipe. This is specified in units of X",
            "\t\tscreen coordinates. If the number of endpoints is 2, the Curvature is",
            "\t\tignored. }",
            "\tX1, Y1, X2, Y2, ... { Required. Any numeric expressions giving the",
            "\t\tscreen coordinates of the pipe endpoints. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PipeStream": {
        "comments": [
            "{ Description: Returns a stream based on an operating system named",
            "\tpipe. }",
            "{ None }"
        ],
        "snippets": [
            "PipeStream(",
            "\tName, { Required. Any text expression giving the name of the named",
            "\t\tpipe. }",
            "\tMode { Required. Any numeric expression giving the manner in which the",
            "\t\tpipe is opened, as shown in the following table: Mode Open state 0 Not",
            "\t\topened yet 1 Opened for read 2 Opened for read or write }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "PixelColor": {
        "comments": [
            "{ Description: Returns the color of a pixel in the window. }",
            "{ Location (x, y) is taken to be in the window where the module",
            "\tinstance identified by Object is drawn. }"
        ],
        "snippets": [
            "PixelColor(",
            "\tObject, { Required. Any expression that returns an object value. This",
            "\t\tidentifies the window where the pixel is drawn. }",
            "\tX, { Required. Any numeric expression, giving the x-axis coordinate of",
            "\t\tthe location of the pixel. }",
            "\tY, { Required. Any numeric expression, giving the y-axis coordinate of",
            "\t\tthe location of the pixel. }",
            "\tUseRGB { Optional. Any Boolean expression, which when true, will cause",
            "\t\tthe pixel color to be returned as an RGB string. If false, the numeric",
            "\t\tpalette value will be returned. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "PKTrend": {
        "comments": [
            "{ Description: Displays a tag in a history window whenever it receives",
            "\ta left-click in the defined area. }",
            "{ Used only as part of a custom widget, created from scratch. If a",
            "\thistory window is already open, PkTrend adds its PtObj to the existing",
            "\twindow, otherwise it opens a new history window and adds its PtObj to",
            "\tthe new window. PkTrend adds all of the fields in PtObj that are",
            "\tsupported by AnalogDataSource, DigitalDataSource, or NotesDataSource",
            "\tto the history window. It also adds numerous related notes tags: 1.",
            "\tThe preconfigured system-wide notes tag. 2. All of the notes tags that",
            "\thave a Area field that matches PtObj's Area field. 3. All of the notes",
            "\ttags in all of the groups that contain PtObj. }"
        ],
        "snippets": [
            "\\PKTrend(",
            "\tLeftReference, { The left side reference of the target area. }",
            "\tBottomReference, { The bottom side reference of the target area. }",
            "\tRightReference, { The right side reference of the target area. }",
            "\tTopReference, { The top side reference of the target area. }",
            "\tPtObj, { The object value of the point to trend }",
            "\tEnable, { Optional Boolean. Flag - TRUE when this action is enabled }",
            "\tHistoryWindowParms { Optional array. Parameters for the History Window",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Platform": {
        "comments": [
            "{ Description: Returns a fifteen element structure that indicates the",
            "\tplatform under which VTScada is currently running. }"
        ],
        "snippets": [
            "Platform();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Play": {
        "comments": [
            "{ Description: Plays a multimedia sound file as installed in the",
            "\toperating system. It differs from Sound in that it is a steady-state",
            "\tstatement and is supported by VTScada Internet Client (VIC). }",
            "{ The return value is a Boolean flag. It is TRUE while the file is",
            "\tplaying and FALSE when not playing. Playback will stop when any of the",
            "\tfollowing conditions occur: Enable is set to false File is set to",
            "\tInvalid or \"\" The steady state call, Play() is stopped. If the session",
            "\tis remote via a VTScada Internet Client (VIC), the return value of",
            "\tthis function will not be set to true until the audio file has been",
            "\tcompletely transferred and the playback has begun remotely. }"
        ],
        "snippets": [
            "Play(",
            "\tFile, { Required. Any text expression giving the file name to play. If",
            "\t\tthe extension is omitted, the default extension \".WAV\" is added. If an",
            "\t\tempty string is provided here, then any currently playing sound is",
            "\t\tstopped. }",
            "\tOption, { Required. Any numeric expression that indicates how to play",
            "\t\tthe file. The value of Option may be obtained by adding together",
            "\t\tnumbers from the following table: Value Bit No. Option 1 0 Play",
            "\t\tasynchronously (don't wait) 2 1 Don't use default sound if file",
            "\t\tmissing. 4 2 Reserved for future use. 8 3 Loop the sound until next",
            "\t\tSound function executed. 16 4 Don't stop any currently playing sound.",
            "\t\tIf Option is \"0\", VTScada will halt all execution until the sound is",
            "\t\tfinished. This is not recommended. Add \"1\" to avoid this behavior.",
            "\t\t(See: Bitwise Parameters & Operations ) }",
            "\t1, { 2 }",
            "\t4, { 8 }",
            "\t16",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Plot": {
        "comments": [
            "{ Description: Displays a plot of a subsection of a numeric array in a",
            "\tparticular area of the window. }",
            "{ This function is a layered graphics statement. The Plot statement",
            "\twill execute timer functions during the plotting process. This will",
            "\tallow time critical functions such as driver I/O and data logging to",
            "\tcontinue running during the relatively long times it takes to update a",
            "\tplot on the screen. Through the ordering of the Low, High, X1, X2, Y1,",
            "\tand Y2 parameters, the plot may have 8 different orientations for line",
            "\tplots and 16 different orientations for bar plots. The normal left to",
            "\tright plot with the minimum at the bottom will have Low < High, X1 <",
            "\tX2, and Y1 < Y2. By exchanging Low and High (i.e. Low > High), the",
            "\tplot will have the minimum value at the top with bars still drawn from",
            "\tthe bottom. Exchanging X1 and X2 (i.e. X1 > X2) will plot values from",
            "\tright to left. Exchanging Y1 and Y2 (i.e. Y1 > Y2) will plot values",
            "\twith the minimum at the top with bars being drawn from the top also.",
            "\tCombining these actions with the Style (horizontal or vertical) gives",
            "\tall possible plot orientations. The plot ignores invalid data elements",
            "\tin the array and leaves blank spaces for them on the display. If the",
            "\tnumber of points extends past the end of the array, the plot will",
            "\tcontinue at the first of the array until N points or all the points of",
            "\tthe array have been plotted. The plot area defined by X1, Y1, X2, and",
            "\tY2 limits the area which can be plotted on the screen. Any points",
            "\twhich fall outside this area will not appear on the screen but will be",
            "\t\"clipped\" at the boundary. }"
        ],
        "snippets": [
            "Format version 1: Plot(",
            "\tArrayElem, { Required. Any numeric expression specifying the starting",
            "\t\tarray element to plot. If processing a multidimensional array, the",
            "\t\tusual rules apply to decide which dimension should be used. }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to plot starting at the element given by the first parameter.",
            "\t\tN must be greater than or equal to 2, and no greater than 32000. If",
            "\t\tthis parameter is greater than the dimension of the first array, the",
            "\t\tnumber of points plotted will be the array dimension. If N extends",
            "\t\tpast the upper bound of the lowest array dimension, this computation",
            "\t\twill \"wrap-around\" and resume at element 0, until N elements have been",
            "\t\tprocessed. }",
            "\tLow, { Required. Any numeric expression that defines the limit of data",
            "\t\tvalues to be plotted. This value need not be less than High but must",
            "\t\tnot be equal to it. In the standard case, when this value is less than",
            "\t\tHigh, it will define the minimum value to display. For example, if Low",
            "\t\twas 10, a data value of 10 would fall on the edge of the bounding box,",
            "\t\ton either the line described by X1, if the plot is vertical, or on the",
            "\t\tline described by Y1, if the plot is horizontal. Any values below 10",
            "\t\tin this case would not be shown since they would be outside the",
            "\t\tclipped box. }",
            "\tHigh, { Required. Any numeric expression that defines the limit of",
            "\t\tdata values to be plotted. This value need not be greater than Low but",
            "\t\tmust not be equal to it. In the standard case, when this value is",
            "\t\tgreater than Low, it will define the maximum value to display. For",
            "\t\texample, if High was 1000, a data value of 1000 would fall on the edge",
            "\t\tof the bounding box, on either the line described by X2, if the plot",
            "\t\tis vertical, or on the line described by Y2, if the plot is",
            "\t\thorizontal. Any values above 1000 in this case would not be shown",
            "\t\tsince they would be outside the clipped box. }",
            "\tX1 (Left), { Required. Any numeric expression giving the X coordinate",
            "\t\ton the screen of the left side of the plot area. For horizontal plots,",
            "\t\tthis is the screen coordinate of the first point or bar plotted. For",
            "\t\tvertical plots, this is the value which corresponds to the Low",
            "\t\tparameter value. For vertical bar plots, X1 is the base coordinate for",
            "\t\tthe bars. }",
            "\tY1 (Bottom), { Required. Any numeric expression giving the Y",
            "\t\tcoordinate on the screen of bottom side of the plot area. For vertical",
            "\t\tplots, this is the screen coordinate of the first point or bar",
            "\t\tplotted. For horizontal plots, this is the value which corresponds to",
            "\t\tthe Low parameter value. For horizontal bar plots, Y1 is the base",
            "\t\tcoordinate for the bars. }",
            "\tX2 (Right), { Required. Any numeric expression giving the X coordinate",
            "\t\ton the screen of the right side of the plot area. For horizontal",
            "\t\tplots, this is the screen coordinate of the last point or bar plotted.",
            "\t\tFor vertical plots, this is the value which corresponds to the High",
            "\t\tparameter value. }",
            "\tY2 (Top), { Required. Any numeric expression giving the Y coordinate",
            "\t\ton the screen of the top side of the plot area. For vertical plots,",
            "\t\tthis is the screen coordinate of the last point or bar plotted. For",
            "\t\thorizontal plots, this is the value which corresponds to the High",
            "\t\tparameter value. }",
            "\tStyle, { Required (Format version 1 only). Any numeric expression",
            "\t\tgiving the style of the plot. The plot Style gives the line style,",
            "\t\tdirection, bit number for bits plots, and the number of points to",
            "\t\taverage per point displayed. The Style is determined by adding",
            "\t\ttogether the following values: Line style + Direction + Path + Bit",
            "\t\tnumber + Average Line style is a number between 1 and 5 inclusive",
            "\t\twhich gives the line style for line plots. A line style of 1 indicates",
            "\t\ta solid line (see Chapter 9 for more styles). For bar plots, the line",
            "\t\tstyle portion of the Style parameter is ignored. Direction is either 0",
            "\t\tor 10. Use 0 for a standard horizontal plot (array index runs along",
            "\t\tthe X axis and values are plotted up or down). Use 10 for a vertical",
            "\t\tplot (array index runs along the Y axis and values are plotted left or",
            "\t\tright). Path is either 0 or 50. A 0 indicates that line plots are to",
            "\t\tbe drawn directly from point to point. A 50 indicates that plots are",
            "\t\tto be drawn in a step fashion with two line segments between each",
            "\t\tpoint. The first segment runs parallel to the X-axis and the second",
            "\t\tsegment runs parallel to the Y-axis. This produces a square-looking",
            "\t\tplot. These step plots are useful for plotting status values which",
            "\t\tchange in jumps rather than continuously. The Path value is ignored",
            "\t\tfor bar plots. Bit number is either 0 or a value starting at 100. This",
            "\t\tis the number of the bit to use in the array data for plotting. If the",
            "\t\tnormal entire value of the data is to be plotted, use 0 for this",
            "\t\tvalue. If only one of the bits from the data is to be plotted, use the",
            "\t\tbit number plus 1. The value to add is (Bit number + 1) * 100 or 0.",
            "\t\tThe ability to plot only a single bit from an array of short or long",
            "\t\tvalues allows status data to be stored very efficiently by not",
            "\t\trequiring a separate array for each status value. For bit plots, the",
            "\t\tvalue plotted is always a 0 or a 1 corresponding to the value of the",
            "\t\tselected bit. The use of this plotting option is usually done in",
            "\t\tconjunction with a Path value of 50 for step plots. Average is either",
            "\t\t0 or a value starting at 10000. This is the number of consecutive",
            "\t\tarray points to average to give a single point on the screen. It can",
            "\t\tbe used to plot a very large array of values on the screen without",
            "\t\thaving to draw all of the points on the screen. This will produce a",
            "\t\tsmoothed plot and reduce the drawing time. The number to add is (Data",
            "\t\tpoints per displayed point - 1) * 10000. }",
            "\tColor, { Required (Format version 1 only). Any numeric expression",
            "\t\tgiving the VTScada Color Palette of the line and the foreground color",
            "\t\tfor filled plots. If the number is less than 10000, the plot is",
            "\t\tnon-destructive. If the number is greater than or equal to 10000, the",
            "\t\tplot is destructive and the actual color used is Color - 10000. RGB",
            "\t\tcolor strings may not be used. }",
            "\tPattern, { Required (Format version 1 only). Any numeric expression",
            "\t\tgiving the bar Fill Patterns for the plot. For a Pattern value of 0,",
            "\t\tthe plot is a line plot. For Pattern values in the range of 1 to 25",
            "\t\tinclusive, the plot is a bar plot with the hatch pattern corresponding",
            "\t\tto the Pattern parameter value. If the parameter is 1, the bars are a",
            "\t\tsolid color and the Background parameter is ignored. }",
            "\tPatternBackground, { Required (Format version 1 only). Any numeric",
            "\t\texpression giving the color number of the plot fill background color.",
            "\t\tThis number is ignored if the Pattern parameter is equal to 1. For",
            "\t\tvalues of Pattern greater than one, it gives the background color for",
            "\t\tthe bar. RGB color strings may not be used. }",
            "\tPen, { Required (Format version 2 only). The pen to be used (if any).",
            "\t\tMust be provided, but will be ignored for bar plots. }",
            "\tBrush, { Required (Format version 2 only). The brush to be used (if",
            "\t\tany). For line drawing, this parameter must be provided with pattern",
            "\t\t0. }",
            "\tXORMode, { (Format version 2 only) An optional parameter specifying",
            "\t\twhether the plot is destructive (if destructive, the plot line won't",
            "\t\tbe affected by the background color). If set to 0 or Invalid",
            "\t\t(default), the destructive drawing mode will be used. If set to 1, the",
            "\t\tnon-destructive or XOR drawing mode will be used. }",
            "\tDirection, { An optional parameter specifying the horizontal or",
            "\t\tvertical direction for the plot. 0 or Invalid indicates horizontal,",
            "\t\twhile 1 indicates vertical. }",
            "\tDrawStepped, { (Format version 2 only) An optional parameter",
            "\t\tspecifying whether the plot is to be drawn from point-to-point, or",
            "\t\tstepped. 0 or Invalid indicates point-to-point, while 1 indicates",
            "\t\tstepped. }",
            "\tBitNumber, { (Format version 2 only) An optional parameter specifying",
            "\t\tthe use of a whole value or a bit number. Invalid indicates a whole",
            "\t\tvalue should be used, while >=0 indicates that the specified bit",
            "\t\tnumber should be used. No default }",
            "\tAverage { (Format version 2 only) An optional parameter specifying",
            "\t\twhether consecutive points should be averaged to give a single point.",
            "\t\tInvalid or 0 indicates that averaging should not be used, while >0",
            "\t\tindicates that the number of consecutive points should be averaged to",
            "\t\tgive a single point. No default. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PlotBuff": {
        "comments": [
            "{ Description: Displays a plot of a subsection of a buffer in a",
            "\tparticular area of the window after converting the buffer to element",
            "\tvalues. Extends Plot. }",
            "{ This function is a layered graphics statement. This statement will",
            "\texecute timer functions during the plotting process, allowing time",
            "\tcritical functions such as driver I/O and data logging to continue",
            "\trunning during the relatively long times it takes to update a plot on",
            "\tthe screen. Through the ordering of Low, High, X1, X2, Y1, and Y2,",
            "\tthere are 8 different orientations possible for line plots and 16 for",
            "\tbar plots. The normal left to right plot with minimum at the bottom",
            "\twill have Low < High, X1 < X2, and Y1 < Y2. By exchanging Low and High",
            "\t(i.e. Low > High), the plot will have minimum at the top with bars",
            "\tdrawn from the bottom. Exchanging X1 and X2 (i.e. X1 > X2) will plot",
            "\tvalues from right to left. Exchanging Y1 and Y2 (i.e. Y1 > Y2) will",
            "\tplot values with minimum at the top and bars drawn from the top also.",
            "\tCombining these actions with the Style (horizontal or vertical) gives",
            "\tall possible plot orientations. If the number of points extends past",
            "\tthe end of the buffer, the plot will continue at the first of the",
            "\tbuffer until N points or all the points of the buffer have been",
            "\tplotted. The plot area defined by X1, Y1, X2, and Y2 limits the area",
            "\twhich can be plotted on the screen. Any points which fall outside this",
            "\tarea will not appear on the screen but will be \"clipped\" at the",
            "\tboundary. The PlotBuff statement works the same as the Plot statement.",
            "\tHowever, invalid values cannot exist in the buffer. The RAM memory",
            "\tsavings of using buffers rather than arrays is in the range of 45% to",
            "\t73%. }"
        ],
        "snippets": [
            "PlotBuff(",
            "\tBuffer, { Required. Any text expression that contains data to be",
            "\t\tplotted. }",
            "\tOffset, { Required. Any numeric expression that gives the starting",
            "\t\tbuffer position in data elements (not bytes or characters) of the",
            "\t\tfirst data element. }",
            "\tN, { Required. Any numeric expression giving the number of elements to",
            "\t\tplot starting at the element given by the offset parameter. N must be",
            "\t\tgreater than or equal to 2, and no greater than 32000. If this",
            "\t\tparameter is greater than the length of the buffer, the number of",
            "\t\tpoints plotted will be the number of points available in the buffer.",
            "\t\tIf the end of the buffer is encountered before N points have been",
            "\t\tplotted, plotting continues with the first point in the buffer (offset",
            "\t\t0). }",
            "\tType, { Required. Any numeric expression giving the type of data held",
            "\t\tin the buffer. The types are described in the following table: Value",
            "\t\tType 0 Byte (0-255) 1 Short (2 bytes. -32768 to 32767) 2 Long (4 byte",
            "\t\tsigned integer) 3 Float (4 byte IEEE floating point) }",
            "\t0, { 1 }",
            "\t2 { 3 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PlotXY": {
        "comments": [
            "{ Description: Displays a plot of a curve in the window given the X",
            "\tand Y values in two arrays. }"
        ],
        "snippets": [
            "PlotXY(",
            "\tXArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array of X coordinates. The subscript for the array may be any",
            "\t\tnumeric expression. If processing a multidimensional array, the usual",
            "\t\trules apply to decide which dimension should be used. }",
            "\tYArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array of Y coordinates. The subscript for the array may be any",
            "\t\tnumeric expression. If processing a multidimensional array, the usual",
            "\t\trules apply to decide which dimension should be used. }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to plot starting at the element given by the first",
            "\t\tparameters. N must be greater than or equal to 0, and no greater than",
            "\t\t16384. If this parameter is greater than the dimension of the first",
            "\t\tarray, the number of points plotted will be that array dimension. If N",
            "\t\textends past the upper bound of the lowest array dimension, this",
            "\t\tcomputation will \"wrap-around\" and resume at element 0, until N",
            "\t\telements have been processed. }",
            "\tDataLimitLeft, { Required. Any numeric expression that defines the",
            "\t\tlimit of data values to be plotted. This value need not be less than",
            "\t\tRight but must not be equal to it. In the standard case, when this",
            "\t\tvalue is less than Right, it will define the minimum value to display",
            "\t\tfrom the array of X-values. For example, if Left was 10, a data value",
            "\t\tof 10 would fall on the edge of the bounding box, on either X1, if the",
            "\t\tplot is vertical, or on Y1, if the plot is horizontal. Any values",
            "\t\tbelow 10 in this case would not be shown - they would be outside the",
            "\t\tclipped box. }",
            "\tDataLimitRight, { Required. Any numeric expression that defines the",
            "\t\tlimit of data values to be plotted. This value need not be greater",
            "\t\tthan Left but must not be equal to it. In the standard case, when this",
            "\t\tvalue is greater than Left, it will define the maximum value to",
            "\t\tdisplay from the array of X-values. For example, if Right was 1000, a",
            "\t\tdata value of 1000 would fall on the edge of the bounding box, on",
            "\t\teither X2, if the plot is vertical, or on Y2, if the plot is",
            "\t\thorizontal. Any values above 1000 in this case would not be shown -",
            "\t\tthey would be outside the clipped box. }",
            "\tDataLimitTop, { Required. Any numeric expression that defines the",
            "\t\tlimit of data values to be plotted. This value need not be less than",
            "\t\tBottom but must not be equal to it. In the standard case, when this",
            "\t\tvalue is less than Bottom, it will define the minimum value to display",
            "\t\tfrom the array of Y-values. For example, if Top was 10, a data value",
            "\t\tof 10 would fall on the edge of the bounding box, on either Y1, if the",
            "\t\tplot is vertical, or on X1, if the plot is horizontal. Any values",
            "\t\tbelow 10 in this case would not be shown - they would be outside the",
            "\t\tclipped box. }",
            "\tDataLimitBottom, { Required. Any numeric expression that defines the",
            "\t\tlimit of data values to be plotted. This value need not be greater",
            "\t\tthan Top but must not be equal to it. In the standard case, when this",
            "\t\tvalue is greater than Top, it will define the maximum value to display",
            "\t\tfrom the array of Y-values. For example, if Bottom was 1000, a data",
            "\t\tvalue of 1000 would fall on the edge of the bounding box, on either",
            "\t\tY2, if the plot is vertical, or on X2, if the plot is horizontal. Any",
            "\t\tvalues above 1000 in this case would not be shown - they would be",
            "\t\toutside the clipped box. }",
            "\tX1 (Left), { Required. Any numeric expression giving the X coordinate",
            "\t\ton the screen of the left side of the plot area. This corresponds to",
            "\t\tthe Left parameter for horizontal plots and to the Top parameter for",
            "\t\tvertical plots. }",
            "\tY1 (Top), { Required. Any numeric expression giving the Y coordinate",
            "\t\ton the screen of the top side of the plot area. This corresponds to",
            "\t\tthe Top parameter for horizontal plots and to the Left parameter for",
            "\t\tvertical plots. }",
            "\tX2 (Right), { Required. Any numeric expression giving the X coordinate",
            "\t\ton the screen of the side of the plot area opposite to X1. This",
            "\t\tcorresponds to the Right parameter for horizontal plots and to the",
            "\t\tBottom parameter for vertical plots. }",
            "\tY2 (Bottom), { Required. Any numeric expression giving the Y",
            "\t\tcoordinate on the screen of the side of the plot area opposite to Y1.",
            "\t\tThis corresponds to the Bottom parameter for horizontal plots and to",
            "\t\tthe Right parameter for vertical plots. }",
            "\tStyle, { Required. Any numeric expression giving the style of the plot",
            "\t\t- the line style, direction, bit number for bits plots, and the number",
            "\t\tof points to average per point displayed. If PlotXY senses that the",
            "\t\tStyle parameter is a Pen, XORMode, DrawStepped, BitNumber, and Average",
            "\t\tparameters will become relevant. The Style is determined by adding",
            "\t\ttogether the following values. Line style + Direction + Path + Bit",
            "\t\tnumber + Average Line style is a number between 1 and 10 inclusive",
            "\t\twhich gives the line style for line plots. A line style of 1 indicates",
            "\t\ta solid line. For other line styles, the background color is set to",
            "\t\tthe current background screen color. Direction is either 0 or 10. A 0",
            "\t\tindicates a horizontal plot and a 10 indicates a vertical plot. Path",
            "\t\tis either 0 or 50. A 0 indicates that line plots are to be drawn",
            "\t\tdirectly from point to point. A 50 indicates that plots are to be",
            "\t\tdrawn in a step fashion with two line segments between each point. The",
            "\t\tfirst segment runs parallel to the X-axis and the second segment runs",
            "\t\tparallel to the Y-axis. This produces a square-looking plot. These",
            "\t\tstep plots are useful for plotting status values which change in jumps",
            "\t\trather than continuously. Bit number is the number of the bit to use",
            "\t\tin the YArray data for plotting. If the normal entire value of the",
            "\t\tdata is to be plotted, use 0 for this value. If only one of the bits",
            "\t\tfrom the data is to be plotted, use the bit number plus 1. The value",
            "\t\tto add is (Bit number + 1) * 100 or 0. The ability to plot only a",
            "\t\tsingle bit from an array of short or long values allows status data to",
            "\t\tbe stored very efficiently by not requiring a separate array for each",
            "\t\tstatus value. For bit plots, the value plotted is always a 0 or a 1",
            "\t\tcorresponding to the value of the selected bit. The use of this",
            "\t\tplotting option is usually done in conjunction with a Path value of 50",
            "\t\tfor step plots. Average is the number of consecutive array points to",
            "\t\taverage to give a single point on the screen. Both XArray and YArray",
            "\t\tvalues are averaged. It can be used to plot a very large array of",
            "\t\tvalues on the screen without having to draw all of the points on the",
            "\t\tscreen. This will produce a smoothed plot and reduce the drawing time.",
            "\t\tThe number to add is (Data points per displayed point + 1) * 10000. }",
            "\tColor, { Any numeric expression giving the VTScada Color Palette of",
            "\t\tthe line and the foreground color for filled plots. If the number is",
            "\t\tless than 10000, the plot is non-destructive. If the number is greater",
            "\t\tthan or equal to 10000, the plot is destructive and the actual color",
            "\t\tused is Color - 10000. }",
            "\tPen, { The pen to be used (if any). }",
            "\tReserved, { Reserved has been allocated to permit the addition of a",
            "\t\tBrush parameter, should such a parameter become necessary in the",
            "\t\tfuture. Reserved can currently be any value or Invalid. }",
            "\tXORMode, { An optional parameter specifying whether the plot is",
            "\t\tdestructive (if destructive, the plot line won't be affected by the",
            "\t\tbackground color). If set to 0 or Invalid (default), the destructive",
            "\t\tdrawing mode will be used. If set to 1, the non-destructive or XOR",
            "\t\tdrawing mode will be used. }",
            "\tDirection, { An optional parameter specifying the horizontal or",
            "\t\tvertical direction for the plot. 0 or Invalid indicates horizontal,",
            "\t\twhile 1 indicates vertical. }",
            "\tDrawStepped, { An optional parameter specifying whether the plot is to",
            "\t\tbe drawn from point-to-point, or stepped. 0 or Invalid indicates",
            "\t\tpoint-to-point, while 1 indicates stepped. }",
            "\tBitNumber, { An optional parameter specifying the use of a whole value",
            "\t\tor a bit number. Invalid indicates a whole value should be used, while",
            "\t\t>=0 indicates that the specified bit number should be used. }",
            "\tAverage { An optional parameter specifying whether consecutive points",
            "\t\tshould be averaged to give a single point. Invalid or 0 indicates that",
            "\t\taveraging should not be used, while >0 indicates that the number of",
            "\t\tconsecutive points should be averaged to give a single point. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PMultiCheckBox": {
        "comments": [
            "{ Description: Tool used to display the standard set of check boxes.",
            "\tCommonly used in the Owner tab of a configuration folder. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary.. The \"P\" tools (Pcheck box, PContributor,",
            "\tPColorSelect, PDroplist, and PEditfield) were intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. This parameter tool expects",
            "\tthe first parameter of its calling module to contain an array of tag",
            "\tparameters. }"
        ],
        "snippets": [
            "\\DialogLibrary.PMulticheck box(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tLeftToRight, { Required. If TRUE, order from left to right. If FALSE,",
            "\t\torder from top to bottom. }",
            "\tCheckBoxLabels, { Required. An array of labels for the checkboxes. }",
            "\tID, { Starting with FocusID with one for each checkbox. Boolean. If",
            "\t\tthis value is FALSE (0), the field will display its current setting,",
            "\t\tbut cannot be opened (i.e. its value cannot be changed), and will",
            "\t\tappear disabled (grayed-out). }",
            "\tDrawBevel, { Optional Boolean expression that when set to TRUE, causes",
            "\t\ta bevel to be drawn around the control. Default: False }",
            "\tLabel, { Required. A text expression to be used as a label for the",
            "\t\tcheckboxes. }",
            "\tBitOffset { Offset at which to start the bit setting. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Point": {
        "comments": [
            "{ Description: Returns a two-dimensional point, or location, in a",
            "\twindow. }",
            "{ A point describes an (x, y) location. Points may be animated to",
            "\trotate around another point by specifying a Rotate value, or they may",
            "\tbe animated to travel along a path by specifying a Trajectory value,",
            "\tboth of which are described below. Points are used in certain",
            "\tfunctions (such as GUIChord), in the Rotate value, and in the Vertex",
            "\tvalue. }"
        ],
        "snippets": [
            "Point(",
            "\tX, { Required. A numeric constant, that describes the reference x-axis",
            "\t\tlocation of the point. Expressions are not permitted here. If it is",
            "\t\tdesired to change the x coordinate, use the Trajectory or Rotation",
            "\t\tparameters. }",
            "\tY, { Required. A numeric constant, that describes the reference y-axis",
            "\t\tlocation of the point. Expressions are not permitted here. If it is",
            "\t\tdesired to change the y coordinate, use the Trajectory or Rotation",
            "\t\tparameters. }",
            "\tRotation, { Required. Any expression that returns a Rotate value. This",
            "\t\tspecifies any translation of this point from its reference position",
            "\t\t(X, Y) by rotation about another point. If this is invalid, no",
            "\t\trotation is performed, but the Point is still valid. }",
            "\tTrajectory { Required. Any expression that returns a Trajectory value.",
            "\t\tThis specifies any translation of this point from its reference",
            "\t\tposition of (X, Y) along a path. If this is invalid, no translation is",
            "\t\tperformed, but the Point is still valid. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PointerToBuff": {
        "comments": [
            "{ Description: Returns a buffer containing the numeric data from the",
            "\tvariables pointed at by each element of the array. }"
        ],
        "snippets": [
            "PointerToBuff(",
            "\tArrayStart, { Required. Any expression that specifies the starting",
            "\t\tarray element. This array contains the pointers to the variables whose",
            "\t\tvalues will be written to a buffer. If processing a multidimensional",
            "\t\tarray, the usual rules apply to decide which dimension should be used.",
            "\t\t}",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to convert starting at the element given by the first",
            "\t\tparameter. If N extends past the upper bound of the lowest array",
            "\t\tdimension, this computation will \"wrap-around\" and resume at element",
            "\t\t0, until N elements have been processed. }",
            "\tOption { Required. Any numeric expression that specifies the format of",
            "\t\tthe buffer write: Option Format 0 Unsigned binary (low byte first) 1",
            "\t\tSigned binary (low byte first) 2 BCD (binary coded decimal) (low byte",
            "\t\tfirst) 3 ASCII octal (high byte first) 4 ASCII decimal (high byte",
            "\t\tfirst) 5 ASCII hex (high byte first) 6 ASCII floating point (high byte",
            "\t\tfirst) 7 IEEE float/double (low byte first) 8 <obsolete> 9",
            "\t\tAllen-BradleyÂ® PLC/3 floating point 10 VAX single precision floating",
            "\t\tpoint For Options 7 and 9 the data is written as appropriate binary",
            "\t\tformat. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "PointList": {
        "comments": [
            "{ Description: Returns an array of tag names within the current scope,",
            "\tgiven the name of a tag type or group. NOTE: GetTagList should be used",
            "\tin place of PointList for all new code. }",
            "{ This utility function reduces the effort required to obtain a list",
            "\tof tags of a particular type or group membership. If no matching tags",
            "\tare found, the first element of the array will be Invalid. }"
        ],
        "snippets": [
            "\\PointList(",
            "\tTagType, { Required. Any text expression giving a type of tag or the",
            "\t\tname of a tag group. }",
            "\tSearchString, { An optional text expression. The search will be",
            "\t\tlimited to tags with matching names. May include wildcards. The",
            "\t\tdefault is \"*\" (any name). }",
            "\tNoFilterSimulation { Obsolete. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Popup": {
        "comments": [
            "{ Description: Causes an alarm pop-up dialog to display. }",
            "{ The Popup subroutine always returns \"1\". }"
        ],
        "snippets": [
            "\\AlarmManager.Popup(",
            "\tModuleName, { Required. Any expression providing a text result. Name",
            "\t\tof module to draw in the window }",
            "\tTitle, { Required. Any expression providing a text result. Window",
            "\t\ttitle }",
            "\tWidth, { Required. Numeric expression. Number of pixels wide for the",
            "\t\tdialog }",
            "\tHeight, { Required. Numeric expression. Number of pixels high for the",
            "\t\tdialog }",
            "\tX, { Required. Numeric expression. Location on the screen for the",
            "\t\tdialog, measured from the left. }",
            "\tY { Required. Numeric expression. Location on the screen for the",
            "\t\tdialog measured from the top. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "POverride": {
        "comments": [
            "{ Description: Tool used to override non-standard ConfigFolder",
            "\tcontrols for child tags. }",
            "{ This tool handles the shortcut menu and optionally highlights it's",
            "\tentire area when the an override is specified. Feedback is also",
            "\tprovided to allow custom controls to be highlighted in a more",
            "\tattractive fashion. This module is a member of the VTScada Dialog",
            "\tLibrary and must therefore be called from within a GUITransform and",
            "\tprefaced by \\DialogLibrary\\. The \"P\" tools (Pcheck box, PContributor,",
            "\tPColorSelect, PDroplist, and PEditField) were intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. This parameter tool expects",
            "\tthe first parameter of its calling module to contain an array of tag",
            "\tparameters. Usual height: 45 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.POverride(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tShowHotbox, { An optional parameter that is any logical expression. If",
            "\t\tTRUE, the click-able area will be shown. }",
            "\tShowHighlight, { An optional parameter that is any logical expression.",
            "\t\tIf TRUE the area will be emphasized with the HighlightColor. }",
            "\tHighlightColor, { An optional output giving the highlight color to",
            "\t\tdisplay if ShowHighlight is true. }",
            "\tIntTrigger, { An optional trigger used by the caller's Edit field. }",
            "\tShowProperties, { An optional Boolean, controlling whether the",
            "\t\tProperties item should appear in the menu. }",
            "\tValType, { Optional. The VTScada value type of the parameter. }",
            "\tMinVal, { Optional numeric. The minimum for the parameter value. }",
            "\tMaxVal, { Optional numeric. The maximum for the parameter value. }",
            "\tValArray, { Optional array. If provided, defines a list of acceptable",
            "\t\tvalues for the parameter. }",
            "\tEnable, { Optional Boolean. Set TRUE to enable the right-click menu.",
            "\t\tDefaults to TRUE }",
            "\tDoNotTranslate { Optional Boolean. Set TRUE when you do not want to",
            "\t\ttranslate a parameter that is a PhraseKey, retaining it as a key for",
            "\t\tlater translation. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Pow": {
        "comments": [
            "{ Description: Returns a number raised to a power. }",
            "{ This function may be used to perform the common antilogarithm by",
            "\tusing 10 for X. The return value is invalid if X is less than or equal",
            "\tto 0 and Exponent is not a numeric. }"
        ],
        "snippets": [
            "Pow(",
            "\tX, { Required. Any numeric expression giving the number to be raised",
            "\t\tto the power of Exponent. }",
            "\tExponent { Required. Any numeric expression giving the number to which",
            "\t\tX should be raised. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "PPageSelect": {
        "comments": [
            "{ Description: Shows the currently selected page and provides a tool",
            "\tto open the Page Select dialog. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary.. This parameter tool expects the first parameter of",
            "\tits calling module to contain an array of tag parameters. It will then",
            "\tset the element indicated by ParmNum to the name of the chosen page.",
            "\tThe height of the (unopened) droplist is constant, with the horizontal",
            "\tboundaries of its calling transform defining its width, and the",
            "\tvertical boundaries of its calling transform defining its opened",
            "\theight, which will include the added height of the bevel above the",
            "\tfield, but may or may not include the title, depending on the",
            "\talignment used. Note that if the entire list can be displayed in a",
            "\tsmaller area than indicated by the vertical boundaries of the calling",
            "\ttransform, the dropped list height will be decreased. The dropped",
            "\theight of the list will always have a minimum height of 1 line (below",
            "\tthe field). For any optional parameter that is to be set, all optional",
            "\tparameters preceding the desired one must be present, although they",
            "\tmay be invalid. Usual height: 45 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PPageSelect(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a title for the droplist. }",
            "\tFocusID, { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tVertAlign { An optional parameter that is any numeric expression that",
            "\t\tsets the vertical alignment of the droplist according to one of the",
            "\t\tfollowing options: VertAlign Vertical Alignment 0 Top 1 Center 2",
            "\t\tBottom Whether the title is included when the vertical alignment is",
            "\t\tcalculated is determined by the value of AlignTitle. The default value",
            "\t\tis 0. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PPhraseDroplist": {
        "comments": [
            "{ Description: Handles the complexity of parameter expressions by",
            "\tswitching between display of a PhraseDroplist and regular Droplist",
            "\tcontrol as is done in PPhraseEdit. }",
            "{ Droplist used to select a PhraseID by presenting the user with a",
            "\tdroplist full of translated phrases. If CanEdit is TRUE then it is",
            "\tpossible for the user to input new labels, in which case they will be",
            "\tadded to the list and will be added to the language manifest. This",
            "\tmodule is a member of the VTScada Dialog Library and must therefore be",
            "\tcalled from within a GUITransform and prefaced by \\DialogLibrary.. The",
            "\t\"P\" tools (PCheckBox, PContributor, PColorSelect, PDroplist, and",
            "\tPEditField) were intended only for use in configuration folders and",
            "\tdrawing panel modules, and therefore are subject to the system",
            "\tsecurity restraints. }"
        ],
        "snippets": [
            "\\DialogLibrary.PPhraseDroplist(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a title for the droplist. }",
            "\tPhraseIDArr, { An array containing Phrase IDs (keys) for the list. }",
            "\tCanEdit, { Boolean. If TRUE, users can edit within the field, adding",
            "\t\tnew phrases. }",
            "\tIndex, { Numeric. The index variable to update within the array. }",
            "\tFocusID { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PPhraseEdit": {
        "comments": [
            "{ Description: Language-sensitive, parameter-setting editfield. This",
            "\tmodule draws an editfield with (optional) title and bevel. Recommended",
            "\tin place of the older PEditField. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary.. The \"P\" tools (PCheckBox, PContributor, PColorSelect,",
            "\tPDroplist, and PEditField) were intended only for use in configuration",
            "\tfolders and drawing panel modules, and therefore are subject to the",
            "\tsystem security restraints. When more than one language is enabled in",
            "\tthe application, a phrase-editing button is provided at the right edge",
            "\tof the field. Optionally, the phrase editor will open automatically",
            "\twhen VTScada detects that new or untranslated text is entered into the",
            "\tfield. This parameter tool expects the first parameter of its calling",
            "\tmodule to contain an array of tag parameters. It will then set the",
            "\telement indicated by ParmNum to the value in the editfield. The height",
            "\tof the editfield is constant, with the horizontal boundaries of its",
            "\tcalling transform defining its width, and the vertical boundaries of",
            "\tits calling transform defining the boundaries in which it is to be",
            "\tconfined vertically, which will include the added height bevel, but",
            "\tmay or may not include the title, depending on the alignment used.",
            "\tUsual height: 45 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PPhraseEdit(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a title for the field. }",
            "\tFocusID { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PPPDial": {
        "comments": [
            "{ Description: Creates a PPP connection to a remote peer. The",
            "\tconnection can be via a dial-up or direct device connection. }",
            "{ PPPDial works by creating a phonebook entry in a temporary phone",
            "\tbook in the installation folder. The entry is GUID named and has a",
            "\tlifespan the same as the PPPHandle this method creates. A RAS call is",
            "\tthen initiated and a PPPHandle created to represent the call. This",
            "\tfunction looks for the subroutine, PPPStatus in the scope of the",
            "\tcaller. After initiation of the call, this subroutine is called to",
            "\tnotify the caller of the progress and status of the call. The call is",
            "\tterminated and the phonebook entry removed after the PPPHandle",
            "\tdestructs. Invalidating the last reference will do this. Destruction",
            "\tis asynchronous. VTScada shutdown waits for all PPP handles to",
            "\tgracefully close. }"
        ],
        "snippets": [
            "PPPDial(",
            "\tDeviceName, { Required. Any text expression giving the name of the",
            "\t\tmodem as configured in Windowsâ¢. The function will return Invalid if",
            "\t\tthis parameter is not a valid text value. }",
            "\tPhoneNumber, { An optional text expression giving the phone number to",
            "\t\tbe used when making a PPP call. Required only for use with modems.",
            "\t\tDefaults to Invalid. }",
            "\tUserName, { An optional text expression, providing the user name for",
            "\t\tremote authentication. }",
            "\tPassword, { An optional text expression, providing the password for",
            "\t\tremote authentication. }",
            "\tDomain, { An optional text expression, providing the domain name for",
            "\t\tremote authentication. }",
            "\tFlags { An optional numeric expression, specifying compression,",
            "\t\tencryption and other options to be provided. A bit-wise AND operation",
            "\t\tis done between this value and the following constants. Value Constant",
            "\t\tMeaning 0x0001 PPPDF_IpHeaderCompression Use IP header compression",
            "\t\t0x0002 PPPDF_SwCompression Use software compression 0x0004",
            "\t\tPPPDF_DisableLcpExtensions Disable LCP extensions. 0x0008",
            "\t\tPPPDF_RequireEncryptedPw Require encrypted password. 0x0010",
            "\t\tPPPDF_RequireDataEncryption Require data encryption }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "PPPHandles": {
        "comments": [
            "{ Description: Returns an array of all Point-to-Point Protocol handles",
            "\ton the local machine. This includes all such handles, whether inbound",
            "\tor outbound and whether made by VTScada. }"
        ],
        "snippets": [
            "PPPHandles();"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PPPStatus": {
        "comments": [
            "{ Description: Obtains the structure of a PPP connection. }",
            "{ If called in script mode, the current state will be returned. If",
            "\tcalled in steady state, the function will be retriggered each time",
            "\tthere is a state change in the parameter, PPPHandle. The return value",
            "\tis a structure containing the following members: ConnectionID:",
            "\tActually the phonebook entry name, which is a GUID. State: See",
            "\tenumeration RASCONNSTATE (defined in the Visual Studio file, ras.h)",
            "\tError: Last error code from RAS (defined in the Visual Studio file,",
            "\traserror.h) RemoteIP: The IP address of the remote peer. Only valid",
            "\twhen State is RASCS_Projected or greater. LocalIP: The IP address on",
            "\tthis machine that the remote peer is connected to. Only valid when",
            "\tState is RASCS_Projected or greater. If the PPPHandle parameter is",
            "\tbad, this function will return an Invalid. }"
        ],
        "snippets": [
            "PPPStatus(",
            "\tPPPHandle { The PPP Handle to be monitored. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "PRadioButtons": {
        "comments": [
            "{ Description: Parameter Setting Radio Buttons. This module draws a",
            "\tset of labeled radio buttons with optional title and border. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary.. This parameter tool expects the first parameter of",
            "\tits calling module to contain an array of tag parameters. It will then",
            "\tset the element indicated by ParmNum to the selected item. The",
            "\tboundaries of the calling transform define the outline of the buttons",
            "\tincluding their border, if there is one. If the area is too small to",
            "\tfully display the buttons they will extend beyond their right and",
            "\tbottom boundaries. Buttons and their border will not overlap each",
            "\tother and will always be shown in their entirety, although the labels",
            "\tmay be clipped or entirely deleted. Usual height: varies according to",
            "\tnumber of buttons. Seldom less than 50px. }"
        ],
        "snippets": [
            "\\DialogLibrary.PRadioButtons(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tFocusID, { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tBorder, { Numeric that may have the following values: 0 = No outline",
            "\t\t(default) 1 = Raised box outline 2 = Bevel outline }",
            "\tTitle, { Any text expression to be used as a title with the radio",
            "\t\tbuttons. The default value is to have no title. }",
            "\tOptions, { A bit-wise expression. Bit 0 controls left/right placement",
            "\t\tof the buttons. If set, buttons will be placed to the left of the",
            "\t\tlabels. Bit 1 controls vertical/horizontal orientation. If set, the",
            "\t\tradio buttons will be displayed horizontally. Bit 0 has no effect",
            "\t\twhile bit 1 is set. Bit 2, if set, causes the radio buttons to adopt a",
            "\t\t\"standard\" vertical spacing of 5 pixels. Defaults to 0 - neither bit",
            "\t\tset. }",
            "\tAlignTitle, { Any logical expression; if TRUE (non-0) the title is",
            "\t\tdrawn within the radio buttons' boundaries, if FALSE (0) the buttons",
            "\t\tfill their bounding area and the title is added at the top (i.e. it",
            "\t\textends past the top boundary). The default is true. }",
            "\tL0, { Labels. The number of labels determines the number of buttons",
            "\t\tdisplayed. At least two must be provided. If L0 is an individual",
            "\t\tlabel, then up to L15 individual labels may follow. If L0 is an array",
            "\t\tof labels, L1 may (optionally) be defined as an array of Return",
            "\t\tvalues, similar to the return array in PDropList. }",
            "\tL1, { A flexible parameter. If L0 is an array, this may contain a",
            "\t\tmatching array of return values. Otherwise, this may contain the",
            "\t\tsecond label. }",
            "\tL2, { A flexible parameter. This may contain a logical expression",
            "\t\tindicating (when TRUE) that expressions should not be translated. Or,",
            "\t\tthis may be the third label. }",
            "\tL3...L15 { The remaining labels, if any. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PrepStringForTemplate": {
        "comments": [
            "{ Description: Prepares text for use in an alarm template by escaping",
            "\t% symbols. }",
            "{ Text is cleaned for use in an alarm template by doubling any",
            "\tinstance of a % symbol. }"
        ],
        "snippets": [
            "\\PrepStringForTemplate(",
            "\tValue { Required. The text to be cleaned. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Print": {
        "comments": [
            "{ Description: Allows text to be printed. }",
            "{ This statement is very similar to the PrintLine statement except it",
            "\tdoes not add the carriage return or line feed after the text. All",
            "\tprint functions are compatible with the values returned in either of",
            "\tthe first two parameters of the PrintDialogBox function. }"
        ],
        "snippets": [
            "Print(",
            "\tPrinterSpec { ...will accept any of the following: Local Printer: Port",
            "\t\tname (including virtual ports) with or without a trailing colon (e.g.",
            "\t\tDEF or DEF:. COM1 or COM1:; USB001 or USB001:; etc.) Windows printer",
            "\t\tshare (e.g. \"XYZ Laser Printer\") Windows share name (if the printer is",
            "\t\tshared) (e.g. \"XYZLaser\") Local or Remote Printer: UNC share name",
            "\t\t(which includes the host and share name (e.g. \"\\\\localhost\\XYlaser\" or",
            "\t\t\"\\\\lab1\\NetPrinter\") }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "PrintDialogBox": {
        "comments": [
            "{ Description: Displays a threaded system common printer selection",
            "\tdialog box. }",
            "{ This function creates a printer selection dialog that runs in its",
            "\town thread, thereby avoiding blocking the calling code. The calling",
            "\tcode can use the Result parameter to determine when the user has",
            "\tcompleted the dialog box (see Result above). In addition to the Result",
            "\tparameter, the function itself will return an error code to indicate",
            "\twhether the dialog was successfully opened. A \"1\" indicates failure to",
            "\topen while a \"0\" indicates success. The caller of this function is",
            "\texpected to supply the MinPage and MaxPage parameters, representing",
            "\tthe minimum and maximum page number from which the user may select.",
            "\tFirstPage and LastPage can be initially set to any values between",
            "\tMinPage and MaxPage. If the combination of the four values is not",
            "\tlogical (e.g. LastPage is smaller than FirstPage), VTScada will force",
            "\tlogical values for the dialog. When Result is set to one, FirstPage",
            "\tand LastPage will contain the page range that the user selected. If",
            "\tResult is set to zero (i.e. the user has canceled the dialog),",
            "\tFirstPage and LastPage are left at their initial values. Setting",
            "\tMinPage and MaxPage to Invalid or to equal values will disable the",
            "\tpage range field. NumCopies can likewise contain an initial value, and",
            "\twill be set to the user-selected number of copies if Result returns a",
            "\tvalue of one. The initial value of the Selection radio button is",
            "\tcontrolled by the value of the variable provided for the",
            "\tAllowSelection parameter: If the variable's value evaluates to a",
            "\tnon-zero positive number, the Selection radio button will be selected.",
            "\tIf the variable's value is zero, the radio-button will initially be",
            "\tunselected. When the Print button on the print dialog box is clicked,",
            "\tthis variable receives a zero if the Selection radio-button was not",
            "\tselected and one if it was selected. Within an Anywhere Client",
            "\tsession, this function does nothing. }"
        ],
        "snippets": [
            "PrintDialogBox(",
            "\tPrinterName, { Required. Any text expression giving the initial",
            "\t\tprinter name to display as selected. If this is not a valid text",
            "\t\tvalue, the default printer (as configured under Windows) will",
            "\t\tinitially be selected. If PrinterName refers to a variable and the",
            "\t\tuser clicks the \"Print\" button on the dialog, thereby closing it, the",
            "\t\tvariable will be set to the name of the selected printer. If the user",
            "\t\tcancels the dialog box, the variable is unchanged. }",
            "\tPrinterDevice, { Required. Any variable that will be set to the device",
            "\t\tname for the selected printer when the user clicks the \"Print\" button",
            "\t\ton the dialog. If the user cancels the dialog box, the variable is",
            "\t\tunchanged. The text expression returned here can be supplied to a",
            "\t\tFileStream statement to open a stream to the selected printer. }",
            "\tMinPage, { Required. Any positive integer expression specifying the",
            "\t\tminimum page number in the printed output (see Comments section for",
            "\t\tfurther details). }",
            "\tMaxPage, { Required. Any positive integer expression specifying the",
            "\t\tmaximum page number in the printed output (see Comments section for",
            "\t\tfurther details). }",
            "\tFirstPage, { Required. Any integer expression specifying the first",
            "\t\tpage to be printed (see Comments section for further details). }",
            "\tLastPage, { Required. Any integer expression specifying the last page",
            "\t\tto be printed (see Comments section for further details). }",
            "\tNumCopies, { Required. Any integer expression specifying the number of",
            "\t\tcopies to be printed (see Comments section for further details). }",
            "\tResult { Required. A variable that will be set to one of the following",
            "\t\tvalues: Invalid when this statement is run, Zero (0) to indicate that",
            "\t\tthe user has canceled the dialog, or One (1) to indicate that the user",
            "\t\thas clicked the \"Print\" button. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "PrintLine": {
        "comments": [
            "{ Description: Allows text to be printed and is followed by a carriage",
            "\treturn-line feed to the printer. }"
        ],
        "snippets": [
            "PrintLine(",
            "\tPrinterSpec { ...will accept any of the following: Local Printer: Port",
            "\t\tname (including virtual ports) with or without a trailing colon (e.g.",
            "\t\tDEF or DEF:. COM1 or COM1:; USB001 or USB001:; etc.) Windows printer",
            "\t\tshare (e.g. \"XYZ Laser Printer\") Windows share name (if the printer is",
            "\t\tshared) (e.g. \"XYZLaser\") Local or Remote Printer: UNC share name",
            "\t\t(which includes the host and share name (e.g. \"\\\\localhost\\XYlaser\" or",
            "\t\t\"\\\\lab1\\NetPrinter\") }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ProcInfo": {
        "comments": [
            "{ Description: Returns basic information about the VTScada process. }",
            "{ Used by the workstation status tag. }"
        ],
        "snippets": [
            "ProcInfo(",
            "\tDataType { Required. A numeric value that specifies the type of",
            "\t\tprocess information to be retrieved by the function. DataType Function",
            "\t\treturns 0 Process ID 1 GDI Handle Count 2 User Handle Count }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ProgressBar": {
        "comments": [
            "{ Description: Displays a horizontal progress bar. }",
            "{ None }"
        ],
        "snippets": [
            "System.ProgressBar(",
            "\tLeftReference, { A constant number that gives the left side reference",
            "\t\tcoordinate. }",
            "\tBottomReference, { A constant number that gives the bottom side",
            "\t\treference coordinate. The top and bottom references are measured down",
            "\t\tfrom the top of the screen. }",
            "\tRightReference, { A constant number that gives the right side",
            "\t\treference coordinate. }",
            "\tTopReference, { A constant number that gives the top side reference",
            "\t\tcoordinate. }",
            "\tValue, { Required. The value to display as the progress. }",
            "\tLow, { Optional numeric, specifying the minimum value for the progress",
            "\t\tbar. Defaults to zero. }",
            "\tHigh, { Optional numeric, specifying the maximum value for the",
            "\t\tprogress bar. Defaults to 100. }",
            "\tLeftLabel, { Optional text providing the left-justified label. }",
            "\tRightLabel, { Optional text providing the right-justified label. }",
            "\tAlign, { Optional numeric. If 0 (the default if unspecified) the",
            "\t\tgraphic will be top-justified. If 1, the graphic will be",
            "\t\tcenter-justified. }",
            "\tDelay, { Optional numeric. The number of seconds to wait before the",
            "\t\tgraphic is displayed. Defaults to zero. }",
            "\tContinuousLoop { Optional Boolean. When set true, the progress bar",
            "\t\twill loop continuously rather than representing the value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ProtobufDecode": {
        "comments": [
            "{ Description: Decodes Protobuf serialized data. }",
            "{ When decoding messages with optional fields (note that in Protobuf",
            "\tversion 3 all fields are optional) the default value will be used if",
            "\tit is absent from the encoded message. An exception to this is fields",
            "\tdefined within a oneof where no default values will be used. Decoding",
            "\tand encoding of proto2 groups is not supported. }"
        ],
        "snippets": [
            "ProtobufDecode(",
            "\tProtobufHandle, { Protobuf handle generated by ProtobufParse }",
            "\tMessageTypeName, { Message type from ProtobufHandle's proto file }",
            "\tEncodedString, { Protocol buffer to decode }",
            "\tNoOptionalDefaulting { Optional Boolean. Defaults to FALSE when",
            "\t\tunspecified or invalid. When TRUE, fields in a Protobuf message",
            "\t\tdefined as optional and not present in the message are not given a",
            "\t\tdefault value when decoded. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ProtobufEncode": {
        "comments": [
            "{ Description: Creates a buffer for a given Protobuf file containing",
            "\tVTScada value data. }",
            "{ Protobuf version 2 allows fields to be defined as required. If all",
            "\tfields marked as required are not present when encoding a message",
            "\tProtobufEncode will return invalid. Decoding and encoding of proto2",
            "\tgroups is not supported. }"
        ],
        "snippets": [
            "ProtobufEncode(",
            "\tProtobufHandle, { Protobuf handle generated by ProtobufParse }",
            "\tMessageTypeName, { Message type from ProtobufHandle's proto file. This",
            "\t\tis the full name, meaning that if the .proto file includes a package",
            "\t\tname \"com.trihedral.protobufexample\" and the message name is",
            "\t\t\"AMessage\", this would be \"com.trihedral.protobufexample.AMessage\".",
            "\t\tFor nested messages this also includes all ancestor messages }",
            "\tDataToEncode { VTScada data structure representing the message to be",
            "\t\tencoded }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ProtobufInstantiate": {
        "comments": [
            "{ Description: Instantiates a message using default values. This is",
            "\tuseful where a non-trivial message type is used as it allows the",
            "\tscript code developer to create an instance of a message suitable for",
            "\tencoding without re-defining the message structure. }",
            "{ Generates a VTScada data structure based on the loaded proto file,",
            "\tso that the structure can be populated with data from script code",
            "\tbefore being used in a call to ProtobufEncode. }"
        ],
        "snippets": [
            "ProtobufInstantiate(",
            "\tProtobufHandle, { A Protobuf handle returned from ProtobufParse. }",
            "\tMessageTypeName, { The message type to use for decoding. This is the",
            "\t\tfull name, that is, if the .proto file includes a package name",
            "\t\t\"com.trihedral.protobufexample\" and the message name is \"AMessage\",",
            "\t\tthis would be \"com.trihedral.protobufexample.AMessage\". For nested",
            "\t\tmessages this also includes all ancestor messages }",
            "\tOptionalsAsInvalid { Optional Boolean. Defaults to FALSE when",
            "\t\tunspecified or invalid. When TRUE, fields in a Protobuf specification",
            "\t\tfile that are defined as optional are not given a default value when",
            "\t\tinstantiated. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ProtobufParse": {
        "comments": [
            "{ Description: Load a Protobuf specification from a file. }",
            "{ The return value is of type #VTypeProtobufHandle if successful, or",
            "\tinvalid if there were errors. The handle can be used with",
            "\tProtobufEncode, ProtobufDecode, and ProtobufInstantiate. The ErrMsg",
            "\tparameter is set to invalid if there were no errors, or an array of",
            "\tone or more errors if there were issues parsing the file specified in",
            "\tthe ProtobufFileName parameter. Each error consists of a structure",
            "\twith members file name, line, column, and message. }"
        ],
        "snippets": [
            "ProtobufParse(",
            "\tProtobufFileName, { Required text. Absolute path to the file that",
            "\t\tdefines a Protobuf spec. }",
            "\tErrMsg { Optional. If provided, this will be set to an array of error",
            "\t\tmessages on failure. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "PrtScrn": {
        "comments": [
            "{ Description: Prints the image in a window on the default Windowsâ¢",
            "\tprinter and returns an error code. }"
        ],
        "snippets": [
            "PrtScrn(",
            "\tWindow, { An optional object value of a module instance that specifies",
            "\t\tthe window to print. If it is not specified, it defaults to Self which",
            "\t\twill print the window from which the PrtScrn function is executed. }",
            "\tPaletteChanges { An optional two-dimensional array of RGB values. Each",
            "\t\tRGB value overrides the default printed color for the palette index,",
            "\t\twhich is the same as the first array subscript. The first array",
            "\t\tsubscript may have any size (e.g. [0..255] for the whole palette, or",
            "\t\t[123..125] for just palette indices 123 to 125). (Please see the",
            "\t\texample in the \"Example\" section.) The second array subscript should",
            "\t\tbe sized [0..2] and holds the red, green, and blue components of the",
            "\t\tcolor respectively. Each color value must be a real number between",
            "\t\tzero and one. \"0\" represents a total absence of that color, while \"1\"",
            "\t\trepresents the full intensity of the color. Colors that are in other",
            "\t\tindexed positions of the palette, but which have the same RGB value as",
            "\t\tthe indexed color to be changed, will usually also change. The danger",
            "\t\tis that the process of mapping colors from VTSâs palette to that of",
            "\t\tthe printer may cause results to differ from those expected. If using",
            "\t\tthe PaletteChanges parameter, you are advised to test this function to",
            "\t\tdetermine the actual results. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "PSecBit": {
        "comments": [
            "{ Description: Parameter Setting Security Bit. This module draws a",
            "\ttitled, [beveled] droplist of options for setting the security bit. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary.. This parameter tool expects the first parameter of",
            "\tits calling module to contain an array of tag parameters. It will then",
            "\tset the element indicated by ParmNum to the chosen security bit. The",
            "\theight of the (unopened) droplist is constant, with the horizontal",
            "\tboundaries of its calling transform defining its width, and the",
            "\tvertical boundaries of its calling transform defining its opened",
            "\theight, which will include the added height of the bevel above the",
            "\tfield, but may or may not include the title, depending on the",
            "\talignment used. Note that if the entire list can be displayed in a",
            "\tsmaller area than indicated by the vertical boundaries of the calling",
            "\ttransform, the dropped list height will be decreased. The dropped",
            "\theight of the list will always have a minimum height of 1 line (below",
            "\tthe field). For any optional parameter that is to be set, all optional",
            "\tparameters preceding the desired one must be present, although they",
            "\tmay be invalid. Usual height: 45 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PSecBit(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTitle, { Required. Any text expression to be used as a title for the",
            "\t\tdroplist. }",
            "\tFocusID, { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tVertAlign { An optional parameter that is any numeric expression that",
            "\t\tsets the vertical alignment of the droplist according to one of the",
            "\t\tfollowing options: Value Vertical Alignment 0 Top 1 Center 2 Bottom",
            "\t\tWhether the title is included when the vertical alignment is",
            "\t\tcalculated is determined by the value of AlignTitle. The default value",
            "\t\tis 0. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PSelectObject": {
        "comments": [
            "{ Description: Parameter Setting Select Tag Object Tool. This module",
            "\tdraws a beveled, titled box showing the currently selected tag, a",
            "\tbutton to modify the connection in the hierarchy, and a new tag",
            "\tcreation button. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary.. This parameter tool expects the first parameter of",
            "\tits calling module to contain an array of tag parameters. It will then",
            "\tset the element indicated by ParmNum to the chosen item. The height of",
            "\tthe (unopened) droplist and the create new tag button are constant,",
            "\twith the horizontal boundaries of the calling transform defining their",
            "\tcombined width, and the vertical boundaries of the calling transform",
            "\tdefining the droplist's opened height, which will include the added",
            "\theight of the bevel above the field, but may or may not include the",
            "\ttitle, depending on the alignment used. Note that if the entire list",
            "\tcan be displayed in a smaller area than indicated by the vertical",
            "\tboundaries of the calling transform, the dropped list height will be",
            "\tdecreased. The dropped height of the list will always have a minimum",
            "\theight of 1 line (below the field). For any optional parameter that is",
            "\tto be set, all optional parameters preceding the desired one must be",
            "\tpresent, although they may be invalid. Usual height: 45 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PSelectObject(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTagType, { Required. May be a text expression for the type or",
            "\t\ttype-group of tag to be used to create the droplist. (Type-groups",
            "\t\tinclude \"ports\", \"drivers\", \"analogs\", etc.) Alternatively, this may",
            "\t\tbe an array of types. The array may not include groups. All existing",
            "\t\ttags of the type or types will be listed. }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a title for the droplist. If not provided, the title will be blank.",
            "\t\t}",
            "\tFocusID, { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tVertAlign, { An optional parameter that is any numeric expression that",
            "\t\tsets the vertical alignment of the unopened droplist according to one",
            "\t\tof the following: VertAlign Vertical Alignment 0 Top 1 Center 2 Bottom",
            "\t\tWhether the title is included when the vertical alignment is",
            "\t\tcalculated is determined by the value of AlignTitle. The default value",
            "\t\tis 0. }",
            "\t0, { 1 }",
            "\t2",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PServerListName": {
        "comments": [
            "{ Description: Called graphic module that creates an editable droplist",
            "\tof Server List Names, available to the tag. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary\\. The \"P\" tools (Pcheck box, PContributor,",
            "\tPColorSelect, PDroplist, and PEditField) were intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. }"
        ],
        "snippets": [
            "\\DialogLibrary.PColorEdit(",
            "\tParms, { Required. Any numeric expression giving the parameter number",
            "\t\t(from 0) in the caller to alter. }",
            "\tTitle, { An optional parameter that is any expression for a title to",
            "\t\tbe applied. }",
            "\tID, { Boolean. If this value is FALSE (0), the field will display its",
            "\t\tcurrent setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tTrigger, { Set when the variable is changed. }",
            "\tDrawBevel, { Optional Boolean expression that when set to TRUE, causes",
            "\t\ta bevel to be drawn around the control. If the editfield is beveled,",
            "\t\tits size will become fixed and will be the same as that for a",
            "\t\tdroplist. }",
            "\tVertAlign, { An optional parameter that is any numeric expression that",
            "\t\tsets the vertical alignment of the droplist according to one of the",
            "\t\tfollowing options: VertAlign Vertical Alignment 0 Top 1 Center 2",
            "\t\tBottom Whether the title is included when the vertical alignment is",
            "\t\tcalculated is determined by the value of AlignTitle. The default value",
            "\t\tis 0. }",
            "\tAlignTitle { Boolean. Set to TRUE if the title is aligned with the",
            "\t\ttop. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PSpinbox": {
        "comments": [
            "{ Description: Parameter Setting Spinbox. This module draws a spinbox",
            "\twith optional label. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary.. This parameter tool expects the first parameter of",
            "\tits calling module to contain an array of tag parameters. It will then",
            "\tset the element indicated by ParmNum to the value displayed in the",
            "\tspinbox. The size of the spinbox is constant, with the boundaries of",
            "\tthe calling transform defining the position of the check box and its",
            "\tlabel. For any optional parameter that is to be set, all optional",
            "\tparameters preceding the desired one must be present, although they",
            "\tmay be invalid. Usual height: 22 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PSpinBox(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tLabel, { Required. Any text expression to be used as a label with the",
            "\t\tspinbox. }",
            "\tBoxOnLeft, { Required. Any logical expression. If true (non-0) the",
            "\t\tspinbox will appear to the left of the label, if false (0) it will be",
            "\t\tto the right. Defaults to TRUE. }",
            "\tLowLimit, { Required. Any numeric expression giving the lowest",
            "\t\tpermissible value. If the spinbox is editable and a value less than",
            "\t\tLowLimit is entered, it will revert to the LowLimit value. }",
            "\tHighLimit, { Required. Any numeric expression giving the highest",
            "\t\tpermissible value. If the spinbox is editable and a value greater than",
            "\t\tHighLimit is entered, it will revert to the HighLimit value. }",
            "\tAlignment { An optional parameter that is any numeric expression that",
            "\t\tsets the alignment of the spinbox and its label according to one of",
            "\t\tthe following options. The default value is 0. Alignment Horizontal",
            "\t\tAlignment Vertical Alignment 0 Left Top 1 Right Top 2 Full Top 3 Left",
            "\t\tCentered 4 Right Centered 5 Full Centered 6 Left Bottom 7 Right Bottom",
            "\t\t8 Full Bottom }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PTimeZone": {
        "comments": [
            "{ Description: Tool used to display a list of timezones, as defined by",
            "\tthe operating system. }",
            "{ Value will be set to one of: Invalid = UTC selected 0 = Local",
            "\ttimezone selected Text = Name of timezone selected The set value can",
            "\tbe plugged directly into calls to ConvertTimestamp() This module is a",
            "\tmember of the VTScada Dialog Library and must therefore be called from",
            "\twithin a GUITransform and prefaced by \\DialogLibrary\\. The \"P\" tools",
            "\t(Pcheck box, PContributor, PColorSelect, PDroplist, and PEditField)",
            "\twere intended only for use in configuration folders and drawing panel",
            "\tmodules, and therefore are subject to the system security restraints.",
            "\tThis parameter tool expects the first parameter of its calling module",
            "\tto contain an array of tag parameters. Usual height: 155 pixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PTimeZone(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTitle, { Text to be displayed above the parameter. }",
            "\tAlignTitle, { Boolean controlling the text alignment. If this",
            "\t\tparameter is invalid or numeric, it indicates the title alignment such",
            "\t\tthat if it is true (non-0) the title is included in the calculation",
            "\t\tfor vertical alignment, if false(0) it is added to the droplist after",
            "\t\tit (and its bevel if one exists) has been vertically aligned. The",
            "\t\tdefault is true }",
            "\tFocusID, { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            "\tTrigger, { Optional. If the list is editable, Trigger provides",
            "\t\tfeedback. While editing, the value will be 0. When editing is complete",
            "\t\t(tab, enter or loss of focus) the value will change to non-zero: 1 if",
            "\t\tenter is pressed, 2 otherwise. }",
            "\tInitVal, { An optional parameter that is any expression for the",
            "\t\tinitial value displayed in the field. }",
            "\tDrawBevel, { Optional Boolean expression that when set to TRUE, causes",
            "\t\ta bevel to be drawn around the control. }",
            "\tVertAlign { An optional parameter that is any numeric expression that",
            "\t\tsets the vertical alignment of the unopened list according to one of",
            "\t\tthe following: VertAlign Vertical Alignment 0 Top 1 Center 2 Bottom",
            "\t\tWhether the title is included when the vertical alignment is",
            "\t\tcalculated is determined by the value of AlignTitle. The default value",
            "\t\tis 0. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PType": {
        "comments": [
            "{ Description: Returns the actual type of parameter at an index. }"
        ],
        "snippets": [
            "PType(",
            "\tObject, { Required. Any object (the object value of a running module",
            "\t\tinstance). }",
            "\tIndex { Required. Any numeric expression giving the number of the",
            "\t\tparameter of interest, starting from 1. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "PTypeToggle": {
        "comments": [
            "{ Description: Parameter Setting Type Toggled Field. This module draws",
            "\ta beveled, titled box showing the currently selected tag, numeric",
            "\tvalue or expression and buttons to modify the value as appropriate. }",
            "{ This module is a member of the VTScada Dialog Library and must",
            "\ttherefore be called from within a GUITransform and prefaced by",
            "\t\\DialogLibrary.. This control is not to be used in widget panel",
            "\tmodules as it creates undesired output and does not support the range",
            "\tof type selections required for widget configuration. In widget panel",
            "\tmodules, use ParameterEdit Snap-ins or NumericParameterEdit instead.",
            "\tThis parameter tool expects the first parameter of its calling module",
            "\tto contain an array of tag parameters. It will then set the element",
            "\tindicated by ParmNum to the numeric value or the name of the selected",
            "\ttag. The height of the (unopened) droplist, the create new tag button",
            "\tand the radio buttons beneath them are constant, with the horizontal",
            "\tboundaries of the calling transform defining the combined width of the",
            "\tdroplist and button, and the vertical boundaries of the calling",
            "\ttransform defining the droplist's opened height, which will include",
            "\tthe added height of the bevel above the field, but may or may not",
            "\tinclude the title, depending on the alignment used. Note that if the",
            "\tentire list can be displayed in a smaller area than indicated by the",
            "\tvertical boundaries of the calling transform, the dropped list height",
            "\twill be decreased. The dropped height of the list will always have a",
            "\tminimum height of 1 line (below the field). For any optional parameter",
            "\tthat is to be set, all optional parameters preceding the desired one",
            "\tmust be present, although they may be invalid. Usual height: 55-100",
            "\tpixels. }"
        ],
        "snippets": [
            "\\DialogLibrary.PTypeToggle(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) in the caller to alter. }",
            "\tTagType, { Required. Any text expression for the type of tag used to",
            "\t\tcreate the droplist portion of the graphic. All existing tags of this",
            "\t\ttype will be listed. }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a title for the tool. May be left as Invalid for no title. }",
            "\tFocusID { Boolean. If this value is FALSE (0), the field will display",
            "\t\tits current setting, but cannot be opened (i.e. its value cannot be",
            "\t\tchanged), and will appear disabled (grayed-out). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "PWidgetSelect": {
        "comments": [
            "{ Description: Called graphic module that displays a tag selector to",
            "\tallow the selection of a tag widget. }",
            "{ The \"P\" tools (PWidgetSelect, PCheck box, PContributor,",
            "\tPColorSelect, PDroplist, and PEditField) were intended only for use in",
            "\tconfiguration folders and drawing panel modules, and therefore are",
            "\tsubject to the system security restraints. This parameter tool expects",
            "\tthe first parameter of its calling module to contain an array of tag",
            "\tparameters. It will then set the element indicated by ParmNum to the",
            "\tlogical value set by the check box. The PWidgetSelect will open the",
            "\tWidget Panel where the widgets available will be filtered to the tag",
            "\ttype using this pTool. }"
        ],
        "snippets": [
            "\\DialogLibrary.PWidgetSelect(",
            "\tParmNum, { Required. Any numeric expression giving the parameter",
            "\t\tnumber (from 0) to alter in the caller. }",
            "\tTitle, { Any text expression to be used as a the title to put on the",
            "\t\tbevel. }",
            "\tFocus ID, { Boolean. If this value is FALSE (0), the field will",
            "\t\tdisplay its current setting, but cannot be opened (i.e. its value",
            "\t\tcannot be changed), and will appear disabled (grayed-out). }",
            "\tTrigger, { Set when the variable is changed. }",
            "\tDrawBevel, { Any Boolean expression that when set to TRUE causes a",
            "\t\tbevel to be drawn around the control. Defaults to TRUE }",
            "\tVertAlign, { An optional parameter that is any numeric expression that",
            "\t\tsets the vertical alignment of the button and display area according",
            "\t\tto one of the following options: VertAlign Vertical Alignment 0 Top 1",
            "\t\tCenter 2 Bottom The default value is 0, top alignment. }",
            "\tAlignTitle, { If true (non-0) the title is included in the calculation",
            "\t\tfor vertical alignment, if false(0) it is added to the droplist after",
            "\t\tit and its bevel has been vertically aligned. The default is true. }",
            "\tUnspecifiedLabel { Optional. Caption to appear inside the selector",
            "\t\tfield when a selection has not been specified. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "QuietLogon": {
        "comments": [
            "{ Description: Authenticates the AuthToken and if successful logs the",
            "\tcalling user session on as the user specified in the AuthToken }",
            "{ If the authentication fails, a failure event is recorded in the",
            "\tsecurity event log. Returns TRUE if the user was signed in",
            "\tsuccessfully, otherwise FALSE. }"
        ],
        "snippets": [
            "\\SecurityManager\\QuietLogon(",
            "\tAuthToken, { The concatenation of the user name, a colon (:) and the",
            "\t\tpassword. }",
            "\tDevice, { Optional. Name of the device that is making the request.",
            "\t\tDefaults to none. }",
            "\tNamespace { Optional. The namespace of the user. Defaults to none. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RadialIndicator": {
        "comments": [
            "{ Description: Will draw a radial type indicator that sweeps from a",
            "\tminimum angle to a maximum angle in the same fashion that a real",
            "\tradial meter would. Call from within a GUITransform. }",
            "{ This function must be called within a GUITransform statement in",
            "\torder for it to work correctly. The size of the indicator is scaled",
            "\twith respect to the original size of the image and the size of the",
            "\ttransform. If you want a smaller indicator you can simply make a",
            "\tsmaller transform. Using the offset from center in conjunction with",
            "\tthe size of the transform allows for extensive customization of the",
            "\tsize and position of the needle. }"
        ],
        "snippets": [
            "\\MeterParts\\RadialIndicator(",
            "\tDataSource, { Required. A Tag name, constant or expression that",
            "\t\trepresents the value to show. }",
            "\tIndicatorImage, { Required. The full path to the name of an image file",
            "\t\tto use as the indicator. Typically, this is an image of a needle. }",
            "\tOffsetFromCenter, { The offset from the center to translate the image.",
            "\t\tThis allows the user to change the rotation center point of the",
            "\t\tindicator image. The default is 0 which sets the bottom of the",
            "\t\tindicator image as the rotation center point. }",
            "\tDirection, { A flag indicating the direction from the minimum to the",
            "\t\tmaximum value representation. 0 means increase in a clockwise manner",
            "\t\twhile 1 indicates a counter-clockwise manner. The default is 0",
            "\t\t(clockwise). }",
            "\tMinimumAngle, { The start angle of the sweep. 0 is defined as up or",
            "\t\tthe 12 oâclock position. The default is 225. }",
            "\tMaximumAngle, { The end angle of the sweep. 0 is defined as up or the",
            "\t\t12 oâclock position. The default is 135. }",
            "\tHue, { The Hue translation to perform on the Indicator image. This",
            "\t\tenables you to change the color of the indicator image. The image must",
            "\t\thave color in it already to perform a hue translation. If there is no",
            "\t\tcolor to start with, then changing this value does nothing. You can",
            "\t\tadd color by setting a value for the ColorizeHue parameter, described",
            "\t\tlater. The default is 0, indicating that no hue translation is done",
            "\t\tand the indicator is in its native color. }",
            "\tSaturation, { The amount of saturation of the colors in the indicator",
            "\t\timage. A value of 0 will make the image black and white (no color",
            "\t\tsaturation). A value of 2 produces a brightly colored (saturated)",
            "\t\tindicator. The default is 1 which corresponds to the native saturation",
            "\t\tof the indicator image. }",
            "\tBrightness, { An adjustment of the brightness of the indicator image.",
            "\t\tHigher numbers produce a brighter indicator image. A 0 produces a",
            "\t\tblack image. The default is 1 which corresponds to the native",
            "\t\tbrightness of the indicator image. }",
            "\tTransparency, { An adjustment of the opacity of the indicator where 1",
            "\t\tmeans 100% opacity and 0 means %100 transparent. The default is 1. }",
            "\tContrast, { An adjustment of the contrast of the colors in the",
            "\t\tindicator image. A value of 0 produces a flat looking image and a",
            "\t\tvalue of 2 gives a high contrast image. The default is 1 which",
            "\t\tcorresponds to the native contrast of the indicator image. }",
            "\tColorizeHue, { A value that works in conjunction with",
            "\t\tColorizeIntensity. This is the hue of the color that is introduced by",
            "\t\tcolorizing an image. Colorizing an image will introduce color into an",
            "\t\timage that previously was black and white or grayscale. The default",
            "\t\tvalue is 0. }",
            "\tColorizeIntensity, { A value to define how much color to introduce",
            "\t\tinto the image. The default is 0, meaning not to introduce any color",
            "\t\tat all into the image. }",
            "\tUseTagScaling, { A flag that indicates whether to use the supplied",
            "\t\tTagâs scaling values. The default is FALSE. }",
            "\tMinScaleValue, { The minimum scale value to use if the UseTagScaling",
            "\t\tflag is not true. The default is 0. }",
            "\tMaxScaleValue, { The maximum scale value to use if the UseTagScaling",
            "\t\tflag is not true. The default is 100. }",
            "\tDampenIndicator { A flag to indicate whether to dampen the indicator",
            "\t\tmovement. Dampened movement creates the effect of animating the",
            "\t\tindicator. The default is false. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "RadialLegend": {
        "comments": [
            "{ Description: Draws a legend (i.e. the text labels) for a radial type",
            "\tmeter. They are drawn at a constant radius from the center point of",
            "\tthe drawing coordinates, beginning at a defined minimum angle and",
            "\tending at a defined maximum angle. To be called from within a",
            "\tGUITransform. }",
            "{ This function must be called within a GUITransform statement in",
            "\torder for it to work correctly. The text should scale with the size of",
            "\tthe transform, if it does not, then you might have picked a font that",
            "\tdoesnât scale. Some non true-type fonts wonât scale. }"
        ],
        "snippets": [
            "\\MeterParts\\RadialLegend(",
            "\tTagName, { Required. The name of the Tag to use for scaling. If no tag",
            "\t\tis specified, then tag scaling cannot be used to automatically obtain",
            "\t\tthe minimum and maximum scale values. }",
            "\tMinimumAngle, { The start angle of the sweep. 0 is defined as up or",
            "\t\tthe 12 oâclock position. The default is 225. }",
            "\tMaximumAngle, { The end angle of the sweep. 0 is defined as up or the",
            "\t\t12 oâclock position. The default is 135. }",
            "\tNumLabels, { The number of Labels to show. The default is 5. }",
            "\tFont, { The name of a font tag to use for the legend text. }",
            "\tColor, { A color index for the color of the legend text. The default",
            "\t\tis 0 (black). }",
            "\tDirection, { A flag indicating the direction from the minimum to the",
            "\t\tmaximum value representation. 0 means increase in a clockwise manner",
            "\t\twhile 1 indicates a counter-clockwise manner. The default is 0",
            "\t\t(clockwise). }",
            "\tOrientation, { A reserved parameter and should be set to 0. }",
            "\tUseTagScaling, { A flag that indicates whether to use the supplied",
            "\t\tTagâs scaling values. The default is false. }",
            "\tMinScaleValue, { The minimum scale value to use if the UseTagScaling",
            "\t\tflag is not true. The default is 0. }",
            "\tMaxScaleValue { The maximum scale value to use if the UseTagScaling",
            "\t\tflag is not true. The default is 100. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "RadioButtons": {
        "comments": [
            "{ Description: Draws a set of labeled radio buttons with (optional)",
            "\ttitle and border. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ The parameters X1, Y1, X2 and Y2 define the outline",
            "\tof the buttons including their border, if there is one. If the area is",
            "\ttoo small to fully display the buttons they will extend beyond their",
            "\tright and bottom boundaries. Buttons and their border will not overlap",
            "\teach other and will always be shown in their entirety, although the",
            "\tlabels may be clipped or entirely deleted. For any optional parameter",
            "\tthat is to be set, all optional parameters preceding the desired one",
            "\tmust be present, although they may be invalid. This does not return",
            "\tTRUE on change and should not be used as the trigger for an action",
            "\tstatement. Instead, use a Watch on the variable being modified by the",
            "\tradio button selection. }"
        ],
        "snippets": [
            "System.RadioButtons(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the radio buttons. }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the radio buttons. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the radio buttons opposite to X1. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of the top or bottom of the radio buttons, whichever is the",
            "\t\topposite to Y1. }",
            "\tLabels, { Required. An array of text expressions used to label the",
            "\t\tbuttons. The number of labels determines the number of buttons. }",
            "\tSelect, { Required. A variable whose value will be set to the index",
            "\t\tfrom 0 of the selected button. If the value of this variable is",
            "\t\tinitially invalid, it will default to 0. }",
            "\tFocusID, { An optional parameter that is any numeric expression from 0",
            "\t\tto 32767 for the focus number of the first radio button. Each radio",
            "\t\tbutton following will have a focus ID number equal to the next number",
            "\t\tin sequence. If this value is 0, the radio buttons will display the",
            "\t\tcurrent setting of Select, but its value will not be able to be",
            "\t\tchanged and the buttons will appear grayed out. The default value is",
            "\t\t1. }",
            "\tBorder, { Optional numeric that may have the following values: 0 = No",
            "\t\toutline 1 = Raised box outline (default) 2 = Bevel outline }",
            "\tTitle, { An optional parameter that is any text expression to be used",
            "\t\tas a title with the radio buttons. The default value is to have no",
            "\t\ttitle. }",
            "\tBtnsOnLeft, { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0) the radio buttons will appear to the left of their",
            "\t\tlabels, if false (0) they will be to the right. The default value is",
            "\t\ttrue. }",
            "\tAlignTitle, { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0) the title is drawn within the radio buttons' boundaries,",
            "\t\tif false(0) the buttons fill their bounding area and the title is",
            "\t\tadded at the top (i.e. it extends past the top boundary). The default",
            "\t\tis true. }",
            "\tAllowTextResizing, { An optional flag. If true, then text will resize",
            "\t\twith the control. }",
            "\tLeftToRight, { An optional flag. If true, the buttons will be drawn",
            "\t\tfrom left to right. }",
            "\tBGColor, { Optional. Any numeric expression for the background color",
            "\t\tof the control. No default value. }",
            "\tFGColor, { Optional. Any numeric expression for the foreground color",
            "\t\tof the control (text color). No default value. }",
            "\tSpacing, { Optional. Any of: FALSE/Invalid = Full spacing TRUE =",
            "\t\tStandard spacing Array = An array of numeric values, providing the",
            "\t\tspacing in pixels to be used between one button and the next. }",
            "\tEnableFlags, { Optional. An array of flags to enable or disable single",
            "\t\tbuttons. }",
            "\tHeight, { Optional return value. If a variable is provided for this",
            "\t\tparameter the function will be set to the control's height, measured",
            "\t\tin pixels. Standard spacing will be used unless a spacing array has",
            "\t\tbeen provided. }",
            "\tDotColorParm, { Optional color value, to be used for the radio dot. }",
            "\tTitleBGColor, { Optional background color value to be used for the",
            "\t\ttitle bar. }",
            "\tTitleFGColor, { Optional foreground color value to be used for the",
            "\t\ttitle text. }",
            "\tBevelColor { Optional color value to be used for the bevel line. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Rand": {
        "comments": [
            "{ Description: Returns a random number between 0 and 1. }"
        ],
        "snippets": [
            "Rand();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Read": {
        "comments": [
            "{ Description: Used to create a request for a single read of a given",
            "\tdriver address. (This is in contrast to the polled read request of the",
            "\tAddRead function). }",
            "{ Allows the reading of a specific address on demand. The resulting",
            "\tdata will be sent only to the requesting machine. This will also be",
            "\tthe case when the function is run in a client-of-a-client",
            "\tconfiguration. The object value of the underlying read module is",
            "\treturned from the function. When the read finishes, the returned",
            "\tobjectâs value will go to Invalid, signaling the end of read. This",
            "\tfunction does not support bit extraction or type conversions. Use",
            "\tBuffRead on the result, followed by BuffWrite to do a type conversion.",
            "\tDepending on how the float was formed by the PLC a call to BuffOrder",
            "\tmight be needed to arrange the bytes correctly. To perform bit",
            "\textraction, use the Bit function on the result of the Read. }"
        ],
        "snippets": [
            "â¦\\Driver\\Read(",
            "\tAddress, { Required. The address of the data to read. Depending on the",
            "\t\tdriver protocol being used, this can be the starting register of the",
            "\t\tdata to be read, a single address string, or an array of address",
            "\t\tstrings. }",
            "\tN, { Required. If the PLC supports reading a range of registers, this",
            "\t\tmust be the number of elements to read. If Address is an array, this",
            "\t\tmust be the size of the array. Otherwise this should be set to 1. This",
            "\t\tmust not exceed the driver's VTSMaxBlock value. }",
            "\tPtrDataDest { Required. A pointer to destination for the data. May be",
            "\t\ta pointer to a variable or the object value of a module that contains",
            "\t\ta NewData module. If a pointer and N is 1, this will be set to the",
            "\t\tvalue that was read. If N > 1, this will be set to an array of values",
            "\t\tthat were read. If an object value, the object's NewData will be",
            "\t\tcalled with the value that was read. Will be set to Invalid if the",
            "\t\tread fails. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ReadBlock": {
        "comments": [
            "{ Description: Is launched to read a block of data from the PLC. It",
            "\tmaintains a linked list of pointers to tag values with their absolute",
            "\toffset into the PLC file being read by this instance. }",
            "{ Launched from a script, runs in steady state. This module itself is",
            "\tin a global linked list of instances maintained by the VTSDriver",
            "\tmodule. This block represents all of the data to be read from a",
            "\tspecific file in a specified PLC. All scan rates are handled by this",
            "\tone instance. This module keeps a list of nodes sorted by scan rates.",
            "\tThese nodes point to another list of all the memory requests within",
            "\tthat scan rate. This module will determine the best organization of",
            "\tblocks and launch a separate read module for each actual block of data",
            "\tread. }"
        ],
        "snippets": [
            "â¦\\Driver\\ReadBlock(",
            "\tInfo1, { Driver dependent. The first grouping parameter. }",
            "\tInfo2, { The second grouping parameter. }",
            "\tInfo3, { The third grouping parameter. }",
            "\tDType { The data type to read from the I/O device. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ReadConfiguration": {
        "comments": [
            "{ Description: This function provides a safe way to read configuration",
            "\tfiles. }",
            "{ The callback object is allowed to read configuration files and is",
            "\tguaranteed that, for the life of the module, no other configuration",
            "\tcode can modify the file. The callback module need not have parameters",
            "\tof its own. ReadConfiguration will not put values in them if they",
            "\texist. }"
        ],
        "snippets": [
            "\\ReadConfiguration(",
            "\tCallBackModuleName { Required text value, which is the name of the",
            "\t\tmodule (either launched or a subroutine that returns Invalid) . The",
            "\t\tnamed module is launched in the caller. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ReadINI": {
        "comments": [
            "{ Description: This subroutine read a variable entry from an INI file",
            "\tor a buffer containing one and returns its value. Will not access",
            "\t.Startup or .Dynamic files. }",
            "{ For developers the lock means that access to VTScada working copy",
            "\tfiles, both reading and writing, should not be done without having the",
            "\tlock. The lock is across all applications and system layer VTScada",
            "\tcode. The lock prevents two different piece of code from changing the",
            "\tsame code such that one piece of code sees inconsistent data while the",
            "\tother code is in the middle of changing it This module is a member of",
            "\tthe System Library, and must therefore be prefaced by \\System. as",
            "\tshown in the \"Format\" section. If your application predates version",
            "\t11.2, use the backslash notation rather than dot: \\System\\ The return",
            "\tvalue will be invalid if the configuration file, section or variable",
            "\twas not found. Searches performed by this function are case",
            "\tinsensitive. }"
        ],
        "snippets": [
            "System.ReadINI(",
            "\tFile, { Required. Any text expression giving the absolute path and",
            "\t\tfile name of the configuration file or the actual buffer containing",
            "\t\tits contents, depending on the UseBuff parameter. }",
            "\tSection, { Required. Any text expression giving the name of the",
            "\t\tsection in the file. This should not include the square brackets",
            "\t\tdelimiting the section. }",
            "\tVarName, { Required. Any text expression giving the name of the",
            "\t\tvariable for which the value is required. }",
            "\tUseBuff { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0) the value of File must be a buffer, if false (0) it is a",
            "\t\tfile that is to be used. The default used if this parameter is omitted",
            "\t\tis false. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ReadINIProperties": {
        "comments": [
            "{ Description: Gathers the sum of all of the properties files in this",
            "\tlayer and all of its parents including the local workstation files. }",
            "{ INIProperty Struct [ Name { Variable name in the settings file };",
            "\tValue { Simple Value or an ordered array of Values if the variable",
            "\toccurs more than once in the section of the file }; Comment { Text",
            "\tcomment if present in the file }; ] A simpler function,",
            "\tReadPropertiesFile, is much more direct if the location of the setting",
            "\tto be read is known. }"
        ],
        "snippets": [
            "Layer\\ReadINIProperties(",
            "\tResult, { Required. A pointer to a value that, when all files have",
            "\t\tbeen read, is set to the dictionary of structures described in the",
            "\t\tcomments section. If this is already a valid dictionary and the",
            "\t\tFileName parameter is valid, the data for the single file will be",
            "\t\tupdated in the dictionary. This feature allow the publisher calls to",
            "\t\tNotifiy to update the structures. }",
            "\tExternalLock, { Optional Boolean. Set to TRUE if you do not want to",
            "\t\tacquire and release the lock. Defaults to FALSE. }",
            "\tSuppressOrphanedComments, { Optional Boolean. Set to TRUE to ignore",
            "\t\t\"+PseudoProperty\" - comments that are not associated with a property.",
            "\t\tDefaults to FALSE. }",
            "\t{ Optional. Any }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ReadLock": {
        "comments": [
            "{ Description: Attempts to acquire a Read lock for the specified",
            "\tservice. Subroutine call only. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. This module maintains a Read lock on a per service basis.",
            "\tThis module is intended to be launched. It will set the value pointed",
            "\tto by ActivePtr to 1 when the lock is obtained. To release the lock,",
            "\tor stop waiting for it, simply stop this module by stopping the caller",
            "\tor explicitly slaying it. }"
        ],
        "snippets": [
            "\\RPCManager\\ReadLock(",
            "\tActivePtr, { Required. A pointer to a variable that will be set to \"1\"",
            "\t\twhen the Read lock is obtained. }",
            "\tService, { Required. The name by which the service is known. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ReadPropertiesFile": {
        "comments": [
            "{ Description: Reads a single Settings file and returns an INIFile",
            "\tStructure. Replaces ReadINI and ReadSectINI }",
            "{ Returns arrays that are ordered by how they appear in the Settings",
            "\tfile. The INIFile structure returned is as follows: INIFiles Struct [",
            "\tFileName { full path and file name to the settings file }; OEM { TRUE",
            "\tif an OEM layer file }; Workstation { Name of the workstation or",
            "\tinvalid if global }; Layer { Instance of application layer owning the",
            "\tfile }; Dynamic { TRUE if a dynamic property }; Sections { Dictionary",
            "\tof sections each element of which is an array of Property structures",
            "\t}; Changed { User sets to true if the file has been changed,",
            "\tinitialized to false }; ] The INIProperty structure isâ¦ INIProperty",
            "\tStruct [ Name { Variable name in the .startup/.dynamic file }; Value {",
            "\tSimple value }; Comment { Text comment if present in the file };",
            "\tHidden { TRUE if not visible in Edit Properties GUI }; ]; The INIFiles",
            "\tstructure can be modified using SetINIProperty. Note that if your",
            "\tintention is to read a configuration file, this function should be",
            "\tcalled from within a ReadConfiguration callback or a",
            "\tModifyConfiguration callback. }"
        ],
        "snippets": [
            "System.ReadPropertiesFile(",
            "\tFile, { Required. Any text expression giving the full path and file",
            "\t\tname of the Settings file or the buffer containing its contents,",
            "\t\tdepending on the IsBuffer parameter. }",
            "\tIsBuffer, { An optional logical expression. Set TRUE if the File",
            "\t\tparameter is a buffer. Defaults to FALSE (0). }",
            "\tSuppressOrphanedComments { An optional logical expression. If TRUE",
            "\t\tthen \"+PseudoProperty\"s - comments that aren't associated with a",
            "\t\tproperty will be left out. Defaults FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ReadSectINI": {
        "comments": [
            "{ Description: This subroutine read an entire section entry from a",
            "\tconfiguration file or a buffer containing one and returns a",
            "\t2-dimensional array containing variable names and their values. Will",
            "\tnot access .Startup or .Dynamic files. Note: Access to configuration",
            "\tfiles is not reliable unless the caller holds the working copy lock.",
            "\tAcquiring the lock is a steady-state only operation, and therefore",
            "\tlegacy operations that used script-mode access to these files are",
            "\tdeprecated or no longer supported (see comments) }",
            "{ For developers the lock means that access to VTScada working copy",
            "\tfiles, both reading and writing, should not be done without having the",
            "\tlock. The lock is across all applications and system layer VTScada",
            "\tcode. The lock prevents two different piece of code from changing the",
            "\tsame code such that one piece of code sees inconsistent data while the",
            "\tother code is in the middle of changing it. This module is a member of",
            "\tthe System Library, and must therefore be prefaced by \\System. as",
            "\tshown in the \"Format\" section. If your application predates version",
            "\t11.2, use the backslash notation rather than dot: \\System\\ The array",
            "\tthat is returned gives the variable names in its first row",
            "\t(Array[0][N]) and the variables' values in its second row",
            "\t(Array[1][N]). The return value will be invalid if the Settings file",
            "\tor section was not found, or if the section did not contain any",
            "\tvariables. Searches performed by this function are case insensitive. }"
        ],
        "snippets": [
            "System.ReadSectINI(",
            "\tFile, { Required. Any text expression giving the absolute path and",
            "\t\tfile name of the Settings file or the name of the buffer containing",
            "\t\tits contents. }",
            "\tSection, { Required. Any text expression giving the name of the",
            "\t\tsection in the file. This should not include the square brackets",
            "\t\tdelimiting the section. }",
            "\tUseBuff, { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0) the value of File must be a pointer to a buffer, if false",
            "\t\t(0) it is a file that is to be used. The default used if this",
            "\t\tparameter is omitted is false. }",
            "\tPtrSectionStatus { A flag used to inform the caller of what was found,",
            "\t\taccording to the following table: Value Meaning Invalid when either of",
            "\t\tthe first 2 parameters are invalid 0 when both section and settings",
            "\t\texist 1 when no section is found 2 when section is found, but not",
            "\t\tsettings }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ReadX": {
        "comments": [
            "{ Description: Reads numeric data from a text file into the elements",
            "\tof an array. }",
            "{ The data should be stored in the file with one numeric value per",
            "\tline. The EOF marker for the file must not be on the same line as the",
            "\tlast numeric value, as per the following rule If more than one value",
            "\texists on a line, if the line is left blank, or if it contains a",
            "\tnon-numeric character, the corresponding element in the array will be",
            "\tset to invalid. If the file contains fewer than N values, the",
            "\tremaining values will also be invalid. This statement is useful for",
            "\timporting data from other databases into VTScada. }"
        ],
        "snippets": [
            "ReadX(",
            "\tArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array in which to store the data. The subscript for the array may",
            "\t\tbe any numeric expression. If processing a multidimensional array, the",
            "\t\tusual rules apply to decide which dimension should be used. The array",
            "\t\tmay be either statically declared or dynamically allocated. }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to read starting at the element given by the first parameter.",
            "\t\tIf N extends past the upper bound of the lowest array dimension, this",
            "\t\tcomputation will \"wrap-around\" and resume at element 0, until N",
            "\t\telements have been processed. }",
            "\tFile { Required. A text expression giving the file name of the data",
            "\t\tfile. It should be enclosed in double quotes if it is a constant. A",
            "\t\tknown path Known Path Aliases for File-Related Functions for",
            "\t\tFile-Related Functions may be provided in the form, :{KnownPathAlias}.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ReadXY": {
        "comments": [
            "{ Description: Reads data points from a file into the elements of two",
            "\tarrays. }",
            "{ The data should be stored in the file with one numeric value per",
            "\tline. The data are then alternately placed into each of the two",
            "\tarrays. If more than one value exists on a line, if the line is left",
            "\tblank, or if it contains a non-numeric character, the corresponding",
            "\telement in that array will be set to invalid. If the file contains",
            "\tfewer than N values, the remaining values will also be invalid. The",
            "\tarrays need not start at the same index number. This statement is",
            "\tuseful for importing (X, Y) data from other databases or spreadsheets",
            "\tinto VTScada. }"
        ],
        "snippets": [
            "ReadXY(",
            "\tXArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array in which to store the X coordinates. The subscript for the",
            "\t\tarray may be any numeric expression. If processing a multidimensional",
            "\t\tarray, the usual rules apply to decide which dimension should be used.",
            "\t\tThe array may be either statically declared or dynamically allocated.",
            "\t\t}",
            "\tYArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array in which to store the Y coordinates. The subscript for the",
            "\t\tarray may be any numeric expression. If processing a multidimensional",
            "\t\tarray, the usual rules apply to decide which dimension should be used.",
            "\t\tThe array may be either statically declared or dynamically allocated.",
            "\t\t}",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to read starting at the elements given by the first two",
            "\t\tparameters. If N extends past the upper bound of the lowest array",
            "\t\tdimension, this computation will \"wrap-around\" and resume at element",
            "\t\t0, until N elements have been processed. }",
            "\tFile { Required. A text expression giving the file name of the data",
            "\t\tfile. It should be enclosed in double quotes if it is a constant. A",
            "\t\tknown path Known Path Aliases for File-Related Functions for",
            "\t\tFile-Related Functions may be provided in the form, :{KnownPathAlias}.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RecommendAlternate": {
        "comments": [
            "{ Description: Instructs RPC Manager that the local service instance",
            "\tdoes not consider itself a good server candidate. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\ as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. }"
        ],
        "snippets": [
            "\\RPCManager\\RecommendAlternate(",
            "\tService, { The name by which the service is known. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RecommendPrimary": {
        "comments": [
            "{ Description: Instructs RPC Manager that the local service instance",
            "\tconsiders itself a good server candidate. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. }"
        ],
        "snippets": [
            "\\RPCManager\\RecommendPrimary(",
            "\tService, { The name by which the service is known. }",
            "\tOptGUID { An optional parameter that is any expression giving the",
            "\t\t16-byte binary form of the globally unique identifier (GUID) for the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RecordProperty": {
        "comments": [
            "{ Description: Modifies one or more properties within a single",
            "\tproperties file and commits the result. }",
            "{ This function returns an object reference to itself, which becomes",
            "\tinvalid when the operation (handled asynchronously) is complete. }"
        ],
        "snippets": [
            "\\RecordProperty(",
            "\tSettingsFile, { Required. Text or Integer. The name of the settings",
            "\t\tfile to be altered. As a convenience this parameter can also be an",
            "\t\tinteger representing any of the four standard settings file types as",
            "\t\tfollows: 0 => workstation.Dynamic 1 => Settings.Dynamic 2 =>",
            "\t\tworkstation.Startup 3 => Settings.Startup }",
            "\tSection, { Required. May be the name of the section that the property",
            "\t\tbelongs to, or an array of section names. The section will be <hidden>",
            "\t\tor [visible] according to the optional Hide parameter. }",
            "\tName, { Required. May be the name of the property to modify, or an",
            "\t\tarray of property names. }",
            "\tValue, { Required. May be the value to be set for the property, or an",
            "\t\tarray of values matching the array of property names. }",
            "\tComment, { Optional. May be the comment to add to the property or an",
            "\t\tarray of comments matching the array of property names. If invalid,",
            "\t\tthe existing comment will be used. }",
            "\tCommitComment, { Optional. The comment to be added when the change is",
            "\t\tcommitted to the repository. }",
            "\tDeploy, { Optional Boolean. Set TRUE to deploy the change immediately.",
            "\t\t}",
            "\tCallerHasLock, { Optional Boolean. Set TRUE if the caller holds the",
            "\t\tlayer lock in write mode. }",
            "\tClearSection, { Optional Boolean. Set TRUE to empty the section (or",
            "\t\tsections if an array was provided), before writing the new value(s). }",
            "\tWorkstation, { Optional text. If an integer 0 or 2 was used for the",
            "\t\tSettingsFile parameter, then the name of the workstation should be",
            "\t\tprovided. Defaults to the current workstation (WkStaInfo(0)) if",
            "\t\tmissing or invalid. }",
            "\tHide, { Optional Boolean. Set TRUEto hide the section or FALSE to",
            "\t\treveal it. Invalid will leave the section as it is. }",
            "\tUserID { Optional text. The user account to be associated with the",
            "\t\trevision. Defaults to the currently signed-in user. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Redirect": {
        "comments": [
            "{ Description: Redirects a local device to network resource. }",
            "{ Caution should be exercised when using this statement, since the",
            "\tredirection of the device is permanent - execution of the statement",
            "\tcauses the change to be written to the Windowsâ¢ registry. For this",
            "\treason, when using \"DEF:\" (the Windowsâ¢ default printer), it is",
            "\talways a good idea to use the DefaultPrinter function prior to doing",
            "\tthe Redirect, so that the original default printer may be restored at",
            "\ta later date. }"
        ],
        "snippets": [
            "Redirect(",
            "\tLocal, { Required. Any text expression giving the local device to",
            "\t\tredirect, for example \"G:\", \"LPT1:\", \"DEF:\" (default printer), etc. }",
            "\tRemote { Required. Any text expression giving the network resource to",
            "\t\tmap the local device to. If this parameter is an empty string or",
            "\t\tinvalid, the current connection for the device Local is disconnected.",
            "\t\tIf Local has any value other than \"DEF:\", this parameter must be the",
            "\t\tsame form used by the Windowsâ¢ command prompt, \"net use\" function:",
            "\t\t\"\\\\MyServer\\MyPrinter\" If Local has a value of \"DEF:\", the value of",
            "\t\tthis parameter has three elements separated by commas, as follows:",
            "\t\t<printer name>, <driver name>, <port> Each of these elements must be",
            "\t\tvalid to have a valid Remote parameter. If any are invalid, programs",
            "\t\tsuch as Print Manager may revert back to the previous valid printer,",
            "\t\twhile other programs may have unpredictable behavior. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Register Alarm Manager": {
        "comments": [
            "{ Description: Inform the Alarm Manager that a module instance may",
            "\twish to generate alarms in the future. }",
            "{ The Register subroutine always returns \"0\". Registering an alarm",
            "\tdoes not trigger an alarm. It informs the Alarm Manager that the",
            "\tAlarmObject module instance may wish to generate alarms in the future.",
            "\t}"
        ],
        "snippets": [
            "\\AlarmManager\\Register(",
            "\tAlarmObject, { Required. The object value of the new alarm to add to",
            "\t\tthe configured alarm list. A variable called \"Name\" must exist within",
            "\t\tthe scope of AlarmObject. This variable uniquely defines the text name",
            "\t\tof the alarm. }",
            "\tEnable { Required Logical Expression. Set to true if the alarm should",
            "\t\tstart enabled. Defaults to \"Enabled\" if invalid or not defined. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Register (Modem Manager)": {
        "comments": [
            "{ Description: This module registers a discriminator that accepts",
            "\tincoming calls. }",
            "{ In order to receive incoming calls, you must first call the Modem",
            "\tManager's Register method, passing the driver's object value, its",
            "\tstation number, and a priority (relative to other drivers).",
            "\t\\ModemManager\\Register(Root, Station, 10 { Priority ]); You must also",
            "\tprovide a discriminator subroutine. This subroutine will be called by",
            "\tthe Modem Manager when it offers you an incoming call. The Modem",
            "\tManager passes as a parameter a BUFFER which contains the initial data",
            "\treceived from the line (see HelloPacketLength). You should parse this",
            "\tdata and decide whether it is supported by your driver, and for which",
            "\tstation it is intended. Return Invalid to reject this call. Return the",
            "\t(valid) station identifier to accept the call. If you accept the call,",
            "\tthen the Port\\IsConnected() module will go true, and you may acquire",
            "\tthe serial port semaphore \\PortManager.PortConnectSem and read and",
            "\twrite data via the serial port. If Port\\IsConnected() goes false, the",
            "\tcall has been disconnected. If you wish to hang up the call, call the",
            "\tsubroutine Port\\CallComplete(). }"
        ],
        "snippets": [
            "\\ModemManager\\Register(",
            "\tContext, { An object value of the context in which the discriminator",
            "\t\tmodule is to be called. }",
            "\tStation, { A unique identifier for this discriminator instance. }",
            "\tPriority, { The relative priority of this discriminator to others.",
            "\t\tPriorities are in the range of 0..99 with numerically higher",
            "\t\tpriorities being called first. }",
            "\tMediaMode, { specifies the media mode that this discriminator wishes",
            "\t\tto handle. Typically, this would specify AUDIO to handle incoming",
            "\t\taudio calls. The default is DATAMODEM which handles normal data calls.",
            "\t\tPlease refer to the Comments section. }",
            "\tVoice, { If this discriminator is to handle AUDIO calls, then this",
            "\t\tparameter specifies the text GUID of the voice to be used by the",
            "\t\tText-to-Speech engine. }",
            "\tTimeOutVal, { An AUDIO discriminator generally relies on some",
            "\t\thuman-generated response. This parameter sets the number of seconds",
            "\t\tthat the discriminator runs from before giving up. The default value",
            "\t\tis 20 seconds. Please refer to the Comments section for further",
            "\t\tinformation. }",
            "\tName, { Usually Context will, when cast to a text value, identify the",
            "\t\tname of a variable in Code whose value is the object context for the",
            "\t\tdiscriminator. If this is not the case, then the name should be given",
            "\t\there. }",
            "\tChallenge { A string to send in response to incoming calls that don't",
            "\t\tinitially transmit any data. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Register": {
        "comments": [
            "{ Description: This subroutine registers a service for RPC and returns",
            "\ta pointer to the variable containing the current RPC status of the",
            "\tservice. }",
            "{ Subroutine call only. This subroutine is a member of the RPC",
            "\tManager's Library, and must therefore be prefaced by \\RPCManager\\, as",
            "\tshown in the \"Format\" section. If the application you are developing",
            "\tis a script application, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. The return value from this call is a pointer to a",
            "\tvariable that contains the current RPC status of this service",
            "\tinstance. Dereferencing this pointer will yield one of the following",
            "\tvalues 0 - the status of the service instance is unknown at this time.",
            "\t1 - this service instance is a client to another service instance. 2 -",
            "\tthis service instance is the server instance. Invalid - the caller of",
            "\tRegister() has been slain. This value will almost certainly be",
            "\trequired by the service instance's code to allow it to operate",
            "\tcorrectly. The ServiceLayer parameter is almost always used for",
            "\tsystem-level services (services that don't run within running",
            "\tapplications). Unless writing a system-level service, leave this",
            "\tparameter as invalid and set the server list via the Edit Server Lists",
            "\tpanel of the application properties GUI. }"
        ],
        "snippets": [
            "\\RPCManager\\Register(",
            "\tServiceName, { Required. The name of the tag to register. }",
            "\tListSource, { The object that is the source of this service's server",
            "\t\tlist. Should have the following callbacks (like LayerModule):",
            "\t\tServerListSubscribe ServerListUnsubscribe GetServerList",
            "\t\tGetRPCServiceSettings Defaults to Layer object with this service's",
            "\t\tLocalGUID. }",
            "\tListName, { Name of the server list to use for this service. If",
            "\t\tinvalid, the section name will be ServiceName. If ListSource is a",
            "\t\tLayer, then the list used follows the following rules of precedence:",
            "\t\tservice and workstation-specific list, service-specific list,",
            "\t\tworkstation-specific list, then default server list. If no lists can",
            "\t\tbe found at all, this machine is assumed to be the sole server. }",
            "\tSemObj, { An object value for an instance of the system Semaphore",
            "\t\tmodule. If Invalid, the RPC Manager will launch an instance of",
            "\t\tSemaphore for this service. }",
            "\tStartMode, { The mode that the service instance will start up in or",
            "\t\tbecome when it loses its connection to the server instance. The mode",
            "\t\tof a service determines whether the RPC Manager transmits service",
            "\t\tbroadcast messages from the server. You should supply the constant",
            "\t\t\\RPC_ACCEPT_ALL (default) if your service requires no synchronization",
            "\t\twhatsoever. Otherwise, set it to \\RPC_SYNC_MODE. Set TRUE to prevent",
            "\t\tserver from sending Broadcast messages to us. }",
            "\tPrioritySync, { When set to non-zero, the PrioritySync flag prevents",
            "\t\thigher priority servers from syncing with lower priority servers,",
            "\t\tforcing the lower server to synchronize with itself. Most system",
            "\t\tservices do not set this flag. }",
            "\tServerList, { An optional parameter that is an array of server names",
            "\t\tfor this service. If used, it overrides any server list configuration",
            "\t\tthat has been done in the .RPC files. If not used, the usual method of",
            "\t\tdetermining the server list is used. }",
            "\tSticky { An optional flag that causes this service to stick to a",
            "\t\tserver, even if a higher order server comes online (see also sticky",
            "\t\tstatus). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RegisterCustomTable": {
        "comments": [
            "{ Description: A launched module that registers a name for a virtual",
            "\tdatabase table and defines what information will be available from",
            "\tthat table. }",
            "{ Columns Parameter If the Columns parameter is defined as a",
            "\tdictionary, each element must be a VTSSQLColumnInfo structure. This",
            "\tstructure is defined as follows: VTSSQLColumnInfo STRUCT [ SQLType {",
            "\tOne of the SQL type constants }; IsPrimaryKey { 1 for primary key",
            "\tcolumn, 0 if not }; ]; For example, VTScada uses the following code to",
            "\tdefine the columns when registering the table name, AlarmHistory:",
            "\tAlarmHistoryColumns = Dictionary(); { Standard fields that will always",
            "\texist for the alarm history table } AlarmHistoryColumns[\"Timestamp\"] =",
            "\tColumnInfo(\\#SQL_DATETIME, 1, \"Timestamp\" AlarmHistoryColumns[\"Id\"] =",
            "\tColumnInfo(\\#SQL_VARCHAR, 0, \"Name\"); AlarmHistoryColumns[\"Name\"] =",
            "\tColumnInfo(\\#SQL_VARCHAR, 0, \"Name\"); AlarmHistoryColumns[\"SubName\"] =",
            "\tColumnInfo(\\#SQL_VARCHAR, 0, \"Name\"); AlarmHistoryColumns[\"Event\"] =",
            "\tColumnInfo(\\#SQL_VARCHAR, 0); If using a callback object for the",
            "\tColumns parameter, your code must include a module named",
            "\tSQLQueryGetColumnInfo. This subroutine will be called by the SQLQuery",
            "\tmodule, and must return a dictionary of VTSSQLColumnInfo structures,",
            "\tkeyed by column name, for each column that to be queried in the given",
            "\tcustom table. }"
        ],
        "snippets": [
            "\\VTSSQLInterface\\RegisterCustomTable(",
            "\tName, { Required. Any text value for the name of the table. }",
            "\tDescription, { Required. Any text value for the description of the",
            "\t\ttable }",
            "\tColumns, { Required. May be either a dictionary or a callback module.",
            "\t\tIf the first, then Columns will be a dictionary of structures that",
            "\t\tdescribing the column contained in the table. The dictionary keys",
            "\t\tshould be the names of the columns. Use this option when the table",
            "\t\twill refer to a single tag or type of information where the column",
            "\t\tformat is known. If the second, then a callback context may be",
            "\t\tprovided where the module SQLQueryGetColumnInfo is called to retrieve",
            "\t\tthe column info. If the current module contains this submodule (as is",
            "\t\tusually the case) then you will use Self() for this parameter. Use",
            "\t\tthis option if the custom table may refer to multiple tag types, each",
            "\t\thaving its own structure. Further information is provided in the",
            "\t\tcomments section. }",
            "\tIsReadOnly, { Required numeric. Set to 1 for read only. Writes (value",
            "\t\t0) are not currently supported through the SQL interface. }",
            "\tCallbackObj, { Required. The object value of a module which must",
            "\t\tcontain a submodule named SQLQueryRetrieveData. In most cases, this",
            "\t\twill be stored in the current file, in which case self() should be",
            "\t\tused for this parameter. SQLQueryRetrieveData will be called by",
            "\t\tVTSSQLInterface\\SQLQuery when it needs to retrieve data from the",
            "\t\tcustom table. Further information is provided in the comments section.",
            "\t\t}",
            "\tSupportsTPP { Required Boolean. Set TRUE if the table has support for",
            "\t\tadditional TPP tables. In this case SQLQueryRetrieveData will be",
            "\t\tcalled with a TPP value specified at query-time. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ReleaseLock": {
        "comments": [
            "{ Description: Releases a working copy semaphore that was acquired by",
            "\tAcquireLock. }"
        ],
        "snippets": [
            "Layer\\ReleaseLock();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ReleaseToken": {
        "comments": [
            "{ Description: Releases a control token from a tag }",
            "{ Releasing a token initiates an auto-granting mechanism where the",
            "\tControlTokenManager will go through the list of Token Requests and",
            "\tgrant all the Token Requests it can, starting from the oldest. }"
        ],
        "snippets": [
            "ControlTokenManager.ReleaseToken(",
            "\tTagID, { Required string. The UniqueID of the tag from which to",
            "\t\trelease the token. }",
            "\tTokenGUID, { Required string. The GUID of the token to release }",
            "\tCustom, { Optional. A structure of custom fields to log }",
            "\tTimestamp, { Optional The UTC timestamp of this event. Defaults to",
            "\t\tcurrent time }",
            "\tSessionID, { Optional. The ID of session releasing the token. Relevant",
            "\t\tonly if the token ownership is tied to the session. }",
            "\tAccountID, { Optional. The Account ID of user releasing the token.",
            "\t\tDefaults to the currently signed-in user. }",
            "\tMachineID, { Optional. The MachineIDof the workstation where this",
            "\t\trequest originated. Defaults to the current machine. }",
            "\tDevice { Optional. Name of client device }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RemoveCertificate": {
        "comments": [
            "{ Description: Removes a certificate from a certificate store. }",
            "{ A SHA1 thumbprint is used as the certificate identification to",
            "\tensure that the certificate is uniquely identified and the intended",
            "\tone is removed. You can obtain the SHA1 thumbprint of a certificate",
            "\tfrom a number of other certificate statements. For example,",
            "\tAddCertificate returns a SHA1 thumbprint and a thumbprint can be found",
            "\tin the certificate information structure returned from",
            "\tListCertificates , GetCertificateInfo or FindCertificate. Thumbprints",
            "\tare convenient, compact values that can be persisted and used again",
            "\tlater. }"
        ],
        "snippets": [
            "RemoveCertificate(",
            "\tMachineStore, { Required Boolean. If TRUE (non-zero), attempts to",
            "\t\tremove the certificate from a store in the Local Computer certificate",
            "\t\thive. If FALSE (zero) attempts to remove the certificate from a store",
            "\t\tin the Current User certificate hive. }",
            "\tStoreName, { Required text. The name of the store from which to remove",
            "\t\tthe certificate. }",
            "\tThumbprint { Required. A binary buffer holding the SHA1 thumbprint of",
            "\t\tthe certificate to remove. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RemoveLock": {
        "comments": [
            "{ Description: Removes a Control Lock from a tag. }",
            "{ None }"
        ],
        "snippets": [
            "\\ControlLockManager.RemoveLock(",
            "\tTagID, { Required text. The unique ID of tag from which to remove the",
            "\t\tlock. }",
            "\tLockGUID, { Required text. The lock record GUID of the lock. To find",
            "\t\tthe lock record use a statement such as",
            "\t\tAlarmManager.GetAlarmList(...). RemoveLock is not not designed to be",
            "\t\tuser-friendly. Most users should use the 'Remove' button in the Alarm",
            "\t\tList widget. }",
            "\tNote, { Optional text. A note to log following the release operation.",
            "\t\t}",
            "\tCustom, { Optional. A structure of custom fields to log. }",
            "\tTimestamp, { Optional timestamp. UTC timestamp of this event. Defaults",
            "\t\tto current time. }",
            "\tSessionID, { Optional text. The ID of the session where this function",
            "\t\twas called. Defaults to the current security session. }",
            "\tAccountID, { Optional text. The AccountID of the user removing the",
            "\t\tlock. Defaults to the user signed in at the station where this",
            "\t\tfunction is called. }",
            "\tMachineID, { Optional text. The workstation's MachineID. Defaults to",
            "\t\tthe workstation from which this function is called. }",
            "\tDevice, { Optional text. The name of the client device. }",
            "\tAuto { Optional Boolean. Set true for automatic lock removal. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RemoveParameter": {
        "comments": [
            "{ Description: Removes a parameter from a module's parameter list. }",
            "{ The parameter variable removed by this function becomes a normal",
            "\tlocal variable. }"
        ],
        "snippets": [
            "RemoveParameter(",
            "\tModule, { Required. Any expression for the module or object value. }",
            "\tParmNum { Required. Any numeric expression for the parameter to",
            "\t\tremove, beginning at 1. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RemWSDL": {
        "comments": [
            "{ Description: Disconnects a Realm from a WSDL file and the associated",
            "\tset of VTScada modules, cleaning up any resourced used by that web",
            "\tservice. }",
            "{ After RemWSDL is called, the associated web service will immediately",
            "\tstop processing messages, however any operations set in motion by that",
            "\tservice will run to completion. This function is called implicitly if",
            "\tthe connected module is destroyed. }"
        ],
        "snippets": [
            "System.Webservice\\RemWSDL(",
            "\tRealm { Required. The name of the VTScada Realm to have its web",
            "\t\tservice removed. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Rename": {
        "comments": [
            "{ Description: Renames an existing file. }",
            "{ This statement will rename the file regardless of its attributes and",
            "\tthe attributes will not be changed. If the file to be renamed does not",
            "\texist, a file will not be created. }"
        ],
        "snippets": [
            "Rename(",
            "\tOldName, { Required. Any text expression for the current name of the",
            "\t\tfile to be changed. A known path Known Path Aliases for File-Related",
            "\t\tFunctions may be provided in the form, :{KnownPathAlias}. }",
            "\tNewName { Required. Any text expression for the new name that the file",
            "\t\tis to be changed to. A known path alias may be provided in the form,",
            "\t\t:{KnownPathAlias}. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Replace": {
        "comments": [
            "{ Description: Performs a case sensitive search and replace operation",
            "\ton a buffer and returns the resulting buffer. }",
            "{ This function returns a buffer that is the same as Buffer, except",
            "\tthat within the first N bytes following Offset, all occurrences of",
            "\tSearch are replaced with Replace. Because the search and replace",
            "\tstrings are delimited by quotation marks, to include a set of",
            "\tquotation marks as part of either, you must use two sets of quotation",
            "\tmarks inside of the quotation marks that delimit the string (see",
            "\texample). }"
        ],
        "snippets": [
            "Replace(",
            "\tBuffer, { Required. Any text expression giving the buffer to search.",
            "\t\tThere is no limit on the size of the buffer. }",
            "\tOffset, { Required. Any numeric expression giving the buffer offset",
            "\t\tfrom 0 to start the search. Must be non-negative, otherwise Invalid",
            "\t\twill be returned. }",
            "\tN, { Required. Any numeric expression giving the number of buffer",
            "\t\tcharacters (bytes) to search. }",
            "\tSearch, { Required. Any text expression giving the search string. The",
            "\t\tsearch is case sensitive. If an empty string is provided in this",
            "\t\tparameter, Replace will return the original text. }",
            "\tReplace { Required. Any text expression giving the replace string. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ReplaceStatement": {
        "comments": [
            "{ Description: Replaces a statement with another statement. }",
            "{ This statement is disabled in the run time version of VTScada. It",
            "\twill do nothing. }"
        ],
        "snippets": [
            "ReplaceStatement(",
            "\tNewS, { Required. Any expression for the statement value of the new",
            "\t\tstatement. (This value can be obtained using the Compile function.) }",
            "\tLocation, { Required. Any expression for the code value that indicates",
            "\t\twhat statement to replace. (This value can be obtained using the",
            "\t\tCompile function.) }",
            "\tSize, { Required. Any numeric expression for the size of the new",
            "\t\tstatement text, in characters. }",
            "\tAdjust { Required. Any logical expression. If true, the text in the",
            "\t\tfile will be moved to allow for the statement that is being replaced.",
            "\t\tIf false, the text will not be moved. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ReportError": {
        "comments": [
            "{ Description: Post error information to VTSTrace and optionally, to",
            "\tthe display. }",
            "{ If this function displays the error message to the operator, it will",
            "\tuse the newer format, which was introduced in VTS 10.0. This format",
            "\tenables you to display multiple error messages in one screen, each",
            "\twith its own Help ID value. The error will be recorded in the Error",
            "\tLog file at the VTScada level, as well as being stored for use by the",
            "\tTraceViewer. The log file (\"errors.log\") records every error that is",
            "\traised via ReportError. }"
        ],
        "snippets": [
            "System.ReportError(",
            "\teMsg, { Required. Any text containing the error message. }",
            "\tQualifierSet, { Required. An additional error data dictionary. This",
            "\t\tdictionary can accept any keys and values that can cast to strings.",
            "\t\tEach error generates a two-column table of information, built using",
            "\t\tthis dictionary. The keys are displayed in the first column and the",
            "\t\tvalues are displayed in the second. Note that VTScada system code",
            "\t\ttypically uses Setup.INI values to generate these strings so that they",
            "\t\tcan be changed to suit different languages, but this is not a",
            "\t\trequirement. }",
            "\tUserAndSession, { Optional. This parameter should capture the user",
            "\t\tresponsible for the operation that lead to the error. This is required",
            "\t\tsince users are linked to sessions that are only available to modules",
            "\t\tultimately called by the Display Manager (that is, GUI objects). As a",
            "\t\tresult, the \"user and \"session\" often need to be captured earlier and",
            "\t\tpassed to any modules likely to generate errors. }",
            "\tSilent, { Optional Boolean. If TRUE, the error dialog will be",
            "\t\tsuppressed. Defaults to the application property,",
            "\t\tReportErrorSilenceAll, or FALSE if not otherwise set. }",
            "\tHelpFile, { Optional text. If the dialog is to have a help button, and",
            "\t\tyou are using a custom help file, provide its name here. May be left",
            "\t\tblank if you are using the VTScada help file. }",
            "\tHelpID, { Optional numeric. If the dialog is to have a help button,",
            "\t\tprovide the ID value from the help file's Alias file to link to the",
            "\t\tcorrect topic. }",
            "\tTraceCategory, { Optional. The category to use in the VTScada Trace",
            "\t\tprogram. }",
            "\tApplicationGUID { Optional text. Defaults to the current application's",
            "\t\tGUID. In the rare case where there can be ambiguity over which",
            "\t\tapplication caused the error, a GUID may be supplied for the source",
            "\t\tapplication. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RepoSubscribe": {
        "comments": [
            "{ Description: Allows the caller to specify a callback which will be",
            "\ttriggered whenever the applicationâs repository changes }",
            "{ The callback is provided with a dictionary of the changed files.",
            "\tNote that since these changes may not be reflected in the working copy",
            "\t(and therefore not affect the application) the WCSubscribe function is",
            "\trecommended in most cases. }"
        ],
        "snippets": [
            "RepoSubscribe(",
            "\tSubscriber, { Required. Scope of the destination for the published",
            "\t\tmessages. }",
            "\tCallBack { Optional. Name of the module to call in the Subscriber when",
            "\t\tsomething is published. If invalid, this will default to \"RepoNotify\".",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RequestToken": {
        "comments": [
            "{ Description: Requests a Control Token for a tag. }",
            "{ Token ownership is affected by the value of the property,",
            "\tControlTokenOwnerMode. Manual refers to user action while Auto refers",
            "\tto ControlTokenManager / VTScada action To provide the ability to",
            "\tcontrol the entire tag tree, a fictitious âRoot Tagâ is declared in",
            "\tthe ControlTokenManager. The syntax to use this would look similar to:",
            "\t\\ControlTokenManager.RequestToken(\\ControlTokenManager.RootTagID,",
            "\tLevel) This can also be configured in a Request Button widget. The",
            "\tRoot Tag name and area can be changed by adding",
            "\tControlTokenRootTagName and ControlTokenRootTagArea properties. }"
        ],
        "snippets": [
            "\\ControlTokenManager.RequestToken(",
            "\tTagID, { Required string. The UniqueID of the tag for which a token",
            "\t\trequest is to be made. }",
            "\tLevel, { Optional numeric. The priority level of the token request.",
            "\t\tDefaults to 1. }",
            "\tAuto, { Optional Boolean. Set to TRUE if the request is automatic and",
            "\t\tto FALSEif the request is manual. Defaults to FALSE. }",
            "\tCustom, { Optional structure. A set of custom fields to log. Must be",
            "\t\tpacked. }",
            "\tTimestamp, { Optional timestamp. The UTC time of the request. Defaults",
            "\t\tto current time. }",
            "\tSessionID, { Optional. The IDof the session adding the token. Relevant",
            "\t\tonly if token ownership is tied to sessions. }",
            "\tAccountID, { Optional. The IDof the user requesting the token.",
            "\t\tDefaults to the signed in user at the current workstation. }",
            "\tMachineID, { Optional. The MachineIDof the workstation where the",
            "\t\trequest was made. Relevant only if token ownership is tied to",
            "\t\tworkstations. }",
            "\tDevice { Optional. The IP address of a Thin Client device. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Reset": {
        "comments": [
            "{ Description: Immediately stops a speech stream and cancels any",
            "\tbuffered speech. }",
            "{ This function returns the error code resulting from issuing the",
            "\tcommand to the speech engine, or zero if no error was encountered.",
            "\tIssuing this command will immediately stop all speech for the stream",
            "\ton which it was issued. Other streams will be unaffected. Note that in",
            "\tthe process of stopping the speech, a new speech request is issued, so",
            "\tthe count of queued VoiceTalk\\Speak requests will momentarily increase",
            "\tby one. }"
        ],
        "snippets": [
            "VoiceTalkStream\\Reset(",
            "\tVoiceTalkStream { Required. A speech stream returned from VoiceTalk. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ResetParm": {
        "comments": [
            "{ Description: Can reset parameters that become latched. }",
            "{ This statement is for experienced users, and is not needed for",
            "\tnormal operation. When this function executes, it attempts to reset",
            "\tObject's parameter at Index. This allows modules to be written which",
            "\treset their parameters (like the Save statement). This function is",
            "\tuseful for resetting TimeOut and MatchKeys functions. }"
        ],
        "snippets": [
            "ResetParm(",
            "\tObject, { Required. Any object (the object value of a running module",
            "\t\tinstance). }",
            "\tIndex { Required. Any numeric expression giving the number of the",
            "\t\tparameter of interest, starting from 1. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ResultFormat": {
        "comments": [
            "{ Description: Subroutine to convert 2-d array as returned from query",
            "\tin the form, Arr[Field][Rec], to a normalized format of",
            "\tArr[Rec][Field]. For single record reads, this function returns a",
            "\tsingle dimension array Arr[N] where N is the number of fields. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager\\, as shown in \"Format\" above.",
            "\tThe only way to ensure that a long running (or faulty) query does",
            "\tterminate is to set appropriate values for both the parameters",
            "\tExecutionTimeout and UseDriverTimeout. Modules executing queries are",
            "\tdesigned to be run as launched modules and will remain active until",
            "\tcomplete. }"
        ],
        "snippets": [
            "\\ODBCManager\\ResultFormat(",
            "\tDataArray, { Required. An array of fields and records to transpose }",
            "\tMakeSingle { Required. If true (1), and if the array size is 1 this",
            "\t\tindicates that the a single dimension array should be returned. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ResyncDoc": {
        "comments": [
            "{ Description: Synchronizes the time and date for the document and",
            "\t.RUN files. }",
            "{ This function will set the date and time for the .RUN file to that",
            "\tof the document file. }"
        ],
        "snippets": [
            "ResyncDoc(",
            "\tModule, { Required. Any expression for the module or object value. }",
            "\tUnsync { An optional parameter that is any logical expression. If true",
            "\t\t(non-0), the module's .RUN file(s) are forced to be out of sync with",
            "\t\tthe time stamp on its .SRC file(s). If false (0) the .RUN and .SRC",
            "\t\tfiles are synchronized. The default is 0. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Return": {
        "comments": [
            "{ Description: Sets the return value for the module in which it is",
            "\texecuted. }",
            "{ If a Return statement appears anywhere in the code of a launched",
            "\tmodule (i.e. one that is executed inside of a script or using the",
            "\tLaunch statement), even if that portion of the code is not executed,",
            "\tthe module will be considered to be a called module, and will block",
            "\texecution of all other modules in the same thread while it is",
            "\texecuting. Execution of the Return statement in a subroutine results",
            "\tin the module being slain without having to use the Slay statement. If",
            "\tthe Return statement is used in a called module (i.e. one that appears",
            "\tas a statement in a state), execution of the Return statement will not",
            "\tstop the execution of the module. The return value for the module is",
            "\tset equal to the first parameter, and is the same type as the expected",
            "\tvalue of the module call. The type of the return value is set every",
            "\ttime Return is executed, which allows modules to return different",
            "\ttypes of values during execution if they are called (rather than",
            "\tlaunched). This statement may appear inside or outside of a script,",
            "\tand like other statements that may be called from a state, if multiple",
            "\tcalls are active simultaneously in a module, the return value will be",
            "\tinvalid. WARNING: Latching Behavior and If statements If the Return",
            "\tstatement is placed within a script block of a called module, and if",
            "\tthat module is called by an If statement, then the return value will",
            "\tbe reset to Invalid after the If statement executes. This is similar",
            "\tto the behavior of latching functions such as AbsTime() and Watch().",
            "\tSee example 2. This behavior is not desirable for some called modules.",
            "\tThe same goes for some modules that set their return value from script",
            "\tusing SetReturnValue. For these, set the parameter Resettable to",
            "\tFALSE. Return(); is equivalent to Return(Invalid); }"
        ],
        "snippets": [
            "Return(",
            "\tX, { Optional. Any variable, expression, constant or object value. It",
            "\t\tcan be of any type. }",
            "\tResettable { Optional Boolean. Defaults to TRUE. If present and set to",
            "\t\tFALSE, the return value will not reset to INVALID until another Return",
            "\t\tstatement specifies otherwise. See comments. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Reverse": {
        "comments": [
            "{ Description: Returns its parameter with the byte order reversed. }",
            "{ If Value is invalid, the return value is invalid. For type 1, after",
            "\tthe bytes are reversed, the result is stored as a 16-bit short",
            "\tinteger. If you want an unsigned short for the result, you must AND()",
            "\tit with 0xFFFF. For type 2, the result is stored as a 32-bit signed",
            "\tinteger . If you want an unsigned 32bit integer, you must AND() it",
            "\twith 0xFFFFFFFF. For type 3 it is stored as a 64-bit signed integer. }"
        ],
        "snippets": [
            "Reverse(",
            "\tType { Required. Any numeric expression giving the type of the Value",
            "\t\tparameter. Type Meaning 1 Short 2 Long (32-bit Integers) 3 64-bit",
            "\t\tIntegers 4 Text }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "RibbonCmd": {
        "comments": [
            "{ Description: Provides two variables that the ribbon will set when",
            "\tthe user activates a command }",
            "{ The return value of this function can be monitored to initiate",
            "\tscript execution when the user activates a ribbon command. }"
        ],
        "snippets": [
            "RibbonCmd(",
            "\tCommandID, { Required. A variable holding the unique identifier for",
            "\t\tthe activated command. }",
            "\tCommandData { Required. A variable holding any command-specific data.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "RibbonContextUI": {
        "comments": [
            "{ Description: Displays a mini-toolbar or a pop-up context menu or",
            "\tboth at a specified window coordinate. }",
            "{ UI== user interface. A context map is an XML declaration of the user",
            "\tinterface controls. The XML can hold multiple context maps and",
            "\ttherefore, it is possible to select from multiple, pop-up user",
            "\tinterfaces to display. }"
        ],
        "snippets": [
            "RibbonContextUI(",
            "\tCommandID, { Required. The unique identifier of the command. }",
            "\tX, { Required. Horizontal coordinate within the nearest window at",
            "\t\twhich to display the pop-up. }",
            "\tY { Required. Vertical coordinate within the nearest window at which",
            "\t\tto display the pop-up. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RibbonGalleryItems": {
        "comments": [
            "{ Description: Use to populate a gallery with a collection of items or",
            "\tcommands, from which the user may make a selection }"
        ],
        "snippets": [
            "RibbonGalleryItems(",
            "\tCommandID, { The unique command identifier of the gallery. }",
            "\tGalleryItems { A structure containing two members: Categories - A",
            "\t\tone-dimensional, ordered array of category labels. Each member of the",
            "\t\tItems array belongs to a category, identifying its category by the",
            "\t\tindex into this array. The categories are displayed as headings within",
            "\t\tthe gallery. If there are no categories, this member must be Invalid.",
            "\t\tItems - A one-dimensional, ordered array of RibbonItem structures.",
            "\t\tEach entry in the array represents an item or command in the gallery.",
            "\t\tThese are displayed in the same order (within their category) as they",
            "\t\tappear in this array. RibbonItem structures are described in the",
            "\t\tcomments section. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RibbonSetProperty": {
        "comments": [
            "{ Description: Set a property on a command. A ribbon control will",
            "\taccess those properties of a command that it needs to render itself",
            "\tand respond to user interaction. }"
        ],
        "snippets": [
            "RibbonSetProperty(",
            "\tCommandID, { Required. The unique identifier of the command. If set to",
            "\t\tzero, the property and value are applied to all elements of the",
            "\t\tribbon, allowing all to be disabled or enabled with a single call. }",
            "\tProperty, { Required. An integer from the table that follows. }",
            "\tValue, { Varies according to the property being set. }",
            "\t, { Property Value Property Meaning Value Type 0 Enable/Disable the",
            "\t\tcommand. If the command is disabled, all control representations of",
            "\t\tthe command will be rendered grayed and the user will be unable to",
            "\t\tactivate the command. Boolean: 0 (Disable). 1 (Enable) 1 Boolean value",
            "\t\tof the command. For example, a command intended to be represented by a",
            "\t\ttoggle button or check-box would have Boolean value. Boolean 2 Numeric",
            "\t\tvalue of the command. Commands represented by a combo-box or spinner",
            "\t\tcontrol use numeric values. Integer or double 3 String value. Commands",
            "\t\trepresented by controls that display a string value use this to",
            "\t\tprovide the value. Text 4 Minimum value. Commands represented by a",
            "\t\tspinner control use this to regulate the minimum value the user can",
            "\t\tselect. Integer or double 5 Maximum value. Commands represented by a",
            "\t\tspinner control use this to regulate the maximum value the user can",
            "\t\tselect. Integer or double 6 Label. The label displayed by a control",
            "\t\tthat has a textual representation of the command, for example the text",
            "\t\tnext to a button. Text 7 Description. The description displayed by a",
            "\t\tcontrol that has a long textual description of a command, for example,",
            "\t\ta \"MajorItems\" button in a DropDownButton control. Text 8 Tooltip",
            "\t\tTitle. The emboldened title displayed in a tooltip. Text 9 Tooltip",
            "\t\tDescription. The textual description displayed in a tooltip. This is",
            "\t\tnot emboldened and is displayed below the tooltip title (if any). Text",
            "\t\t10 Key tip. Text that is displayed to assist the user when a key",
            "\t\tcombination is bound to the key, e.g. \"F9\" or \"Alt+U\". Text 11 Small",
            "\t\tImage. The small (?x?) image displayed by a control. Image (see",
            "\t\tcomments) 12 Large Image. The large (?x?) image displayed by a",
            "\t\tcontrol. Image 13 Color. An RGB quad value for a command that is",
            "\t\tintended to be represented by a color picker control. Integer 14 Color",
            "\t\tType. An enumerated type for use by a command that is intended to be",
            "\t\trepresented by a color picker control. Normally used in conjunction",
            "\t\twith the Color property. Integer as follows: 0 == no color 1 ==",
            "\t\tautomatic color 2 == RGB color value 15 Selected Item. Used for item",
            "\t\tgalleries to force a specific item to be drawn as selected. Integer 16",
            "\t\tContext Available. Commands whose representation is a contextual tab",
            "\t\tgroup have their visibility controlled by this. Boolean 17 Font.",
            "\t\tCommands represented by a font selection control have the values for",
            "\t\tthe fields in the font control set by this property. A font command",
            "\t\tstructure 18 Representative String. Supply a string for combo-box or",
            "\t\tspinner controls to set their width. The string will be used to",
            "\t\tmeasure how wide the control will be. Text 19 Increment. For spinner",
            "\t\tcontrols, the increment or decrement applied when the up or down arrow",
            "\t\tbuttons are clicked. Integer or double 20 Decimal places. For spinner",
            "\t\tcontrols, the number of decimal places displayed. Integer }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10, { 11 }",
            "\t12, { 13 }",
            "\t14, { 15 }",
            "\t16, { 17 }",
            "\t18, { 19 }",
            "\t20",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RmDir": {
        "comments": [
            "{ Description: Destroys a directory on a disk and returns its own",
            "\terror code. }",
            "{ The return value is 0 if successful and a negative integer",
            "\totherwise. If a file lock interferes with the operation, RmDir will",
            "\tmake 10 attempts, 100ms apart, allowing time for a temporary lock to",
            "\tclear. If DelAll is not set to 1 and if the directory contains files",
            "\tor subdirectories, then the directory will not be deleted. If Name is",
            "\tgiven as a relative path, then VTScada will look for that directory",
            "\tstarting in whatever directory holds the module that is making the",
            "\tRmDir call. Thus RmDir(\"Sample\"), run from within an application that",
            "\tis located in the directory C:\\VTScada\\MyApp, will remove the",
            "\tdirectory C:\\VTScada\\MyApp\\Sample. Note that this behavior differs",
            "\tfrom that of the MkDir function. }"
        ],
        "snippets": [
            "RmDir(",
            "\tName, { Required. Any text expression that is the full path name of",
            "\t\tthe directory to delete. A known path Known Path Aliases for",
            "\t\tFile-Related Functions may be provided in the form, :{KnownPathAlias}.",
            "\t\t}",
            "\tDelAll { An optional parameter which, when set to 1, causes all files",
            "\t\tand sub-directories of the named directory to be deleted. Default: 0 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RootTransform": {
        "comments": [
            "{ Description: Returns the object value that contains the root",
            "\ttransform applied to the given module. }",
            "{ The return value may be the same as Object if Object contains the",
            "\ttransform. }"
        ],
        "snippets": [
            "RootTransform(",
            "\tObject { Required. Any expression which returns an object value. This",
            "\t\tis the object value for which the root transform is being sought. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "RootValue": {
        "comments": [
            "{ Description: Retrieves the root value from a dictionary. This",
            "\tfunction will always attempt to return a value that is not itself a",
            "\tdictionary. If the value stored as the root of the given dictionary is",
            "\talso a dictionary, this function will return the root value from that",
            "\tsecond dictionary. Should all root values be other dictionaries (which",
            "\twould imply that the dictionary at the end of the chain must actually",
            "\tbe an earlier dictionary) then RootValue will traverse the chain until",
            "\tit finds a root value which is an earlier dictionary (i.e. the end of",
            "\tthe chain before it loops back) and will return that root value. This",
            "\tis the only situation where the command will return a dictionary as",
            "\tthe result. }"
        ],
        "snippets": [
            "RootValue(",
            "\tDictionary { Required. The name of the dictionary to find the root",
            "\t\tvalue of. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "RootWindow": {
        "comments": [
            "{ Description: Returns the object value of the root (original) module",
            "\tdisplayed in the same window. }",
            "{ The return value may be the same as Object if Object is the root",
            "\tmodule of its window. For modules in non-child windows (i.e. one",
            "\twithout bit 9 set), RootWindow and ParentWindow will return the same",
            "\tvalue. For child windows, RootWindow will return the root module in",
            "\tthe child window, while ParentWindow will return the root module in",
            "\tthe child window's closest non-child calling window. }"
        ],
        "snippets": [
            "RootWindow(",
            "\tObject { Required. Any expression that returns an object value. This",
            "\t\tis the object value where the search starts for the root window. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Rotate": {
        "comments": [
            "{ Description: Returns a Rotate value, which specifies a rotation",
            "\tabout a point. }",
            "{ The return value is a Rotate value, which specifies how to rotate",
            "\tabout a point. It has a Normalize value, two angles corresponding to",
            "\tthe low and high limits of the Normalize value, and a Point value",
            "\twhich specifies the center of rotation. A Rotate value may be used in",
            "\tany layered graphics statement to make the statement rotate. }"
        ],
        "snippets": [
            "Rotate(",
            "\tAmount, { Required. Any expression that returns a Normalize value,",
            "\t\tspecifying how much to rotate. }",
            "\tMinDegrees, { Required. Any numeric expression giving the minimum",
            "\t\tamount of rotation, in degrees. This is not a limit on the amount of",
            "\t\trotation. }",
            "\tMaxDegrees, { Required. Any numeric expression giving the maximum",
            "\t\tamount of rotation, in degrees. This is not a limit on the amount of",
            "\t\trotation. }",
            "\tCenter { Required. Any expression that returns a Point. This is the",
            "\t\tcenter point for the rotation. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "RTimeOut": {
        "comments": [
            "{ Description: Cumulative Timer. This function returns true when the",
            "\ttotal time that an expression is true reaches the specified value. }",
            "{ This function is reset when either parameter becomes invalid or when",
            "\tthe state containing the function is started. When the function is",
            "\treset, counting starts at 0 and the returned value is false (0). Note",
            "\tthat this function is reset automatically when it occurs in a true",
            "\taction trigger or function parameter of a function which resets its",
            "\tparameters after evaluation (e.g. Latch, Toggle or Save). }"
        ],
        "snippets": [
            "RTimeOut(",
            "\tEnable, { Required. Any numeric expression giving the condition that",
            "\t\tresults in the timer counting. When this parameter is true (not 0),",
            "\t\tthe timer is \"running.\" When this parameter is false (0), the timer",
            "\t\tstops but the total time accumulated so far is maintained as the point",
            "\t\twhich counting will start when the parameter becomes true again. }",
            "\tTime { Required. Any numeric expression giving the time-out limit in",
            "\t\tseconds. When the cumulative time that Enable is true reaches this",
            "\t\tvalue, the function becomes true (1). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "RUNFileName": {
        "comments": [
            "{ Description: Returns the name of the .RUN file for a module",
            "\tincluding the full drive and path. }"
        ],
        "snippets": [
            "RUNFileName(",
            "\tModule { Required. Any expression for the module or object value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "RUNFileVersion": {
        "comments": [
            "{ Description: Returns the minimum version of VTScada that can read",
            "\tthe .RUN files produced by the current version. }"
        ],
        "snippets": [
            "RUNFileVersion();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "RunInBubble": {
        "comments": [
            "{ Description: Starts a new thread in the given child bubble and",
            "\tlaunches the given module into that script thread. }",
            "{ Returns TRUE if the module data was successfully transferred to the",
            "\tbubble. Returns FALSE otherwise, either because it was called with",
            "\tinvalid parameter values or because the bubble specified in the given",
            "\thandle has already shut down. This function loads and launches modules",
            "\tin the same way as the Bubble function. }"
        ],
        "snippets": [
            "RunInBubble(",
            "\tBubbleHandle, { Required bubble handle. A handle as returned by the",
            "\t\tBubble and BubbleList functions. Specifies the bubble where the",
            "\t\tModuleOrObject will be loaded and launched. }",
            "\tThreadName, { Required text. The name given to a new script thread",
            "\t\tthat is started in the bubble. These names generally only appear in",
            "\t\tthe user interfaces of debugging tools. }",
            "\tModuleOrObject, { Required. The root module that is loaded and",
            "\t\tlaunched into the bubble. It is always loaded and launched with no",
            "\t\tparent or caller. }",
            "\tImportDictionary { Optional. If provided, a dictionary passed into",
            "\t\tthis parameter allows the caller to specify a subset of variables,",
            "\t\tmodules or both from the ModuleOrObject parameter that will be loaded,",
            "\t\tlaunched, or both, into the child bubble rather than simply loading",
            "\t\tand launching the entire module. This is of particular use when you",
            "\t\twant to be able to share the same code between modules running inside",
            "\t\tand outside of the child bubble. A complete description of this",
            "\t\tparameter is provided in the Bubble function. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "RunPack": {
        "comments": [
            "{ Description: Unpacks and executes a set of RPCs from a stream",
            "\tconstructed with PackRPC. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. }"
        ],
        "snippets": [
            "\\RPCManager\\RunPack(",
            "\tStream, { Required. A packed RPC stream obtained from one or more",
            "\t\tPackRPC method calls. }",
            "\tService { The name of the service to be used to determine root scope",
            "\t\tfor the RPCs within Stream. Invalid for non-service RPCs. If valid,",
            "\t\tthe RPC subroutines specified in the package will be searched for",
            "\t\tstarting in the scope of the service instance of the machine on which",
            "\t\tthe RunPack() RPC is executing. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Save": {
        "comments": [
            "{ Description: This threaded function stores data in a circular",
            "\thistorical data file at times indicated by a condition and returns the",
            "\trecord number last written to disk. }"
        ],
        "snippets": [
            "Save(",
            "\tNStatus, { Required. Any numeric expression giving the number of",
            "\t\tstatus type values to store in the file. Any functions used in this",
            "\t\tparameter must be able to be executed in a script, since triggering of",
            "\t\tthe Save re-evaluates it as if it were in a script. Status types must",
            "\t\tbe equal to a 0 or a 1. This value must be greater than or equal to 0.",
            "\t\t}",
            "\tNByte, { Required. Any numeric expression giving the number of values",
            "\t\tthat are only one byte long. Any functions used in this parameter must",
            "\t\tbe able to be executed in a script, since triggering of the Save",
            "\t\tre-evaluates it as if it were in a script. Byte types must be in the",
            "\t\trange 0 to 255 inclusive. This is a subset of the short type but",
            "\t\trequire 50% less file space than short values and 75% less space than",
            "\t\teither long or float values. This value must be greater than or equal",
            "\t\tto 0. }",
            "\tNShort, { Required. Any numeric expression giving the number of short",
            "\t\ttype values to store in the file. Any functions used in this parameter",
            "\t\tmust be able to be executed in a script, since triggering of the Save",
            "\t\tre-evaluates it as if it were in a script. This value must be greater",
            "\t\tthan or equal to 0. }",
            "\tNLong, { Required. Any numeric expression giving the number of long",
            "\t\ttype values to store in the file. Any functions used in this parameter",
            "\t\tmust be able to be executed in a script, since triggering of the Save",
            "\t\tre-evaluates it as if it were in a script. This value must be greater",
            "\t\tthan or equal to 0. }",
            "\tNFloat, { Required. Any numeric expression giving the number of float",
            "\t\ttype values to store in the file. Any functions used in this parameter",
            "\t\tmust be able to be executed in a script, since triggering of the Save",
            "\t\tre-evaluates it as if it were in a script. This value must be greater",
            "\t\tthan or equal to 0. }",
            "\tNText, { Required. Any numeric expression giving the number of text",
            "\t\ttype values to store in the file. Any functions used in this parameter",
            "\t\tmust be able to be executed in a script, since triggering of the Save",
            "\t\tre-evaluates it as if it were in a script. This value must be greater",
            "\t\tthan or equal to 0. }",
            "\tTSize, { Required. A short constant giving the number of characters to",
            "\t\treserve for text values. Text values that are longer than this number",
            "\t\twill lose the characters that fall beyond this limit. All text values",
            "\t\tstored will have the same size. }",
            "\tRecords, { Required. Any numeric expression giving the number of",
            "\t\tentries in the file. If the file is to be created full size (to",
            "\t\tprevent fragmenting of the file as it grows larger), the size should",
            "\t\tbe multiplied by -1. Because the file is circular in nature, after",
            "\t\tthis number of records have been written, new records will overwrite",
            "\t\told ones, beginning with the oldest record in the file. }",
            "\tBuffers, { Required. Any numeric expression for the number of records",
            "\t\tto keep in memory (RAM) before writing to disk. A value of 0 will",
            "\t\tresult in the data being directly written to disk each time Trigger is",
            "\t\ttrue. Setting the buffer to large numbers speeds the average data",
            "\t\tlogging rate substantially but requires RAM equal to the number of",
            "\t\trecords specified by Buffers. When the RAM buffer is full the entire",
            "\t\tbuffer is written to disk. If the buffer size is changed or if the",
            "\t\tSave is stopped (such as when VTScada stops), any data in the buffer",
            "\t\tis immediately written to disk. Also, if a Get is executed, any data",
            "\t\tin the buffer will be immediately written to disk, so that the user in",
            "\t\tensured of getting all current data. Normally when Save stops, a",
            "\t\trecord with all invalid fields, and the current time and date stamp,",
            "\t\tis written to the file. This indicates that data are no longer logged,",
            "\t\tand fields are unknown until Save resumes. If Buffers is negative,",
            "\t\tthis invalid record is not written, and the number of buffered records",
            "\t\tis -Buffers - 1. This is to remain compatible with prior versions of",
            "\t\tVTScada. Be aware that any data held in a RAM buffer will be lost if",
            "\t\tVTScada is not correctly stopped (for example, a power failure). }",
            "\tFile, { Required. Any text expression giving the file name for the",
            "\t\thistorical data. Any path name, including any special, remote, and",
            "\t\tnetworked drive is allowed. The default extension is \".DAT\" and the",
            "\t\tdefault path is the current application path (where VTScada was",
            "\t\tstarted). If the file name is prefixed with a period, the path will be",
            "\t\tto the directory the module is contained in. }",
            "\tTrigger, { Required. Any resettable function whose transition from",
            "\t\tfalse to true indicates the data items V1, V2, ... are to be written",
            "\t\tto the file. The Save statement resets the Trigger parameter if the",
            "\t\tTrigger is true (not 0). }",
            "\tV1, V2, ... { Required. A series of expressions which give the values",
            "\t\tto be stored in the file. The parameters must be in the order: status,",
            "\t\tbyte, short, long, float, and text. The number of each type is given",
            "\t\tby the NStatus, NByte, NShort, NLong, NFloat and NText parameters.",
            "\t\tThere must be exactly the number of Vn parameters specified by each of",
            "\t\tthese parameters. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "SaveFile": {
        "comments": [
            "{ Description: Helper function to save files or streams on a server,",
            "\tVIC or Anywhere Client }",
            "{ When run on a workstation or VIC a \"save as\" dialogue will be",
            "\tdisplayed. After being accepted, the input file or stream will be",
            "\tcopied to that destination. On the Anywhere Client a file download",
            "\twill be initiated. If DeleteOnCompletion is true and the input is a",
            "\tfile, it will be deleted when it is no longer required by",
            "\tSystem.SaveFile(). You are strongly advised to use this rather than",
            "\tother means to delete the input file after transfer. Otherwise, the",
            "\tfile may be deleted before the transfer is complete. }"
        ],
        "snippets": [
            "System.SaveFile(",
            "\tInput, { Required. Input stream, file name or full path to file name",
            "\t\tto be saved. Alternatively, may be a callback module that will write",
            "\t\tdata. The callback module should be a launched module and may have two",
            "\t\tparameters. The first is required and must be a stream to which data",
            "\t\twill be written. The second is optional and typically called",
            "\t\tpAbortSave, which is a pointer to a value that the callback can set to",
            "\t\tTRUE if the SaveFile operation is to be aborted. If that flag is set,",
            "\t\tanything that has already been written to the file will be discarded.",
            "\t\tIf the destination already existed, it's original contents will have",
            "\t\talready been deleted so pAbortSave cannot be used to stop that from",
            "\t\thappening). }",
            "\tDestination, { File name or path to save to. }",
            "\tMimeType, { Mime type to send to the Anywhere Client in \"view\" mode. }",
            "\tDeleteOnCompletion, { Optional Boolean. Defaults to False. Delete",
            "\t\tinput on completion. Applies only when using a file name as the Input",
            "\t\tparameter. Does not apply to a stream. }",
            "\tpResultPath, { Optional pointer to output destination. The output",
            "\t\tdestination can be a string of the resulting file name including its",
            "\t\tpath if the user selected a file, or can be Invalid if the user",
            "\t\tcanceled the selection or the session is running on the Anywhere",
            "\t\tClient. }",
            "\tpCompletionVar, { Optional pointer to percentage completion of writing",
            "\t\tthe stream to the VIC. Invalid for the Anywhere Client or server",
            "\t\tsessions. }",
            "\tOpenFileDialog, { Optional Boolean. TRUE to open FileDialogBox.",
            "\t\tDefaults to TRUE. }",
            "\tFilterPattern, { Optional. Array of wildcard file patterns for the",
            "\t\tfile types that will be offered to the user. }",
            "\tFilterDesc, { Optional. Array of text values that are the descriptions",
            "\t\tcorresponding to the FilePattern values. }",
            "\tFileExt { Optional text expression giving the default file extension",
            "\t\tto use if the user does not specify one. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SaveHistory": {
        "comments": [
            "{ Description: This threaded function saves an array of data to a .DAT",
            "\tfile for a certain time span. }",
            "{ Each record of data in the array will be inserted into its correct",
            "\tposition based on its timestamp. For this reason the transfer to the",
            "\tfile will be more efficient if the timestamps are in increasing",
            "\tchronological order, however, any order is allowed. Any records that",
            "\thave an invalid timestamp will be skipped. Because this function is",
            "\tthreaded and runs as a background job, there is no way to tell when",
            "\tthe data has all been written to the file other than by checking its",
            "\tcontents, however, multiple Save or SaveHistory commands will get",
            "\twritten to the file in correct locations based on their timestamps. If",
            "\ta Get or TGet statement is executed, the SaveHistory statement will",
            "\twrite all of its data to the file prior to the data retrieval. This",
            "\talso occurs if the application is stopped. If the target file does not",
            "\texist, SaveHistory will create it. To do this, SaveHistory needs to",
            "\tdetermine the column structure of the file. Whereas Save has",
            "\tparameters allowing the format to be explicitly defined, there are no",
            "\tequivalent parameters to SaveHistory. Instead, SaveHistory will",
            "\tanalyze the first record that is to be written and determine the",
            "\tparameter type required for each column. In order to ensure that the",
            "\tcorrect format is determined, it is advisable to make the first record",
            "\ta template record. A template record would have an invalid timestamp",
            "\tfollowed by column values that unambiguously identify the range of",
            "\tvalues for each column (see the Save function for a description of the",
            "\tdata types). In the case of text values, the template string should be",
            "\tthe same length as the maximum required length. If Mode has the value",
            "\t2, then the understanding is that a series of SaveHistory functions",
            "\tare to be performed on the file and that each will be written at the",
            "\tend of the file (if the write is not at end of file, then Mode = 0 is",
            "\tforced). The invalid record that is written at the end of the file",
            "\tidentifies that the file is still (conceptually) open. Should the",
            "\tsystem suffer any form of abrupt shutdown, then this status will be",
            "\tpreserved in the file and will be of use in learning the validity of",
            "\tfile data. The final SaveHistory to such a file should be written with",
            "\tMode = 3. This will change the invalid record to one which signifies",
            "\tthat the file is no longer open. If Mode has the value 4, then",
            "\tSaveHistory compares the data supplied in Array2dElem with the data",
            "\talready existing in the file, for the time range specified by the",
            "\tearliest record in the data and the value of EndTime. The comparison",
            "\treviews the validity of each record (a record is deemed invalid if all",
            "\tcolumns are invalid) and splits both sets of data into periods of",
            "\tvalidity and invalidity. The resulting file will contain all valid",
            "\trecords from both data sets and those invalid records where both data",
            "\tsets saw an invalid. }"
        ],
        "snippets": [
            "SaveHistory(",
            "\tArray2DElem, { Required. Any array element giving the starting point",
            "\t\tinto the two dimensional array containing the data to write to the",
            "\t\tfile. The subscripts for the array may be any numeric expression, but",
            "\t\tboth must be specified. The format of the array is the same as that",
            "\t\treturned by GetHistory: [column][record]. Column 0 is the timestamp in",
            "\t\tseconds since January 1, 1970, while each subsequent column is the",
            "\t\tdata for that record in the same order used by the Save function that",
            "\t\tcreated the .DAT file. Extra columns are ignored, but if there are",
            "\t\tfewer columns than required to specify all fields in the .DAT file",
            "\t\tthen the function fails and does nothing. }",
            "\tNum, { Required. Any numeric expression giving the number of records",
            "\t\tto write to the file. }",
            "\tFile, { Required. Any text expression giving the file name for the",
            "\t\thistorical data file. If this file does not exist the SaveHistory",
            "\t\tfunction will create it with default format (see Comments). The file",
            "\t\textension is optional and will default to \".DAT\" if omitted. }",
            "\tMode { Historical data files use an invalid record to mark",
            "\t\tdiscontinuities in the recorded data. Under certain circumstances, it",
            "\t\tmay be desirable to manipulate these records. This optional parameter",
            "\t\tprovides the mechanism to do so. The mode parameter has the following",
            "\t\toptions: (Defaults to 0) Value Meaning 0 Add data after the previous",
            "\t\trecord according to time stamp, and donât write an invalid record",
            "\t\t(default). 1 No longer used 2 Add data according to time stamp. If",
            "\t\tprevious record is invalid, overwrite it, write data, and then write",
            "\t\tan invalid record after it. 3 Perform a tidy closedown of a file which",
            "\t\thas been written with Mode = 2. 4 Specifies that SaveHistory should",
            "\t\tperform a special merge of the supplied data into the referenced data",
            "\t\tfile. The aim of the special merge is remove invalid records unless",
            "\t\tthe existing and the incoming data both agree that they should exist",
            "\t\tin the file. The aim of this mode is to assist the resolution of data",
            "\t\tat primary and backup log servers. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SaveImage": {
        "comments": [
            "{ Description: Takes an image handle and saves it to an image file on",
            "\tdisk. }"
        ],
        "snippets": [
            "SaveImage(",
            "\tBitmapHandle, { Required. The handle to the image to be saved. }",
            "\tFilename, { Required. Any text expression for the name to be given to",
            "\t\tthe new file. }",
            "\tMIMEType, { Optional text for the format to be used. Defaults to",
            "\t\t\"image/png\" if not specified. Options include \"image/bmp\",",
            "\t\t\"image/jpeg\", \"image/gif\", \"image/tiff\", and \"image/png\". }",
            "\tWidth, { Optional. Any numeric expression for the width of the image",
            "\t\tin pixels. Defaults to the native size of the image. }",
            "\tHeight { Optional. Any numeric expression for the height of the image",
            "\t\tin pixels. Defaults to the native size of the image. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SaveModule": {
        "comments": [
            "{ Description: Saves a module definition to its *.RUN file. }",
            "{ This statement saves a module definition to its *.RUN file. }"
        ],
        "snippets": [
            "SaveModule(",
            "\tModule { Required. Any expression for the module or object value. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Scale": {
        "comments": [
            "{ Description: Returns a value that has been converted from one scale",
            "\tto another. }",
            "{ This function may be used in combination with Cond to perform",
            "\tpiecewise linearization of a value or expression. Limit may be used to",
            "\tkeep the result within bounds. The compiler will reduce this function",
            "\tto a constant if all of its parameters evaluate to constants. This",
            "\tfunction does calculations with double-precision floating point values",
            "\tand does not support 64-bit integers computations. }"
        ],
        "snippets": [
            "Scale(",
            "\tValue, { Required. Any numeric expression giving the value to be",
            "\t\tscaled. }",
            "\tIn1, { Required. Any numeric expression giving the minimum of Value's",
            "\t\tunscaled range. This parameter corresponds to Out1. This is usually",
            "\t\tthe \"zero\" for the unscaled Value. }",
            "\tIn2, { Required. Any numeric expression giving the maximum of Value's",
            "\t\tunscaled range. This parameter corresponds to Out2. In2 must not equal",
            "\t\tIn1. }",
            "\tOut1, { Required. Any numeric expression giving the minimum of Value's",
            "\t\tscaled output range. This parameter corresponds to In1. This is",
            "\t\tusually the \"zero\" for the scaled Value. }",
            "\tOut2 { Required. Any numeric expression giving the maximum of Value's",
            "\t\tscaled output range. This parameter corresponds to In2. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Scope": {
        "comments": [
            "{ Description: Performs a scope resolution and returns a reference to",
            "\tthe requested member within a module or other object. }",
            "{ This function is the same as the '\\' operator, when the '\\' operator",
            "\tis used between two operands. (Object\\Member). Unlike the backslash",
            "\toperator, the Scope function allows any text string to be used. This",
            "\tfunction may be used as a value, or as an L-value (on the left hand",
            "\tside of an assignment). This function is used to reference one",
            "\tspecific occurrence of a variable in a module, from another module. If",
            "\tthe final result is Invalid, this function looks for the presence of",
            "\tbackslash (\\) characters in the second parameter and parses the",
            "\tresult. When searching for a match, this function ignores variables",
            "\twith the PROTECTED attribute. That is, if such a variable is",
            "\tencountered the search will simply skip over it and continue.",
            "\tDetecting variables with the PROTECTED attribute requires use of the",
            "\t'Variable' function. If you can use LocalScope instead of Scope, then",
            "\tyou should. For example, perhaps you have a tag widget and want to",
            "\tdraw range bars based on RangeMin & RangeMax. If you use",
            "\t\\Root\\RangeMax , and for some reason the tag linked to the widget does",
            "\tnot have a RangeMax, then the Scope operator will walk up the scope",
            "\ttree, perhaps finding a RangeMax variable in a parent tag. It is",
            "\tlikely that you would rather have an Invalid in that case rather than",
            "\tsome parent tag's range value, therefore it is better to do",
            "\t\\Root.RangeMax. }"
        ],
        "snippets": [
            "Scope(",
            "\tObject, { Required. Any expression for the object value (module) where",
            "\t\tMember may be found. }",
            "\tMember, { Required. Any text expression for the member name. This must",
            "\t\tbe a simple variable or module. }",
            "\tScopeLocal { Optional. A Boolean expression. Defaults to FALSE if",
            "\t\tmissing, invalid or if a non-Boolean is provided. If set TRUE then the",
            "\t\tcall will not search up the scope tree for name matches. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ScopeLocal": {
        "comments": [
            "{ Description: Exists only for backward compatibility. Use",
            "\tScope(Module, VarName, TRUE) for all new code. Performs a scope",
            "\tresolution only if it occurs in the requested context. Returns a",
            "\treference to the requested member within a module or other object. }",
            "{ This function differs from the Scope function only in that it is",
            "\trestricted to the requested module context. It will not search through",
            "\tthe scope tree if the Member name is not found in the designated",
            "\tobject. If the final result is Invalid, this function looks for the",
            "\tpresence of backslash (\\) characters in the second parameter and",
            "\tparses the result. }"
        ],
        "snippets": [
            "ScopeLocal(",
            "\tObject, { Required. Any expression for the object value (module) where",
            "\t\tMember may be found. }",
            "\tMember { Required. Any text expression for the member name. This must",
            "\t\tbe a simple variable or module. Array references or further scope",
            "\t\tresolution are not allowed inside the text expression. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "SDev": {
        "comments": [
            "{ Description: Returns the statistical sample standard deviation for a",
            "\tsubsection of an array. }",
            "{ The function returns an invalid result if either of its parameters",
            "\tis invalid or if there are less than two valid numerical array",
            "\telements in the specified range. Invalid elements are not included in",
            "\tthe calculation. This function does calculations with double-precision",
            "\tfloating point values and does not support 64-bit integers",
            "\tcomputations. }"
        ],
        "snippets": [
            "SDev(",
            "\tArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array. The subscript for the array may be any numeric expression.",
            "\t\tIf processing a multidimensional array, the usual rules apply to",
            "\t\tdecide which dimension should be used. }",
            "\tN { Required. Any numeric expression giving the number of array",
            "\t\telements to use starting at the element given by the first parameter.",
            "\t\tIf N extends past the upper bound of the lowest array dimension, this",
            "\t\tcomputation will \"wrap-around\" and resume at element 0, until N",
            "\t\telements have been processed. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Seconds": {
        "comments": [
            "{ Description: Returns the number of seconds since midnight of the",
            "\tcurrent day. }",
            "{ Care must be taken when using this function together with the Today",
            "\tfunction to determine the current date and time. If the time is within",
            "\ta fraction of a second of midnight, the value of the date may be",
            "\tcalculated in one day and the time in the other day giving an apparent",
            "\terror of almost 24 hours. In situations where this is a problem, the",
            "\tAbsTime function may be helpful, however, the best practice is to use",
            "\tthe function CurrentTime. }"
        ],
        "snippets": [
            "Seconds();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SectionControl": {
        "comments": [
            "{ Description: Creates a control that displays a variable number of",
            "\tsections. Visually, a section consists of a header and content. The",
            "\tcontrol manages the layout and geometry for the sections and runs a",
            "\tcaller-supplied module to display the section content (see Comments).",
            "\t}",
            "{ As indicated above, a section consists of a header and content. The",
            "\tcontrol manages the layout and geometry for the sections and runs a",
            "\tcaller-supplied module to display the section content. Call a",
            "\tSectionControl in steady-state, wait until the public variable Ready",
            "\tgoes TRUE (non-zero), and then call AddSection and DeleteSection (see",
            "\tthe Related Sub-functions section above) to add sections to and delete",
            "\tsections from the control. SectionControl assumes that it is being run",
            "\tin a child window and expands to consume the entire window. It",
            "\tautomatically adds a vertical scroll bar when required. }"
        ],
        "snippets": [
            "System.SectionControl(",
            "\tHeadingFont, { Required. The font to use for the heading. }",
            "\tHeadingTextColor, { Required. The color to be used for the heading",
            "\t\ttext. }",
            "\tHeadingBackColor { Required. The color to be used as the background",
            "\t\tfor the heading text. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "SecurityCheck": {
        "comments": [
            "{ Description: Examines the rules that apply to the current user or",
            "\tthe named user to determine if the specified privilege has been",
            "\tgranted. }",
            "{ This module can be called in script or in steady-state. It returns",
            "\tTRUE if the security check passes and FALSE otherwise. In steady-state",
            "\tthe return value may change if the parameters change, if the user's",
            "\tsigned in state changes, or if there is a configuration change on the",
            "\tuserâs account. The security check is iteratively done against each",
            "\trule in the user account until either a matching rule is found or all",
            "\trules have been checked and no match found. If the TagName parameter",
            "\tis Invalid or not specified, SecurityCheck looks in the callerâs scope",
            "\tfor the nearest tag and uses the name of that tag as the TagName",
            "\tparameter. }"
        ],
        "snippets": [
            "\\SecurityManager\\SecurityCheck(",
            "\tPrivilege, { Required. A privilege number to be used in the security",
            "\t\tcheck. System Privilege Reference for Programmers }",
            "\tSuppress, { Optional. A Boolean indicating whether a privilege refusal",
            "\t\tdialog should be displayed if the SecurityCheck fails. TRUE to",
            "\t\tsuppress the dialog. Defaults to FALSE. }",
            "\tAccountName, { Optional. The name or AccountID of an account against",
            "\t\twhich to check the privilege. Defaults to the callerâs account. }",
            "\tDenyCaller, { Optional. The object value of the caller to use when",
            "\t\tlaunching the privilege refusal dialog. Defaults to the callerâs user",
            "\t\tsession. This is used to control the lifetime of the dialog until",
            "\t\tdismissed by user action. }",
            "\tTagName { Optional. The name of a tag that will be used in the",
            "\t\tsecurity check. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Seek": {
        "comments": [
            "{ Description: Changes and returns the current position within a",
            "\tstream. The return value is the current stream position after the seek",
            "\tis done. }",
            "{ This allows repositioning within a stream. This function can be used",
            "\tto find the current stream position by setting the last two parameters",
            "\tto \"0,1\". Reverse seeks on a socket stream are not supported. }"
        ],
        "snippets": [
            "Seek(",
            "\tStream, { Required. Any expression that returns the stream to do the",
            "\t\tSeek on }",
            "\tPosition, { Required. Any numeric expression that returns either the",
            "\t\tabsolute position, or a relative amount to move the position,",
            "\t\tdepending on Mode. If the mode is relative, this number may be",
            "\t\tnegative (i.e. earlier in the stream). }",
            "\tMode { An optional numeric expression that denotes which type of",
            "\t\tpositioning to do. If equal to 0, the stream position is changed to",
            "\t\tPosition (absolute mode). If equal to 1, the Position is added to the",
            "\t\tcurrent stream position (relative mode ). Defaults to 0. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SelColor": {
        "comments": [
            "{ Description: Sets a color value from a dialog }",
            "{ Displays the standard VTScada color-picker dialog. }"
        ],
        "snippets": [
            "\\SelColor(",
            "\tLabel, { Required text. Sets the title of the color selection dialog.",
            "\t\t}",
            "\tColorIndex, { Required text. The selected color value will be returned",
            "\t\tvia this parameter. }",
            "\tEnable, { Required Boolean. Must be set to TRUE for the color picker",
            "\t\tto open. This parameter is set to FALSE by the color picker upon",
            "\t\tclosing. Use this as a signal that the user has chosen a color. }",
            "\tNoTrans, { Boolean. Deprecated option - all transparent options are",
            "\t\tshown. }",
            "\tShowColorIndex, { Optional Boolean. When true, the string value,",
            "\t\t\"<aaRRGGBB>\" of the selected color is shown. Defaults to true. }",
            "\tDisplayRoot, { Optional object value. For example, to make the dialog",
            "\t\tappear on a monitor than the one holding the window that contains the",
            "\t\tcaller of SelColor (or if the caller of SelColor is not running inside",
            "\t\ta window), you can pass an object into DisplayRoot to specify the",
            "\t\tmonitor that the dialog should appear on. You would pass in an object",
            "\t\trunning in a window on the desired monitor. Thus, to make the dialog",
            "\t\tappear on the same window as a pop-up page, you would pass in the",
            "\t\tpopup page object. }",
            "\tDisableAlpha { Disable transparency options in the color picker. This",
            "\t\tParameter is false by default meaning transparency settings are",
            "\t\tenabled, if set to True Transparency settings are disabled. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "SelectArea": {
        "comments": [
            "{ Description: Selects active graphics statements within a rectangular",
            "\tarea in a window. }",
            "{ SelectArea is a function that returns the number of objects that",
            "\thave been found and selected within the defined area. }"
        ],
        "snippets": [
            "SelectArea(",
            "\tObject, { Required. Any expression for the object value that",
            "\t\tidentifies the window. }",
            "\tLeft, { Required. Any numeric expression for the left side coordinate",
            "\t\tof the area. }",
            "\tBottom, { Required. Any numeric expression for the bottom side",
            "\t\tcoordinate of the area. }",
            "\tRight, { Required. Any numeric expression for the right side",
            "\t\tcoordinate of the area. }",
            "\tTop, { Required. Any numeric expression for the top side coordinate of",
            "\t\tthe area. }",
            "\tMustContain { Required. Any logical expression. If true, an object",
            "\t\twill be selected only if it is completely enclosed by the area.",
            "\t\tOtherwise, an object will be selected if any part of that object falls",
            "\t\twithin the area. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SelectCodePointer": {
        "comments": [
            "{ Description: Given a window object and a code pointer for an active",
            "\tgraphics object within that window, this function adds the graphics",
            "\tobject to the window's selection set. }",
            "{ You must first use StatementInstance to obtain the code pointer to",
            "\tbe used in the CodePointer parameter. }"
        ],
        "snippets": [
            "SelectCodePointer(",
            "\tObject, { Required. Any expression for the object value that",
            "\t\tidentifies the window containing the graphic. }",
            "\tCodePointer { Required. Any code pointer value expression for the",
            "\t\tgraphic object. (see comments) }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SelectDAG": {
        "comments": [
            "{ Description: Selects an active graphics statement. }",
            "{ A \"DAG\" is a type of function. }"
        ],
        "snippets": [
            "SelectDAG(",
            "\tStatement, { Required. Any expression for the code value of the",
            "\t\tstatement to select. }",
            "\tObject, { Required. Any expression for the object value that",
            "\t\tidentifies the module instance where Statement is found. }",
            "\tIndex { Required. Any numeric expression for the function within",
            "\t\tStatement. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SelectGraphic": {
        "comments": [
            "{ Description: Obsolete. Will compile but does nothing. }"
        ],
        "snippets": [
            "SelectGraphic(",
            "\tObject, { Required. Any expression for the object value that",
            "\t\tidentifies the window. }",
            "\tX, { Required. Any numeric expression for the x-axis coordinate of the",
            "\t\tselection point. }",
            "\tY, { Required. Any numeric expression for the y-axis coordinate of the",
            "\t\tselection point. }",
            "\tDist, { Required. Any numeric expression for the maximum distance a",
            "\t\tgraphic may be from (X,Y) and still be considered for selection. }",
            "\tN { Required. Any numeric expression for the object to select. 0 is",
            "\t\tthe first object, 1 is the next, and so on. This allows selection of",
            "\t\tgraphics that are 'underneath' other graphics. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SelectHandle": {
        "comments": [
            "{ Description: Returns a pointer to a handle of selected graphics",
            "\tstatements at a location in a window. }"
        ],
        "snippets": [
            "SelectHandle(",
            "\tObject, { Required. Any expression for the object value which",
            "\t\tidentifies the window. }",
            "\tX, { Required. Any numeric expression for the x-axis coordinate of the",
            "\t\tselection point. }",
            "\tY, { Required. Any numeric expression for the y-axis coordinate of the",
            "\t\tselection point. }",
            "\tDragAll { Required. Any logical expression. If true, dragging a handle",
            "\t\twill drag all selected handles at (X,Y). Otherwise, only the first",
            "\t\tselected handle (in the topmost layer) will drag. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SelectHandleNum": {
        "comments": [
            "{ Description: Selects the given handle of selected graphics",
            "\tstatements in a window. }",
            "{ This function selects the handle requested in the window requested",
            "\tand returns the user coordinates for that selected handle. The",
            "\treturned coordinates can then be used in the DragHandle function. Will",
            "\treturn invalid for the X & Y values if an attempt is made to select",
            "\tthe middle side handles (1, 4, 6, or 7) when those handles are not",
            "\tvisible due to the object selection box being too small to display",
            "\tthem. }"
        ],
        "snippets": [
            "SelectHandleNum(",
            "\tObject, { Required. Any expression for the object value which",
            "\t\tidentifies the window. }",
            "\tHandleNum { Required. Any numeric expression for the handle number",
            "\t\twhich you wish to choose. The handles are numbered as follows. 0 1 2 6",
            "\t\t8 7 3 4 5 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SelectPath": {
        "comments": [
            "{ Description: Selects a path given its code pointer value. }"
        ],
        "snippets": [
            "SelectPath(",
            "\tObject, { Required. Any expression for the object value that",
            "\t\tidentifies the window. }",
            "\tCodePointer { Required. Any expression for the code pointer value of",
            "\t\tthe path to select. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Self": {
        "comments": [
            "{ Description: Returns the object value of the current object. }",
            "{ This is the only way to get a module's object value and is a way for",
            "\tan object to store a reference to itself. Often, this object value is",
            "\tpassed to other objects so they can : - Scope into that object to",
            "\taccess its member variables / modules. - Monitor the object's lifetime",
            "\t(wait for the object value to no longer be Valid). Note: If writing an",
            "\texpression that must reference the object's parent, \\Root is more",
            "\treliable than ParentObject(Self). }"
        ],
        "snippets": [
            "Self();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Send": {
        "comments": [
            "{ Description: This subroutine sends a message by invoking a remote",
            "\tprocedure call (RPC). }"
        ],
        "snippets": [
            "\\RPCManager\\Send(",
            "\tServiceName, { Required. The name of the service to transmit to. For",
            "\t\tdirected RPCs, set this value to either Invalid or a zero-length",
            "\t\tstring. }",
            "\tRemoteGUID, { Required. The GUID of the application to receive the",
            "\t\tRPC. If Invalid, RemoteGUID is searched for in the caller's scope. The",
            "\t\tRemoteGUID parameter MUST be a binary GUID. GetGUID() can be used to",
            "\t\tconvert a text GUID into a binary GUID if required. }",
            "\tModeCutOff, { Required. The service synchronization mode above which",
            "\t\tthis message should not be sent. Normal RPCs should set this to",
            "\t\tRPC_ACCEPT_ALL mode. }",
            "\tSendServer, { Required. If set to \"1\", this flag will transmit this",
            "\t\tRPC to the service instance that is currently the server for the",
            "\t\tservice. Ignored for directed RPC requests. }",
            "\tMachineName, { Required. The IP or name of the workstation to be used",
            "\t\tfor a directed RPC. Invalid for service RPCs. }",
            "\tSendClients, { Required. May be any of the following: 0: Do not send",
            "\t\tto clients 1: Transmit this RPC to all service instances that are",
            "\t\tcurrently clients of the service server. Ignored for directed RPC",
            "\t\trequests. 2: Send to all clients that are on the local machine's list",
            "\t\tof potential service servers. }",
            "\tExecLocally, { Required. ExecLocally only has an effect on directed",
            "\t\tRPCs (i.e. not on service RPCs). If ExecLocally is TRUE, the RPC is",
            "\t\tforced to execute on the local machine ONLY. }",
            "\tRecursive, { Required. If set to \"1\", and SendClients is also set to",
            "\t\t\"1\", this flag will transmit this RPC to all service instances that",
            "\t\tare clients of this workstation and all service instances that are",
            "\t\tclients of them. If set to a \"1\" and SendServer is also a \"1\", will",
            "\t\ttransmit to servers of this workstation and servers of those",
            "\t\tworkstations. This is of use when \"clients of clients\" are configured.",
            "\t\tIn most cases, it is wise to set this flag when making service",
            "\t\tbroadcast updates. }",
            "\tModuleName, { Required. The textual name of the RPC subroutine to be",
            "\t\texecuted. Must be valid. }",
            "\tModuleContext, { Required. The context in which the \"ModuleName\" will",
            "\t\tbe executed. The \"base\" context for a VTScada layer-based application",
            "\t\tis \"Code\". \".\" may be used as an alias for the object that registered",
            "\t\tfor the RPC service. See comments. For a non-VTScada (pure script)",
            "\t\tapplication, the base context is the root of the application specified",
            "\t\tby the RemoteGUID parameter. Must be valid. }",
            "\tUpdateObject, { Required. If valid, is an object that will act as a",
            "\t\tholding point for the RPC until it is actually transmitted to the",
            "\t\tremote workstation. A subsequent RPC with the same UpdateObject value",
            "\t\twill discard the previous RPC if it has not yet been transmitted, and",
            "\t\treplace it with the new one. This is of most use to services whose",
            "\t\tupdates completely negate the effect of previous updates, and serves",
            "\t\tto minimize the transmission of redundant RPCs. }",
            "\tInputSessionID, { Required. If Invalid, the RPC will be queued for",
            "\t\ttransmission. If valid, will be interpreted as a SID which must match",
            "\t\tthe current SID for the multi-server application. Otherwise, the RPC",
            "\t\twill not be queued for transmission. Only of use in directed RPCs. }",
            "\tParameters { A set of up to 32 parameters to the RPC subroutine. Can",
            "\t\tbe any mixture of the legal types. Supplying a parameter of an illegal",
            "\t\ttype will cause it to be replaced with Invalid when the RPC subroutine",
            "\t\tis invoked. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SendMail": {
        "comments": [
            "{ Description: Sends a string to an email server using the Simple Mail",
            "\tTransport Protocol (SMTP) }",
            "{ This function opens a TCP/IP socked on port 25 (or other if",
            "\tspecified) of the specified mail server. The Message is then sent",
            "\tusing the SMTP protocol. If both Username and Password are valid, then",
            "\tSendMail will attempt to login to the mail server before sending the",
            "\temail message. If the server does not support authentication, then",
            "\tSendMail will abort with an error message. If both Username and",
            "\tPassword are valid, but the server does not support PLAIN",
            "\tauthentication, then SendMail will abort with an error. If either",
            "\tUsername or Password is missing or invalid, then the message will be",
            "\tsent without a login attempt. The To: address will accept a string",
            "\tthat conforms to the address-list ABNF from RFC 5322. If using OAuth2",
            "\tand the server does not offer XOAUTH2 as an authentication method then",
            "\terror 10 is returned. }"
        ],
        "snippets": [
            "\\SendMail(",
            "\tServer, { Required. Any text or buffer expression of the mail server",
            "\t\tname or IP address }",
            "\tTo, { Required. Any text or buffer expression of the address of",
            "\t\tdestination }",
            "\tFrom, { Required. Any text or buffer expression of the address of the",
            "\t\tperson from whom the mail is from }",
            "\tSubject, { Required. Any text or buffer expression of the subject of",
            "\t\tthe message }",
            "\tMessage, { Required. Any text or buffer expression of the message - no",
            "\t\tattachments }",
            "\tError { Required. A pointer to an error variable, set to 0 if OK. The",
            "\t\tError parameter should initially be set Invalid by the caller. When",
            "\t\tthis method is done, it will set Error to one of the following values:",
            "\t\tThe following error codes are produced by VTScada. Your email server",
            "\t\tmay produce others. Error Meaning 0 Mail has been successfully sent. 1",
            "\t\tUnable to open a connection to the server. 2 Server did not send a",
            "\t\tgood SMTP welcome message. 3 Server rejected SMTP HELO message. 4",
            "\t\tServer rejected SMTP MAIL message. 5 Server rejected SMTP RCPT",
            "\t\tmessage. 6 Server rejected SMTP DATA message. 7 Server rejected",
            "\t\tmessage body. 8 Badly formatted TO: address. 9 Server does not support",
            "\t\tAUTH. 10 Server does not support implemented AUTH. mechanisms. 11",
            "\t\tFailure to login to SMTP server. 12 TLS wanted for SMTP, but not",
            "\t\tavailable 13 TLS unavailable or negotiation with server failed 14",
            "\t\tBadly formatted bcc address }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SerBreak": {
        "comments": [
            "{ Description: Sends a break character to a serial port. }"
        ],
        "snippets": [
            "SerBreak(",
            "\tPort, { Required. Any numeric expression for the serial port number",
            "\t\t(opened with a ComPort function) or serial stream value (returned from",
            "\t\ta SerialStream function). }",
            "\tStatus { Required. Any logical expression. If true (non-0), a break",
            "\t\twill be sent to the serial port defined in Port, if false (0), the",
            "\t\tbreak will be cleared from the serial port. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SerCheck": {
        "comments": [
            "{ Description: Check Serial Port. This function returns the immediate",
            "\tor cumulative serial port status. }"
        ],
        "snippets": [
            "SerCheck(",
            "\tPort, { Required. Any numeric expression for the serial port number",
            "\t\t(opened with a ComPort function) or serial stream value (returned from",
            "\t\ta SerialStream function). }",
            "\tReset { Required. Any logical expression. If true (non-0), the serial",
            "\t\tport status register will be cleared. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SerialNum": {
        "comments": [
            "{ Description: Returns the serial number of the copy of VTScada",
            "\trunning. }"
        ],
        "snippets": [
            "SerialNum();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SerialStream": {
        "comments": [
            "{ Description: Returns a serial stream that can be used in any of the",
            "\tserial port functions or with any of the stream functions. Please note",
            "\tthat the ComPort function (which functions somewhat differently than",
            "\tthe SerialPort function) may also be utilized. }",
            "{ The parameters for this function are a reduced set from the Comport",
            "\tstatement. Make sure that VTScada's mouse (if it is serial) is on a",
            "\tdifferent port, because the mouse and SerialStream can interfere. Also",
            "\tmake sure that no other hardware or software is interfering with the",
            "\tserial port hardware interrupts (IRQ4 for COM1:, IRQ3 for COM2:).",
            "\tNetwork cards often use IRQ4, which will cause a problem with a mouse",
            "\tor SerialStream on COM1:. The stream will automatically close when",
            "\tthere are no variables referencing the stream. However, if there are",
            "\tbytes still in the transmit buffer, they will not be sent before the",
            "\tstream is closed. }"
        ],
        "snippets": [
            "SerialStream(",
            "\tPort, { Required. Any numeric expression giving the serial port number",
            "\t\tto be used. For COM1: Port = 1. For COM2: Port = 2. The valid range",
            "\t\tfor Port is 1 to 4096. }",
            "\tReceiveLen, { Required. Any numeric expression giving the size of the",
            "\t\treceiver buffer in bytes. ReceiveLen must be in the range 2 to 32766.",
            "\t\tIf more bytes are received than can fit in the receive buffer before",
            "\t\tyour application removes them using SerRcv or a similar VTScada",
            "\t\tfunction, the additional data will be lost. }",
            "\tTransmitLen, { Required. Any numeric expression giving the size of the",
            "\t\ttransmitter buffer in bytes. TransmitLen must be in the range 2 to",
            "\t\t32766. The buffer must be large enough to hold the maximum number of",
            "\t\tbytes pending transmission at any instance. }",
            "\tBaud, { Required. Any numeric expression giving the baud rate. Baud",
            "\t\tmust be in the range 10 to 57600, and must divide evenly into 115200",
            "\t\twith no more than 2.5% error. }",
            "\tDataBits, { Required. Any numeric expression giving the number of data",
            "\t\tbits per character. DataBits must be 5, 6, 7, or 8. }",
            "\tStopBits, { Required. Any numeric expression giving the number of stop",
            "\t\tbits per character. StopBits must be 1 or 2. }",
            "\tParity { Required. Any numeric expression giving the parity checking",
            "\t\tto use: Parity Checking 0 No parity 1 Odd parity 2 Even parity 3 0",
            "\t\tStick (space parity) 4 1 Stick (mark parity) }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SerIn": {
        "comments": [
            "{ Description: Get Serial Port Byte. This function returns the next",
            "\tbyte in the receive buffer. }",
            "{ If no byte is available, the return value is invalid. }"
        ],
        "snippets": [
            "SerIn(",
            "\tPort, { Required. Any numeric expression for the serial port number",
            "\t\t(opened with a ComPort function) or any stream value. }",
            "\tPeek { Required. Any status expression to control whether the byte",
            "\t\tbeing read should also be removed from the receive buffer. If Peek is",
            "\t\ttrue, the byte is not removed from the receive buffer. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SerLen": {
        "comments": [
            "{ Description: Serial Port Buffer Length. This function returns the",
            "\tnumber of bytes currently in the receive or transmit buffers. }",
            "{ This function may only appear in a script. }"
        ],
        "snippets": [
            "SerLen(",
            "\tPort, { Required. Any numeric expression for the serial port number",
            "\t\t(opened with a ComPort function) or any stream value. }",
            "\tOption { Required. Any status expression. If Option is true, the",
            "\t\tnumber of bytes in the transmit buffer is returned. If Option is",
            "\t\tfalse, the number of bytes in the receive buffer is returned. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SerOut": {
        "comments": [
            "{ Description: Send Serial Port Byte. This statement sends a byte to",
            "\tthe transmit buffer. }",
            "{ The byte will not be sent if the transmit buffer is full. }"
        ],
        "snippets": [
            "SerOut(",
            "\tPort, { Required. Any numeric expression for the serial port number",
            "\t\t(opened with a ComPort function) or any stream value. }",
            "\tValue { Required. Any numeric expression which gives the byte value to",
            "\t\tsend. Value must be in the range 0 to 255. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SerRcv": {
        "comments": [
            "{ Description: Serial Port Receive. This function returns a buffer",
            "\tcontaining a string read from the receive buffer. }",
            "{ The return value is a buffer containing Count bytes, unless fewer",
            "\tbytes were available in the receive buffer. This function may be used",
            "\tto flush the serial port receive buffer. }"
        ],
        "snippets": [
            "SerRcv(",
            "\tPort, { Required. Any numeric expression for the serial port number",
            "\t\t(opened with a ComPort function) or any stream value. }",
            "\tCount { Required. Any numeric expression, which gives the number of",
            "\t\tbytes to read. Value must be in the range 0 to 65500. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SerRTS": {
        "comments": [
            "{ Description: Sets or clears the RTS line on a serial communication",
            "\tport. }",
            "{ The corresponding ComPort statement must have the RTS parameter set",
            "\tto 2 or 3. }"
        ],
        "snippets": [
            "SerRTS(",
            "\tPort, { Required. Any numeric expression for the serial port number",
            "\t\t(opened with a ComPort function) or serial stream value (returned from",
            "\t\ta SerialStream function). }",
            "\tLevel { Required. TRUE if the RTS line is to be turned on or false if",
            "\t\tthe RTS line is to be turned off. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SerSend": {
        "comments": [
            "{ Description: Serial Port Send. This function writes a string to the",
            "\ttransmit buffer and returns the number of bytes written. }",
            "{ The return value is the actual number of buffer bytes successfully",
            "\tplaced in the transmit buffer (not including extra escape codes).",
            "\tMaxBytes should be transmitted, unless the end of the buffer is",
            "\tencountered, or a transmit buffer overflow occurs. }"
        ],
        "snippets": [
            "SerSend(",
            "\tPort, { Required. Any numeric expression for the serial port number",
            "\t\t(opened with a ComPort function) or any stream value. }",
            "\tBuffer, { Required. Any text expression to send. }",
            "\tMaxBytes, { Required. Any numeric expression which gives the maximum",
            "\t\tnumber of bytes to send. }",
            "\tEscape { Required. Any numeric expression which gives the byte value",
            "\t\tof an escape code. Whenever an escape code is encountered, two escape",
            "\t\tcodes will be transmitted. To be valid, Escape must be in the range of",
            "\t\t0 to 255. If the Escape parameter is greater than 0 or less than 256,",
            "\t\tit is transmitted with escape codes. If Escape is a value greater than",
            "\t\t255, it will perform in the same manner that it would if Escape were a",
            "\t\tvalue of 0. If the value of Escape is less than 0, it doesn't take",
            "\t\tinto account escape codes and the buffer is transmitted in its",
            "\t\tentirety, stopping at MaxBytes. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SerStrEsc": {
        "comments": [
            "{ Description: Serial Port Receive With Escape. This function reads",
            "\tthe receive buffer until a specified character (the 'escape'",
            "\tcharacter) is encountered, incrementing an offset counter for each",
            "\tcharacter read that is not the Escape character. It is assumed that,",
            "\twhere the message contains the Escape character as part of the",
            "\tmessage, that character is 'escaped' by being doubled. }",
            "{ Data is read until the receive buffer is empty, Buffer is full, or",
            "\tan Escape value is encountered. If two successive Escape values are",
            "\treceived, one is written to Buffer and reading continues normally.",
            "\tOtherwise, reading is terminated if the character following the Escape",
            "\tis not another Escape character. This is useful for reading the serial",
            "\tport receive buffer where the end of a message is signaled by a",
            "\tparticular byte sequence. The byte following the final Escape is",
            "\tplaced in the buffer. The value returned by the function increases",
            "\twith each character read. When a single instance of the Escape value",
            "\tis encountered, the return value is the negative of the final offset",
            "\tbefore reading in the Escape character (the Escape character is",
            "\tdiscarded). The return value can be used in successive SerStrEsc calls",
            "\tas the Offset parameter to fill Buffer until a Escape character is",
            "\tencountered. }"
        ],
        "snippets": [
            "SerStrEsc(",
            "\tBuffer, { Required. Any text variable to write the received data. This",
            "\t\ttext buffer must already exist. It could be created by another",
            "\t\tfunction such as MakeBuff, or by assignment of a text constant. }",
            "\tOffset, { Required. Any numeric expression which gives the offset from",
            "\t\tzero where SerStrEsc will start writing data to Buffer. If Offset is",
            "\t\tnegative, Offset is returned and nothing is done. }",
            "\tPort, { Required. Either a numeric expression for the serial port",
            "\t\tnumber (opened with a ComPort function) or any stream value. }",
            "\tEscape { Required. Any numeric expression which gives the terminating",
            "\t\tcharacter code. This must be in the range 0 to 255 to be valid. A",
            "\t\tvalue of -1 means that no such code exists. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SerString": {
        "comments": [
            "{ Description: Serial Port String Receive. This function reads the",
            "\treceive buffer until a string is encountered and returns the final",
            "\toffset in the buffer. }",
            "{ Data is read until the receive buffer is empty, Buffer is full, or",
            "\tString is encountered. This is useful for reading the serial port",
            "\treceive buffer where the end of a message is signaled by a particular",
            "\tbyte sequence. The optional return value is the final offset after",
            "\treading into Buffer, unless String was encountered, or Offset is",
            "\tnegative. If String was encountered, the return value is the negative",
            "\tof the final offset after reading in the String sequence. If Offset is",
            "\tnegative, Offset is returned and nothing is done. The return value can",
            "\tbe used in successive SerString calls as the Offset parameter to fill",
            "\tBuffer until String is encountered. }"
        ],
        "snippets": [
            "SerString(",
            "\tBuffer, { Required. Any text buffer to write the received data to. It",
            "\t\tmust already exist - either by creating it with a function such as",
            "\t\tMakeBuff, or assignment of a text constant. }",
            "\tOffset, { Required. Any numeric expression which gives the offset from",
            "\t\t0 where SerString will start writing data to Buffer. }",
            "\tPort, { Required. Any numeric expression for the serial port number",
            "\t\t(opened with a ComPort function) or any stream value. }",
            "\tString { Required. Any text expression which gives the terminating",
            "\t\tstring. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ServerList": {
        "comments": [
            "{ Description: Returns a pointer to an array of all available servers",
            "\tvisible from this workstation. }",
            "{ This function will return the resultant array of servers, or if",
            "\tnetwork problem is encountered or Domain is not found on the network,",
            "\tan error code will be returned. }"
        ],
        "snippets": [
            "ServerList(",
            "\tObsolete, { Parameter is no longer used, but is maintained for",
            "\t\tbackward compatibility with previous versions of VTScada. Set to 0. }",
            "\tDomain, { Required. Any text expression for the domain. If this is",
            "\t\tinvalid, the current domain will be used. }",
            "\tObsolete { Parameter is no longer used, but is maintained for backward",
            "\t\tcompatibility with previous versions of VTScada. Set to 0. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ServerSocket": {
        "comments": [
            "{ Description: Returns a server WinSock socket stream given a handle",
            "\treturned by a SocketServerStart function or an integer error code. }",
            "{ This function is used as part of a WinSocket-compliant server",
            "\tapplication. First, start a socket server using SocketServerStart.",
            "\tThen, use the SocketWait function as the trigger for an action script.",
            "\tUse this function in the script to connect a socket to the client",
            "\tapplication that triggered the SocketWait function. If the socket",
            "\tconnection is lost (client shutdown) the stream is closed and set to a",
            "\tvalue of 0 (no error code returned). If you experience difficulty with",
            "\tTCP/IP, a useful troubleshooting tool is the Windowsâ¢ diagnostic",
            "\t\"NetStat.exe\", used to display information about the network. Also of",
            "\tuse is the Windowsâ¢ \"Ping.exe\" diagnostic which can be used to test",
            "\tthe hardware connection. These files are normally found in the",
            "\tWindowsâ¢ directory. Consult the Windowsâ¢ documentation on their",
            "\tusage. }"
        ],
        "snippets": [
            "ServerSocket(",
            "\tHandle { Required. Any numeric expression for the handle returned by",
            "\t\tthe SocketServerStart function. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SerWait": {
        "comments": [
            "{ Description: Serial Port Wait. This function returns true when the",
            "\treceive buffer is a specified length. }",
            "{ The return value is true when at least Count or more bytes have been",
            "\treceived from Port. This is treated as a high priority function, and",
            "\tanything using the return value of SerWait will be executed as soon as",
            "\tCount or more bytes are received from Port. }"
        ],
        "snippets": [
            "SerWait(",
            "\tPort, { Required. Any numeric expression for the serial port number",
            "\t\t(opened with a ComPort function) or any stream value. }",
            "\tCount { Required. Any numeric expression, which gives the number of",
            "\t\tbytes to wait for. Value must be in the range 0 to 65500. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Set": {
        "comments": [
            "{ Description: Set tag value. Set is somewhat different from other",
            "\tfunctions in this reference. Set is a submodule that is a part of",
            "\tevery tag that is able to write a value. It is included in the general",
            "\tfunction reference only for ease of discovery. }",
            "{ As a general practice, you should use the existing VTScada widgets",
            "\tto create control objects on your pages. But, there may be times when",
            "\tyou need a custom button or other control that will write a value to a",
            "\tlinked tag. For this, you can use Set. }"
        ],
        "snippets": [
            "TabObject.Set(",
            "\tNewVal { The value to write to the tag. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetAllBlocks": {
        "comments": [
            "{ Description: This subroutine executes on the client. It accepts all",
            "\tof the blocks and data for a service. }",
            "{ SetAllBlocks executes on the client. It is called from",
            "\tGetServerChanges on the server via RPC. SetAllBlocks accepts all of",
            "\tthe blocks and data for a service. }"
        ],
        "snippets": [
            "SetAllBlocks(",
            "\tNDrivers, { Required. Any number of drivers in the Buffer. }",
            "\tBuffer, { Required. A stream containing all of the data. }",
            "\tVals, { Required. A packed array of driver values. }",
            "\tTimeStamp, { Required. A packed array of driver values. }",
            "\tAttrib { Required. A packed array of driver values. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetBit": {
        "comments": [
            "{ Description: Sets or clears a specific bit in a value and returns",
            "\tthe result. }",
            "{ This function is useful for saving a series of status values in a",
            "\tsingle short or long variable. If any argument is invalid, the return",
            "\tvalue is invalid. (See: Bitwise Parameters & Operations ) }"
        ],
        "snippets": [
            "SetBit(",
            "\tValue, { Required. Any numeric expression that gives the number to",
            "\t\tmodify the bit in. }",
            "\tBitNumber, { Required. Any numeric expression giving the bit number to",
            "\t\tset or clear. Bit 0 is the least significant bit. Legal values are",
            "\t\tfrom 0 to 31 inclusive. }",
            "\tOption { Required. Any status expression indicating whether the bit is",
            "\t\tto be set or cleared in the Value. A true indicates that the bit is to",
            "\t\tbe set (i.e. set to 1), and a false indicates that it is to be cleared",
            "\t\t(i.e. set to 0). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SetByte": {
        "comments": [
            "{ Description: Writes a single byte to a buffer. }",
            "{ This statement may only appear in a script. }"
        ],
        "snippets": [
            "SetByte(",
            "\tBuffer, { Required. Any buffer expression giving the buffer to set.",
            "\t\tThis buffer must already exist. It could be created by a function such",
            "\t\tas MakeBuff, or by assignment of a text constant. }",
            "\tOffset, { Required. Any numeric expression giving the offset from the",
            "\t\tstart of the buffer in bytes, starting from 0. }",
            "\tValue { Required. Any numeric expression giving the byte value to",
            "\t\twrite at Offset bytes from the beginning of Buffer. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetCertificateProperty": {
        "comments": [
            "{ Description: Sets a modifiable property on a stored certificate. }"
        ],
        "snippets": [
            "SetCertificateProperty(",
            "\tMachineStore, { Required Boolean. If TRUE (non-zero) attempts to find",
            "\t\tthe certificate in a store in the Local Computer certificate hive. If",
            "\t\tFALSE (zero) attempts to find a certificate in a store in the Current",
            "\t\tUser certificate hive. }",
            "\tStoreName, { Required text. The name of the store in which to search",
            "\t\tfor the certificate. }",
            "\tThumbprint, { Required. A binary buffer holding the SHA1 thumbprint of",
            "\t\tthe certificate to locate. }",
            "\tProperty, { Required integer. The identifier of a property to set.",
            "\t\tProperties are identified by numbers. }",
            "\tPropertyValue { Required text. The text to which the property will be",
            "\t\tset. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetClock": {
        "comments": [
            "{ Description: Sets the VTScada system clock and calendar. }",
            "{ This statement allows the synchronization of the VTScada system",
            "\tclock / calendar with another clock / calendar. All pending timers,",
            "\tand all built-in statements and functions that depend on the system",
            "\tclock / calendar are adjusted to match. This function can work only",
            "\twhen VTScada is run with administrative privileges. (Specifically,",
            "\tunder a Windows user with the SE_SYSTEMTIME_NAME privilege.) Caution",
            "\tis necessary, because VTScada will not adjust times and dates stored",
            "\tin variables or files (VTScada does not know if a variable contains a",
            "\tnumber or time or date). I/O drivers which time and date stamp results",
            "\twill not adjust themselves retroactively. However, as each new action",
            "\toccurs, the new time and date will be used. This is because I/O",
            "\tdrivers are not built-in functions, they are modules. }"
        ],
        "snippets": [
            "SetClock(",
            "\tDate, { Required. Any numeric expression giving the new date, in days",
            "\t\tsince 1 January 1970. }",
            "\tTime { Required. Any numeric expression giving the new time, in",
            "\t\tseconds since midnight. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetCodeText": {
        "comments": [
            "{ Description: Will modify a source code file to replace the text for",
            "\ta given CodeValue with the new text. }",
            "{ The given source file must be present and have read/write",
            "\tprivileges. This function does not immediately update the statementâs",
            "\tcurrently loaded module until that module is recompiled (usually upon",
            "\ta shutdown/restart cycle. }"
        ],
        "snippets": [
            "SetCodeText(",
            "\tCodeValue, { Required. Any code value giving the statement whose text",
            "\t\tis to be replaced.. }",
            "\tNewText { Required. Any text or a buffer }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetCurrentFilter": {
        "comments": [
            "{ Description: Applies a filter that you define to an Alarm List",
            "\twidget. }",
            "{ Any property that you do not want to filter for should be set to",
            "\tInvalid. }"
        ],
        "snippets": [
            "AlarmListObj.SetCurrentFilter(",
            "\tReserved, { Optional. Set to Invalid }",
            "\tTextInDescription, { Optional text. Filters for alarms with a matching",
            "\t\tdescription. Wild cards are allowed. }",
            "\tTextInDescription_Case, { Optional Boolean. True if the text in the",
            "\t\tdescription filter is case-sensitive. }",
            "\tTagName, { Optional text. Filter for alarms with a matching tag name.",
            "\t\tWild cards are allowed. }",
            "\tTagName_UniqueID, { Optional text. Filter for alarms with a matching",
            "\t\tunique ID value. }",
            "\tTagName_Children, { Optional Boolean. Set to TRUE to include children",
            "\t\tof the tags. }",
            "\tArea, { Optional text. Filter for alarms with a matching area value }",
            "\tPriority, { Required numeric. Filter for alarms with a matching",
            "\t\tpriority. }",
            "\tPriority_orHigher, { Required Boolean. Set to TRUEto include alarms",
            "\t\twith a priority higher than that specified. }",
            "\tUser, { Required text. Filter for alarms handled by the matching user.",
            "\t\t}",
            "\tReserved, { Set to Invalid. }",
            "\tAction, { Optional text. Filter for alarms with the matching action",
            "\t\tstring (Trip, Rearm, Shelve, etc) }",
            "\tDateRange_Start, { Optional timestamp. Filter for alarms later than",
            "\t\tthis date and time. }",
            "\tDateRange_End, { Optional timestamp. Filter for alarms earlier than",
            "\t\tthis date and time. }",
            "\tUnits, { Optional text. Filter for alarms with the matching units. }",
            "\tShowShelved, { Optional Boolean. True to show shelved alarm records. }",
            "\tShowConfig, { Optional Boolean. True to show configuration records. }",
            "\tSearchString { Optional text. Search field string. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetCurrentRecipe": {
        "comments": [
            "{ Description: Sets the current recipe and clears or updates the",
            "\tcurrent version }",
            "{ \"RecipeBook\" must be a reference to a Recipe Book tag object, not",
            "\tthe name of the tag. The Parameter tags will be updated automatically",
            "\tfor the newly set recipe. }"
        ],
        "snippets": [
            "RecipeBook.SetCurrentRecipe(",
            "\tNewVal, { Required text. The new value, to which CurrentRecipe should",
            "\t\tbe set. This must use the phrase key of the recipe name, not the",
            "\t\tdisplayed name in the current language. Refer to your language",
            "\t\t.CSVfile to find the matching phase key. Related information:",
            "\t\tLanguages }",
            "\tPickFirstVersion { Optional Boolean. If TRUE(the default), the version",
            "\t\tis set to the alphabetically first version. If FALSE, the version is",
            "\t\tset to the alphabetically last version. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetCurrentVersion": {
        "comments": [
            "{ Description: Sets the version of the current recipe }",
            "{ \"RecipeBook\" must be a reference to a Recipe Book tag object, not",
            "\tthe name of the tag. The Parameter tags will be updated automatically",
            "\tfor the newly set version of the current recipe. }"
        ],
        "snippets": [
            "RecipeBook.SetCurrentVersion(",
            "\tNewVal { Required numeric. The version to set. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetCursor": {
        "comments": [
            "{ Description: Sets the mouse cursor type for the window. }",
            "{ This statement will affect the cursor in the current window in which",
            "\tit is executed. The appearance of the cursor will depend on the",
            "\tcurrent Windowsâ¢ cursor settings. The changed cursor will only be",
            "\tdisplayed within the client area of the window. Changing the cursor",
            "\tfor a window will change the cursor for its child windows unless the",
            "\tchild windows use SetCursor to change their cursor. }"
        ],
        "snippets": [
            "SetCursor(",
            "\tType { Required. Usually a numeric expression giving the cursor type",
            "\t\tto display according to the following table, but may also be a text",
            "\t\targument giving the full path of the image file to be loaded as the",
            "\t\tcursor. Most of the common image files formats can be used. If giving",
            "\t\tthe image file, the size of the cursor will be the system default.",
            "\t\tType Cursor Type -1 Set the cursor to the parent window's cursor 0",
            "\t\tNormal Select (Standard arrow) 1 Busy (Waiting hourglass) 2 Text",
            "\t\tSelect (Text I-beam) 3 Precision Select (Crosshairs) 4 Unavailable",
            "\t\t(Slashed circle) 5 Move (Four-pointed arrow pointing north, south,",
            "\t\teast, and west) 6 Diagonal Resize 2 (Double-pointed arrow pointing",
            "\t\tnortheast and southwest) 7 Vertical Resize (Double-pointed arrow",
            "\t\tpointing north and south) 8 Diagonal Resize 1 (Double-pointed arrow",
            "\t\tpointing northwest and southeast) 9 Horizontal Resize (Double-pointed",
            "\t\tarrow pointing west and east) 10 Alternate Select (Vertical arrow) 11",
            "\t\tWorking in Background (Standard arrow and small hourglass) 12 Help",
            "\t\tSelect (Standard arrow and small hourglass) }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetDDEServer": {
        "comments": [
            "{ Description: Sets the DDE topic name for a window. }",
            "{ To ensure that proper DDE communication takes place, each window",
            "\tshould have its own unique topic name. The default topic name is the",
            "\ttitle of the window. }"
        ],
        "snippets": [
            "SetDDEServer(",
            "\tObject, { Required. Any object expression that identifies the window.",
            "\t\t}",
            "\tTitle { Required. Any text expression for the new topic name. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetDefault": {
        "comments": [
            "{ Description: Sets the default value for a variable. }"
        ],
        "snippets": [
            "SetDefault(",
            "\tVariable, { Required. Any expression for the variable value. }",
            "\tDefault { Required. Any expression for the new default value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SetDivert": {
        "comments": [
            "{ Description: Informs RPC Manager that the synchronization state of a",
            "\tservice has been sampled during synchronization, and service RPCs for",
            "\tthe specified client should be buffered until synchronization",
            "\tcompletes. Subroutine call only. }",
            "{ This module is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the module call must be prefaced by System\\RPCManager,",
            "\tand the System variable must be declared in AppRoot.src. This",
            "\tsubroutine is only called by the service instance that is server",
            "\tduring synchronization. It initiates service RPC caching on an",
            "\tauxiliary queue for the service. A service calls this after",
            "\tacquisition of the synchronizable state of a service to ensure that",
            "\tall service RPCs after the state has been sampled are preserved. This",
            "\talso turns off server RPC diversion, allowing server RPCs to flow. }"
        ],
        "snippets": [
            "\\RPCManager\\SetDivert(",
            "\tService, { Required. The name by which the service is known. }",
            "\tMachineName, { Required. A machine name or IP by which the",
            "\t\tsynchronizing client is known. }",
            "\tOptGUID { An optional GUID of the application in which the service",
            "\t\tinstance is located. The default is the application to which the",
            "\t\tcaller belongs. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetEditMode": {
        "comments": [
            "{ Description: Sets the graphics edit mode for a window. }"
        ],
        "snippets": [
            "SetEditMode(",
            "\tObject, { Required. Any object expression that identifies the window.",
            "\t\t}",
            "\tMode { Required. Any numeric expression for the new edit mode: Mode",
            "\t\tEdit Mode 0 Disable mouse actions 1 Enable mouse actions 2 Toggle",
            "\t\tmouse on/off }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SetEnable": {
        "comments": [
            "{ Description: Tell the Alarm Manager to enable or disable an alarm.",
            "\tThis function handles the attribution of changes to a user based on",
            "\tthe tag's metadata. Use instead of the older Enable function when",
            "\twriting new code. }",
            "{ The SetEnable subroutine always returns Invalid. }"
        ],
        "snippets": [
            "\\AlarmManager\\SetEnable(",
            "\tTagName, { Required. The name of the tag that owns the alarm. }",
            "\tAlarmObj, { Required. An instance of the alarm module. }",
            "\tDisable, { Boolean. Set TRUE to disable the alarm, FALSE to enable. }",
            "\tFeedBack { Numeric. Indicates the result of the action. Set to 1 if",
            "\t\tthe alarm was enabled or disable, and 0 if no operation was performed.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetFileAttribs": {
        "comments": [
            "{ Description: Sets the attributes of the specified file. }",
            "{ Four file attributes may be set by this statement. All attributes",
            "\twill be changed at once. }"
        ],
        "snippets": [
            "SetFileAttribs(",
            "\tFileName, { Required. Any text expression giving the name of the file.",
            "\t\tA known path alias for File-Related Functions may be provided in the",
            "\t\tform, :{KnownPathAlias}. }",
            "\tAttributes, { Required. Any numeric expression which designates the",
            "\t\tattributes to be set. This parameter is formed by adding together",
            "\t\tnumbers from the following table: Value Bit No Attribute 0 - Normal 1",
            "\t\t0 Read only 2 1 Hidden 4 2 System 8 3 Archive Optionally if mode is 1,",
            "\t\tmay be a timestamp. (See: Bitwise Parameters & Operations ) }",
            "\t0, { 1 }",
            "\t2, { 4 }",
            "\t8",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetHandle": {
        "comments": [
            "{ Description: Sets the position of graphics handles in a window. }"
        ],
        "snippets": [
            "SetHandle(",
            "\tObject { Required. Any object expression which identifies the window.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SetHelp": {
        "comments": [
            "{ Description: Sets the help file name and (optionally) the context",
            "\tidentifier for the window containing the specified object. }",
            "{ The setting of help file name and context for a window performed by",
            "\tthis statement overrides those specified by Window statement",
            "\tparameters. When this statement stops, the settings for an affected",
            "\twindow revert to the state [if any] set up by the Window statement",
            "\tparameters. If more than one of these statements references the same",
            "\twindow, the last one to start wins the race. The object is usually,",
            "\tSelf(); if this statement used in the context of a page module. }"
        ],
        "snippets": [
            "SetHelp(",
            "\tObject, { Required. The object value of a module instance that is",
            "\t\trunning inside the window whose help context is to be affected. }",
            "\tHelpFileName, { Required. The file name of the help file to use if the",
            "\t\tuser presses F1 while the specified window is the active window. If",
            "\t\tInvalid, the parent window of the specified window will be checked for",
            "\t\ta help file reference. This continues recursively until the top of the",
            "\t\twindow tree is reached. If no help file name is found, the default",
            "\t\tVTScada help file is used. The default help reference can be set by",
            "\t\tadding the variable \"WEBHelp\" to the [System] section of the Setup.INI",
            "\t\tfile, or by using the EnableHelp statement. The help file name may be",
            "\t\tany .CHM format help file, typically added to the VTScada installation",
            "\t\tfolder. (The .HLP format is obsolete and will not open in modern",
            "\t\tversions of Windows.) If you have created a NetHelp (DocToHelp format)",
            "\t\tor MadCapWebHelp (Flare format) help system, use the strings,",
            "\t\t\"MyHelpFolder\\NetHelp\" or \"MyHelpFolder\\MadCapWebHelp\" respectively,",
            "\t\twhere MyHelpFolder points to the folder containing your custom help",
            "\t\tsystem. To use the default VTScada Help system, enter simply:",
            "\t\t\\DevHelpFile without quotation marks. }",
            "\tHelpContext { Optional help context. If absent or invalid, but the",
            "\t\tHelpFileName is valid, then the default home page of the help file or",
            "\t\tsystem is displayed when the user presses F1. If valid and numeric,",
            "\t\tthe help file is searched for a topic with a matching alias number and",
            "\t\thelp is displayed for that topic. If there is no topic with a matching",
            "\t\talias ID value, then NetHelp and MadCapWebHelp formats will open to",
            "\t\tthe default home page. CHM formats will not open. If valid and",
            "\t\ttextual, and if the help file is .CHMformat, then the help file is",
            "\t\tsearched for an exact match on the text string in the topic index of",
            "\t\tthe help file. If there is more than one text match, the index is",
            "\t\tpositioned at the first partial string match. NetHelp and",
            "\t\tMadCapWebHelp formats will ignore a textual value for HelpContext and",
            "\t\topen to the default home page. If the HelpFileName parameter is",
            "\t\tinvalid, this parameter is ignored. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "SetINIProperty": {
        "comments": [
            "{ Description: Given an INIFiles structure, this function sets the",
            "\tproperty with the specified name and section to the specified value.",
            "\tDoes not affect the running system until WritePropertiesFile is",
            "\tcalled. }",
            "{ This function does not change the property in configuration - it",
            "\tonly changes the value in the INIFiles structure, which is obtained",
            "\tusing a call to ReadPropertiesFile. The standard usage is to obtain",
            "\tthe structure using ReadPropertiesFile, modify a value using",
            "\tSetINIProperty, then write the structure back to disk using",
            "\tWritePropertiesFile. The INIFiles structure returned is as follows:",
            "\tINIFiles Struct [ FileName { full path and file name to the settings",
            "\tfile }; OEM { TRUE if an OEM layer file }; Workstation { Name of the",
            "\tworkstation or invalid if global }; Layer { Instance of application",
            "\tlayer owning the file }; Dynamic { TRUE if a dynamic property };",
            "\tSections { Dictionary of sections each element of which is an array of",
            "\tProperty structures }; Changed { User sets to true if the file has",
            "\tbeen changed, initialized to false }; ] The INIProperty structure isâ¦",
            "\tINIProperty Struct [ Name { Variable name in the .startup/.dynamic",
            "\tfile }; Value { Simple value }; Comment { Text comment if present in",
            "\tthe file }; Hidden { TRUE if not visible in Edit Properties GUI }; ];",
            "\t}"
        ],
        "snippets": [
            "System.SetIniProperty(",
            "\tpProperties, { Required. An INIFiles structure. }",
            "\tSection, { Required. The name of the section in which the property",
            "\t\tbelongs. }",
            "\tName, { Required. The name of the property being modified. }",
            "\tValue, { Required. The value to set for the given property. }",
            "\tComment, { An optional text expression for the comment to write. If",
            "\t\tinvalid, the existing comment (if any) for the property will be used.",
            "\t\t}",
            "\tpFail { A pointer to a Boolean value. Will be set TRUE if the",
            "\t\toperation fails. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetInstanceName": {
        "comments": [
            "{ Description: Set the name of an instance of a module. }",
            "{ Retained variables allow each separate instance of a module to",
            "\tretain its value on disk between VTScada executions or between",
            "\tinstantiations of the module. Each instance must be assigned a name,",
            "\tand this SetInstanceName() function provides this facility. If storing",
            "\tuser-specific property settings, use the GetAccountID function to",
            "\tretrieve a unique identifier for the current user, to be used as part",
            "\tof the name. }"
        ],
        "snippets": [
            "SetInstanceName(",
            "\tInstance, { Required. The object value for which the name is to be",
            "\t\tassigned. Typically, Self() . }",
            "\tName { Required. The text string name of the instance. Must be unique.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SetInstanceRefBox": {
        "comments": [
            "{ Description: Programmatically, set the module reference box of a",
            "\tsingle module instance. }",
            "{ This function adds a way to set the module reference box of a single",
            "\tmodule instance programmatically. If a module has SetInstanceRefBox",
            "\tcalled for an instance of it, then SetModuleRefBox will not affect",
            "\tthat instance. Comparing the two functions, SetModuleRefBox provides a",
            "\tway to programmatically set the default size of a module whereas",
            "\tSetInstanceRefBox provides a way to set the size of a specific",
            "\tinstance of a module. In any of the parameters are omitted, or if one",
            "\tor more is invalid, the instance-specific reference box will be",
            "\tcleared. }"
        ],
        "snippets": [
            "SetInstanceRefBox(",
            "\tModule, { Required. Any expression for the object value of the",
            "\t\tinstance of the module. }",
            "\tLeft, { Required. Any numeric expression for the left side of the",
            "\t\treference box for Module's graphics. }",
            "\tBottom, { Required. Any numeric expression for the bottom side of the",
            "\t\treference box for Module's graphics. }",
            "\tRight, { Required. Any numeric expression for the right side of the",
            "\t\treference box for Module's graphics. }",
            "\tTop { Required. Any numeric expression for the top side of the",
            "\t\treference box for Module's graphics. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetKeyParam": {
        "comments": [
            "{ Description: The SetKeyParam function customizes various aspects of",
            "\ta session key's operations. The values set by this function are not",
            "\tpersisted to memory and can only be used with in a single session. It",
            "\tis the VTScada analog of the CryptoAPI SetKeyParam call. }",
            "{ The allowable values for Param vary with the key type. Certain modes",
            "\tof SetKeyParam take either a binary string of bytes or a text string.",
            "\tIt is up to script code to convert the parameter to the appropriate",
            "\trepresentation depending on the mode used. As an example, when setting",
            "\tthe IV, a binary string of bytes is expected, which is the same",
            "\trepresentation as a string in script code and this can be passed in",
            "\tdirectly. When setting ChainingMode, a text string with the desired",
            "\tmode is expected, for example âChainingModeECBâ. The underlying API",
            "\texpects this input as utf-16le characters, so script code must first",
            "\tconvert this to null terminated utf-16le. This can be achieved using",
            "\tTextEncode: SetKeyParam(Key, \"ChainingMode\",",
            "\tTextEncode(Concat(\"ChainingModeECB\", MakeBuff(1, 0)), Invalid,",
            "\t\"utf-8\", \"utf-16le\"), 0, ErrOut) }"
        ],
        "snippets": [
            "SetKeyParam(",
            "\tKey, { Required. The handle to the key for which values are to be set.",
            "\t\t}",
            "\tParam, { Required text or numeric. A parameter specifying the value to",
            "\t\tbe set. CAPI (Cryptography API) providers are specified using numeric",
            "\t\tidentifiers. Values are defined in WinCrypt.h CNG (Cryptography New",
            "\t\tGeneration) algorithm providers are specified using text identifiers.",
            "\t\t}",
            "\tValue, { An optional parameter containing the value to which the keys",
            "\t\tparameter is to be set. If omitted or invalid then the value 0 is",
            "\t\tused. Warning: Accidentally passing a value that is meant to be a",
            "\t\tnumber but is actually stored as text, \"42\", will cause an error. }",
            "\tFlags, { An optional parameter specifying the flags to be passed to",
            "\t\tCryptSetKeyParam. If omitted or invalid then the value 0 is used. }",
            "\tError { Required. An optional variable in which the error code for the",
            "\t\tfunction is returned. It has the following meaning: Error Meaning 0",
            "\t\tKey parameter successfully set. 1 Key or Param or Value parameters",
            "\t\tinvalid. X Any other value is an error from CryptSetKeyParam. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetLibrary": {
        "comments": [
            "{ Description: Sets the library for an application. }",
            "{ This statement may only appear in a script. }"
        ],
        "snippets": [
            "SetLibrary(",
            "\tModule, { Required. Any expression that identifies the module or",
            "\t\tobject for which the library is to be set. }",
            "\tLibraryName { Required. Any module expression that identifies the",
            "\t\tlibrary. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetModuleRefBox": {
        "comments": [
            "{ Description: Sets the default reference box for a module. }",
            "{ A module's reference box defines an area that will exactly enclose",
            "\tall active graphics (graphics currently displayed) in the module",
            "\tbefore any rotations and trajectories have been applied. A module",
            "\treference box, or MRB as it is sometimes called, is not a clipping",
            "\tregion and objects can and often will extend outside of their MRB as a",
            "\tresult of applied rotations or trajectories. When a module is",
            "\ttransformed, the transform is based on the size of the module as",
            "\tdetermined by its reference box. If the module switches states, the",
            "\tactive graphics will change, thereby changing the MRB for that module.",
            "\tThe result is that the transform will change such that graphic objects",
            "\twill grow or shrink, so that the module's reference box will always",
            "\texactly fill the reference box of the transform. In the case of",
            "\tgraphics that have had a rotation or trajectory applied to them, the",
            "\tgraphics will be transformed correctly, but the MRB may no longer",
            "\tcontain the objects in their modified positions. This statement allows",
            "\tthe user to set the reference box of a module to a constant size, so",
            "\tthat as graphics become active and inactive, the transform will not",
            "\tcause the graphic objects to grow and shrink - since the transform is",
            "\tbased on the module's reference box, and this is now fixed, the",
            "\ttransform will be similarly fixed. This call should be followed by a",
            "\tcall to SaveModule, otherwise the module reference box change will",
            "\tonly be written when the application containing this statement is",
            "\tstopped (in the case of base VTScada code this means when VTScada is",
            "\tshut down). Great care should be exercised when using this statement,",
            "\tsince the module reference box for the module itself is altered, not",
            "\tjust the instance in which the statement is called. All instances of",
            "\tthis module will have their reference box permanently changed. }"
        ],
        "snippets": [
            "SetModuleRefBox(",
            "\tModule, { Required. Any expression for the object value of the module.",
            "\t\t}",
            "\tLeft, { Required. Any numeric expression for the left side of the",
            "\t\treference box for Module's graphics. }",
            "\tBottom, { Required. Any numeric expression for the bottom side of the",
            "\t\treference box for Module's graphics. }",
            "\tRight, { Required. Any numeric expression for the right side of the",
            "\t\treference box for Module's graphics. }",
            "\tTop { Required. Any numeric expression for the top side of the",
            "\t\treference box for Module's graphics. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetModuleText": {
        "comments": [
            "{ Description: Sets the module's .SRC file information. }"
        ],
        "snippets": [
            "SetModuleText(",
            "\tModule, { Required. Any expression for the module or object value. }",
            "\tMode { Required. Any numeric expression for the value to set Mode",
            "\t\tValue to set 0 .SRC file name Mode 0 cannot be used to make a module",
            "\t\thave a .SRC file name in a different directory than where the module",
            "\t\tpresently resides. 1 Character offset to beginning of module",
            "\t\tdefinition 2 Size of module definition in characters 3 Character",
            "\t\toffset to first parameter declaration 4 Character offset to first",
            "\t\tvariable declaration 5 Character offset to first state 6 Character",
            "\t\toffset to first child module definition 7 Character offset to",
            "\t\tbeginning of variable declaration block 8 Size of variable declaration",
            "\t\tblock in characters 9 Character offset to beginning of parameter",
            "\t\tdeclaration block 10 Size of parameter declaration block in characters",
            "\t\t11 Full path and file name of .SRC file }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetOneParmText": {
        "comments": [
            "{ Description: Sets the text for one parameter of a function. }"
        ],
        "snippets": [
            "SetOneParmText(",
            "\tCode, { Required. Any expression for the code value of the statement.",
            "\t\t}",
            "\tIndex, { Required. Any numeric expression for the parameter number to",
            "\t\tchange, beginning with 0. }",
            "\tText { Required. Any text expression. The text in the .SRC file for",
            "\t\tthe parameter indicated by Code and Index will be replaced by Text. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetOPCData": {
        "comments": [
            "{ Description: Sets an item value in the VTScada OPC Server. }",
            "{ Returns TRUE if the item being updated is currently included in an",
            "\tOPC client group, or FALSE if not. }"
        ],
        "snippets": [
            "SetOPCData(",
            "\tBranchHandle, { Required. A handle returned from an OPCServer call. }",
            "\tItemName, { Required. The internal name for the OPC item being set. It",
            "\t\tdoes not necessarily correspond to the OPC item ID. It does correspond",
            "\t\tto what the OPCGetInternalName callback module returns for a given OPC",
            "\t\titem ID. }",
            "\tValue, { Required. The new value of the item (numeric or text). }",
            "\tQuality { Required. The quality of the value. Should be one of the",
            "\t\tfollowing: Quality Meaning 0x00 Bad 0x04 Bad - Configuration Error",
            "\t\t(The item has been deleted) 0x40 Uncertain - Questionable quality 0xD8",
            "\t\tGood but local override 0xC0 Good 0xC3 Good but constant value }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetOverride": {
        "comments": [
            "{ Description: Allows the overriding of OpCodes with a specified",
            "\tscript module within a static module tree. }",
            "{ Adds the ability to override a built-in function inside a module",
            "\twith a call to a different module. The purpose of this feature is to",
            "\thelp with testing of modules that use time, streams, etc. so that",
            "\tthese functions can be overridden with more controllable inputs. }"
        ],
        "snippets": [
            "SetOverride(",
            "\tTargetModule, { Required. Any expression that can be resolved to the",
            "\t\tmodule value that will be modified. }",
            "\tOpCode, { Required. Any numeric value that represents the built-in",
            "\t\tfunction to replace. }",
            "\tOverride, { The module value that will be called in place of OpCode.",
            "\t\tIf invalid or missing, any existing overrides of OpCode in",
            "\t\tTargetModule will be removed. }",
            "\tRecursive { Required. If true, the OpCode will be replaced with calls",
            "\t\tto the override function in all of the child modules of the target",
            "\t\tmodule. Otherwise, only the target module will be altered. Defaults to",
            "\t\ttrue. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetParameter": {
        "comments": [
            "{ Description: Sets a parameter in a statement. }",
            "{ This statement is used to modify the code for a function. Does not",
            "\thave proper support for longs; when the function is called to store a",
            "\t#VTypeLong, it interprets the parameter as a short. }"
        ],
        "snippets": [
            "SetParameter(",
            "\tStatement, { Required. Any expression for the statement value. May be",
            "\t\ta code value or a function value. }",
            "\tParmNum, { Required. Any numeric expression for the parameter number",
            "\t\tto change, beginning with 0. }",
            "\tParmType, { Required. Any numeric expression for the VTScada Value",
            "\t\tTypes of the new parameter. }",
            "\tValue { Required. Any expression for the new parameterâs value. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetParmText": {
        "comments": [
            "{ Description: Sets the text for the parameters of a function. }",
            "{ None }"
        ],
        "snippets": [
            "SetParmText(",
            "\tCode, { Required. Any expression for the code value of the statement.",
            "\t\t}",
            "\tText { Required. Any text expression. The text in the .SRC file for",
            "\t\tthe parameters of Code will be replaced by Text. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetParserParm": {
        "comments": [
            "{ Description: Sets the value for the last parameter on the parser",
            "\tstack and returns its own error code. }",
            "{ The return value is the error code for this function or 0 if no",
            "\terror. }"
        ],
        "snippets": [
            "SetParserParm(",
            "\tParserStack, { Required. Any expression for the parser stack value",
            "\t\treturned by the compiler. }",
            "\tOpCode { Required. Any numeric expression for the type of parameter to",
            "\t\tset as given by the following table Opcode Parameter Type 0 Integer 1",
            "\t\tDouble 2 Text 3 Variable }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetRefRect": {
        "comments": [
            "{ Description: Sets the first four constant parameters of a layered",
            "\tgraphic statement. }",
            "{ This statement affects the .SRC file as well. }"
        ],
        "snippets": [
            "SetRefRect(",
            "\tCodePointer, { Required. Any expression for the code pointer value",
            "\t\twhich identifies the graphics statement. }",
            "\tLeft, { Required. Any numeric expression for the left side coordinate.",
            "\t\t}",
            "\tBottom, { Required. Any numeric expression for the bottom side",
            "\t\tcoordinate. }",
            "\tRight, { Required. Any numeric expression for the right side",
            "\t\tcoordinate. }",
            "\tTop { Required. Any numeric expression for the top side coordinate. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SetRemoteValue": {
        "comments": [
            "{ Description: This subroutine sets the specified variable within an",
            "\tapplication instance on a workstation to the specified value.",
            "\tSubroutine call only. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. If the 16-byte binary format of the GUID is not known,",
            "\tthe GetGUID function may be used to obtain it. }"
        ],
        "snippets": [
            "\\RPCManager\\SetRemoteValue(",
            "\tVariableScope, { Required. The scope in which to find the variable. }",
            "\tVariable, { Required. The name of the variable. }",
            "\tValue, { Required. The value to set for the variable. Subject to the",
            "\t\trestriction of the type of values that can be set via RPC. }",
            "\tName, { Required. Any of the names or IPs by which the workstation is",
            "\t\tknown to the RPC Manager. }",
            "\tOptGUID { Any optional parameter that provides the GUID of the",
            "\t\tapplication in which the variable is to be set. The default is the",
            "\t\tapplication to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetReturnValue": {
        "comments": [
            "{ Description: Sets the return value of a specified object if the",
            "\tobject is not currently running a Return() statement in steady state.",
            "\t}",
            "{ Returns 1 if successful, 0 on failure, or Invalid if the first",
            "\tparameter cannot be resolved to an object. When an object is called",
            "\twithin an If statement and its return value has been set using",
            "\tSetReturnValue, then the objectâs return value will become Invalid",
            "\twhen the If statement's script executes. This can be seen with the",
            "\tautomatically resetting functions. This behavior is not desirable for",
            "\tsome called modules. The same goes for some modules that set their",
            "\treturn value from script using Return. For these, set the parameter",
            "\tResettable to FALSE. }"
        ],
        "snippets": [
            "SetReturnValue(",
            "\tObject, { Required. A reference to the object whose return value is to",
            "\t\tbe changed. }",
            "\tValue, { Required. The new return value. }",
            "\tResettable { Optional Boolean. Defaults to TRUE. If present and set to",
            "\t\tFALSE, the return value will not reset to INVALID until another Return",
            "\t\tstatement specifies otherwise. See comments. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetShelved": {
        "comments": [
            "{ Description: AlarmManager subroutine that handles the shelving and",
            "\tunshelving of alarms. }"
        ],
        "snippets": [
            "\\AlarmManager\\SetShelved(",
            "\tAlarmName, { Required. Unique name for the alarm. Typically the unique",
            "\t\tID, which can be obtained using GetAlarmName . If there are multiple",
            "\t\tbuilt-in alarms in a tag, the convention is to concatenate the",
            "\t\tUniqueID with a separator and a unique integer or string per alarm.",
            "\t\tFor example, Concat(Root\\UniqueID, \\AlarmSeparatorString, 0). }",
            "\tShelve, { Required. Boolean that indicates whether to shelve (TRUE) or",
            "\t\tunshelve (FALSE) the alarm. }",
            "\tExpiryTime, { Optional. The UTC timestamp for when the alarm should",
            "\t\tautomatically unshelve. }",
            "\tTimestamp, { Optional. The UTC timestamp of this event. Defaults to",
            "\t\tnow. }",
            "\tAccountID, { Optional. ID of the user who initiated this event.",
            "\t\tDefaults to the user currently signed in at the workstation. }",
            "\tDevice, { Optional. The name of the client device calling this",
            "\t\tfunction. }",
            "\tMachineID, { Optional. The machine ID of the workstation calling this",
            "\t\tfunction. }",
            "\tCustom, { Optional. Structure of custom fields to log. (Refer to Alarm",
            "\t\tAPI Structure Definitions ) }",
            "\tFromPLC, { Optional Boolean. Used only with the PLC Alarm tag. TRUE",
            "\t\twhen Shelve or Unshelve took place in the PLC. }",
            "\tAuto { Optional Boolean. TRUE if this is the result of an automated",
            "\t\taction such as that of unshelving on time expiry. Defaults to TRUE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetStateText": {
        "comments": [
            "{ Description: Sets the information about the text of a state in a",
            "\t.SRC file. }"
        ],
        "snippets": [
            "SetStateText(",
            "\tState, { Required. Any expression for the code value of the state. }",
            "\tMode, { Required. Any numeric expression for the parameter to set in",
            "\t\tthe state Mode Parameter to set 0 Character offset to beginning of",
            "\t\tstate 1 Size of state text in characters 2 Character offset to first",
            "\t\tstatement text }",
            "\tValue { Required. Any numeric expression giving the new value (as",
            "\t\tdetermined by Mode) for the state. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SetSubnetPriority": {
        "comments": [
            "{ Description: This module enables setting the network priority",
            "\tconfiguration during runtime. }",
            "{ Any setting done through this module is lost on restart of VTScada.",
            "\tThe behavior of SetSubnetPriority is undefined until the returned wait",
            "\tobject goes invalid. The provided values are expected to be valid CIDR",
            "\tClassless Inter-Domain Routing format strings. Overlapping subnet",
            "\taddresses are not supported, and have undefined behavior. If a value",
            "\tof Invalid is provided, the network priority configuration of the",
            "\tsystem is cleared and RPC will return to a round-robin configuration.",
            "\t(See: [RPCMANAGER-NETPRIORITY] Section ) }"
        ],
        "snippets": [
            "SetSubnetPriority(",
            "\tAddress { Optional. Invalid, or an array of strings containing the",
            "\t\tCIDR representation of the RPC subnets in the order of the desired",
            "\t\tnetwork priority configuration. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetSuppressed": {
        "comments": [
            "{ Description: AlarmManager subroutine that handles the suppressing",
            "\tand unsuppressing of alarms. }"
        ],
        "snippets": [
            "\\AlarmManager.SetSuppressed(",
            "\tAlarmName, { Required. Unique name for the alarm. Typically the unique",
            "\t\tID, which can be obtained using GetAlarmName . If there are multiple",
            "\t\tbuilt-in alarms in a tag, the convention is to concatenate the",
            "\t\tUniqueID with a separator and a unique integer or string per alarm.",
            "\t\tFor example, Concat(Root\\UniqueID, \\AlarmSeparatorString, 0). }",
            "\tSuppress, { Required. Boolean that indicates whether to suppress",
            "\t\t(TRUE) or unsuppress (FALSE) the alarm. }",
            "\tTimestamp, { Optional numeric. The UTC timestamp of this event.",
            "\t\tDefaults to now. }",
            "\tCustom, { Optional structure. A structure of custom fields to log. }",
            "\tFromPLC { Optional Boolean. Used only with the PLCAlarm tag. True if",
            "\t\tunsuppress events happened in the PLC. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetSyncComplete": {
        "comments": [
            "{ Description: Informs RPC Manager that service synchronization is",
            "\tcomplete as far as the local service instance is concerned. Subroutine",
            "\tcall only. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. }"
        ],
        "snippets": [
            "\\RPCManager\\SetSyncComplete(",
            "\tService, { Required. A name by which the service is known. }",
            "\tOptGUID, { An optional parameter indicating the GUID of the",
            "\t\tapplication in which the service instance is located. The default is",
            "\t\tthe application to which the caller belongs. }",
            "\tValue { An optional Boolean that will indicate the completion state (1",
            "\t\tdefault). }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SetTransfer": {
        "comments": [
            "{ Description: Sets the destination for an action. }",
            "{ none }"
        ],
        "snippets": [
            "SetTransfer(",
            "\tAction, { Required. Any expression for the code value of the action. }",
            "\tDestination { Required. Any expression for the code value of the",
            "\t\tdestination state. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SetTransitText": {
        "comments": [
            "{ Description: Sets the information about the document file definition",
            "\tof an action (predicate). }",
            "{ This statement may only appear in a script. }"
        ],
        "snippets": [
            "SetTransitText(",
            "\tAction, { Required. Any expression for the code value of the action.",
            "\t\tThis corresponds to value type VTScada Value Types . }",
            "\tMode { Required. Any numeric expression for the parameter to set in",
            "\t\tthe action: Mode Parameter 0 Script size in characters 1 Character",
            "\t\toffset of first script statement 2 Trigger size in characters 3",
            "\t\tCharacter offset to trigger 4 Destination size in characters 5",
            "\t\tCharacter offset to destination }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetUserLanguage": {
        "comments": [
            "{ Description: Changes the user's current session language to any of",
            "\tthe languages currently enabled in the application. Useful for dynamic",
            "\tlanguage switching. }",
            "{ Language codes in use within an application can be seen in the",
            "\tApplication Configuration dialog, Languages page. This function cannot",
            "\tbe used in tags because they will not have access to the user's",
            "\tcurrent session. }"
        ],
        "snippets": [
            "SetUserLanguage(",
            "\tLanguageCode { Required text. The code for the language you want to",
            "\t\tstart using (\"EN\", \"FR\", etc.) The language must be enabled for the",
            "\t\tapplication. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetVariableClass": {
        "comments": [
            "{ Description: Sets the class number of a variable and returns its",
            "\tprevious class number. }",
            "{ The class number for a variable defaults to 0. }"
        ],
        "snippets": [
            "SetVariableClass(",
            "\tVariable, { Required. Any expression for the Variable to set. }",
            "\tClass { Required. Any numeric expression for the class. It must be in",
            "\t\tthe range of 0 to 65535. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetVariableText": {
        "comments": [
            "{ Description: Sets information about the document file definition of",
            "\ta module. }"
        ],
        "snippets": [
            "SetVariableText(",
            "\tVariable, { Required. Any expression for the Variable value. }",
            "\tMode { Required. Any numeric expression for the variable to set: Mode",
            "\t\tExpression Variable 0 Character offset to variable declaration 1",
            "\t\tVariable declaration size in characters }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetVariableType": {
        "comments": [
            "{ Description: Sets the data type for the variable, so that only",
            "\tvalues of that data type can be stored in the variable. }",
            "{ Casts the variableâs value to the given type. If the cast cannot be",
            "\tperformed, the variableâs type will be set to Invalid. The",
            "\timplementation of this function is very similar to SetVarMetadata. }"
        ],
        "snippets": [
            "SetVariableType(",
            "\tVariable, { Required. A Variable handle, such as would be returned",
            "\t\tfrom the FindVariable or AddVariable functions. }",
            "\tValue { Required. The type that values put into this variable should",
            "\t\tbe cast to. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetVarMetadata": {
        "comments": [
            "{ Description: Every variable object contains an embedded value. This",
            "\tfunction is used to set those values. }",
            "{ Commonly used in conjunction with SetVarMetadata, FindVariable or",
            "\tAddVariable. Note that type data for each variable is stored within",
            "\tthe variable using metadata. }"
        ],
        "snippets": [
            "SetVarMetadata(",
            "\tVariable, { Required. A Variable handle, such as would be returned",
            "\t\tfrom the FindVariable or AddVariable functions. }",
            "\tValue { Required. Any value to store within the variableâs metadata. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetVicParms": {
        "comments": [
            "{ Description: Sets parameters for the VTScada Internet Client. }",
            "{ This module returns 1 if the parameters were set or Invalid if not.",
            "\tNote that the changes made by this statement do not affect current",
            "\tVTScada Internet Connections. Only new connections will use the",
            "\tchanged parameters. This statement is used internally by the VTScada",
            "\tSystem layer. Any changes made by this statement will be overwritten",
            "\tby the VTScada System layer on startup of the VTScada System layer and",
            "\tupon change of any setting in the Internet Client dialog. Setting",
            "\teither the ReadTimeout or the SessionTimeout to values outside the",
            "\trecommended guidelines can have unpredictable effects on the ability",
            "\tof clients to maintain a reliable communication session with the",
            "\tserver. For the Anywhere Client, all entries in the server list are",
            "\tautomatically added to the array of AllowedOrigins. Additional hosts",
            "\tmay be added by specifying HostName = 1 in the",
            "\t[Clients-AdditionalAllowedOrigins] section of Setup.INI. }"
        ],
        "snippets": [
            "SetVicParms(",
            "\tReadTimeout, { Required. This is the length of time in seconds that",
            "\t\tthe client will wait for the server to respond. Has a minimum of 5",
            "\t\tseconds and a default of 15. }",
            "\tSessionTimeout, { Required. This is the length of time in seconds that",
            "\t\tthe server will wait for the client to respond. Has a minimum of 10",
            "\t\tand a default of 60. }",
            "\tMode, { Required. VIC connection mode values are as follows (Defaults",
            "\t\tto 0) Mode Meaning 0 legacy 1 priority 2 sticky }",
            "\tAllowedOrigins { Optional. An array of the names of possible hosts",
            "\t\tthat Anywhere clients will connect from. The VIC server will not",
            "\t\tcommunicate with Anywhere clients running from hosts not in that",
            "\t\tarray. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetWSDL": {
        "comments": [
            "{ Description: Connects a Realm with a WSDL file and a set of VTScada",
            "\tmodules to enable a web service interface. }",
            "{ Linkage is first applied between the WSDL file and the VTScada",
            "\tmodules by generating an XML schema using the WSDL and the parameters",
            "\tprovided to this function. The Realm's address is then registered with",
            "\tthe VTScada HTTP server to connect the whole thing to the network.",
            "\tInclusion of the parameter, pResponse is recommended, for the sake of",
            "\tobtaining error messages when debugging. AuthenticationModule, if",
            "\tsupplied, must be a subroutine and have the following format:",
            "\tAuthModule(SOAPPackage, pUsername, pPassword, pPrivilege); where:",
            "\tSOAPPackage Is the SOAP payload as an XML node tree pUsername Is a",
            "\tpointer to a variable that the AuthModule should store the username",
            "\textracted from the SOAP payload. pPassword Is a pointer to a variable",
            "\tthat the AuthModule should store the password extracted from the SOAP",
            "\tpayload pPrivilege Is a pointer to a variable holding the privilege",
            "\tthat the user account must have in order to execute the methods",
            "\tcontained in the SOAP payload. The AuthModule must provide a",
            "\tprivilege, otherwise the request will be rejected. An example",
            "\tAuthModule might look like the following: ] Authenticate ( SOAPPackage",
            "\t{ The SOAP payload as an XML node tree }; pUsername { Where to store",
            "\tthe username }; pPassword { Where to store the password }; pPrivilege",
            "\t{ Where to store a privilege }; ) Authenticate [ If 1; [ *pUsername =",
            "\tSOAPPackage\\Envelope\\Header\\TestHeader\\#attribs[\"UserID\"]; *pPassword",
            "\t= SOAPPackage\\Envelope\\Header\\TestHeader\\#attribs[\"Password\"];",
            "\t*pPrivilege = AppPrivSOAP; Return(); ] }"
        ],
        "snippets": [
            "System.Webservice\\SetWSDL(",
            "\tWSDL File Path, { Required. This is a file path that indicates where",
            "\t\tthe WSDL file to be used for this service is located. The file path",
            "\t\tmust be encoded in URL format. Only one WSDL file can be declared and",
            "\t\tit must be passed in the first parameter. }",
            "\tRealm, { Required. The name of the VTScada Realm which will be used to",
            "\t\texpose the web service. Only one Realm can be specified and it must be",
            "\t\tpassed as the second parameter. }",
            "\tCall Scope, { Required. An instance (object) of the module in which",
            "\t\tall of the modules to be called are nested. This provides the scope",
            "\t\tfor the remote module calls by the WebService engine. Only one call",
            "\t\tscope object can be specified and it must be passed as the third",
            "\t\tparameter. }",
            "\tService, { Required. The name of the web service to be presented as",
            "\t\tportrayed in the WSDL's Service tag. This is a string that must match",
            "\t\tthe \"name\" attribute of the representative Service tag and tells the",
            "\t\tSetWSDL function where to start searching for data. }",
            "\tpResponse, { Optional. A pointer to a variable that will be loaded",
            "\t\twith the error description should SetWSDL fail. This description takes",
            "\t\tthe form of a single human readable string. The variable will be set",
            "\t\tto invalid if no error occurs. }",
            "\tXSDFileName, { Optional text. File name for the output XSD file. If",
            "\t\tnot specified, a temporary file is used. }",
            "\tWSDrvrVarName, { Optional text. Name of variable to be added into the",
            "\t\tcall scope. Useful if setting multiple WSDL/Realms into same scope. }",
            "\tAdditionalSchemas, { Optional dictionary. If used, contains a",
            "\t\tdictionary of additional schemas required by the WDSL document to",
            "\t\tallow correct validation of it. The keys of the dictionary are the",
            "\t\tnamespaces and the values are the paths to the files containing each",
            "\t\tschema. }",
            "\tAuthenticationModule { Optional text. If supplied, this is the name of",
            "\t\ta module, to be found in CallScope, that will be called when a SOAP",
            "\t\trequest for the SOAP service is made, in order to obtain",
            "\t\tauthentication credentials from the SOAP payload. See discussion in",
            "\t\tthe Comments section. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SetXLoc": {
        "comments": [
            "{ Description: Sets the X screen location of the locator (mouse). }",
            "{ This statement has no effect if the locator is not installed. }"
        ],
        "snippets": [
            "SetXLoc(",
            "\tX { Required. Any numeric expression giving the new X coordinate of",
            "\t\tthe locator (mouse) on the screen. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SetYLoc": {
        "comments": [
            "{ Description: Sets the Y screen location of the locator (mouse). }",
            "{ This statement has no effect if the locator is not installed. }"
        ],
        "snippets": [
            "SetYLoc(",
            "\tY { Required. Any numeric expression giving the new Y coordinate of",
            "\t\tthe locator (mouse) on the screen. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ShellTemperatureCorrection": {
        "comments": [
            "{ Description: Returns a coefficient to adjust the calculation of",
            "\tvolume within a tank. }",
            "{ The function computes a shell temperature correction factor based on",
            "\tthe American Petroleum Institute Manual of Petroleum Measurement",
            "\tStandards guidelines. This factor is used to correct volume",
            "\tmeasurements due to expansion or contraction of the tank from its",
            "\tmeasured reference volume. }"
        ],
        "snippets": [
            "ShellTemperatureCorrection(",
            "\tInsulated, { Required Boolean. A flag to indicate whether the tank is",
            "\t\tinsulated. }",
            "\tLiquidTemp, { Required numeric. The temperature of the liquid in the",
            "\t\ttank measured in degrees Fahrenheit. }",
            "\tAirTemp, { Required numeric. The ambient air temperature measured in",
            "\t\tdegrees Fahrenheit. }",
            "\tVolRefTemp, { Required numeric. The reference temperature for the",
            "\t\tmeasured volume measured in degrees Fahrenheit. }",
            "\tMaterial, { Optional numeric. An integer representing one of the",
            "\t\tfollowing materials: 0 for Carbon Steel 1 for 304 Stainless steel 2",
            "\t\tfor 316 Stainless steel 3 for Monel. Should be left blank if a custom",
            "\t\tcoefficient of linear expansion is used. }",
            "\tCoEIn, { Optional numeric. A coefficient of linear expansion measured",
            "\t\tin units of in/(in F) that will override the internal coefficient if a",
            "\t\tmaterial is selected. }",
            "\tErrorTag { Optional tag object. If provided, this will be set to the",
            "\t\terror value. Error values are as follows: 0 Success 1 No Material or",
            "\t\tCoE provided 2 No Liquid temperature provided 3 No Reference",
            "\t\ttemperature provided 4 Insulation parameter not specified 5 No Air",
            "\t\ttemperature provided }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ShiftStream": {
        "comments": [
            "{ Description: Inserts or deletes characters from a stream and returns",
            "\tits own error code. }",
            "{ The returned value is true if successful, false if not. }"
        ],
        "snippets": [
            "ShiftStream(",
            "\tStream, { Required. Any expression giving the stream to shift. }",
            "\tPos, { Required. Any numeric expression giving the stream position to",
            "\t\tseek to before beginning the shift. }",
            "\tOffset { Required. Any numeric expression giving the number of",
            "\t\tcharacters to insert. If this is negative, characters will be deleted.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ShowLexicon": {
        "comments": [
            "{ Description: Displays a SAPI text-to-speech engine lexicon dialog to",
            "\tpermit modification of pronunciation. This function will return",
            "\timmediately, and the lexicon window will be managed in its own thread,",
            "\tpreventing the calling thread from being blocked. }",
            "{ This function spawns a new thread to show the lexicon, so it will",
            "\tnot block other statements from executing. The pronunciations are",
            "\tstored in a file known as a \"Lexicon\". This file is stored in the",
            "\tVTScada directory. It is therefore available to all users and all",
            "\tVTScada applications. Changes made will affect all instances of",
            "\tVTScada applications that use speech. Each time this window is opened,",
            "\tthe lexicon is refreshed from disk. When the dialog is closed, the",
            "\tlexicon is written back to disk. On any single installation of",
            "\tVTScada, only one lexicon dialog will be displayed at any time,",
            "\tregardless of how many applications support speech. Any word may be",
            "\tentered into the lexicon with a custom pronunciation. A word is any",
            "\tset of letters with no whitespace (i.e. no spaces or tabs) within it.",
            "\tWords are case-sensitive. For example, if the word \"VTS\" is entered",
            "\twith the phonetic spelling \"V T S\", the way the word \"vts\" will sound",
            "\twill not be affected. }"
        ],
        "snippets": [
            "VoiceTalkStream\\ShowLexicon(",
            "\tVoiceTalkStream, { Required. A speech stream returned from VoiceTalk.",
            "\t\t}",
            "\tTitle { An optional parameter that is any text expression to display",
            "\t\tin the title bar of the dialog box. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ShowPage": {
        "comments": [
            "{ Description: When called with a Page Name, will cause that page to",
            "\tdisplay in the caller's display session context. }",
            "{ The page's window flags will have priority over the value of",
            "\tForceWin. A page configured to never open in a pop-up won't, even",
            "\tthough you set ForceWin to TRUE. The currently signed-in user's",
            "\tsecurity privileges are checked to ensure they have the right to view",
            "\tthe page before VTScada opens it. Returns the window object that calls",
            "\tthe page. To determine whether a page is already open before calling",
            "\tthis function use: NumInstances(\\PageModuleName) ... where",
            "\tPageModuleName is the name of the page module. Pages that are",
            "\tconfigured to always open in a window (popup) will always open in a",
            "\tnew window. Pages whose behavior is set as \"Normal\" will open in the",
            "\tsame window. }"
        ],
        "snippets": [
            "\\DisplayManager.ShowPage(",
            "\tPageName, { Required. Any text expression for the page to show. This",
            "\t\tis the name of the module as declared in AppRoot. If referencing a",
            "\t\tpage in a subordinate application, prepend the name of the subordinate",
            "\t\ttag. For example, \"SubTagName\\Overview\". }",
            "\tForceWin, { Optional. Any Boolean value, which if valid and true,",
            "\t\trequests a new window for the page. }",
            "\tParm0 through Parm99 { Optional. Any parameters to be passed to the",
            "\t\tpage as it is opened. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ShowPage2": {
        "comments": [
            "{ Description: Opens the page specified in PageName }",
            "{ ... }"
        ],
        "snippets": [
            "\\DisplayManager.ShowPage2(",
            "\tPageName, { Required. Name of page to be displayed. }",
            "\tPopup, { Optional boolean. If TRUE, it requests the page be opened as",
            "\t\ta popup if allowed. Defaults to FALSE. }",
            "\tPageParms, { Optional. Array of parameters for the Page. }",
            "\tDisplayRoot, { Optional. Represents the display device instance. }",
            "\tUpdateSamePopup, { Optional. If the current page is the same as",
            "\t\tNewPage but with different parms, set this to TRUE to update the",
            "\t\tcurrent page's parms, or FALSE to open a new popup. Defaults to FALSE.",
            "\t\t}",
            "\tDisplayIndex { Optional integer. In a multi-monitor environment, the",
            "\t\tindex value of the display instance on which the page should be",
            "\t\tdisplayed. Defaults to the caller's display index. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SilenceSound": {
        "comments": [
            "{ Description: This subroutine will silence the current sounding",
            "\talarm. }"
        ],
        "snippets": [
            "\\AlarmManager\\SilenceSound();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SimpleOpChange": {
        "comments": [
            "{ Description: Immediately deploys a single parameter change on a",
            "\tsingle tag without disturbing any other tag }",
            "{ While a direct call to OpChange is more efficient (it allows, for",
            "\texample, more than one parameter to be changed in the same operation),",
            "\tthis function has a parameter set more like the older calls. The",
            "\tobject value being returned will go invalid when the asynchronous",
            "\toperational change is complete. This function is declared in the VTS",
            "\tLibrary layer. }"
        ],
        "snippets": [
            "\\SimpleOpChange(",
            "\tTagName, { Required. The full name of the tag, in which the parameter",
            "\t\twill be changed. }",
            "\tNewValue, { Required. The new value for the parameter. }",
            "\tParameterName { Required. The name of the parameter that is to be",
            "\t\tchanged. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SimulateMouse": {
        "comments": [
            "{ Description: Sets the pointer location and then sends a button press",
            "\twith modifiers such as Ctrl, Shift or Alt. }",
            "{ Similar to SetXLoc and SetYLoc, but all in one, plus mouse buttons",
            "\tand modifier keys. Used primarily for testing. Only a single modifier",
            "\tcan be specified in any call. The key is not released automatically,",
            "\tbut rather is release when called again with bit 15 (0x8000) set. For",
            "\texample, SimulateMouse(x, x, 1) sets shift and SimulateMouse(x, x,",
            "\t0x8001) releases shift. }"
        ],
        "snippets": [
            "SimulateMouse(",
            "\tRoot, { Required. The window object within which the mouse should",
            "\t\tpoint. }",
            "\tmouseX, { Required. Any numeric expression for the horizontal location",
            "\t\tof the mouse pointer }",
            "\tmouseY, { Required. Any numeric expression for the vertical location",
            "\t\tof the mouse pointer. }",
            "\tMouseButtons, { Required. Any numeric expression for the mouse",
            "\t\tbutton(s) to be simulated. Bit Value Mouse Button -- 0 no buttons 2^0",
            "\t\t1 left down 2^1 2 right down 2^2 4 middle down 2^6 64 release any",
            "\t\tbuttons, as specified above, in the same call to SimulateMouse() 2^7",
            "\t\t128 delete key }",
            "\t--, { 2^0 }",
            "\t2^1, { 2^2 }",
            "\t2^6, { 2^7 }",
            "\tModifierKeys, { Required. Any numeric expression for the keyboard",
            "\t\tmodifier to be applied to the mouse click. See comments. Bit Value",
            "\t\tModifier Key -- 0 no key 2^0 1 shift 2^1 2 control 2^2 4 Alt 2^3 8",
            "\t\tLeft 2^4 16 Right 2^5 32 Up 2^6 64 Down }",
            "\t--, { 2^0 }",
            "\t2^1, { 2^2 }",
            "\t2^3, { 2^4 }",
            "\t2^5 { 2^6 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Sin": {
        "comments": [
            "{ Description: Returns the trigonometric sine of an angle in radians.",
            "\t}",
            "{ The returned value is a number in the range of -1.00 to +1.00. To",
            "\tconvert an angle from degrees to radians multiply by \\pi / 180 or",
            "\t(approximately) 0.0174533. This function does calculations with",
            "\tdouble-precision floating point values and does not support 64-bit",
            "\tintegers computations. }"
        ],
        "snippets": [
            "Sin(",
            "\tAngle { Required. Any numeric expression giving the angle in radians.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SiteDispParms": {
        "comments": [
            "{ Description: Parameter setting tool for Site List display options.",
            "\tWhile not part of the dialog library, and not starting with the letter",
            "\t\"p\", this is still classified as one of the PTools. Example shows",
            "\tparameters for a site. This function works equally for a connector. }"
        ],
        "snippets": [
            "\\SiteDispParms(",
            "\tParms, { Required. A pointer to the array of parameters. }",
            "\tSiteDispIdxs, { Required. DispParmsStruct of site parameter indices.",
            "\t\tInvalid entries in this structure are assumed to be missing",
            "\t\tparameters. The corresponding control will be grayed out. This",
            "\t\tparameter is typically created as follows in your module",
            "\t\tinitialization state. SiteDispIdxs = \\DispParmsStruct();",
            "\t\tSiteDispIdxs\\Latitude = \\#Latitude; SiteDispIdxs\\Longitude =",
            "\t\t\\#Longitude; SiteDispIdxs\\CustomDetailsPage = \\#CustomDetailsPage;",
            "\t\tSiteDispIdxs\\CustomMapIcon = \\#CustomMapIconParm;",
            "\t\tSiteDispIdxs\\SiteListDisplay = \\#SiteListDisplay;",
            "\t\tSiteDispIdxs\\InitZoom = \\#InitZoom; }",
            "\tSiteListOptions, { Required. A bitwise value controlling which Site",
            "\t\tList display options will be shown in the radio control. Bit 0",
            "\t\tAutomatic Bit 1 Site Bit 2 Folder Bit 3 Exclude Bit 4 Flat Folder",
            "\t\t(See: Bitwise Parameters & Operations ) }",
            "\tBit 1, { Bit 2 }",
            "\tBit 3, { Bit 4 }",
            "\tTrigger, { Required Boolean. A trigger to indicate ongoing editing. }",
            "\tReserved, { Required but unused. Set to Invalid. }",
            "\tParmsData, { Required. An array of parameter data. One of the",
            "\t\tparameters to your configuration folder module. }",
            "\tOldParms, { Required. An array of old parameters. One of the",
            "\t\tparameters to your configuration folder module. }",
            "\tOldParmsData, { Required. An array of old parameter data. One of the",
            "\t\tparameters to your configuration folder module. }",
            "\tParmsReady { Required. An array of \"Ready\" flags. One of the",
            "\t\tparameters to your configuration folder module. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "SizeWindow": {
        "comments": [
            "{ Description: Changes the visible size of a window on the screen. }",
            "{ This statement will change the size of the window to the size given.",
            "\tAny objects drawn in the window are not scaled - this resizing simply",
            "\tchanges the area displayed. Vertical and horizontal scroll bars will",
            "\tbe added to the window's borders so that the entire area can be",
            "\tviewed. If either VirtualWidth or VirtualHeight are specified, then",
            "\tboth must be provided. Attempting to set one without the other will",
            "\tcause the one you set to be ignored. If these parameters are omitted,",
            "\tthe virtual size of the window will be changed to whatever value is in",
            "\tthe Width and Height parameters. Use with care in pages: your code",
            "\twill run when the page is displayed in the Idea Studio and when the",
            "\tPage Menu page shows a live preview, possibly with undesirable results",
            "\tin those situations. In a page, the trigger for this function should",
            "\tbe a user action rather than anything that runs automatically. }"
        ],
        "snippets": [
            "SizeWindow(",
            "\tWin, { Required. Any expression which gives an object value contained",
            "\t\tin the window to size. Often, Self(). }",
            "\tWidth, { Required. Any numeric expression that gives the new width of",
            "\t\tthe window. }",
            "\tHeight, { Required. Any numeric expression that gives the new height",
            "\t\tof the window. }",
            "\tVirtualWidth, { Any numeric expression that gives the width inside the",
            "\t\tnew window in user coordinates (which may be pixels). If VirtualWidth",
            "\t\tis larger than the client area specified, a horizontal scroll bar",
            "\t\tappears. }",
            "\tVirtualHeight { Any numeric expression that gives the height inside",
            "\t\tthe new window in user coordinates (which may be pixels). If",
            "\t\tVirtualHeight is larger than the client area specified, a vertical",
            "\t\tscroll bar appears. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Slay": {
        "comments": [
            "{ Description: Stops a launched module, and possibly any parent",
            "\tmodules. }",
            "{ If Object is in the middle of executing script, it is immediately",
            "\tstopped. Slay and Return are the only statements that will cause a",
            "\tscript to terminate mid-way through its execution. Others like",
            "\tForceState will not. Slay() is the same as Slay(Self(), FALSE). }"
        ],
        "snippets": [
            "Slay(",
            "\tObject, { An optional parameter which is any object expression for the",
            "\t\tlaunched module. The default value of Object is Self(). }",
            "\tKillParents { An optional logical expression for the action to take.",
            "\t\tIf true, Slay will attempt to stop parents as well. It will step",
            "\t\tthrough and slay each parent object until it encounters a parent",
            "\t\tobject that is a called object. It will not slay that object or any of",
            "\t\tthat object's parents. The default value for KillParents is FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SocketAttribs": {
        "comments": [
            "{ Description: Returns information about a TCP/IP socket's attributes.",
            "\t}",
            "{ Used to determine the size of the output buffer limit on a socket,",
            "\tmodify it and obtain the amount of data currently in the output",
            "\tbuffers (i.e. not transmitted). Outbound buffers on a socket are",
            "\tlimited to a maximum of 64Mb (the default). Writing a large volume of",
            "\tdata to a socket faster than the socket can be drained could result in",
            "\texcessive memory usage, so exceeding the socket output buffer limit",
            "\twill result in the socket being closed and the memory being released.",
            "\tNote that the output buffer limit is NOT the same as the transmit",
            "\tbuffer size parameter on a SocketServerStart or ClientSocket",
            "\tstatement. Those parameters control the size of the buffers that the",
            "\toperating system uses for socket data transmission. The return value",
            "\tfor options 0 and 6 is the machine name stored as a text value. If the",
            "\tname cannot be found it will return the internet address of the socket",
            "\tas a text string. Options 6 through 9 differ from options 0 and 2",
            "\tthrough 4 only in the fact that they are buffered. This means that an",
            "\tinitial inquiry will be made to the operating system and stored in a",
            "\tbuffer, and after that, all inquiries will be handed the value stored",
            "\tin the buffer. This makes options 6 through 9 significantly faster",
            "\tthan the other options, however, any online changes to the",
            "\tworkstation's attributes will be not be discovered by options 6 to 9,",
            "\tonly 0 and 2 to 4 would return the new values. If using option 13 to",
            "\tactivate optional filters, note that (as of VTScada version 12.1)",
            "\tTLS/SSL and WebSocket are the only ones supported. Option 19 provides",
            "\tcontrol operations for protocol filters that support this: FilterID =",
            "\t\"WSKT\" Opcode == 0 (Activate). Data is ignored, if present. Opcode ==",
            "\t1 (Max Rx Time). Data is an integer number of seconds allowed between",
            "\tthe start of a WebSocket protocol frame and its end (range 1-65535).",
            "\tThis is to prevent a malicious actor from holding the port open.",
            "\tDefaults to 60 seconds. Opcode == 2 (Ping time). Data is an integer",
            "\tnumber of seconds during which if there is no communication on the",
            "\tconnection, a WebSocket protocol PING frame will be transmitted (range",
            "\t0-65535). A value of zero disables the PING. Defaults to zero. Opcode",
            "\t== 3 (Close time). Data is an integer number of seconds to wait after",
            "\tissuing a WebSocket protocol CLOSE frame before closing the connection",
            "\t(range 3-65535). This is to allow the remote end to transmit its CLOSE",
            "\tframe in response and is provided to prevent the remote end from",
            "\trefusing to send a CLOSE frame and hold the connection open. Defaults",
            "\tto 3. Opcode == 4 (Tx Max Frame Size). Data is an integer number of",
            "\tbytes that will be contained in a transmitted WebSocket protocol",
            "\tframe. Messages to be transmitted that are longer than this will be",
            "\tfragmented into multiple frames. Defaults to 4096. Note: Do not use an",
            "\texcessively large number, even though this is a 32-bit quantity.",
            "\tFilterID = \"RAW\" Opcode == 0 Data == Maximum size of the output buffer",
            "\tfor the socket, in bytes. If more data than this is pending",
            "\ttransmission from the output buffer, the socket will be closed and the",
            "\tstream will go Invalid. }"
        ],
        "snippets": [
            "SocketAttribs(",
            "\tStream, { Required. Any stream expression for the socket. If this",
            "\t\tisn't a socket stream, invalid is returned. }",
            "\tOption, { Required. Any numeric expression for the desired attribute:",
            "\t\tOption Attribute 0 Remote (text) workstation name 1 Remote port number",
            "\t\t2 Remote workstation IP 3 Local machine name 4 Local machine IP 5",
            "\t\tNumber of bytes currently in the output buffer 6 Remote (text)",
            "\t\tworkstation name (buffered) 7 Remote workstation IP (buffered) 8 Local",
            "\t\tmachine name (buffered) 9 Local machine IP (buffered) 10 Remote",
            "\t\tmachine Name (for incoming UDP datagrams) 11 Remote Port (for incoming",
            "\t\tUDP datagrams) 12 Remote IP (for incoming UDP datagrams) 13 Activate",
            "\t\toptional filters specified in ClientSocket() Supported only by TLS/SSL",
            "\t\tand WebSockets. For WebSockets, use \"WSKT\" as the protocol filter. No",
            "\t\tuser action is required for TLS/SSL. 14 UDP local port number 15",
            "\t\tSocket type (0 TCP, 1 UDP) 16 UDP destination IP 17 UDP is broadcast",
            "\t\tflag 18 Structure containing counters and timestamps of bytes",
            "\t\ttransmitted and received. 19 Protocol filter control. With option 19,",
            "\t\tthe FilterID and Opcode must be present. Depending on the FilterID and",
            "\t\tOpcode, additional Data may need to be provided. 20 Will return the",
            "\t\tcurrent output buffer limit size, in bytes. }",
            "\tFilterID, { Optional text. Set to \"WSKT\" for WebSockets. }",
            "\tOpCode, { Optional numeric. Refer to the list in the comments. }",
            "\tData { Optional text. Refer to the list in the comments. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SocketPingSetup": {
        "comments": [
            "{ Description: Starts the transmission of automatic keep-alive \"ping\"",
            "\tmessages through a socket stream. }",
            "{ SocketPingSetup is used to enable the regular transmission of a",
            "\tsmall packet (a \"ping\") down a socket stream. The ping is only",
            "\ttransmitted if there has been no other transmission for the specified",
            "\ttime interval. Pinging continues automatically until the socket stream",
            "\tis closed. This function is useful for keeping a connection open which",
            "\tmay be closed by the computer operating system due to inactivity. }"
        ],
        "snippets": [
            "SocketPingSetup(",
            "\tSocketStream, { Required. Any valid socket stream, typically obtained",
            "\t\tfrom a ClientSocket or ServerSocket. }",
            "\tPingStream, { Required. A stream which contains the \"ping\" packet to",
            "\t\tbe transmitted. }",
            "\tTimeInterval { Required. The interval, in seconds, between",
            "\t\ttransmissions. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SocketServerEnd": {
        "comments": [
            "{ Description: Ends a TCP/IP socket server. }"
        ],
        "snippets": [
            "SocketServerEnd(",
            "\tHandle { Required. Any numeric expression for the socket server handle",
            "\t\tas returned from a SocketServerStart. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SocketServerStart": {
        "comments": [
            "{ Description: Starts a TCP/IP or UDP socket server and returns a",
            "\thandle to it. }",
            "{ If the parameters are all valid and the socket function fails a",
            "\tnegative error code is returned. Error codes can be found in",
            "\tClientSocket . If the handle to the socket is orphaned, the equivalent",
            "\tto a SocketServerEnd is performed RecieveLen and NoDelay apply to",
            "\tstreams created by inbound connections (TCP) or datagrams (UDP), not",
            "\tto the listener. The handle returned can be used by the SocketWait or",
            "\tSocketServerEnd functions. }"
        ],
        "snippets": [
            "SocketServerStart(",
            "\tFamily { Required. Any numeric expression for the protocol family",
            "\t\tFamily Description 0 TCP/IP 1 UDP }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SocketWait": {
        "comments": [
            "{ Description: Wait for Socket Connect. This function returns true",
            "\twhen a client connects to a socket offered by a socket server. }",
            "{ For a TCP connection, SocketWait triggers each time a new inbound",
            "\tconnection is made. For UDP, SocketWait triggers each time a new",
            "\tdatagram arrives for which there is no existing stream to store it in.",
            "\tA UDP datagram is stored in an existing stream if it is from the same",
            "\tIP and if it is received on the same port as the other datagrams in",
            "\tthat stream. The UDP stream can be empty (having been drained) but",
            "\tstill be regarded as âbelongingâ to the IP that instantiated the",
            "\tstream. }"
        ],
        "snippets": [
            "SocketWait(",
            "\tHandle { Required. Any numeric expression for the socket server handle",
            "\t\tas returned from a SocketServerStart. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Sort": {
        "comments": [
            "{ Description: Allows the sorting of an array subsection according to",
            "\tthe order of another array. }",
            "{ Sort allows the re-ordering of a group of related arrays according",
            "\tto the order of a key array. If KeyArray and SortArray are the same",
            "\tarray, the array is arranged in order. Be aware that sorting is a",
            "\trelatively time-consuming operation. It should not be active during",
            "\ttime-critical control, etc. Do not mix sorting modes. Some code may",
            "\trely on sorting to be basic case-insensitive alphabetical",
            "\t(non-locale-aware) order, while other code may expect it to be",
            "\tlocale-aware. Mixing these is likely to produce errors. In particular,",
            "\tif you Sort an array and then use TextSearch on it, you must ensure",
            "\tthat each uses the same sorting mode with the same locale. This",
            "\tstatement performs a \"partition sort\", using an element of the array",
            "\tas the dividing point, such that all other elements are divided into",
            "\tthose greater than and less than the dividing element. Each partition",
            "\tis then recursively sorted. As of VTS version 7.5, the first and",
            "\tmiddle elements of the array are swapped, making the middle element",
            "\tthe partitioning element. This has increased performance gains for",
            "\tarrays whose sizes reach 100,000 or more elements. This statement is",
            "\tuseful when used with PlotXY. For example, if there are two arrays,",
            "\tone having X-value and the other Y-values, of 100 data values that",
            "\tneed to be viewed plotted against each other, the Sort statement could",
            "\tre-order the arrays so that the X values increased from left to right",
            "\tand the Y values stayed with their corresponding X values (see",
            "\texample). The order of the statements is significant. If the sort of",
            "\tthe X array were done first, the sort of the Y array would have no",
            "\teffect since the X array would already be in order. In general, the",
            "\tkey array should be sorted last. The statement uses a minimum of eight",
            "\tbytes of temporary memory for each numeric array element in the sort,",
            "\tor more if the element has been declared to be text. This means that",
            "\tat least 8 * N bytes of memory is required, which may be of concern if",
            "\tN is large and the amount of free memory is minimal. Invalid array",
            "\tentries in the key array are grouped to the end of the array. }"
        ],
        "snippets": [
            "Sort(",
            "\tKeyArrayElem, { Required. An element of the array to be used as the",
            "\t\treference for the sort. This array is copied into temporary memory",
            "\t\tspace. The copy is then arranged in order along with the SortArray,",
            "\t\tbut the original copy of the key array is left unchanged after the",
            "\t\tsort unless it is the same array as SortArray. If the key array",
            "\t\tcontains text strings, the TypeText parameter should be set to true",
            "\t\t(non-0) to enable alphabetical ordering, otherwise each element will",
            "\t\tbe converted to a number before use as a sort key. }",
            "\tSortArrayElem, { Required. Any array element giving the starting point",
            "\t\tin the array for the reordering. The subscript for the array may be",
            "\t\tany numeric expression. If processing a multidimensional array, the",
            "\t\tusual rules apply to decide which dimension should be used. The new",
            "\t\torder for SortArray will be according to the order of the ordered copy",
            "\t\tof KeyArray. The values in this array may be of any type. }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to use in the sort. If this number is greater than either of",
            "\t\tthe two array sizes, the number of elements used in the sort will be",
            "\t\tthe lesser of the two array sizes. The maximum value for N is the size",
            "\t\tof the array. If the sum of N plus the starting element is greater",
            "\t\tthan the size of the array, this computation will \"wrap-around\" and",
            "\t\tresume at element 0. For example if you sort 1,3,2 in ascending order",
            "\t\tstarting at element 2 with an N equal to 3, the result would be 3,1,2.",
            "\t\tDemo[0] = 1; Demo[1] = 3; Demo[2] = 2; Sort(Demo[0], Demo[2], 3, 0);",
            "\t\tThis may be useful in rare circumstances. }",
            "\tDescending, { Required. Any numeric expression that indicates the",
            "\t\tordering sequence to use in the sort. If it is true (non-0), the sort",
            "\t\twill be in descending (decreasing) order. If it is false (0), the sort",
            "\t\twill be in ascending (increasing) order. }",
            "\tTypeText, { Optional. A numeric expression that controls the type of",
            "\t\tsort according to the following table. Defaults to zero - numeric",
            "\t\tsorting. TypeText Sort Performed 0 Numeric sort 1 Alphabetic sort 2",
            "\t\tTag hierarchy sort (Sorts tag names based on hierarchy rather than",
            "\t\tusing a pure alphabetic sort.) 3 Lexicographical sort. If set,",
            "\t\tconsider also setting a locale (7th parameter) or linguistic CmpFlag.",
            "\t\t4 Tag hierarchical, lingual sort }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { CaseInsensitive }",
            "\tLocale, { Optional. A valid locale name (en-US or fr-FR). Additional",
            "\t\tmodifiers are also allowed such as zh-CN_stroke (Chinese sorting using",
            "\t\tstroke order) The case insensitive flag ignored if doing a locale",
            "\t\tsort. As an alternative, set one of the following in the",
            "\t\tComparisonFlags parameter: #LINGUISTIC_IGNORECASE or #NORM_IGNORECASE.",
            "\t\t}",
            "\tCmpFlags { A set of flags directing how the comparison should be done,",
            "\t\tas described in",
            "\t\thttps://docs.microsoft.com/en-us/windows/desktop/api/stringapiset/nf-stringapiset-comparestringex",
            "\t\tSupported flags include: #NORM_IGNORECASE #NORM_IGNORENONSPACE",
            "\t\t#NORM_IGNORESYMBOLS #LINGUISTIC_IGNORECASE #LINGUISTIC_IGNOREDIACRITIC",
            "\t\t#NORM_IGNOREKANATYPE #NORM_IGNOREWIDTH #NORM_LINGUISTIC_CASING",
            "\t\t#SORT_DIGITSASNUMBERS #SORT_STRINGSORT }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SortArray": {
        "comments": [
            "{ Description: Sorts an array of arrays based upon the key information",
            "\tprovided by the second parameter. The array is sorted in-place. }",
            "{ This function rapidly sorts vectors of records based upon one or",
            "\tmore keys that can be distributed across the records. The Array",
            "\tparameter cannot be a multi-dimensional array. No sort will happen if",
            "\tyou attempt to process a multi-dimensional array. The elements of",
            "\tSortKeys are as follows: {0} Column. The field index where the key is",
            "\tlocated within each record. {1} Type: 0 => Numeric, 1 => Case",
            "\tinsensitive text 2 => Case sensitive text or raw binary. 3 => Locale",
            "\tsort {2} Descending: TRUE to sort from greatest to least. FALSE to",
            "\tsort from least to greatest. The value in a field is cast to the",
            "\tselected Type for the purposes of the sort, but is unchanged in the",
            "\tresulting array. The SortKeys parameter may be an array of SortKey",
            "\tstructures. In this case, the array is sorted by multiple keys",
            "\tsimultaneously, with the first SortKeys element representing the",
            "\thighest-priority key and so on. This is shown in the third example.",
            "\tInvalid Data[i][Column] values would be sorted to the end (i.e. higher",
            "\tindex values) regardless of the value of Descending. }"
        ],
        "snippets": [
            "SortArray(",
            "\tArray, { Required. The array to be sorted. The array must contain",
            "\t\tvalues, each of which must be either an array of simple values",
            "\t\t(numbers or text), or a record in the form of an array itself. }",
            "\tControl, { Optional. Sets the column to be sorted and the type of sort",
            "\t\tto be performed. See the Examples section of this topic.",
            "\t\tSystem.SortKeys Struct [ Column; Type; Descending; ]; Defaults to,",
            "\t\tColumn: 0, Type: Numeric, Descending: FALSE This module is a member of",
            "\t\tthe System Library, and must therefore be prefaced by \\System. as",
            "\t\tshown in the \"Format\" section. If your application predates version",
            "\t\t11.2, use the backslash notation rather than dot: \\System\\ }",
            "\tStart, { Optional. The array index where sorting is to begin. If not",
            "\t\tspecified, array is sorted from the first element. }",
            "\tEnd, { Optional. The last array element to sort. If not specified,",
            "\t\tarray is sorted to the last element. No sorting will be done if End",
            "\t\tcomes before Start. }",
            "\tLocale, { Optional. A valid locale name (en-US or fr-FR). Additional",
            "\t\tmodifiers are also allowed such as zh-CN_stroke (Chinese sorting using",
            "\t\tstroke order) The case insensitive flag ignored if doing a locale",
            "\t\tsort. As an alternative, set one of the following in the",
            "\t\tComparisonFlags parameter: #LINGUISTIC_IGNORECASE or #NORM_IGNORECASE.",
            "\t\t}",
            "\tCmpFlags { A set of flags directing how the comparison should be done,",
            "\t\tas described in",
            "\t\thttps://docs.microsoft.com/en-us/windows/desktop/api/stringapiset/nf-stringapiset-comparestringex",
            "\t\tSupported flags include: #NORM_IGNORECASE #NORM_IGNORENONSPACE",
            "\t\t#NORM_IGNORESYMBOLS #LINGUISTIC_IGNORECASE #LINGUISTIC_IGNOREDIACRITIC",
            "\t\t#NORM_IGNOREKANATYPE #NORM_IGNOREWIDTH #NORM_LINGUISTIC_CASING",
            "\t\t#SORT_DIGITSASNUMBERS #SORT_STRINGSORT }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Sound": {
        "comments": [
            "{ Description: Plays a multimedia sound file as installed in the",
            "\toperating system. }",
            "{ This statement may only appear in a script. When a sound is started",
            "\tusing the DevID parameter, only option value 8 is significant. If a",
            "\tsound is started using the DevID parameter, then the return value from",
            "\tthe function is required to stop that sound. }"
        ],
        "snippets": [
            "Sound(",
            "\tFile, { Required. Any text expression giving the file name to play. If",
            "\t\tthe extension is omitted, the default extension \".WAV\" is added. If an",
            "\t\tempty string is provided here, then any currently playing sound is",
            "\t\tstopped. }",
            "\tOption { Required. Any numeric expression, which indicates how to play",
            "\t\tthe file. Option is found by adding together numbers from the",
            "\t\tfollowing table. Option Bit No. How to play file 1 0 Play",
            "\t\tasynchronously (don't wait) 2 1 Don't use default sound if file",
            "\t\tmissing 4 2 Reserved for future use 8 3 Loop the sound until next",
            "\t\tSound function executed 16 4 Don't stop any currently playing sound If",
            "\t\tOption is 0, VTScada will halt all execution until the sound is",
            "\t\tfinished (this isn't recommended). Add 1 to avoid this. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Spawn": {
        "comments": [
            "{ Description: Runs another Windowsâ¢ program. }",
            "{ Using the Spawn statement does not stop the execution of VTScada.",
            "\tWithin an Anywhere Client session, this function can be used to open a",
            "\tweb link but not launch a program. }"
        ],
        "snippets": [
            "Spawn(",
            "\tCommand { Required. The text string that will launch a program. If the",
            "\t\tname of a file is provided, the program associated with the given file",
            "\t\textension will be launched. Similarly, if a URL is provided, a web",
            "\t\tbrowser will be launched. Command should also contain any parameters",
            "\t\tnecessary for the execution of the program. These parameters must be",
            "\t\tdelimited from the command and other parameters by one or more space",
            "\t\tcharacters. If the command contains spaces, the command must be",
            "\t\tsurrounded in double quote characters. (see examples). If you wish to",
            "\t\tinclude environment variables in your command, you must spawn the",
            "\t\tcommand processor, CMD to run that command. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Speak": {
        "comments": [
            "{ Description: Executes on the speech thread to speak the supplied",
            "\ttext through a specified SAPI text-to-speech stream. }",
            "{ This function returns the error code resulting from issuing the",
            "\tcommand to the speech engine, or zero if no error was encountered.",
            "\tThis function will execute and immediately return, sending the text to",
            "\tthe speech engine to be spoken asynchronously. Asynchronous speech",
            "\twill not block the calling thread. You can determine when a section of",
            "\ttext has completed speaking by inserting bookmarks into the text that",
            "\tcan then be watched for in the VoiceTalk BookmarkNum parameter.",
            "\tMultiple VoiceTalk\\Speak statements can be issued on SAPI",
            "\ttext-to-speech streams without blocking. The text will be queued up",
            "\tand will be spoken in the order it is submitted. The text speech queue",
            "\twill be terminated immediately if the SAPI text-to-speech stream is",
            "\tclosed. If speaking simultaneously on several streams, all to the same",
            "\toutput device, the thread that is currently speaking will continue to",
            "\tdo so until all its queued text has been spoken, even if the other",
            "\tthread issues VoiceTalk\\Speak calls during this time. The text string",
            "\tspoken can optionally contain embedded \"control tags\" that affect the",
            "\tway that the text is spoken. These control tags are in the form of",
            "\tembedded XML. For example, <EMPH> and </EMPH> emphasizes the words",
            "\tbetween the tags, and <BOOKMARK MARK=\"32\"/> sets the SAPI",
            "\ttext-to-speech stream current bookmark number to 32. In order for",
            "\tembedded XML to be parsed, either the text stream must be enabled to",
            "\tprocess XML (by passing a value for Flags that includes the value 8),",
            "\tor the text string itself must begin with an angle bracket (<). For a",
            "\tcomplete list of embedded control tags, please refer to the Microsoft",
            "\tSAPI 5.1 speech documentation. }"
        ],
        "snippets": [
            "VoiceTalkStream\\Speak(",
            "\tVoiceTalkStream, { Required. A speech stream returned from VoiceTalk",
            "\t\tthat you wish to speak the given phrase. }",
            "\tText, { Required. Any text expression that will be spoken on a",
            "\t\tspecified stream. }",
            "\tFlags { An optional parameter to specify speaking flags to the stream.",
            "\t\tAll text will be spoken asynchronously (i.e. the function will not",
            "\t\twait for the speech to complete speaking). Flags can be used to",
            "\t\tspecify other parsing of the text. The values for Flags can be any",
            "\t\tcombination of the following: Flags Meaning 0 Use default settings",
            "\t\t(speak asynchronously) 1 Speak asynchronously. 2 Purge speaking queue",
            "\t\tbefore speaking text. This cancels all pending and current speech, and",
            "\t\tthen immediately begins speaking the new text. 4 Regard the Text",
            "\t\tparameter as a filename, and speak the contents of that file. 8 Parse",
            "\t\ttext for XML markup. 16 Do not parse text for XML markup. 32 Any XML",
            "\t\tstate changes in the text will persist across any future",
            "\t\tVoiceTalk\\Speak calls. 64 Punctuation characters should be spoken",
            "\t\t(i.e. \"Hello, there.\" would be spoken as \"Hello comma there period\").",
            "\t\t(As indicated above, an Invalid value, or a value of \"0\" or \"1\" for",
            "\t\tthe Flags parameter will have the same result.) }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SpeakToFile": {
        "comments": [
            "{ Description: Executes on the speech thread to speak the supplied",
            "\ttext to a .wav format audio file. }",
            "{ The text may include embedded XML tags as described in the",
            "\tdocumentation for the SAPI speech engine being used. Multiple calls to",
            "\tthis function will be queued. Calls to this module will fail if the",
            "\tVoiceTalk instance was not configured for VTSFileOutput. }"
        ],
        "snippets": [
            "VoiceTalkStream\\SpeakToFile(",
            "\tVoiceTalkStream, { Required. A speech stream returned from VoiceTalk",
            "\t\tthat you wish to speak the given phrase. }",
            "\tPhrase, { Required. Any text expression that will be spoken on a",
            "\t\tspecified stream. This is limited to the number of characters",
            "\t\tspecified by MaxSpeakToFileLength , defaulting to 1000. }",
            "\tFlags { Required. A parameter to specify speaking flags to the stream.",
            "\t\tAll text will be spoken asynchronously (i.e. the function will not",
            "\t\twait for the speech to complete speaking). Flags can be used to",
            "\t\tspecify other parsing of the text. The values for Flags can be any",
            "\t\tcombination of the following Flags Meaning 0 Use default settings",
            "\t\t(speak asynchronously) 1 Speak asynchronously. 2 Purge speaking queue",
            "\t\tbefore speaking text. This cancels all pending and current speech, and",
            "\t\tthen immediately begins speaking the new text. 4 Regard the Text",
            "\t\tparameter as a filename, and speak the contents of that file. 8 Parse",
            "\t\ttext for XML markup. 16 Do not parse text for XML markup. 32 Any XML",
            "\t\tstate changes in the text will persist across any future",
            "\t\tVoiceTalk\\Speak calls. 64 Punctuation characters should be spoken",
            "\t\t(i.e. \"Hello, there.\" would be spoken as \"Hello comma there period\").",
            "\t\tAs indicated above, an Invalid value, or a value of \"0\" or \"1\" for the",
            "\t\tFlags parameter will have the same result. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Spinbox": {
        "comments": [
            "{ Description: Draws a spinbox with optional label. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ The size of the spinbox is constant, with X1, Y1and",
            "\tX2, Y2 defining the position of the check box and its label. For any",
            "\toptional parameter that is to be set, all optional parameters",
            "\tpreceding the desired one must be present, although they may be",
            "\tinvalid. The trigger parameter provides an indication that something",
            "\thas changed and therefore the user should be prompted to save changes",
            "\tbefore exiting. }"
        ],
        "snippets": [
            "System.Spinbox(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the spinbox and its label. }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the spinbox. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the spinbox and its label opposite to X1. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of the top or bottom of the spinbox, whichever is the opposite",
            "\t\tto Y1. }",
            "\tVariable, { Required. The variable whose value is set by the spinbox.",
            "\t\t}",
            "\tLabel, { Required. Any text expression to be used as a label with the",
            "\t\tspinbox. }",
            "\tBoxOnLeft, { Required. Any logical expression. If true (non-0) the",
            "\t\tspinbox will appear to the left of the label, if false (0) it will be",
            "\t\tto the right. If this value is invalid, a default value of true will",
            "\t\tbe used. }",
            "\tAlignment { Required. Any numeric expression that sets the alignment",
            "\t\tof the spinbox and its label according to one of the following",
            "\t\toptions: The default value is 0. Alignment Horizontal Vertical 0 Left",
            "\t\tTop 1 Right Top 2 Full Top 3 Left Centered 4 Right Centered 5 Full",
            "\t\tCentered 6 Left Bottom 7 Right Bottom 8 Full Bottom }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "SplitList": {
        "comments": [
            "{ Description: Draws a split list (listbox with two columns) with a",
            "\tscrollbar if required and indicates the selected item. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ If Multi is true, multiple items in the list may be",
            "\tselected by using the <Shift> or <Ctrl> keys along with mouse input.",
            "\tIf <Ctrl> is held while an item is clicked on by the mouse, it will",
            "\tbecome selected (or deselected if it is already selected) and will be",
            "\tadded to the list of chosen items. If <Shift> is held while an item is",
            "\tclicked on by the mouse, all items from the last selected item to the",
            "\tcurrently selected item will be selected. All other items outside of",
            "\tthis list will be deselected. If both <Ctrl> and <Shift> are held",
            "\twhile an item is clicked on by the mouse, all items from the last",
            "\tselected item to the currently selected item will be set to the state",
            "\tof the last selected item. For any optional parameter that is to be",
            "\tset, all optional parameters preceding the desired one must be",
            "\tpresent, although they may be invalid. }"
        ],
        "snippets": [
            "System.SplitList(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the listbox. }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the listbox. }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the listbox opposite to X1. }",
            "\tY2, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of the top or bottom of the listbox, whichever is the opposite",
            "\t\tto Y1. }",
            "\tTitle1, { Required. Any text expression giving the title to display",
            "\t\tabove the first column of the split list. }",
            "\tTitle2, { Required. Any text expression giving the title to display",
            "\t\tabove the second column of the split list. }",
            "\tData1, { Required. An array of data to display in the first column of",
            "\t\tthe split list. This array must be the same size as Data2. }",
            "\tData2, { Required. An array of data to display in the second column of",
            "\t\tthe split list. This array must be the same size as Data1. }",
            "\tIndex, { Required. Any variable whose value will be set to the index",
            "\t\tof the highlight. }",
            "\tPicked, { Required. A variable whose value will be set true (1) when",
            "\t\tan item is chosen in the split list. The setting of Index by an",
            "\t\texternal source will not trigger Picked. }",
            "\tFlat, { Any logical expression. If true (non-0) the border of the",
            "\t\tsplit list will be a single black line, if false (0) it have the look",
            "\t\tof two indented windows. Defaults to 0. }",
            "\tDoubleClick, { An optional parameter that is a variable whose value",
            "\t\twill be set to true (1) when an item has been double-clicked upon. }",
            "\tMaxLen, { An optional parameter that is any numeric expression giving",
            "\t\tthe maximum length of the data lists. If omitted, the maximum list",
            "\t\tlength is given by the size of the arrays Data1 and Data2. }",
            "\tOffset, { An optional parameter that is any numeric expression giving",
            "\t\tthe starting offset in the list. The element indicated by this index",
            "\t\twill be the one initially shown at the top of the list (unless too few",
            "\t\telements follow this one to fill the display area). }",
            "\tFocusID, { An optional parameter that is any numeric expression from 0",
            "\t\tto 32767 for the focus number of this graphic. If this value is 0, the",
            "\t\tsplit list will not accept keyboard input, although mouse input will",
            "\t\tstill be recognized. The default value is 1. }",
            "\tAlignTitle, { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0) the title is drawn within the split list's boundaries, if",
            "\t\tfalse(0) the list fills its bounding area and the title is added at",
            "\t\tthe top (i.e. it extends past the top boundary). The default is true.",
            "\t\t}",
            "\tMulti, { An optional parameter that is any logical expression. If true",
            "\t\t(non-0), multiple items may be selected in the list. The default is",
            "\t\tfalse. }",
            "\tPickList, { An optional parameter that is a variable whose value is",
            "\t\tset to the list of items selected if Multi is true (1). If invalid, no",
            "\t\titems are selected. This variable may initially be set to a",
            "\t\tdynamically allocated array (one created with the New function)",
            "\t\tcontaining items to be highlighted/selected upon the startup of the",
            "\t\tsplit list. }",
            "\tSplitPos, { An optional parameter that is a variable that will contain",
            "\t\tthe pixel position of the split bar. If initially valid, the split bar",
            "\t\twill be in the middle of the SplitList. The default will center the",
            "\t\tsplit bar. }",
            "\tShrinkData1CBContext, { Context for callback to shorten Data1 text }",
            "\tShrinkData1Callback, { Callback(Text, AvailWidth, Font) }",
            "\tBGColor, { Optional. Any numeric expression for the background color",
            "\t\tof the control. No default value. }",
            "\tFGColor { Optional. Any numeric expression for the foreground color of",
            "\t\tthe control. No default value. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "SplitListSelector": {
        "comments": [
            "{ Description: Draws a split view comprising two GridLists separated",
            "\tby control buttons. Items listed on the left may be selected to be",
            "\ttransferred to the right. Items on the right may be returned to the",
            "\tleft so long as they were originally listed on the left. Scrollbars",
            "\twill be drawn if required. }",
            "{ A tool intended to provide a user interface for selecting items from",
            "\ta list on the left and transferring them to the right. The",
            "\tInitKeyArray may be an array of arrays. i.e. each element of the main",
            "\tarray may be a sub-array which will make up the columns. If an array",
            "\tof arrays is specified, the DestKeyArray must also be of the same",
            "\tformat. The first column (the first element of every sub-array making",
            "\tup a row) will be regarded as the unique key for comparison purposes.",
            "\tThe items on the left will be updated if the InitKeyArray changes in",
            "\tsize. When items are moved from the right to the left, they are",
            "\tinserted into the left only if they exist in the InitKeyArray. If not,",
            "\tthey are simply removed from the right list. The SplitListSelector",
            "\tshould be called from within a GUITransform as shown in the following",
            "\texample. }"
        ],
        "snippets": [
            "System.SplitListSelector(",
            "\tInitKeyArray, { Required. An array of items passed in to form the",
            "\t\tinitial list on the left. }",
            "\tDestKeyArray, { Required. An array of destination items. Any items",
            "\t\tinitially in the array will be displayed in the list on the right. }",
            "\tLeftLabel, { Optional label for the left list. }",
            "\tRightLabel, { Optional label for the right list. }",
            "\tNumCols, { Number of columns for each list. Defaults to 1 if not",
            "\t\tspecified. }",
            "\tTitles, { Optional array of titles for both lists. The number of",
            "\t\ttitles must match the number of columns. If this parameter is not",
            "\t\tspecified, then no titles will be displayed for the columns. }",
            "\tColWidthPercents { Optional array of column width percentages for both",
            "\t\tlists. Defaults to equal widths if not specified. The size of the",
            "\t\tarray must match the number of columns. The array elements will hold",
            "\t\tnormalized values. For example: ColWidths = New(3) ColWidths[0] = .3",
            "\t\t{30%} ColWidths[1] = .2 {20%} ColWidths[2] = .5 {50%} }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "SplitPath": {
        "comments": [
            "{ Description: Breaks up a file path name into its components. }"
        ],
        "snippets": [
            "SplitPath(",
            "\tFullName, { Required. Any text expression giving the full path name. }",
            "\tDrive, { Required. Any variable, which is set to the drive letter in",
            "\t\tFullName, plus a colon. If FullName doesn't contain a drive",
            "\t\tspecification, Drive is a null string. If this information is not",
            "\t\trequired, a constant may be used for this parameter. }",
            "\tPath, { Required. Any variable, which is set to the directory path in",
            "\t\tFullName, ending in a backslash. If FullName doesn't contain a path",
            "\t\tspecification, Path is a null string. If this information is not",
            "\t\trequired, a constant may be used for this parameter. }",
            "\tFile, { Required. Any variable, which is set to the file name in",
            "\t\tFullName. If FullName doesn't specify a file name, File is a null",
            "\t\tstring. If this information is not required, a constant may be used",
            "\t\tfor this parameter. }",
            "\tExtension { Required. Any variable, which is set to the file extension",
            "\t\tin FullName, including a period). If FullName doesn't specify a file",
            "\t\textension, Extension is a null string. If this information is not",
            "\t\trequired, a constant may be used for this parameter. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SplitString": {
        "comments": [
            "{ Description: Splits a string into separate array elements using a",
            "\tgiven delimiter to mark the breaks between elements in the string. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ }"
        ],
        "snippets": [
            "System.SplitString(",
            "\tString, { Required. Text containing a list of words separated by a",
            "\t\tdelimiter. Digits are treated as characters and are not converted to",
            "\t\tnumbers in the array. }",
            "\tDelimiter { Required text. The character (or characters) marking the",
            "\t\tboundary between words that will become array elements. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SplitTagSelector": {
        "comments": [
            "{ Description: Draws a split view comprising two GridLists separated",
            "\tby control buttons. Tag names listed on the left may be selected to be",
            "\ttransferred to the right. Each GridList will have two columns: the",
            "\tname and the description of each tag in the list. Scrollbars will be",
            "\tdrawn if required. }",
            "{ A tool intended to provide a user interface for selecting tags from",
            "\ta list on the left and transferring them to the right. Both GridLists",
            "\thave two columns, the name and the description of the tags. The",
            "\tInitTagArray is an array of Tag names. The DestTagArray is an array of",
            "\tselected Tag names. The Tag names are used as keys for comparison",
            "\tpurposes. The tags on the left will be updated if the InitTagArray",
            "\tchanges. When tags are moved from the right to the left, they are",
            "\tinserted in the left only if they exist in the InitTagArray. If not,",
            "\tthey are simply removed from the DestTagArray. The SplitTagSelector",
            "\tshould be called from within a GUITransform as shown in the following",
            "\texample. }"
        ],
        "snippets": [
            "\\SplitTagSelector(",
            "\tInitTagArray, { Required. An array of tag names passed in to form the",
            "\t\tinitial list on the left. }",
            "\tDestTagArray, { Required. Array of destination tag names. Can be an",
            "\t\tarray of tags passed in to form the initial list on the right. }",
            "\tLeftLabel, { Optional label for the left list. }",
            "\tRightLabel, { Optional label for the right list. }",
            "\tDestMax, { Maximum number of destination tag names. The default is",
            "\t\tinvalid which is taken to mean unlimited. }",
            "\tEnableParm { Flag to enable the controls. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "SQLQuery": {
        "comments": [
            "{ Description: A launched module that executes an SQL query on data in",
            "\ta VTS application. For queries of external databases, refer to the",
            "\tODBC Manager Service }",
            "{ Only selection queries are supported. SQL statements for data",
            "\tmanipulation will do nothing. If tag filtering or realm-area filter is",
            "\tin effect, this function will retrieve data only from tags the",
            "\tcurrently logged-on user is permitted to access. When retrieving",
            "\thistorical data, SQLQuery is essentially a wrapper for GetTagHistory.",
            "\tIt takes an incoming SQL query, and makes one or more calls to",
            "\tGetTagHistory to retrieve the results. SQLQuery may also be used to",
            "\tretrieve current tag values and other custom tables (such as alarm",
            "\tdata). Legacy tables made it look like tag values were stored in",
            "\tseparate tables and used the time stamp of the current server. These",
            "\tlegacy tables still exist but are hidden by default, using the",
            "\tproperty: SQLQueryHideLegacyTables. Newer code should query all tag",
            "\tvalues from the table, \"History\", or from a \":TPP\"derivative such as",
            "\t\"History:1d\". See the links for further information. Supported SQL",
            "\tsyntax is as follows: SELECT [DISTINCT | ALL] columnspecifier-1,",
            "\tcolumnspecifier-2, ... FROM tablename-1, tablename-2, ... [WHERE",
            "\twhere-expression] [ORDER BY columnspecifier-1 [ASC | DESC],",
            "\tcolumnspecifier-2, ...] [LIMIT [offset,] row_count] Columnspecifier is",
            "\teither [table-name.]'*' to indicate all columns in a table or a",
            "\tspecific column-name in the form: [table-name.]column-name Tablename",
            "\tis either the table name or 'table-name [[AS] alias-name'] Quotes may",
            "\tbe used around table or column names, and must be used if the names",
            "\tcontain special characters. When an alias-name is specified it may be",
            "\tused in place of the table-name in the column specifier. When more",
            "\tthan one table is specified, the tables are automatically joined based",
            "\ton their Timestamp columns and MUST have matching \"TPP\"s. A join",
            "\texpression may be used in place of a table list, but it is only parsed",
            "\tto extract the tables specified. The actual join expression is",
            "\tignored. Where-expression is an expression to be used to filter the",
            "\tresult data. It may contain references to columns, use comparison",
            "\toperators, use functions ABS, LENGTH, UPPER, LOWER, CONCAT, CASE,",
            "\tSQRT, INTEGER, and use keywords AND, NOT, and OR. Use the LIMIT clause",
            "\tto specify a limit to the number of rows that will be returned, and",
            "\toptionally an offset (0-based) which allows pagination. LIMIT is",
            "\tapplied after WHERE filtering and after sorting. If there is no",
            "\texplicit LIMIT clause in the query there is an implicit \"LIMIT",
            "\tSQLQueryMaxResultRows\" ( Settings.Dynamic setting) added. Each logged",
            "\ttag corresponds to one table in the VTS database schema. Every logged",
            "\tvariable within the tag is one column. In addition, a \"TPP specifier\"",
            "\tmay be appended to a tag name to utilize GetTagHistory's ability to",
            "\tretrieve data over time periods. The TPP specifier is a colon followed",
            "\tby a number and an abbreviation for various time periods. The",
            "\trecognized time period abbreviations are (case-insensitive): MS -",
            "\tmilliseconds S - seconds (this is the default, therefore the S may be",
            "\tleft out) M - minutes H - hours D - days W - weeks Y - years For",
            "\texample, the table 'ai1:2D' can be used to retrieve data from tag ai1",
            "\twith a TPP of 2 days. A TPP may only be specified for a tag that has",
            "\tat least one numeric logged variable. When a TPP is specified, the",
            "\tavailable columns are: Timestamp VarName:Average VarName:Minimum",
            "\tVarname:Maximum VarName:Delta VarName:ValueAtStart VarName:TimeOfMin",
            "\tVarName:TimeOfMax VarName:ZToNZCount VarName:NonZeroTime VarName:Total",
            "\tVarName:Interpolate ... where VarName may be replaced by any numeric",
            "\tlogged variable from the tag. The current values of a tag may be",
            "\tretrieved using a table name with the format \"TagName_Current\". This",
            "\ttable will have one row whose columns are Timestamp (the current time)",
            "\tand the current values of each logged value in the tag. Bit-Wise",
            "\tqueries can be created, similar to modes 12 and 13 of calls to",
            "\tGetTagHistory(). To specify a bit-wise summary, use either: Tag",
            "\tName:Value:BitwiseOR Tag Name:Value:BitwiseAND For example: Select",
            "\tTimestamp, as1:value:average, as1:value:BitwiseOR from History_1h",
            "\twhere Timestamp >= '2017-10-02 00:00' and Timestamp <= '2017-10-02",
            "\t23:59' }"
        ],
        "snippets": [
            "\\VTSSQLInterface.SQLQuery(",
            "\tQueryString, { Required. Any text expression containing a valid SQL",
            "\t\tselect statement. Not all selection clauses are supported. }",
            "\tResults, { Required. A pointer to a variable which will hold the",
            "\t\tresults array. }",
            "\tFieldNames, { Required. A pointer to a variable that will hold the",
            "\t\tfield names array. Field names are typically \"Value\" for most tag",
            "\t\tvalues. }",
            "\tFieldTypes, { Required. A pointer to a variable that will hold the",
            "\t\tfield types. The types will be returned as SQL data types according to",
            "\t\tthe following table: Field Type SQL Data Type 1 SQL_CHAR 4 SQL_INTEGER",
            "\t\t5 SQL_SMALLINT 8 SQL_DOUBLE 9 SQL_DATETIME 12 SQL_VARCHAR }",
            "\t1, { 4 }",
            "\t5, { 8 }",
            "\t9, { 12 }",
            "\tReturnCode, { Required. A pointer to a variable that will hold the",
            "\t\treturn code. The code will be one of the following: Return Code",
            "\t\tMeaning 0 #SUCCESS 1 #SYNTAX_ERROR 2 #TABLE_NOT_FOUND 3",
            "\t\t#COLUMN_NOT_FOUND 4 #ILLEGAL_JOIN }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { ErrorMsg }",
            "\tParmInfo, { Optional. A pointer to a variable that will hold parameter",
            "\t\tinformation. }",
            "\tPageInfo, { Optional. A pointer to a variable that will hold a",
            "\t\tPageInfoStruct structure, used to support pagination. }",
            "\tPageStatsInfo { Optional. A pointer to a variable that will hold a",
            "\t\tPageStatsInfoStruct structure, used to support pagination. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Sqrt": {
        "comments": [
            "{ Description: Returns the square root of a number. }",
            "{ If X is less than zero, the result is invalid. }"
        ],
        "snippets": [
            "Sqrt(",
            "\tX { Required. Any numeric expression giving the number to take the",
            "\t\tsquare root of. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SRead": {
        "comments": [
            "{ Description: Reads values from a formatted stream and returns the",
            "\tnumber of values not read. }",
            "{ This function is useful for reading formatted streams. Data exchange",
            "\tbetween many formats is possible if the formats are known. The return",
            "\tvalue is optional and is the number of Vn parameters NOT read. This",
            "\tcan be used as an error flag. Strings are limited to 2GiB (2^30 bytes)",
            "\t}"
        ],
        "snippets": [
            "SRead(",
            "\tStream, { Required. Any expression that returns the stream to read. }",
            "\tFormat, { Required. Any text expression giving the format of how the",
            "\t\tvalues (Vn parameters) are to be read. This format is similar, but not",
            "\t\tidentical, to the C language format string for the scanf function,",
            "\t\twhereby each of the % format specifications assigns a value to one of",
            "\t\tthe Vn parameters in the statement in the order in which each appears",
            "\t\tin the list. Note that like a standard text string, these format",
            "\t\tspecifiers must also be enclosed by double quotes. If a format",
            "\t\tspecification appears for which there are no remaining V parameters,",
            "\t\tthe format specification value is read and discarded. For the % format",
            "\t\tspecifications, the following form applies (where the [ ] indicates",
            "\t\toptional elements): %[*][width]type Whereâ¦ % Is a mandatory character",
            "\t\t* The optional asterisk causes the read to occur as per the format",
            "\t\tspecification, but suppresses any assignment to the Vn parameters.",
            "\t\twidth Width is optional, specifying the maximum number of characters",
            "\t\tto read. type The specifications for type are listed in the following",
            "\t\ttable: Format strings are case insensitive. Additionally, specifying a",
            "\t\tcharacter for a type that is not in this list results in all the",
            "\t\tcharacters following the % up to that point to be read exactly as they",
            "\t\tappear in the Format string and discarded. Type Meaning Nb Binary",
            "\t\tformat, where n is a number indicating the type of value (see below) c",
            "\t\tSingle ASCII character (byte) d Signed decimal 64-bit integer e Signed",
            "\t\texponential f Signed floating point g e or f formats i Signed decimal",
            "\t\tinteger l Line of characters terminated by a carriage return, line",
            "\t\tfeed, or both n Present offset in the buffer o Signed octal, 32-bit",
            "\t\tdefault* s Text string t Counted string u Unsigned decimal 64-bit",
            "\t\tinteger x Signed hex integer using \"abcdef\", 32-bit default* znnn",
            "\t\tEscape character where nnn is the 3-digit ASCII code %x and %o will",
            "\t\ttreat values as 32-bit integers by default unless the %ll modifier is",
            "\t\tused. %llx and %llo will read values in 64-bit. for %u, when reading",
            "\t\tan unsigned 64bit integer greater than 9223372036854775807 (the",
            "\t\tlargest signed 64bit integer), the value will be read in as the",
            "\t\tbit-equivalent signed 64bit integer. ( eg. 9223372036854775808 is read",
            "\t\tin as -9223372036854775808.) nb, Binary type For the format",
            "\t\tspecification of %nb, where n specifies the type of number, n must be",
            "\t\ta single digit from one of the following choices. All are",
            "\t\tlow-byte-first. n value Type 0 Byte 1 Short integer (2 bytes, low byte",
            "\t\tfirst) 2 Long integer (4 bytes, low bytes first) 3 IEEE single",
            "\t\tprecision float (4 bytes) 4 <obsolete> 5 IEEE double precision float",
            "\t\t(8 bytes) 6 <obsolete> 7 Binary unsigned short (2 bytes, low byte",
            "\t\tfirst) 8 Unsigned 32-bit integer 9 64-bit FileTime. This reads or",
            "\t\twrites a 64 bit time value in the Microsoft FileTime format. When",
            "\t\treading, the value is converted from the FileTime epoch and units (100",
            "\t\tnanosecond intervals since Jan 1, 1601) to the VTS epoch and units",
            "\t\t(seconds since 1/1/1970) any times earlier than this will result in a",
            "\t\tvalue of 0. When writing, the value is converted from the VTS epoch",
            "\t\tand units to the FileTime epoch and units. c, ASCII character type :",
            "\t\tUnlike BuffWrite this type deals with characters in a string; each",
            "\t\tcharacter being equal to one byte. Unlike the %s option, which reads",
            "\t\tonly up to the first white-space character, the %c option reads the",
            "\t\tnumber of characters/bytes specified by its width and is not",
            "\t\tterminated by any particular character. If no width is specified, a",
            "\t\tsingle character is read. d, Signed decimal integer e, Signed",
            "\t\texponential f, Signed floating point g, e or f formats i, Signed",
            "\t\tdecimal integer type: This option normally reads a decimal integer;",
            "\t\thowever, if a leading \"0b\" is encountered, the number will be",
            "\t\tinterpreted as binary. If a leading \"0\" (zero only) is encountered,",
            "\t\tthe number will be interpreted as octal. If a leading \"0x\" is",
            "\t\tencountered, the number will be interpreted as hexadecimal. For",
            "\t\tdecimal, values will be read as 64-bit integers, but hex, octal and",
            "\t\tbinary will be treated as 32-bit integers unless the %lli modifier is",
            "\t\tused, which will cause the %i format to treat hex, octal and binary as",
            "\t\t64-bit. l, Line of characters: This option reads a line of characters",
            "\t\tterminated by a carriage return, a line feed, or both (in either",
            "\t\torder). The carriage return and line feed will be discarded, and the",
            "\t\tnext character read will be the first character on the next line. The",
            "\t\tmaximum number of characters read is 2GiB (2^30 bytes) or less if the",
            "\t\twidth option is used. n, Buffer offset : This option does not read a",
            "\t\tvalue, but returns the present offset in Buffer and can be useful in",
            "\t\tsubsequent reads. o, Unsigned Octal s, Text string type: Text in the",
            "\t\tstring is read up until a white-space character is encountered, or the",
            "\t\tspecified width has been read, whichever is smaller. Square brackets",
            "\t\tenclosing a character, group of characters, or a caret and a group of",
            "\t\tcharacters used in the format string reads strings not delimited by",
            "\t\tspaces. This is a substitute for the %s format specification. The",
            "\t\tinput is read up to the first character that does not appear inside",
            "\t\tthe square brackets (note that this is case-sensitive). A dash may be",
            "\t\tused to specify a range of characters. For example, the following",
            "\t\tformat specifier: % [A-Fa-f] will read a string up to the first which",
            "\t\tis not an A, B, C, D, E, or F both upper and lower case. t, Counted",
            "\t\tstring type A counted string is encoded as a sequence of UTF-8",
            "\t\tcharacters without a null terminator and preceded by the length in",
            "\t\tbytes. The length in bytes is encoded as Int32, i.e. a \"%2b\". A value",
            "\t\tof â1 is used to indicate an invalid string, a value of 0 indicates a",
            "\t\tnull (\"\") string. Do not apply width or precision modifiers to a \"%t\"",
            "\t\tcounted string. The caret symbol ^. If the first character inside the",
            "\t\tsquare brackets is a caret ( ^ ), the read progresses up to, but not",
            "\t\tincluding, the first character that appears inside the square",
            "\t\tbrackets: %[^X-Z] This would read a string up to, but not including,",
            "\t\tthe first X, Y or Z (upper-case only); if the string were terminated",
            "\t\tby an X, the next character read would be that X. Inside the square",
            "\t\tbrackets, the backslash is used as an escape character - any character",
            "\t\tfollowing a backslash (such as a caret, dash, or backslash) is taken",
            "\t\tas that character without special meaning. For example: %[^X-Z\\^]",
            "\t\twould behave as described previously, except that the string would now",
            "\t\tbe read up to but not including the first X, Y, Z, or ^. Because",
            "\t\tformat specifications for the Vn parameters are indicated by a",
            "\t\tpercentage sign, to read (and discard) an actual percentage sign as",
            "\t\tpart of the text string, precede it with a backslash character (i.e.",
            "\t\t\\%). Also, since the backslash character is used in this manner, as",
            "\t\twell as with special control characters such as line feed, carriage",
            "\t\treturn and form feed, to read and discard a backslash, use two",
            "\t\tbackslash characters (i.e. \\\\). x, Hexadecimal characters: the %x",
            "\t\toption reads the number of characters/bytes specified by its width and",
            "\t\tis not terminated by any particular character. If no width is",
            "\t\tspecified, it will continue reading all bytes that can be recognized",
            "\t\tas hexadecimal characters. For example, given the string \"â¦= 3D\",",
            "\t\t%[^=]=%2x would read the hedadecimal value, 3D (decimal value, 61).",
            "\t\tznnn, Escape characters: This specifies an escape character that will",
            "\t\tbe thrown away when read, where nnn is a 3-digit number giving the",
            "\t\tASCII character code of the escape character. This option is generally",
            "\t\tused as the sole format specifier that reads an entire string, spaces",
            "\t\tincluded, discarding every single occurrence of an escape character,",
            "\t\tor the first occurrence of every pair of escape characters. For",
            "\t\texample, if the string to be read looked like: abXc dXXfghiXXXjXXXXkl",
            "\t\tmX Xn o and the format specifier indicated that the ASCII code for 'X'",
            "\t\t(88) was to be the escape code: %25z088 then the variable that this",
            "\t\twas read into would contain: abc dXfghiXjXXkl m n o Notice that for",
            "\t\teach occurrence of X, the character immediately following it is saved,",
            "\t\teven if it is itself an escape character. Then the next occurrence of",
            "\t\tthe escape character is discarded, with the character following it",
            "\t\tbeing saved, regardless of what it is, and so on. The width field",
            "\t\tspecifies the maximum number of bytes to place in the output string;",
            "\t\tif this number is smaller than the input string (less the offending",
            "\t\tescape characters), the string will be truncated. If no width is",
            "\t\tspecified, a single character will be read. Control characters: In",
            "\t\torder to encode certain control characters as part of the Format",
            "\t\tparameter, one of two methods may be used. The first is to use a",
            "\t\tbackslash character followed by one of the single character codes",
            "\t\tlisted below to produce the desired result. Please note that the",
            "\t\tletters must be lower case. Code Meaning \\b Backspace \\f Form Feed \\n",
            "\t\tLine Feed \\r Carriage Return \\t Horizontal Tab \\v Vertical Tab In",
            "\t\taddition to the predefined codes, an alternate form may be used: \\nnn:",
            "\t\twhere nnn is a three digit integer in the range of 0 to 255 specifying",
            "\t\ta certain ASCII character. If the number contains less than three",
            "\t\tdigits, the leading spaces must be padded with zeroes; this is not the",
            "\t\tcase with the previously listed single character control characters.",
            "\t\tFor example, to include the one byte ASCII character G in the output,",
            "\t\tyou could place its decimal equivalent of 71 in the Format string as",
            "\t\t\\071. }",
            "\tNb, { c }",
            "\td, { e }",
            "\tf, { g }",
            "\ti, { l }",
            "\tn, { o }",
            "\ts, { t }",
            "\tu, { x }",
            "\tznnn,",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t\\b, { \\f }",
            "\t\\n, { \\r }",
            "\t\\t { \\v }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Start": {
        "comments": [
            "{ Description: Starts an application }"
        ],
        "snippets": [
            "Layer.Start();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "StartTag": {
        "comments": [
            "{ Description: Used to create tags by starting new instances of the",
            "\ttag type specified in the parameter list. When creating an application",
            "\tthat requires child tags, it is recommended that this function be used",
            "\tin place of the older ChildLaunch function. StartTag can also be used",
            "\tto stop or to modify an existing tag. }",
            "{ When used to create a child tag, the name of that new child tag will",
            "\talways be unique since it will be a combination of the parent tag's",
            "\tname and the new child name in the format \"ParentName\\ChildName\". If",
            "\tthe first parameter (Parent) is not VTSDB, then it should be a tag",
            "\tobject (the parent tag), and the StartTag call should only be made",
            "\tfrom that parent tag's Refresh module. When this function is used to",
            "\tcreate an ordinary tag, as opposed to a child tag, it is the",
            "\tresponsibility of the programmer to ensure that a unique name is used",
            "\tfor each new tag. If the tag does not exist and bit 0 of Flags is",
            "\tTRUE, then the tag islaunched. If the tag exists and bit 0 of Flags is",
            "\tTRUE, then the tag's parameters are changed if necessary. Note that,",
            "\tif a new TagType is provided, then the existing tag will be deleted",
            "\tand a tag of the new type created. If the tag exists and bit 0 of",
            "\tFlags is FALSE or the tag's parent's Name is Invalid indicating that",
            "\tthe tag is being stopped, then the tag is removed. Because of",
            "\tconfiguration management and the version control system, it is",
            "\tpossible for a child tag have both temporary parameters (those created",
            "\tby code in the parent and existing only in memory) and a sub-set of",
            "\tpermanent parameters in the tag files. These latter values are used to",
            "\trecord user-overrides of the parameter values. If the application",
            "\trestarts, the child tag will be re-loaded from code and the overrides",
            "\tmade in an earlier session will be read from the tag files. Permanent",
            "\tparameter values will always take precedence over temporary values.",
            "\tThere are several ways that the tag's parameters can be passed to this",
            "\tmodule: Only one additional parameter which is an array of parameter",
            "\tvalues, a tag, or a tag mirror structure(*). In the case of a",
            "\tparameter value array the values must match to tags parameters in",
            "\torder, but may be fewer in number, allowing just the name to be",
            "\tpassed, for example. Only one additional parameter which is a",
            "\tdictionary of parameter values keyed by parameter name. A pair of",
            "\tarrays is passed, with the first array being the array of parameter",
            "\tnames and the second, parallel array, being the valuesfor those named",
            "\tparameters. The \"Name\" parameter must be present, and the order of the",
            "\tpairs is not significant, other than matching the formal parameter",
            "\tordering gives some efficiency gains. A list of parameter name and",
            "\tvalue pairs of parameters. This is typically used by ChildLaunch",
            "\tcalls. Again \"name\" must be presentand the ordering is only a small",
            "\tconsideration for efficiency. (*) A tag mirror is a structure that has",
            "\tone element for each of a tagâs parameters, accessible by that",
            "\tparameter name (e.g. MyTag\\IODevice). These should only be used by",
            "\tadvanced VTScada programmers. }"
        ],
        "snippets": [
            "StartTag(",
            "\tParent, { An object that gives the parent for this new child tag.",
            "\t\tDefaults to VTSDB if invalid. See note in Comments section. }",
            "\tFlags, { Bitwise expression indicating operational options. Bit #",
            "\t\tOperation 0 Add or change if TRUE. Delete if FALSE. 1 Persist change",
            "\t\tif TRUE. The tag will be output to the tag file. If Bit 0 is FALSE, it",
            "\t\tis not strictly relevant whether Bit 1 is TRUE or FALSE. The tag will",
            "\t\tbe deleted both in memory and on disk. Regardless of this, it is good",
            "\t\tform to set bit 1 to TRUE when deleting a tag. When using StartTag to",
            "\t\tgenerate child tags, do not set bit 1 to TRUE. Flags should be set",
            "\t\tsuch that when the tag is stopped, StartTag is called with the a value",
            "\t\tof zero in the second parameter. This can be done using the",
            "\t\texpression, Valid(Root\\Name). (See: Bitwise Parameters & Operations )",
            "\t\t}",
            "\t0 { 1 }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "StateList": {
        "comments": [
            "{ Description: Returns a list of states for a module. }"
        ],
        "snippets": [
            "StateList(",
            "\tModule, { Required. Any expression for the module or object. }",
            "\tOption { Required. Any numeric expression which indicates the data to",
            "\t\tlist Option List Data 0 Name 1 Code value }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "StatementInstance": {
        "comments": [
            "{ Description: Takes a given code value and object and returns a code",
            "\tpointer value for that instance. }"
        ],
        "snippets": [
            "StatementInstance(",
            "\tObject, { Required. Any object expression. }",
            "\tStatement { Required. Any code value expression for the statement. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "StateName": {
        "comments": [
            "{ Description: Returns the text name of the given state. }"
        ],
        "snippets": [
            "StateName(",
            "\tState { Required. Any code value expression for the state. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "StaticSize": {
        "comments": [
            "{ Description: If the variable provided in the parameter is static,",
            "\tthis will return the size of that variable. }",
            "{ If the variable is not static, this function will return Invalid. }"
        ],
        "snippets": [
            "StaticSize(",
            "\tVar { Required. Any variable to test. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "StatsWin": {
        "comments": [
            "{ Description: Called to display a window showing current ODBC driver",
            "\tstatistics for both the main driver and any user-selected IO device",
            "\taddresses }"
        ],
        "snippets": [
            "\\ODBCManager\\StatsWin(",
            "\tEnable, { Required. Set to true to display the statistics window }",
            "\tX, { Required. The screen X position of the window }",
            "\tY, { Required. The screen Y position of the window }",
            "\tConnectionName { Required. The name of the database connection to be",
            "\t\tshown. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Step": {
        "comments": [
            "{ Description: Transforms a continuous value into discrete steps. }",
            "{ The return value is arrived at by dividing X by Size and taking only",
            "\tthe portion before the decimal point, then multiplying by Increment.",
            "\tNote that negative numbers are taken down to the next lower number",
            "\t(e.g. -0.1 becomes -1). If any parameters are invalid, the return",
            "\tvalue is invalid. This function is useful for determining the",
            "\tcoordinates for menu highlight bars and for rounding numbers to the",
            "\tnearest multiple of another value. This function does calculations",
            "\twith double-precision floating point values and does not support",
            "\t64-bit integers computations. }"
        ],
        "snippets": [
            "Step(",
            "\tX, { Required. Any numeric expression giving the value to reduce to",
            "\t\tdiscrete steps. }",
            "\tSize, { Required. Any numeric expression giving the size of the steps",
            "\t\tin the X input parameter. }",
            "\tIncrement { Required. Any numeric expression giving the size of the",
            "\t\tstep in the result. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Stop": {
        "comments": [
            "{ Description: Causes the immediate termination of VTScada, closing",
            "\tall windows. }",
            "{ Not recommended in general, and especially not recommended for use",
            "\tin page code, where it may cause an untidy exit. Shutdown resulting",
            "\tfrom the Stop() function may take a long time complete. }"
        ],
        "snippets": [
            "Stop(",
            "\tExitValue { An optional parameter that can be used to return a value",
            "\t\tto the calling program or batch file when VTScada exits. If not",
            "\t\tspecified, the exit value from VTScada is 0, indicating \"normal exit\".",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "StopPage": {
        "comments": [
            "{ Description: Subroutine to close all instances of a page. }",
            "{ If the target page is on display, then a switch to the default page",
            "\tis arranged }"
        ],
        "snippets": [
            "\\DisplayManager.StopPage(",
            "\tPageName, { Required. The name of the page to be stopped. }",
            "\tWindowsOnly { Optional. Boolean, defaults to FALSE. Set TRUE to stop",
            "\t\tonly Windowed pages. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "StrCmp": {
        "comments": [
            "{ Description: Performs a case sensitive comparison of two text",
            "\texpressions and returns an indication of whether the first string is",
            "\tgreater than, less than or equal to the second. }"
        ],
        "snippets": [
            "StrCmp(",
            "\tString1, { Required. Any text expression giving the first string to be",
            "\t\tused for the comparison. }",
            "\tString2 { Required. Any text expression giving the second string to be",
            "\t\tused for the comparison. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "StreamEnd": {
        "comments": [
            "{ Description: Returns whether a stream is at the end. }",
            "{ This function returns true (1) if the current stream pointer for",
            "\tStream is at the end of the stream and false (0) otherwise. }"
        ],
        "snippets": [
            "StreamEnd(",
            "\tStream { Required. Any stream to test. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "StrICmp": {
        "comments": [
            "{ Description: Case Insensitive Text Comparison }"
        ],
        "snippets": [
            "StrICmp(",
            "\tString1, { Required. Any text expression giving the first string to be",
            "\t\tused for the comparison. }",
            "\tString2 { Required. Any text expression giving the second string to be",
            "\t\tused for the comparison. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "StrictlyEqual": {
        "comments": [
            "{ Description: Will return TRUE if the parameter values are of the",
            "\tsame type and also are equivalent, or if both are invalid. }",
            "{ Will return either True or False. Will never return Invalid. }"
        ],
        "snippets": [
            "StrictlyEqual(",
            "\tParm1, { Required. Any value, to be compared to parameter 2. }",
            "\tParm2 { Required. Any value, to be compared to parameter 1. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "StrictlyNotEqual": {
        "comments": [
            "{ Description: Returns TRUE if the values are not the same, or if the",
            "\ttypes are not the same, or if only one operand is Invalid. }",
            "{ Will return TRUE or FALSE. Will never return Invalid.",
            "\tStrictlyNotEqual(X, Y) yields the same result as !StrictlyEqual(X, Y).",
            "\tEquivalent to: If A != B || Valid(A) != Valid(B) || ValueType(A) !=",
            "\tValueType(B) }"
        ],
        "snippets": [
            "StrictlyNotEqual(",
            "\tParm1, { Required. Any value to be compared to parameter 2. }",
            "\tParm2 { Required. Any value to be compared to parameter 1. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "StrJustify": {
        "comments": [
            "{ Description: Performs a word-wrap such that the string will break on",
            "\tor before each multiple of the maximum line length. }",
            "{ Inserts CR LF characters (0D 0A), either at each multiple of Width",
            "\tcharacters or after the first space (20) preceding Width characters. }"
        ],
        "snippets": [
            "System.StrJustify(",
            "\tStr, { Required. The string to be formatted. }",
            "\tWidth { An optional parameter indicating the maximum width for line",
            "\t\tlength. If Width is Invalid, the width will be taken from the",
            "\t\tPrintWidth Setup.ini variable (see \"Setup.ini [SYSTEM] Section",
            "\t\tVariables\"). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "StrLen": {
        "comments": [
            "{ Description: Returns the length of a text string }",
            "{ This function does not return the number of characters in String,",
            "\tbut rather, the number of bytes, including 0 (NULL) bytes. May be done",
            "\ton a stream value, but if the stream is longer than the maximum signed",
            "\tinteger (2^31) characters, the return value will be 2^31. }"
        ],
        "snippets": [
            "StrLen(",
            "\tString { Required. Any text expression. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Struct": {
        "comments": [
            "{ Description: Creates a new dictionary and loads it with the keys",
            "\tlisted in the parameters. }",
            "{ The dictionary created by this function is case insensitive and has",
            "\ta root value of NULL. The keys are assigned W_LONG values incrementing",
            "\tfrom zero that match their parameter positions. All of this is done",
            "\twith the idea that the resulting dictionary can then be used as a",
            "\tstructure definition. }"
        ],
        "snippets": [
            "Struct(",
            "\tA, { The first value to add to the dictionary. }",
            "\tB, C, etc. { Subsequent values to be added. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SubStatementIndex": {
        "comments": [
            "{ Description: Returns the index of a function within the statement",
            "\twhere it is called. }",
            "{ This function returns 0 if CodePointer is a statement. }"
        ],
        "snippets": [
            "SubStatementIndex(",
            "\tCodePointer { Required. Any code pointer value expression for the",
            "\t\tfunction. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SubStr": {
        "comments": [
            "{ Description: Returns a string that is a portion of another string. }",
            "{ If any parameter of this function is invalid, the return value is",
            "\tinvalid. If length exceeds the remaining number of characters in the",
            "\tstring past Start, then only the remaining characters will be",
            "\treturned. }"
        ],
        "snippets": [
            "SubStr(",
            "\tString, { Required. Any text expression giving the original string to",
            "\t\textract the sub-string from. }",
            "\tStart, { Required. Any numeric expression giving the character offset",
            "\t\tfrom the start of String of where to start the resulting string. A",
            "\t\tvalue of 0 refers to the first character in String. If the Start is",
            "\t\tpast the end of String, the result is invalid. }",
            "\tLength { Optional. Any numeric expression giving the number of",
            "\t\tcharacters to include in the resulting string starting with Start.",
            "\t\tDefaults to string length. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Sum": {
        "comments": [
            "{ Description: Returns the arithmetic sum of all the valid array",
            "\telements in a specified portion of a numeric array. }",
            "{ Invalid array elements are not included in the calculation. The",
            "\tfunction returns an invalid result if either of its parameters is",
            "\tinvalid, if there are no valid numerical array elements in the",
            "\tspecified range, or if the number of elements to use is 0. }"
        ],
        "snippets": [
            "Sum(",
            "\tArrayElem, { Required. Any array element giving the starting point in",
            "\t\tthe array. The subscript for the array may be any numeric expression.",
            "\t\tIf processing a multidimensional array, the usual rules apply to",
            "\t\tdecide which dimension should be used. }",
            "\tN { Required. Any numeric expression giving the number of array",
            "\t\telements to use, starting at the element given by the first parameter.",
            "\t\tN cannot be greater than the array size. If the sum of N plus the",
            "\t\tstarting element is greater than the size of the array, this",
            "\t\tcomputation will \"wrap-around\" and resume at element 0, until N",
            "\t\telements have been processed. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SumBuff": {
        "comments": [
            "{ Description: Returns the summation of bytes in a buffer. }",
            "{ This function returns the 32 bit sum of N bytes in Buffer, starting",
            "\tat Offset and stepping by Increment bytes. This function is useful for",
            "\tcomputing checksums for serial communications. }"
        ],
        "snippets": [
            "SumBuff(",
            "\tBuffer, { Required. Any text expression giving the buffer to sum. }",
            "\tOffset, { Required. Any numeric expression that gives the buffer",
            "\t\toffset from 0 to start the sum. }",
            "\tN, { Required. Any numeric expression that gives the number of bytes",
            "\t\tto sum. If N is negative, the absolute value of N is used, but the",
            "\t\toperation is changed from summation to XOR (each successive byte is",
            "\t\tXORed with rather than added to the first byte). }",
            "\tIncrement { Required. Any numeric expression that gives the",
            "\t\tincremental step of the sum in bytes. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "SWrite": {
        "comments": [
            "{ Description: Performs a formatted write of text or binary data to a",
            "\tpre-existing stream and returns the number of data items not written.",
            "\t}",
            "{ If using this function in any code that may write to a USB-to-Serial",
            "\tdevice, you must make allowances for deficiencies in those devices as",
            "\tfollows: the device will ignore everything following the text in the",
            "\tfirst %s. All text to be written must be in a single parameter passed",
            "\tto a single %s. SWrite(Strm, \"%s\\r\", \"AT\"); { Only the \"AT\" is",
            "\treceived by a USB-to-Serial device } SWrite(Strm, \"%s%s\", \"AT\", \\CR);",
            "\t{ Only the \"AT\" is received by a USB-to-Serial device } SWrite(Strm,",
            "\t\"%s\", Concat(\"AT\", \\CR)); { this will succeed if written to a",
            "\tUSB-to-Serial device } You cannot write to a read-only file. You may",
            "\tuse GetFileAttribs and SetFileAttribs to get/set the read-only",
            "\tattribute. If one of the values to be written is outside of the range",
            "\tof the type indicated by the format specifier, a \"0\" is written. If",
            "\tthe value to be written is invalid, nothing is written for most format",
            "\tspecifiers, except for %nb, which will write a \"0\" in the place of the",
            "\tinvalid. Please note that an invalid output does not prevent the",
            "\texecution of the SWrite function. This function returns the number of",
            "\tVn parameters not written to the stream. A 0 return value indicates",
            "\tsuccess. Variables that contain invalid values that were not written",
            "\tdue to their invalidity do not increment this count. An invalid return",
            "\tvalue indicates an error with one of the parameters. As of version",
            "\t12.0, VTScada expects all strings to be encoded using UTF-8. }"
        ],
        "snippets": [
            "SWrite(",
            "\tStream, { Required. A stream as returned from BuffStream or",
            "\t\tFileStream. }",
            "\tFormat, { Required. Any text expression giving the format of how the",
            "\t\tvalues (Vn parameters) are to be written. This format is similar, but",
            "\t\tnot identical, to the C language format string for the printf",
            "\t\tfunction, whereby each of the Vn parameters in the statement is",
            "\t\tassigned to a % format specification in the order in which each",
            "\t\tappears in the list. Note that like a standard text string, these",
            "\t\tformat specifiers must also be enclosed by double quotes. If a format",
            "\t\tspecification appears for which there are no remaining V parameters,",
            "\t\tthe format specification characters themselves are output to the",
            "\t\tstream exactly as they appear in the Format. For the % format",
            "\t\tspecifications, the following form applies (where the [ ] indicates",
            "\t\toptional elements): %[-][+][SPACE][#][width][.precision]type where %",
            "\t\t(percent sign) is mandatory; - (minus sign) (optional) causes the data",
            "\t\tto be left justified within the field (for binary types b and ASCII",
            "\t\tcharacter types c, this option is ignored); + (plus sign) (optional)",
            "\t\tcauses positive numbers to be prefaced with a + sign (negative numbers",
            "\t\tare unaffected). This allows easy alignment of positive and negative",
            "\t\tnumbers in a printed column of numbers. For binary types b and",
            "\t\tnon-numerical types, this option is ignored; space represents the",
            "\t\tsingle space character, and is similar to the [ + ] option but places",
            "\t\ta single space rather than a plus sign in front of positive numbers",
            "\t\t(negative numbers are still unaffected). This allows alignment of a",
            "\t\tcolumn of numbers without having to show all signs. For binary types b",
            "\t\tand non-numerical types, this option is ignored; # (hash mark) When",
            "\t\tused with the o , x , or X format, the # flag prefixes any nonzero",
            "\t\toutput value with 0, 0x, or 0X, respectively. width is a number that",
            "\t\tspecifies the minimum number of characters to output. Numbers that",
            "\t\trequire more characters than specified by the width value are",
            "\t\ttruncated on output. If the number of characters in the number or",
            "\t\tstring is less than width, blanks will be added to the left or right,",
            "\t\tdepending upon whether the output is left or right justified (i.e.",
            "\t\twhether the [ - ] option has been specified) until the width is",
            "\t\treached. For binary types b and ASCII character types c, this option",
            "\t\tis ignored; precision has a different meaning for each of the type",
            "\t\toptions as follows: Integer types d, l, u, o, x, and X precision",
            "\t\tspecifies the minimum number of digits to output. If the number",
            "\t\tcontains fewer digits, leading zeroes will be added to the left of the",
            "\t\tnumber. If precision is 0, omitted, or if the decimal point appears",
            "\t\twithout a number following it, the precision defaults to 1. The number",
            "\t\tis not truncated. Floating point types e and E precision specifies the",
            "\t\tnumber of digits after the decimal point. The last digit is rounded.",
            "\t\tThe default precision in this case is 6. If the precision is 0 or if",
            "\t\tthe decimal point appears without a number following it, no decimal",
            "\t\tpoint appears in the output. Floating point type f precision specifies",
            "\t\tthe number of digits after the decimal point. The last digit is",
            "\t\trounded. The default precision is 0. If the precision is explicitly 0,",
            "\t\tno decimal point is output. If a decimal point is output, at least one",
            "\t\tdigit will be placed before the decimal point. Floating point types g",
            "\t\tand G precision specifies the maximum number of significant digits to",
            "\t\tbe output. If no precision is specified, all significant digits are",
            "\t\twritten. String type s precision specifies the maximum number of",
            "\t\tcharacters of the string to be output. If the string contains more",
            "\t\tcharacters than specified by the precision, the string is truncated",
            "\t\tand only the first characters are written. If the precision is not",
            "\t\tspecified, all of the string characters are output. Byte type c The",
            "\t\tprecision option is ignored. Binary type b The precision option is",
            "\t\tignored. type is mandatory. The type specification must be one of",
            "\t\tthose listed below. Note: The case of the letter is important.",
            "\t\tSpecifying a character for the type that is not in this list will",
            "\t\tresult in all the characters following the % up to that point to be",
            "\t\toutput exactly as they appear in the Format string. Type Meaning nb",
            "\t\tBinary format; where n is a number indicating the type of value (see",
            "\t\tbelow). c Single character (byte values from 0 to 255) d Signed",
            "\t\tdecimal 64-bit integer, 64-bit output by default e Signed exponential;",
            "\t\texponent key is \"e\". E Signed exponential; exponent key is \"E\". f",
            "\t\tSigned floating point. g e or f format, whichever is shorter. G E or f",
            "\t\tformat, whichever is shorter. h Handle to a window. i Signed decimal",
            "\t\t64-bit integer, 64-bit output by default o Unsigned octal integer.",
            "\t\tDefault 32-bit integer. Use %llo to output 64-bit value. p Pointer to",
            "\t\ta buffer. s Text string. t Writes a utf-8 string as used by OPC UA",
            "\t\tbinary TCP: a 32-bit signed count of the length (-1 for an invalid",
            "\t\tstring, 0 for an empty string), then the string u Unsigned decimal",
            "\t\t64-bit integer, 64-bit output by default x Unsigned hex integer using",
            "\t\t\"abcdef\". Default 32-bit integer. (See following note.) X Unsigned hex",
            "\t\tinteger using \"ABCDEF\". Default 32-bit integer. (See following note.)",
            "\t\tWhen writing negative values using either x or X format codes, the",
            "\t\toutput will use a minimum of 32 bits because that is the smallest",
            "\t\tpossible size to display the full information. Defining a format",
            "\t\tstring such as \"%4X\" will not reduce this to 16 bit output for",
            "\t\tnegative values. To output 64-bit values, use the modifier ll. %llx",
            "\t\tand %llX output 64-bit values. nb , Binary type For the format",
            "\t\tspecification of %nb, where n specifies the type of number, n must be",
            "\t\ta single digit from one of the following choices. All are",
            "\t\tlow-byte-first. n Value Type 0 Byte, unsigned 1 Signed short integer",
            "\t\t(2 bytes) 2 Signed long integer (4 bytes) 3 IEEE single precision",
            "\t\tfloat (4 bytes) 4 <obsolete> 5 IEEE double precision float (8 bytes) 6",
            "\t\t<obsolete> 7 Unsigned short integer (2 bytes) 8 Unsigned long integer",
            "\t\t(4 bytes) 9 Writes a time in Microsoft FILETIME format, which contains",
            "\t\ta 64-bit value representing the number of 100-nanosecond intervals",
            "\t\tsince January 1, 1601 (UTC). 10 Outputs signed 64-bit integers in",
            "\t\tbinary form. Note: Other options such as width and precision do not",
            "\t\tapply to the b type. c , Byte type: This type is not representative of",
            "\t\ta single character in a string, but rather, represents single bytes.",
            "\t\tInput values (the Vn parameter to which this format specification",
            "\t\tapplies) must be integers in the range of 0 to 255. Strings are not",
            "\t\tacceptable input values. Note that the %c format specifier behaves",
            "\t\tdifferently when used in an output statement such as BuffWrite than",
            "\t\twhen used in an input statement, such as BuffRead. Some UTF-8",
            "\t\tcharacters can require multiple bytes. Values from 0-127 are",
            "\t\tconsistent between the traditional ASCII encoding and the UTF-8",
            "\t\tencoding. d , Signed decimal 64-bit integer: e , Signed exponential:",
            "\t\tExponent key is \"e\" E , Signed exponential: Exponent key is \"E\" f ,",
            "\t\tSigned floating point g , e or f formats: Whichever is shorter G, E or",
            "\t\tF formats : Whichever is shorter h , Window handle type: This type is",
            "\t\tused for building structures to be handed to DLLs and should be used",
            "\t\tby advanced users only. p , Buffer pointer type: This type is also",
            "\t\tused for building structures to be handed to DLLs and should be used",
            "\t\tby advanced users only. s , Text string type: t , Writes a utf-8",
            "\t\tstring as used by OPC UA binary TCP: a 32-bit signed count of the",
            "\t\tlength (-1 for an invalid string, 0 for an empty string), then the",
            "\t\tstring u , Unsigned decimal 64-bit integer, x , Unsigned hex integer",
            "\t\tusing \"abcdef\": 32-bit value by default. Use modifier %llx for 64-bit",
            "\t\tvalue output. X , Unsigned hex integer using \"ABCDEF\": 32-bit value by",
            "\t\tdefault. Use modifier %llX for 64-bit value output. SWrite(Strm,",
            "\t\t\"%z92\", \"Something \\to\\ be escaped\"); Gives the output: Something",
            "\t\t\\\\to\\\\ be escaped Plain text Text in the Format parameter is written",
            "\t\texactly as it appears, with three exceptions: Percentage sign (%)",
            "\t\tBecause format specifications for the Vn parameters are indicated by a",
            "\t\tpercentage sign, to include an actual percentage sign as part of the",
            "\t\tFormat parameter, precede it with a backslash character (i.e. \\%).",
            "\t\tBackslash character (\\) Because this is used to indicate special",
            "\t\tcontrol characters such as line feed, carriage return, and form feed,",
            "\t\tto write a backslash as part of the Format parameter, use two",
            "\t\tbackslash characters (i.e. \\\\). Quotation marks (\") The entire test",
            "\t\tstring is delimited by quotation marks, so to include a set of",
            "\t\tquotation marks as part of the Format parameter, use a set of",
            "\t\tquotations marks (i.e. \"\"). Control characters In order to encode",
            "\t\tcertain control characters as part of the Format parameter, one of two",
            "\t\tmethods may be used. The first is to use a backslash character",
            "\t\tfollowed by one of the single character codes listed below to produce",
            "\t\tthe desired result (notice that the letters must be lower case): Code",
            "\t\tMeaning \\b Backspace \\f Form feed \\n Line feed \\r Carriage return \\t",
            "\t\tHorizontal tab \\v Vertical tab \\nnn In addition to the above",
            "\t\tpredefined codes, \\nnn may be used, where nnn is a three digit integer",
            "\t\tin the range of 0 to 255 specifying a certain ASCII character. If the",
            "\t\tnumber contains less than three digits, the leading spaces must be",
            "\t\tpadded with zeroes; this is not the case with the previously listed",
            "\t\tsingle character control characters. For example, to include the one",
            "\t\tbyte ASCII character G in the output, you could place its decimal",
            "\t\tequivalent of 71 in the Format string as \\071. znnn Escape character",
            "\t\twhere nnn is the 3-digit ASCII code For example: SWrite(Strm, \"%z92\",",
            "\t\t\"Something \\to\\ be escaped\"); Gives the output: Something \\\\to\\\\ be",
            "\t\tescaped Offset is any numeric expression giving the starting buffer",
            "\t\tposition in bytes for the write, starting at 0. }",
            "\tnb, { c }",
            "\td, { e }",
            "\tE, { f }",
            "\tg, { G }",
            "\th, { i }",
            "\to, { p }",
            "\ts, { t }",
            "\tu, { x }",
            "\tX,",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10,",
            "\t\\b, { \\f }",
            "\t\\n, { \\r }",
            "\t\\t { \\v }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "SystemSelf": {
        "comments": [
            "{ Description: Returns the object value of the system module for the",
            "\tgiven application. }",
            "{ There is one and only one instance of the system module for each",
            "\tapplication. }"
        ],
        "snippets": [
            "SystemSelf(",
            "\tObject { Required. Any object value expression for any module instance",
            "\t\tin the application. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "TableInterpolation": {
        "comments": [
            "{ Description: Given a graph described by a CSV file containing X and",
            "\tY values, this function will interpolate a Y value for any provided X",
            "\tvalue within the range of the graph. }",
            "{ This function will read a table from a CSV file at the specified",
            "\tlocation and perform the selected type of interpolation for the Input",
            "\tvalue, returning the result. Returns Invalid if a result cannot be",
            "\tfound. Each line of the CSVfile must contain two values: The X and Y",
            "\tcoordinates for a point on the graph. No header should be included.",
            "\tThe data must be sorted from top to bottom within the file in order by",
            "\tascending X values. An optional error tag can be provided for which an",
            "\terror value will be set. }"
        ],
        "snippets": [
            "TableInterpolation(",
            "\tFileName, { Required text. The path and name of the CSV file",
            "\t\tcontaining X and Y values for a graph. }",
            "\tInput, { Required numeric. An X value, for which this function will",
            "\t\treturn an interpolated Y value. This value must be within the range of",
            "\t\tX values found in the given CSV file. }",
            "\tMode, { Required numeric. Sets the type of interpolation to use. Set",
            "\t\tto 0 for linear interpolation. Set to 1 to return the Y value",
            "\t\tassociated with the closest X value. }",
            "\tErrorTag { Optional tag object. If provided, this must be an analog",
            "\t\ttag (typically an I/O tag in Analog mode). The value of that tag will",
            "\t\tbe set according as follows: Value Meaning 0 Success 1 No file 2 Bad",
            "\t\tfile (Includes a header or does not hold X,Y data points sorted by",
            "\t\tascending X value .) 3 Input exceeds the maximum X value in the CSV",
            "\t\tfile 4 Input is less than the minimum X value in the CSV file 5 Input",
            "\t\tvalue not provided 6 Mode not set to 0 or 1 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "TableSynch": {
        "comments": [
            "{ Description: Synchronizes the fields matching a specified criteria",
            "\twithin matching tables in two databases. Should be run as a called",
            "\tmodule, waiting for completion. Do not call as a subroutine. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager\\, as shown in \"Format\" above. }"
        ],
        "snippets": [
            "\\ODBCManager\\TableSynch(",
            "\tDSNSource, { Required. Data source name of the database to retrieve",
            "\t\tdata from. }",
            "\tDSNDest, { Required. Data source name of the destination database to",
            "\t\tsend data to }",
            "\tTableName, { Required. Table name to read/write in both databases }",
            "\tWhereFields, { Required. A text array of field names to select using",
            "\t\tan SQL WHERE clause }",
            "\tWhereOperators, { Required. A text array of operators to use when",
            "\t\tselecting fields using an SQL WHERE clause }",
            "\tWhereValues, { Required. A text array of values to use when selecting",
            "\t\tthe above fields using an SQL WHERE clause }",
            "\tWhereSQLDataTypes, { Required. Values indicating the data type of the",
            "\t\tWhere values. Should be a simple value or an array matching the",
            "\t\tWhereFields parameter. Refer to Data Type Codes used in the ODBC",
            "\t\tManager for a list of the codes. }",
            "\tWhereAND, { Required. Set to true (1) if the fields in the SQL WHERE",
            "\t\tclause are to be AND'ed. Otherwise, OD'ed }",
            "\tSourceUsername, { Required. User name for source db }",
            "\tSourcePass, { Required. A password for source db }",
            "\tDestUsername, { Required. A user name for destination db }",
            "\tDestPass, { Required. A password for destination db }",
            "\tTransObj, { The object value of transaction }",
            "\tNRecords, { Required. A number of records to synchronize }",
            "\tCurrRecord { Required. Current record being written }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Tag": {
        "comments": [
            "{ Description: Returns a Tag value, which works like (and in place of)",
            "\ta Normalize value. }",
            "{ This function scales an expression from the low and high input range",
            "\tto between low and high values. The return value is a Normalize value.",
            "\tIf a Tag value is used in an expression, it will return the scaled",
            "\tvalue. This function does calculations with double-precision floating",
            "\tpoint values and does not support 64-bit integers computations. }"
        ],
        "snippets": [
            "Tag(",
            "\tValue, { Required. Any numeric expression to be normalized. }",
            "\tLowInput, { Required. Any numeric expression, which represents the",
            "\t\tlowest normal input value of Value. This is not a limit. }",
            "\tHighInput, { Required. Any numeric expression, which represents the",
            "\t\thighest normal input value of Value. This is not a limit. }",
            "\tLowScale, { Required. Any numeric expression, which represents the",
            "\t\tlowest normal scaled value of Value. This is not a limit. }",
            "\tHighScale, { Required. Any numeric expression, which represents the",
            "\t\thighest normal scaled value of Value. This is not a limit. }",
            "\tMode, { Required. Any numeric expression. Deprecated, but must be",
            "\t\tpresent and valid. }",
            "\tFreq { Required. Any numeric expression. Deprecated, but must be",
            "\t\tpresent and valid. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "TagIconMarker": {
        "comments": [
            "{ Description: Draws an \"IconMarker\" in the center of its transform",
            "\tarea, and optionally shows a blank icon when in editing mode. }"
        ],
        "snippets": [
            "TagIconMarker(",
            "\tTagReference, { Required. A reference to the tag for which the",
            "\t\tunlinked widget, questionable, manual or dummy tag indicator should be",
            "\t\tshown. }",
            "\tShowInConfigParm { Optional Boolean. If TRUE, the marker will be",
            "\t\tvisible (but blank) in the Idea Studio. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Tan": {
        "comments": [
            "{ Description: Returns the trigonometric tangent of an angle in",
            "\tradians. }",
            "{ The returned value is a number in the range of -1.00 to +1.00. To",
            "\tconvert an angle from degrees to radians multiply by \\pi / 180 or",
            "\t(approximately) 0.0174533. This function does calculations with",
            "\tdouble-precision floating point values and does not support 64-bit",
            "\tintegers computations. }"
        ],
        "snippets": [
            "Tan(",
            "\tAngle { Required. Any numeric expression giving the angle in radians.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Target": {
        "comments": [
            "{ Description: Returns an indication of whether the locator (e.g.",
            "\tmouse) is within a specified screen area. }",
            "{ This function returns true if the locator position is within the",
            "\tboundaries of the \"target\" ((X1,Y1) - (X2,Y2)). If the locator is not",
            "\tinstalled, the function will return false (0). Note: This function is",
            "\tdisabled when using a GUITransform as a GUIStrectch. }"
        ],
        "snippets": [
            "Target(",
            "\tX1, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of one side of the screen area (\"target\"). }",
            "\tY1, { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the screen area (\"target\"). }",
            "\tX2, { Required. Any numeric expression giving the X coordinate on the",
            "\t\tscreen of the side of the \"target\" opposite to X1. }",
            "\tY2 { Required. Any numeric expression giving the Y coordinate on the",
            "\t\tscreen of either the top or bottom of the target, whichever is the",
            "\t\topposite of Y1. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "TempFileStream": {
        "comments": [
            "{ Description: Creates a temporary file on disk and connects a stream",
            "\tto the temporary file. The temporary file is removed when the stream",
            "\tis closed or no longer referenced or if the VTScada process is",
            "\tterminated. }",
            "{ This function returns a stream connected to a temporary disk file",
            "\twith the contents of Buffer, which is the pointer at which an action",
            "\t(read or write) begins will be at the start of the stream. Writing to",
            "\tthis stream can overwrite or expand (or both,) the size of this",
            "\tinitial stream and file. }"
        ],
        "snippets": [
            "TempFileStream(",
            "\tBuffer { Required. Any text or buffer expression. This serves as the",
            "\t\tinitial content of the stream. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Text": {
        "comments": [
            "{ Description: Displays text in a window. }",
            "{ This statement has been superseded by the GUIText and ZText",
            "\tstatements and is maintained for backwards compatibility only. As of",
            "\tversion 11, this is now drawn in the same z-order as other graphics,",
            "\tmaking it similar to the z-graphics functions. Within an Anywhere",
            "\tClient session, this function does nothing. }"
        ],
        "snippets": [
            "Text(",
            "\tX, { Required. Any numeric expression giving the X screen coordinate",
            "\t\tof the lower left corner of the text on the screen. }",
            "\tY, { Required. Any numeric expression giving the Y screen coordinate",
            "\t\tof the lower left corner of the text on the screen. }",
            "\tValue, { Required. Any text expression giving the value to display. }",
            "\tForeground, { Required. Any numeric expression giving the color of the",
            "\t\tcharacters to display. }",
            "\tFill, { Obsolete - set to zero. }",
            "\tBackground, { Required. Any numeric expression giving the color of the",
            "\t\tbackground area for the output characters. }",
            "\tSize, { Required. Any numeric expression giving the height of the",
            "\t\tcharacters in units of Y screen coordinates. If this value results in",
            "\t\ta specification of less than 12 screen pixels high, the text will be",
            "\t\tthe small text (8 pixels high). Otherwise, the text will be the large",
            "\t\ttext. If Size is negative, it will be interpreted as a dot text output",
            "\t\tof size equivalent to the absolute value of the size. The number will",
            "\t\tbe displayed to the nearest multiple of the base 8 pixel by 8 pixel",
            "\t\ttext. This produces faster, non-destructive large characters than the",
            "\t\tnormal large text characters. Setting size greater than 12 results in",
            "\t\tnon-XOR drawing. }",
            "\tObsolete { No longer used, but is maintained for backward",
            "\t\tcompatibility with previous versions of VTScada. Set to 0. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "TextAttribs": {
        "comments": [
            "{ Description: Returns graphic-related information about a text, given",
            "\ta font. }"
        ],
        "snippets": [
            "TextAttribs(",
            "\tText, { Required. Any text expression. }",
            "\tFont, { Required. Any font expression. }",
            "\tOption { Required. Any numeric expression for the desired parameter:",
            "\t\tOption Parameter 0 Width of text in pixels 1 Height of text in pixels",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "TextBox": {
        "comments": [
            "{ Description: Displays a text string, breaking it into multiple lines",
            "\tat space or CRLF. }",
            "{ If the current text cannot be accommodated by breaking at a word",
            "\tboundary, then the word will be hyphenated (not grammatically). A",
            "\tvertical scrollbar will be automatically added if required. }"
        ],
        "snippets": [
            "System.TextBox(",
            "\tX1, { Required. The left side coordinate. }",
            "\tY1, { Required. The bottom side coordinate. }",
            "\tX2, { Required. The right side coordinate. }",
            "\tY2, { Required. The top side coordinate. }",
            "\tMsg, { Required. The message buffer to display. }",
            "\tFontVal, { Required. The font to use (defaults to \\_DialogFont). }",
            "\tStyle, { Required. The bevel/border/wordwrap requirements. This can be",
            "\t\tone of: Bit 0 Draw a bevel at X1/Y1/X2/Y2. An 8-pixel margin will be",
            "\t\tadded when determining the text rectangle. The default is TRUE. Bit 1",
            "\t\tDraw a border around the text rectangle. A further 4-pixel margin will",
            "\t\tbe added. The default is TRUE. Bit 2 Word wrap text. The default is",
            "\t\tTRUE. Bit 3 Transparent background. Can be clicked-through to the",
            "\t\tcontrols beneath. Default is FALSE Bit 4 Disables the vertical scroll",
            "\t\tbar when TRUE. Default is FALSE Bit 5 Disables the horizontal scroll",
            "\t\tbar when TRUE. Default is FALSE. (See: Bitwise Parameters & Operations",
            "\t\t) }",
            "\tBit 1, { Bit 2 }",
            "\tBit 3, { Bit 4 }",
            "\tBit 5",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "TextEncode": {
        "comments": [
            "{ Description: Takes text in the local code page and converts it into",
            "\tUTF-8 encoded text where a suitable conversion exists. }",
            "{ The return value will be the input string encoded as UTF-8, unless",
            "\tthere are any sequences of bytes in the input string that cannot be",
            "\trepresented as UTF-8, in which case the return value will be invalid.",
            "\tIf converting from ISO-8859-1 to UTF-8, you must make two conversions:",
            "\tfirst from ISO-8859-1 to UTF-16, then from UTF-16 to UTF-8. The",
            "\tintermediate step may also be required for other conversions to UTF-8.",
            "\t}"
        ],
        "snippets": [
            "TextEncode(",
            "\tInputText, { Required text. The information to be encoded. }",
            "\tErrMsgOut, { Optional return parameter. If provided, this will be set",
            "\t\tto a text representation of the error. }",
            "\tInputCharacterSet, { Optional text. The IANA character set name to",
            "\t\tuse. Defaults to the character set given by the local system code",
            "\t\tpage. }",
            "\tOutputCharacterSet { Optional text. The IANA character set name to use",
            "\t\tfor output. Defaults to \"UTF-8\". }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TextIP2Bin": {
        "comments": [
            "{ Description: Returns the Binary representation of the specified IP.",
            "\t}",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.src. If you have an IP of the format 192.168.0.200/24, the /24",
            "\twill be ignored. }"
        ],
        "snippets": [
            "\\RPCManager\\TextIP2Bin(",
            "\tIP { Required. The IP that you want converted to Binary format.",
            "\t\tFormatting example 192.168.0.200. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TextOffset": {
        "comments": [
            "{ Description: Returns the character offset to the definition text of",
            "\ta desired item. }"
        ],
        "snippets": [
            "TextOffset(",
            "\tCodeValue, { Required. Any code value expression for the item. }",
            "\tType { Required. Any numeric expression for the value type of",
            "\t\tCodeValue. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TextSearch": {
        "comments": [
            "{ Description: Returns the array index of the first occurrence of the",
            "\tgiven text key in an alphabetically ordered array. }",
            "{ If the key is not found in the array, the function returns invalid.",
            "\tNotice that the array (or the elements being searched in the array)",
            "\tmust be in ascending alphabetical order for this statement to return a",
            "\tvalid value. Do not mix sorting modes. In particular, if you Sort an",
            "\tarray and then use TextSearch on it, you must ensure that each uses",
            "\tthe same sorting mode with the same locale. }"
        ],
        "snippets": [
            "TextSearch(",
            "\tArrayElem, { Required. Any array element giving the starting index for",
            "\t\tthe array operation. The index for the array may be any numeric",
            "\t\texpression. If processing a multidimensional array, the usual rules",
            "\t\tapply to decide which dimension should be used. }",
            "\tN, { Required. Any numeric expression for the number of array elements",
            "\t\tto search. If N plus the starting element is larger than the size of",
            "\t\tthe remaining array, then this function will \"wrap around\" to restart",
            "\t\tat the first element. For this to have any useful result, the array",
            "\t\twould need to be sorted to match before running TextSearch. }",
            "\tText, { Required. Any text string to search for. Does not take an",
            "\t\texpression. }",
            "\tCase, { Required. Any logical expression. If true, the search is",
            "\t\tcase-sensitive. Otherwise, the search is case-insensitive. }",
            "\tTypeText, { Optional. A numeric expression that controls the type of",
            "\t\tsort according to the following table. Defaults to zero - numeric",
            "\t\tsorting. TypeText Sort Performed 0 Reserved 1 Alphabetic sort 2",
            "\t\tReserved 3 Lingual sort 4 Reserved }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { Locale }",
            "\tCmpFlags { A set of flags directing how the comparison should be done,",
            "\t\tas described in",
            "\t\thttps://docs.microsoft.com/en-us/windows/desktop/api/stringapiset/nf-stringapiset-comparestringex",
            "\t\tSupported flags include: #NORM_IGNORECASE #NORM_IGNORENONSPACE",
            "\t\t#NORM_IGNORESYMBOLS #LINGUISTIC_IGNORECASE #LINGUISTIC_IGNOREDIACRITIC",
            "\t\t#NORM_IGNOREKANATYPE #NORM_IGNOREWIDTH #NORM_LINGUISTIC_CASING",
            "\t\t#SORT_DIGITSASNUMBERS #SORT_STRINGSORT }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "TextSize": {
        "comments": [
            "{ Description: Returns the size in characters of the definition text",
            "\tof a desired item. }",
            "{ This function may only appear in a script. }"
        ],
        "snippets": [
            "TextSize(",
            "\tCodeValue, { Required. Any code value expression for the item. }",
            "\tType { Required. Any numeric expression for the value type of",
            "\t\tCodeValue. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TGet": {
        "comments": [
            "{ Description: This threaded function reads an array of historical",
            "\tdata from a file (written by Save or SaveHistory) and returns an",
            "\tindication of parameter errors. }",
            "{ This function is similar to Get except that it runs in its own",
            "\tthread - it is typically used when a large amount of data is being",
            "\tread. When the TGet is executed in its script, it starts its own",
            "\tthread and VTScada will continue executing. When it is finished",
            "\texecuting, it will set the data in Array. Note that Array will not be",
            "\tinitially invalidated upon execution of this statement. This means",
            "\tthat if Array already contained data when the TGet was executed, that",
            "\tdata will remain untouched until all of the data requested by TGet has",
            "\tbeen amassed, at which time Array will be set to its new value. There",
            "\tis a return value for this function that indicates if any of its",
            "\tparameters are invalid. The function will immediately return a value",
            "\tof false (0) unless a parameter was invalid, in which case it will",
            "\treturn true (1). Note that the return value only signals completion of",
            "\tthe function's execution if it is true, otherwise the function will",
            "\tcontinue executing in its thread. If StartDate is given a negative",
            "\tvalue, indicating that a particular entry is to be retrieved, it must",
            "\tbe stressed that the file being read by the TGet may or may not",
            "\tcontain an invalid record at the end of the file. If the Save that",
            "\tcreated the file was given a negative number for its Buffers",
            "\tparameter, the invalid record would not have been written to the file,",
            "\thowever, a zero or positive value for Buffers will mean that the last",
            "\trecord of the file will be one whose fields are all invalid and whose",
            "\ttime and date stamp reflect the cessation of writing to the file by",
            "\tthe Save. If FieldNum is an array with more than one element, then",
            "\tTGet will retrieve multiple fields from the file. In this case,",
            "\tArrayElem must represent an array with at least two dimensions. The",
            "\trequested values will be returned in a manner analogous to GetHistory,",
            "\twith the data for a column in the rightmost dimension, and the column",
            "\tindex in the previous dimension. When FieldNum is specified as an",
            "\tarray, Mode or StaleTime, or both, may be specified as either a single",
            "\tvalue or an array of values. If a single value is specified, that",
            "\tvalue will be used for each of the fields specified in FieldNum. If an",
            "\tarray of values is specified, the first element in the array will be",
            "\tapplied to the first element of FieldNum, and so on. If PathPrefix is",
            "\tspecified, then this changes the interpretation of the File parameter.",
            "\tIn this case, the referenced file is not the source of the data, but a",
            "\tfile containing references to other files which are the data sources.",
            "\tThis file should be in standard VTScada logfile format and should",
            "\tcontain a file reference as the first text value of each record (other",
            "\tvalues are ignored). The records should be in the correct time order",
            "\twith respect to the data files. The value of the PathPrefix is a",
            "\tstring, which when prefixed to one of the file references, will yield",
            "\ta full pathname to the target file. If no prefix is required, but",
            "\texpansion of the dataset is required, then PathPrefix should be an",
            "\tempty string. If a filename entry does NOT begin with a \"\\\" or \"<drive",
            "\tletter>:\\\", then the PathPrefix will be prepended to the filename. If",
            "\ta filename entry DOES begin with \"<drive letter>:\\\", then the",
            "\tPathPrefix will NOT be prepended to the filename. If a filename entry",
            "\tdoes begin with a \"\\\", then the \"<drive letter>:\" from the PathPrefix",
            "\twill be prepended to the filename. If there is no \"<drive letter>:\" in",
            "\tthe PathPrefix then the \"<drive letter>:\" from the path of the File",
            "\tparameter will be used instead. PathPrefix would normally be the",
            "\tapplication path. }"
        ],
        "snippets": [
            "TGet(",
            "\tArray, { Required. A variable which will be set to an array upon",
            "\t\tcompletion of the data retrieval. }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\tentries to create. }",
            "\tFile, { Required. Any text expression giving the file name for the",
            "\t\thistorical data file. The file extension should not be added to the",
            "\t\tname since the default of \".DAT\" is automatically added.If the file",
            "\t\tname is prefixed with a period, the path will be to the directory the",
            "\t\tmodule is contained in. }",
            "\tFieldNum { Required. Any numeric expression giving the field number to",
            "\t\tbe read from the file. The value number for the actual data starts at",
            "\t\t0 and corresponds to the columns specified in Save or SaveHistory. It",
            "\t\tis also possible to retrieve time data associated with each record by",
            "\t\tsetting this parameter to a negative value.Time options are: FileNum",
            "\t\tTime Option -1 Time of day only -2 Date only -3 Time since January 1,",
            "\t\t1970 It is possible to retrieve more than one field in a single TGet",
            "\t\tstatement. To do this, pass an array of values in as the FieldNum",
            "\t\tparameter. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Thread": {
        "comments": [
            "{ Description: Launches a module in its own separate thread. }",
            "{ This function behaves similar to Launch except that a separate",
            "\tthread is created in which the module is executed. This means that it",
            "\twill not block execution of other modules; the CPU time will be",
            "\tdivided equally amongst threads of equal priority. Great care should",
            "\tbe exercised when using this function since each thread created by",
            "\tWindowsâ¢ uses certain system resources and will by its very existence",
            "\tslightly slow the running of the application. In general, the Thread",
            "\tfunction should only be used when a module would otherwise monopolize",
            "\tsystem resources to such an extent that other critical modules would",
            "\tbe severely hampered in their execution. This function returns an",
            "\tobject value of the newly started module, in the same way that Launch",
            "\tdoes. This means that parameters are passed to the module as a value",
            "\tonly, and if the module instance changes one of their values, its",
            "\tvalue will not change outside of the scope of the threaded module.",
            "\tVariables external to the module that the module itself will be",
            "\trequired to alter should reside within the scope of Parent and be set",
            "\tdirectly, rather than passed as parameters. }"
        ],
        "snippets": [
            "Thread(",
            "\tModule, { Required. A module pointer or a text expression giving the",
            "\t\tmodule to run. If the module is in scope, the text expression giving",
            "\t\tits name may be used, otherwise the module pointer returned from",
            "\t\teither a LoadModule or FindVariable statement is typically used. }",
            "\tParent, { Required. The object value of the module where Module is to",
            "\t\tresolve its global variable references. If a valid non-object value is",
            "\t\tsupplied Module will resolve its global variable references to the",
            "\t\tscope defined by the first parameter. If this is invalid, the module",
            "\t\twill still run, but global references will be invalid. }",
            "\tCaller, { Required. The object value of the window to draw in. This",
            "\t\tspecifies the module instance where Module acts as if it were called",
            "\t\tfrom. If this is invalid, the module will still run but will not stop",
            "\t\twithout a Slay. If it is valid, the module will stop when the Caller",
            "\t\tmodule instance stops or when a Slay is executed upon it. }",
            "\tName, { Required. Any text expression giving the name that is to be",
            "\t\tassociated with this particular thread. This is the name that will be",
            "\t\treturned by the ThreadList function. }",
            "\tP1, P2, ... { Required. Are any expressions which will be supplied as",
            "\t\tparameters to the module. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ThreadHistory": {
        "comments": [
            "{ Description: Returns in an array, the history of execution for all",
            "\tthreads. }",
            "{ The return value for ThreadHistory is a listing of the last 8192",
            "\toperations on the thread (max) with five data points per operation.",
            "\tThis array should be interpreted in the format, [column][row]. The",
            "\tfive rows (data points per operation) are as follows: 0 = Time of",
            "\texecution 1 = Module, State and Statement (type 13) for the operation",
            "\t2 = State name where the operation is located 3 = Statement number of",
            "\tthe operation 4 = Object value for the owning module instance The",
            "\tsecond parameter is typically populated by using the result of calling",
            "\tThreadHistory once with an empty array. For example, if you want to",
            "\tobtain the execution history every 5 seconds, you might use the",
            "\tfollowing code to save having to build a 10000-element array every",
            "\ttime: If TimeOut(1, 5); [ ExecuctionHistory = ThreadHistory(Invalid,",
            "\tExecutionHistory, 10000); ] The first time the above is called,",
            "\tExecutionHistory will be Invalid so ThreadHistory will build,",
            "\tpopulate, and return a multi-dimensional array with 10000 elements.",
            "\tThe second time it is called, ExecutionHistory will have been set to",
            "\tthe array of the right size / dimensions. ThreadHistory will populate",
            "\tthe array it was given and return it, rather than creating a new",
            "\tarray. }"
        ],
        "snippets": [
            "ThreadHistory(",
            "\tUnused, { Reserved. Should be set to Invalid. }",
            "\tArrayToPopulate, { Name of the array. See comments. }",
            "\tNumRecords { Defaults to 10,000 if not specified. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ThreadIdle": {
        "comments": [
            "{ Description: Returns TRUE when the ToDo list for a given thread is",
            "\tempty. }"
        ],
        "snippets": [
            "ThreadIdle(",
            "\tObjectValue { Required. The object value of the thread to monitor. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ThreadList": {
        "comments": [
            "{ Description: Returns a two dimensional array containing the name and",
            "\tstatement last executed by each VTScada thread. }",
            "{ This function returns an allocated array such that the first row of",
            "\tthe array (array[0][n]) contains the name of each thread, while the",
            "\tsecond row (array[1][n]) contains the statement most recently executed",
            "\tstatement in that thread. The threads are ordered in the array in",
            "\tchronological order with the most recently started thread is at the",
            "\tbeginning of the array. }"
        ],
        "snippets": [
            "ThreadList();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ThreadName": {
        "comments": [
            "{ Description: Returns the name of a thread. }",
            "{ This function returns the name of the thread in which Instance is",
            "\texecuting. }"
        ],
        "snippets": [
            "ThreadName(",
            "\tInstance { Required. Any object value designating the thread for which",
            "\t\tthe name is required. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ThreadPriority": {
        "comments": [
            "{ Description: Allows advanced users to set a specified thread to one",
            "\tof six priorities, ranging from idle to time critical. }",
            "{ All threads default to THREAD_PRIORITY_NORMAL. The operating system",
            "\twill place priority on threads operating at higher priorities over",
            "\tthreads operating at lower priorities. The responsiveness of higher",
            "\tpriority threads is therefore improved (at the expense of lower",
            "\tpriority thread responsiveness). Threads that share information",
            "\tamongst themselves may see performance drop if they donât all operate",
            "\tat the same priority. Similarly high priority threads that perform",
            "\textended operations may prevent lower priority threads from operating",
            "\tat all. Use of high priority threads is typically appropriate to short",
            "\toperations that need to be performed without delay or to processes",
            "\tthat are intolerant of interruption. }"
        ],
        "snippets": [
            "ThreadPriority(",
            "\tObjectReference, { Required. Indicates the thread to be modified. }",
            "\tPriority { Required. A value from -3 to 3 that indicates the priority",
            "\t\tof the thread. This may be one of: Priority Description -3",
            "\t\tTHREAD_PRIORITY_IDLE -2 THREAD_PRIORITY_LOWEST -1",
            "\t\tTHREAD_PRIORITY_BELOW_NORMAL 0 THREAD_PRIORITY_NORMAL (Default) 1",
            "\t\tTHREAD_PRIORITY_ABOVE_NORMAL 2 THREAD_PRIORITY_HIGHEST 3",
            "\t\tTHREAD_PRIORITY_TIME_CRITICAL }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Time": {
        "comments": [
            "{ Description: Returns a formatted string for a time of day. }",
            "{ The Sec parameter may be negative, in which case it specifies the",
            "\ttime before midnight. If greater than 86400, it specifies the time in",
            "\tthe next day. The text string returned is at most 11 characters long.",
            "\t}"
        ],
        "snippets": [
            "Time(",
            "\tSec, { Required. Any numeric expression giving the number of seconds",
            "\t\tsince mid night. The function, Now(1), is commonly used as it returns",
            "\t\tthe current time of day, expressed in seconds. }",
            "\tTimeForm { Required. Any numeric expression giving the option for the",
            "\t\ttime Time Formatting Codes . Will also accept a time locale such as",
            "\t\t\"us-en\" matching the Windows locale. If TimeForm is numeric, the",
            "\t\tformat for the time will be interpreted. If TimeForm is a text value",
            "\t\tthat does not resolve to a numeric, it is interpreted as a time",
            "\t\tformatting string as follows. String Example Description h 9 Hours",
            "\t\twith no leading zero for single-digit hours. 12-hour clock. hh 09",
            "\t\tHours with leading zero for single-digit hours. 12-hour clock. H 21",
            "\t\tHours with no leading zero for single-digit hours. 24-hour clock. HH",
            "\t\t21 Hours with leading zero for single-digit hours. 24-hour clock. m 7",
            "\t\tMinutes with no leading zero for single-digit minutes. mm 07 Minutes",
            "\t\twith leading zero for single-digit minutes. s 12 Seconds with no",
            "\t\tleading zero for single-digit seconds. ss 12 Seconds with leading zero",
            "\t\tfor single-digit seconds. f .1 Tenths of a second ff .01 Hundredths of",
            "\t\ta second fff .001 Milliseconds t P One character time-marker string,",
            "\t\tsuch as A or P. tt PM Multi-character time-marker string, such as AM",
            "\t\tor PM. In the event that the TimeForm parameter does not resolve to",
            "\t\teither a numeric or text value, the system-configured time format, as",
            "\t\tspecified through the Windows Control Panel, is used. In this case,",
            "\t\tthe Flags parameter is used to select from a number of options for the",
            "\t\ttime. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "TimeArrived": {
        "comments": [
            "{ Description: Indicates whether a given time has occurred. }"
        ],
        "snippets": [
            "TimeArrived(",
            "\tTriggerTime { Required. A UTC timestamp, specifying when the",
            "\t\tTimeArrived function will become true.. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "TimeOut": {
        "comments": [
            "{ Description: Returns true when the uninterrupted time that an",
            "\texpression is true reaches the specified value. }",
            "{ This function is reset when either parameter becomes invalid, the",
            "\tEnable becomes false, or when the state containing the function is",
            "\tstarted. When the function is reset, counting starts at 0 and the",
            "\treturned value is false (0). Note that this function is reset",
            "\tautomatically when it occurs in a true action trigger or function",
            "\tparameter of a function which resets its parameters after evaluation",
            "\t(e.g. Latch, Toggle & Save). VTScada includes an application property",
            "\tat the \\Code level named SecondFlasher. The value of this property",
            "\tchanges from 0 to 1 once a second, as near as possible to the change",
            "\tof the second. In most cases, it is better to watch for the change of",
            "\t\\SecondFlasher than to burden the system with an additional function",
            "\tto calculate one-second intervals. }"
        ],
        "snippets": [
            "TimeOut(",
            "\tEnable, { Required. Any numeric expression giving the condition that",
            "\t\tresults in the timer counting. When this parameter is true (not 0),",
            "\t\tthe timer is \"running.\" When this parameter is false (0), the timer",
            "\t\tstops and the timer is reset to 0. }",
            "\tTime { Required. Any numeric expression giving the time-out limit in",
            "\t\tseconds. When the cumulative time that Enable is true reaches this",
            "\t\tvalue, the function becomes true (1). If this value is 0 the function",
            "\t\twill trigger immediately and will continue to trigger as long as the",
            "\t\tstate containing this function is active. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "TimeUtils": {
        "comments": [
            "{ Description: Dictionary containing time periods. }"
        ],
        "snippets": [
            "\\TimeUtils.Periods[\"PeriodName\"][\"BoundaryName\"](",
            "\tPeriodName, { Text. May be any of the following: CurrentDay",
            "\t\tCurrentMonth CurrentQuarter CurrentWeek CurrentYear PreviousDay",
            "\t\tPreviousMonth PreviousQuarter PreviousWeek PreviousYear }",
            "\tBoundaryName { Text. Specifies the start or end boundary of the",
            "\t\tperiod, in either UTC or local time. May be any of the following:",
            "\t\tEndTimeLocal EndTimeUTC StartTimeLocal StartTimeUTC }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "TimeZone": {
        "comments": [
            "{ Description: Returns information on the current time zone setting of",
            "\tthe machine. }",
            "{ Note that the first two options take account of whether daylight",
            "\tsavings is in effect (assuming that that option has been selected on",
            "\tthe machine). This means that not only the numeric time displacement,",
            "\tbut also the name (\"Daylight Time\" versus \"Standard Time\") will vary",
            "\taccording to the current date. The output from the third option (2) is",
            "\tcommonly used as an input to the ConvertTimestamp function since that",
            "\tfunction cannot use the adjusted timezone string from TimeZone(1).",
            "\tOnly English is recognized. }"
        ],
        "snippets": [
            "TimeZone(",
            "\tOption { Required. Any numeric expression giving the information to",
            "\t\treturn as follows: Option Returns 0 Time displacement in seconds to",
            "\t\tUTC 1 Name of time zone (maximum of 32 characters) in \"Daylight Time\"",
            "\t\tor \"Standard Time\", which ever is applicable. The language used will",
            "\t\tmatch the user's locale as configured in Windows. 2 Name of time zone",
            "\t\t(maximum of 32 characters) in \"Standard Time\" only. The name is given",
            "\t\tin English only, making this suitable as an input to ConvertTimestamp.",
            "\t\tCommonly used for display purposes. 3 A structure of time zone",
            "\t\tinformation: StdTimeZone (Standard time zone) ObservesDST (Boolean",
            "\t\tindicating Daylight Savings Time usage when true) The time zone name",
            "\t\tis returned in English only, making this suitable as an input to",
            "\t\tConvertTimestamp. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TimeZoneList": {
        "comments": [
            "{ Description: Returns a list of time zones. }",
            "{ Entries in the returned list may be used as parameters for the",
            "\tConvertTimestamp function. TimeZoneList produces a list of time zones",
            "\tin English, even on non-English versions of Windows. }"
        ],
        "snippets": [
            "TimeZoneList();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Today": {
        "comments": [
            "{ Description: Returns the current number of days since January 1,",
            "\t1970. }"
        ],
        "snippets": [
            "Today();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "TODBC": {
        "comments": [
            "{ Description: Performs an ODBC command. Similar to ODBC except that",
            "\tit runs in its own thread (see \"Comments\" section for differences). }",
            "{ This command will require a knowledge of SQL (Structured Query",
            "\tLanguage). This function is typically used when a large amount of data",
            "\tis being processed. When TODBC is executed in its script, it starts",
            "\tits own thread and VTScada will continue executing. When the TODBC",
            "\tstatement is finished executing, it will set the data in Attrib, give",
            "\tthe resultant table in Result and set ErrorCode. Some SQL statements,",
            "\tsuch as the one for inserting a record into a table, do not return any",
            "\tdata, in this case the only indication that the thread has terminated",
            "\twill be that ErrorCode will be set to a valid value - 0 if no errors",
            "\toccurred. Notice that unlike ODBC, the resultant table is returned in",
            "\tone of the parameters, rather than as a return value and the last",
            "\tthree parameters are not optional. If any error, no matter how minor,",
            "\toccurs as a result of the SQL command having been executed, and the",
            "\tTODBCConnect or ODBCConnect that connected to the database had its",
            "\tDisconnect parameter set true, the value of DB will become invalid",
            "\t(i.e. the connection to the database will be dropped). This includes",
            "\tsuch trivial indiscretions as using an incorrect table name in the SQL",
            "\tcommand. Differences between blocking and non-blocking ODBC calls:",
            "\tPrior to VTS version 10.0, executing one of the following blocking",
            "\tODBC operations - ODBC, ODBCTables, ODBCConnect, ODBCDisconnect,",
            "\tODBCBeginTrans, ODBCCommit or ODBCRollback would cause all VTScada",
            "\tscript code execution and window painting to suspend until the",
            "\toperation was complete. From VTS 10.0 onwards, only the VTScada script",
            "\tthread making the call is suspended. All other threads and window",
            "\tpainting continue to function. Prior to VTS version 10.0, a",
            "\tnon-blocking ODBC operation was used to avoid this issue (same set of",
            "\toperations with a 'T' prepended). This leads to more complex script",
            "\tcode insofar as you have to initiate an operation in a script and wait",
            "\tfor completion in steady-state, but did allow script threads and",
            "\twindow painting to continue. However, the Txxx operations were more",
            "\ttime consuming to execute, as they each spin up a thread to execute",
            "\tthe operation asynchronously. From VTS 10.0 onwards, these operations",
            "\tare more efficient - there is now no performance difference between",
            "\tthe Txxx non-blocking variants and the blocking ones. As blocking ODBC",
            "\tcalls no longer suspend all other threads, the only reason for using a",
            "\tTxxx variant call is where you wish to allow other script code",
            "\tstatements in the same VTScada script thread to execute while the ODBC",
            "\toperation is processing. }"
        ],
        "snippets": [
            "TODBC(",
            "\tDB, { Required. An ODBC value for the ODBC database as returned by",
            "\t\tTODBCConnect or ODBCConnect. }",
            "\tSQLCommand, { Required. Any text expression for the SQL command to",
            "\t\tperform on the ODBC database driver. }",
            "\tAttrib, { Required. Any variable that will be set to an array that",
            "\t\tgives certain information regarding the table returned in the next",
            "\t\tparameter. The first dimension of the array contains the name of the",
            "\t\tcolumn in the return table, while the second dimension contains the",
            "\t\ttype - 0 for character data, 1 for numeric data. }",
            "\tResult, { Required. Any variable that will be set to an array",
            "\t\tcontaining the data resulting from the SQL command. The format for the",
            "\t\tarray is Result[Field][Record]. }",
            "\tErrorMsg, { Required. Any variable that will contain the last error",
            "\t\tmessage returned by the function. If no errors occurred this parameter",
            "\t\twill be set to 0 to indicate the termination of the thread. }",
            "\tSQLState, { Required. Any variable that will contain the SQL state",
            "\t\tthat the statement was in when the last error occurred. }",
            "\tErrorCode, { Required. Any variable that will contain the native error",
            "\t\tcode for the given driver and an error condition for the last error",
            "\t\tthat occurred. }",
            "\tQueryTimeout { An optional parameter that sets the period (in seconds)",
            "\t\twhich the driver will wait for a query request to complete. The",
            "\t\tdefault value of \"0\" indicates that there is no timeout. Please note",
            "\t\tthat not all ODBC drivers support the optional QueryTimeout parameter.",
            "\t\tIn particular, the Microsoft Access (.mdb) driver. If the driver does",
            "\t\tnot support this option, then an error message will be returned by the",
            "\t\tstatement. If this occurs, then the parameter should be left as",
            "\t\tInvalid to allow the statement to proceed. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TODBCBeginTrans": {
        "comments": [
            "{ Description: Indicates to an ODBC-compliant database that a",
            "\ttransaction is to be started. TODBCBeginTrans is similar to",
            "\tODBCBeginTrans, except that it runs in its own thread (see the",
            "\tComments section for differences). }",
            "{ TODBCBeginTrans indicates that a transaction is to be started on the",
            "\tspecified ODBC database. The statement executes in its own thread, and",
            "\tcompletion is indicated by the ErrorCode parameter being set to a",
            "\tvalid value, or to \"0\" in the case of no errors. If any error, no",
            "\tmatter how minor, occurs as a result of the statement, and the",
            "\tTODBCConnect or ODBCConnect that connected to the database had its",
            "\tDisconnect parameter set to true, the value of DB will become invalid",
            "\t(i.e. the connection to the database will be dropped). }"
        ],
        "snippets": [
            "TODBCBeginTrans(",
            "\tDB, { Required. A n ODBC value for the specified ODBC database as",
            "\t\treturned by ODBCConnect. }",
            "\tErrorMsg, { A parameter that will contain the last error message",
            "\t\treturned by the function. }",
            "\tSQLState, { A parameter that will return the SQL state that the",
            "\t\tstatement was in when the last error occurred. }",
            "\tErrorCode { A variable that will contain the native error code for the",
            "\t\tgiven driver and an error condition for the last error that occurred.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TODBCCommit": {
        "comments": [
            "{ Description: Indicates to an ODBC-compliant database that a",
            "\ttransaction is to be committed. TODBCCommit is similar to ODBCCommit,",
            "\texcept that it runs in its own thread (see the Comments section for",
            "\tdifferences). }",
            "{ Commits a transaction defined as all the SQL statements since the",
            "\ttransaction began. The statement executes in its own thread, and",
            "\tcompletion is indicated by the ErrorCode parameter being set to a",
            "\tvalid value, or \"0\" in the case of no errors. If any error, no matter",
            "\thow minor, occurs as a result of the statement, and the TODBCConnect",
            "\tor ODBCConnect that connected to the database had its Disconnect",
            "\tparameter set to true, the value of DB will become invalid (i.e. the",
            "\tconnection to the database will be dropped). }"
        ],
        "snippets": [
            "TODBCCommit(",
            "\tDB, { Required. An ODBC value for the specified ODBC database as",
            "\t\treturned by ODBCConnect. }",
            "\tErrorMsg, { A parameter that will contain the last error message",
            "\t\treturned by the function. }",
            "\tSQLState, { A parameter that will return the SQL state that the",
            "\t\tstatement was in when the last error occurred. }",
            "\tErrorCode { A parameter that is a variable that will contain the",
            "\t\tnative error code for the given driver and an error condition for the",
            "\t\tlast error that occurred. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TODBCConnect": {
        "comments": [
            "{ Description: Forms a connection to an ODBC database. Similar to",
            "\tODBCConnect except that it runs in its own thread (see \"Comments\"",
            "\tsection for differences) }",
            "{ When TODBCConnect is executed in its script, it starts its own",
            "\tthread and VTScada will continue executing. This is similar to",
            "\tODBCConnect except that execution of the application is not suspended",
            "\twhile waiting for the connection to the database (i.e. waiting for the",
            "\treturn value to be set). Instead, execution continues and sometime in",
            "\tthe future when the connection to the database is established, DB will",
            "\tbe set to the ODBC value for the database. If any errors occurred, the",
            "\terror parameters, ErrorMsg, SQLState and ErrorCode, would be set at",
            "\tthat time to indicate the nature of the error. ErrorCode will be set",
            "\tto zero if no error occurs. 64-bit VTScada. 64-bit VTScada is able to",
            "\tconnect to either 64-bit or 32-bit ODBC data sources. ODBCConnect will",
            "\tfirst try to connect to the database through a 64-bit ODBC driver. If",
            "\tthis fails for any reason it will then try the connection through a",
            "\t32-bit ODBC driver. This means that any ODBC code that worked under",
            "\t32-bit VTScada should not need to be modified for use with 64-bit",
            "\tVTScada, but 64-bit VTScada has the extra ability of being able to use",
            "\t64-bit ODBC drivers. }"
        ],
        "snippets": [
            "TODBCConnect(",
            "\tDSName, { Required. Any text expression for the ODBC data source name,",
            "\t\tas configured in the ODBC setup menu under Microsoft Windowsâ¢. }",
            "\tUserName, { Required. Any text expression for the ODBC login user",
            "\t\tname. }",
            "\tPassword, { Required. Any text expression for the ODBC login password.",
            "\t\t}",
            "\tDB, { Required. An ODBC value for the ODBC database after a connection",
            "\t\thas been established. }",
            "\tErrorMsg, { Required. Any variable that will contain the last error",
            "\t\tmessage returned by the function. If no errors occurred this parameter",
            "\t\twill be set to 0 to indicate the termination of the thread. }",
            "\tSQLState, { Required. Any variable that will contain the SQL state",
            "\t\tthat the statement was in when the last error occurred. }",
            "\tErrorCode, { Required. Any variable that will contain the native error",
            "\t\tcode for the given driver and an error condition for the last error",
            "\t\tthat occurred. }",
            "\tDisconnect, { An optional parameter which is any logical expression",
            "\t\tthat determines how errors are to be handled. If true (non-0), the",
            "\t\tconnection to the database will be disconnected should any error (no",
            "\t\tmatter how minor) occur; if false (0) an error will not cause a",
            "\t\tdisconnect to occur. The default value is false. }",
            "\tLoginTimeout, { Sets the period (in seconds) which the driver will",
            "\t\twait for a login request to complete. The default value of \"0\"",
            "\t\tindicates that there is no timeout. }",
            "\tConnectionTimeout { Sets the period (in seconds) which the driver will",
            "\t\twait for any request other than a query or login on the connection to",
            "\t\tcomplete. The default value of \"0\" indicates that there is no timeout.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TODBCDisconnect": {
        "comments": [
            "{ Description: Stops a connection to the ODBC database. Similar to",
            "\tODBCDisconnect except that it runs in its own thread (see \"Comments\"",
            "\tsection for differences). }",
            "{ When TODBCDisconnect is executed in its script, it starts its own",
            "\tthread which will not stop execution of VTScada, and which will exist",
            "\tuntil the connection to the database has been broken. }"
        ],
        "snippets": [
            "TODBCDisconnect(",
            "\tDB { Required. An ODBC value for the ODBC database as returned by",
            "\t\tTODBCConnect or ODBCConnect. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TODBCRollback": {
        "comments": [
            "{ Description: Indicates to an ODBC-compliant database that a",
            "\ttransaction is to be discarded. TODBCRollback is similar to",
            "\tODBCRollback, except that it runs in its own thread (see the Comments",
            "\tsection for differences). }",
            "{ Discards a transaction defined as all the SQL statements executed on",
            "\ta database since the transaction began. If any error, no matter how",
            "\tminor, occurs as a result of the statement, and the TODBCConnect or",
            "\tODBCConnect that connected to the database had its Disconnect",
            "\tparameter set to true, the value of DB will become invalid (i.e. the",
            "\tconnection to the database will be dropped). }"
        ],
        "snippets": [
            "TODBCRollback(",
            "\tDB, { Required. An ODBC value for the specified ODBC database as",
            "\t\treturned by ODBCConnect. }",
            "\tErrorMsg, { A parameter that will contain the last error message",
            "\t\treturned by the function. }",
            "\tSQLState, { A parameter that will return the SQL state that the",
            "\t\tstatement was in when the last error occurred. }",
            "\tErrorCode { A variable that will contain the native error code for the",
            "\t\tgiven driver and an error condition for the last error that occurred.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Toggle": {
        "comments": [
            "{ Description: Returns its previous status value except when its",
            "\tparameter changes from a false to a true, in which case it changes its",
            "\tvalue. }",
            "{ This function starts in a state with its return value being the same",
            "\tas its parameter. If the parameter X changes from an in valid value to",
            "\ta valid false, the return value will be 0. If the parameter X changes",
            "\tfrom an invalid value to a valid true, the return value will be 1.",
            "\tThis function resets its parameters after they evaluate to true. This",
            "\tis significant only for functions which can be reset such as",
            "\tMatchKeys, TimeOut, Intgr and RTimeOut. }"
        ],
        "snippets": [
            "Toggle(",
            "\tX { Required. Any numeric expression giving the status value to use to",
            "\t\tcause the function value to change state. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ToggleVal": {
        "comments": [
            "{ Description: Toggles between TRUE (1) and FALSE (0), once each given",
            "\tperiod. }",
            "{ This module is a member of the Function Library, and must therefore",
            "\tbe prefaced by \\FunctionLib as shown in the \"Format\" section. }"
        ],
        "snippets": [
            "\\FunctionLib.ToggleVal(",
            "\tValue { Specifies the length of the period for each TRUE / FALSE cycle",
            "\t\tin seconds. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ToLower": {
        "comments": [
            "{ Description: Returns a text string with all the characters converted",
            "\tto lower case. }",
            "{ The return value will contain all the same characters as the",
            "\toriginal string, except each character which is an upper case letter",
            "\twill be replaced with the corresponding lower case letter. All other",
            "\tcharacters remain unchanged. }"
        ],
        "snippets": [
            "ToLower(",
            "\tString { Required. Any text expression giving the string to convert to",
            "\t\tall lower case characters. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ToolBar": {
        "comments": [
            "{ Description: Draws and maintains a toolbar and its buttons. }",
            "{ Toolbar returns its object value when ready. }"
        ],
        "snippets": [
            "System.Toolbar(",
            "\tLeft, { Required. The coordinate of the left edge of the toolbar. }",
            "\tTop, { Required. The coordinate of the top of the toolbar. }",
            "\tRight, { Required. The coordinate of the right edge of the toolbar. }",
            "\tData, { Required. A 2-dimensional array of button information. }",
            "\tParOffset, { An optional parameter that is the data index at which to",
            "\t\tstart. The default for ParOffset is 0. }",
            "\tParHasBevel { An optional parameter that can be set to FALSE (0) to",
            "\t\tdraw a bevel around the toolbar, or TRUE (1) to inhibit bevel drawing.",
            "\t\tThe default for ParHasBevel is 1. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ToUpper": {
        "comments": [
            "{ Description: Returns a text string with all the characters converted",
            "\tto upper case. }",
            "{ The return value will contain all the same characters as the",
            "\toriginal string, except each character which is a lower case letter",
            "\twill be replaced with the corresponding upper case letter. All other",
            "\tcharacters remain unchanged. }"
        ],
        "snippets": [
            "ToUpper(",
            "\tString { Required. Any text expression giving the string to convert to",
            "\t\tall upper case characters. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Trajectory": {
        "comments": [
            "{ Description: Move a Layered Graphic and return a Trajectory value. }",
            "{ A Trajectory is a combination of a Normalize value and a Path value,",
            "\tused to move a layered graphic statement along a path. When the",
            "\tNormalize value takes on its low scale value, the layered graphic",
            "\tstatement appears at the beginning of the Path. When the Normalize",
            "\tvalue takes on its high scale value, the layered graphic statement",
            "\tappears at the end of the Path. This function must be called from",
            "\twithin a window. For example, within a script application, it must be",
            "\twithin the Graphics submodule. }"
        ],
        "snippets": [
            "Trajectory(",
            "\tNormalize, { Required. Any expression that returns a Normalize value.",
            "\t\tThis gives the low and high scales for the animation. }",
            "\tPath { Required. Any expression which returns a Path value, which",
            "\t\tspecifies the path along which the object moves. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Transaction": {
        "comments": [
            "{ Description: Launches a transaction in the specified database",
            "\tconnection. The transaction takes care of its own shut-down process. }",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager\\, as shown in \"Format\" above.",
            "\tThe only way to ensure that a long running (or faulty) query does",
            "\tterminate is to set appropriate values for both the parameters",
            "\tExecutionTimeout and UseDriverTimeout. Modules executing queries are",
            "\tdesigned to be run as launched modules and will remain active until",
            "\tcomplete. }"
        ],
        "snippets": [
            "\\ODBCManager\\Transaction(",
            "\tTransObjPtr, { Required. A Pointer to the transaction object }",
            "\tTReadyPtr, { Required. A Pointer to a variable, used to set the ready",
            "\t\tstatus }",
            "\tTErrorPtr, { Required. A Pointer to a variable, used to set the error",
            "\t\tstatus }",
            "\tCallerObj, { Required. The object value of the original calling module",
            "\t\t}",
            "\tUseTrans, { Required. Set to true (1) to use BEGIN and END of",
            "\t\ttransaction }",
            "\tDSN, { Required. DSN of the database to start transaction within }",
            "\tUserName, { Required. User name, if required by the database }",
            "\tPassword { Required. Password, if required by the database }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TransactionCached": {
        "comments": [
            "{ Description: Launches a transaction in the specified database",
            "\tconnection. The transaction will be cached locally if it fails and",
            "\tthen sent to the database after the next successful transaction. This",
            "\tmodule is designed to provide logging of values that must not be lost.",
            "\t}",
            "{ This module is a member of the ODBCManager Library, and must",
            "\ttherefore be prefaced by \\ODBCManager\\, as shown in \"Format\" above.",
            "\tThe only way to ensure that a long running (or faulty) query does",
            "\tterminate is to set appropriate values for both the parameters",
            "\tExecutionTimeout and UseDriverTimeout. Modules executing queries are",
            "\tdesigned to be run as launched modules and will remain active until",
            "\tcomplete. }"
        ],
        "snippets": [
            "\\ODBCManager\\TransactionCached(",
            "\tErrorPtr, { Required. A Pointer to the error status. Always set valid",
            "\t\ton completion. }",
            "\tCmdStr, { Required. The SQL command to be processed within the",
            "\t\ttransaction. }",
            "\tDSN, { Required. DSN of the database within which to start the",
            "\t\ttransaction. }",
            "\tUserName, { Required. A user name, if required to connect to the",
            "\t\tdatabase }",
            "\tPassword, { Required. A password, if required to connect to the",
            "\t\tdatabase }",
            "\tBatchSize { Obsolete. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TransferFields": {
        "comments": [
            "{ Description: The TransferFields subroutine will transfer the values",
            "\tfor each field into the returned FieldValues array. The values are",
            "\tfound in the scope passed in using the variable names found in the",
            "\tFieldNames array. }",
            "{ TransferFields always returns \"0\". }"
        ],
        "snippets": [
            "\\AlarmManager\\TransferFields(",
            "\tAlarmObject { Required. The scope to use when searching for the",
            "\t\tvariables to transfer. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TreeControl": {
        "comments": [
            "{ Description: Implements a tree control similar to that used by the",
            "\tMicrosoft Windows Explorer folder panel. }"
        ],
        "snippets": [
            "System.TreeControl(",
            "\tTree, { Required. Pointer to a structure defining the tree to be",
            "\t\tdisplayed. See comments for the structure definition. }",
            "\tGrayOutTextParm, { Optional Boolean. True to gray-out text.",
            "\t\tDefault:FALSE }",
            "\tEnableKeyboardControl, { Optional Boolean. True to enable keyboard",
            "\t\tcontrol. Default:FALSE }",
            "\tNodeCallBackScope, { Optional object reference. The scope in which to",
            "\t\tfind the callback module. See comments. }",
            "\tNodeCallBackName, { Optional text. Name of the callback module for",
            "\t\tdrawing. }",
            "\tLeftParm, { Optional numeric. Will default to window dimensions }",
            "\tBottomParm, { Optional numeric. Will default to window dimensions }",
            "\tRightParm, { Optional numeric. Will default to window dimensions }",
            "\tTopParm, { Optional numeric. Will default to window dimensions }",
            "\tBackColorParm, { Optional background color. }",
            "\tTextColorParm, { Optional text color. }",
            "\tRowHeight { Optional numeric to override the row height. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "TriggerCounter": {
        "comments": [
            "{ Description: Returns a count of zero-to-non zero transitions during",
            "\tthe current session. }",
            "{ This module is a member of the Function Library, and must therefore",
            "\tbe prefaced by \\FunctionLib as shown in the \"Format\" section. }"
        ],
        "snippets": [
            "\\FunctionLib.TriggerCounter(",
            "\tValue { A Boolean value (0 or 1). Typically the value of a digital tag",
            "\t\twould be used. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "TrimSpaces": {
        "comments": [],
        "snippets": [],
        "is_steady_state": false,
        "is_script": false
    },
    "Trip": {
        "comments": [
            "{ Description: Tell the Alarm Manager that a trip alarm event occured.",
            "\tThis subroutine will signal an alarm as unacknowledged. }",
            "{ The Trip subroutine always returns \"0\". }"
        ],
        "snippets": [
            "\\AlarmManager\\Trip(",
            "\tAlarmObject, { Required. The object value for the alarm that was",
            "\t\tpassed to the Register subroutine. }",
            "\tEventTime { Optional. The time stamp to use when adding this event to",
            "\t\tthe alarm lists. If invalid or not defined, the default is",
            "\t\tCurrentTime(). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "TRUE": {
        "comments": [
            "{ Description: For use in expressions that perform Boolean logic.",
            "\tUsing \"TRUE\" will make your code easier to read than using \"1\". }",
            "{ This function exists to make your code more readable. It is",
            "\tequivalent to PickValid(Cast(Parameter, 0) == 1, 0); For compatibility",
            "\twith the VTScada style guide, use all caps (TRUE and FALSE) when used",
            "\tas a constant. Capitalize only the first letter when used as a",
            "\tfunction call: True(test expression) and False(test expression). }"
        ],
        "snippets": [
            "True[(",
            "\tTestExpr { Optional. Any expression that evaluates to a 1 or 0 value.",
            "\t\tIf no parameter is provided, then there is no need to include the",
            "\t\tparentheses. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "TServerList": {
        "comments": [
            "{ Description: Executes in its own thread and creates a pointer to an",
            "\tarray of all servers visible from this workstation. Returns a flag",
            "\tindicating its status upon completion. }",
            "{ When TServerList is executed in its script, it creates its own",
            "\tthread and VTScada continues executing. When it is finished executing,",
            "\tit will store resultant data in Result (unlike ServerList which",
            "\treturns its result). Result will be set to an error code if any",
            "\tnetwork problems were encountered, or if Domain was not found on the",
            "\tnetwork. This function returns 1 if the thread was successfully",
            "\tstarted and 0 otherwise. }"
        ],
        "snippets": [
            "TServerList(",
            "\tResult, { Required. Any variable in which the resultant",
            "\t\tone-dimensional array of servers or an error code will be returned. }",
            "\tDomain { Required. Any text expression for the domain. If this is",
            "\t\tinvalid, the current domain will be used. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "UIErrorToText": {
        "comments": [
            "{ Description: Returns a text string corresponding to the error code",
            "\tprovided. }",
            "{ None. }"
        ],
        "snippets": [
            "\\SecurityManager\\UIErrorToText(",
            "\tErrCode { One of the #SMAPIErrxxx error codes. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "UnEscape": {
        "comments": [
            "{ Description: Decodes a string that was URL-encoded. }",
            "{ This function will remove any HTML escape sequences, convert any",
            "\t'+'s to spaces and convert any %nn encodings to the raw character",
            "\tvalue, reversing the effects of EncodeURIComponent. }"
        ],
        "snippets": [
            "System.HTTPServerInst.UnEscape(",
            "\tInput { Required text. The string to be decoded. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Unpack": {
        "comments": [
            "{ Description: Unpacks a set of values from a stream into a single",
            "\tdimensional array or a set of variables referenced by object",
            "\tparameters, and returns the number of items unpacked. }",
            "{ This function returns the number of values unpacked. If the Data",
            "\tparameter is an array, the data from the stream will be unpacked into",
            "\tthat array. If the Data parameter is an object value, the parameters",
            "\tof that object must contain pointers to variables into which the data",
            "\tfrom the stream will be unpacked. If the Pack function used the",
            "\toptional parameter, Key, to pack a record into a smaller stream, then",
            "\tUnpack must be able to provide a mirrored version of that dictionary",
            "\tto access the data in the structure. }"
        ],
        "snippets": [
            "Unpack(",
            "\tData, { Required. An object value or an array containing the data or",
            "\t\tthe object value of the module whose parameters address variables into",
            "\t\twhich to store the data. For example, if you have 5 numeric values to",
            "\t\tunpack, you would allocate a 1-dimensional array, 5 elements in",
            "\t\tlength. You would pass this array to Unpack's Data parameter, and",
            "\t\tspecify that you wish to unpack from subscript 1 to 5. Refer to the",
            "\t\texample section for more information. }",
            "\tStart, { Required. The starting array index (zero-based), or parameter",
            "\t\tnumber (one-based) of the data to unpack. }",
            "\tEnd, { Required. The last array index, or parameter number of the data",
            "\t\tto unpack. }",
            "\tStream, { Required. A variable holding the stream that contains the",
            "\t\tdata to be unpacked. The stream must have been generated with the Pack",
            "\t\tfunction. }",
            "\tTruncateAt, { An optional parameter. If present specifies that all",
            "\t\ttext values and stream values unpacked from the stream will be",
            "\t\ttruncated after the number of bytes specified in this parameter. }",
            "\tDataLength, { An optional parameter. If present, specifies an array",
            "\t\tinto which will be stored the length of each text and stream value",
            "\t\tunpacked from the source stream. Each length is stored at the array",
            "\t\tindex corresponding to the index of the value itself. For example, if",
            "\t\tthe value that would go in the destination array at index 5 were a",
            "\t\ttext value, its length would be stored at index 5 in the array",
            "\t\taddressed by this parameter. Unpacked values of numeric type have",
            "\t\tInvalid stored in their entry in this array. }",
            "\tMirrorKey { Optional. A dictionary mapping integers to structure",
            "\t\tnames. Must be used if the data was packed using a KeyDictionary.",
            "\t\tThere is no requirement for the Pack KeyDictionary parameter and the",
            "\t\tUnpack MirrorKey parameter to have the same number of elements. All",
            "\t\tthat is required is that the Unpack MirrorKey dictionary has all of",
            "\t\tthe structures that are in that particular packed stream. If the",
            "\t\tKeyDictionary doesnât have the structure that was packed, the returned",
            "\t\tdata is a simple array rather than a structure. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "UnpackData": {
        "comments": [
            "{ Description: This method unpacks a stream into an array or set of",
            "\tmodule instance parameters. Subroutine call only. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.SRC. The stream contents to be unpacked by the UnpackData",
            "\tmethod must have been packed by the PackData method. If the Source",
            "\tparameter is an array, the data from the stream will be unpacked into",
            "\tthat array. If the Source parameter is an object value, the parameters",
            "\tof that object must contain pointers to variables into which the data",
            "\tfrom the stream will be unpacked. From VTS 5.20 onwards, this method",
            "\tis a wrapper for the Unpack() statement. Prior to that release, the",
            "\tUnpack() statement was effectively coded in script by this method. New",
            "\tcode should use the Unpack() statement, rather than this method. }"
        ],
        "snippets": [
            "\\RPCManager\\UnpackData(",
            "\tSource, { Required. The array to contain the data or the object value",
            "\t\tof the module whose parameters address variables into which to store",
            "\t\tthe data. }",
            "\tStart, { Required. The starting array index or parameter number of the",
            "\t\tdata to unpack (zero-based). }",
            "\tEnd, { Required. The last array index or parameter number of the data",
            "\t\tto unpack (zero-based). }",
            "\tStream, { Required. The stream that contains the data to be unpacked.",
            "\t\tThe stream must have been generated with the PackData function. }",
            "\tTruncLen, { An optional parameter that specifies that all text values",
            "\t\tand stream values unpacked from the stream will be truncated after the",
            "\t\tnumber of bytes specified in this parameter. }",
            "\tDataLen { An optional parameter that specifies an array into which the",
            "\t\tlength of each text and stream value unpacked from the source stream",
            "\t\twill be stored. Each length is stored at the array index corresponding",
            "\t\tto the index of the value itself. For example, if the value which",
            "\t\twould go in the destination array at index 5 were a text value, its",
            "\t\tlength would be stored at index 5 in the array addressed by this",
            "\t\tparameter. Unpacked values of numeric type have Invalid stored in",
            "\t\ttheir entry in this array. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "UnpackParms": {
        "comments": [
            "{ Description: This method unpacks a stream into the supplied",
            "\tparameters. Subroutine call only. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.SRC. The stream contents must have been packed by the",
            "\tPackParms method. }"
        ],
        "snippets": [
            "\\RPCManager\\UnpackParms(",
            "\tStream, { Required. A stream produced by PackParms. }",
            "\tP1, P2, â¦ { Optional parameters that are pointers to variable",
            "\t\tinstances into which the values that were packed into the stream will",
            "\t\tbe unpacked. Up to 100 parameters are allowed. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Unregister": {
        "comments": [
            "{ Description: Notify the Alarm Manager that an alarm has been",
            "\tremoved. This will not generate an alarm. It only removes it from the",
            "\tlist of all configured alarms. }",
            "{ The Unregister subroutine always returns \"0\". }"
        ],
        "snippets": [
            "\\AlarmManager\\Unregister(",
            "\tAlarmObject { Required. The object value of the alarm to remove from",
            "\t\tthe Alarm Manager database. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "UnselectGraphics": {
        "comments": [
            "{ Description: Will deselect all of the graphics in the specified",
            "\twindow. }"
        ],
        "snippets": [
            "UnselectGraphics(",
            "\tWindow { Required. Any expression which gives the object value of any",
            "\t\tmodule instance which is drawn in the window. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "UnselectObject": {
        "comments": [
            "{ Description: Will deselect a statement in the context supplied. }"
        ],
        "snippets": [
            "UnselectObject(",
            "\tObject, { Required. Any expression which gives the object value for",
            "\t\tthe instance where the graphic is to be deselected. }",
            "\tStatement { Required. The value of the statement which is to be",
            "\t\tdeselected. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "UnTransform": {
        "comments": [
            "{ Description: Will undo a previous transform so that the module",
            "\tinstance and everything it has called will not be transformed. }",
            "{ This function is used to allow a module instance to draw in the",
            "\tdefault window coordinates even if the instance is contained within a",
            "\ttransform. This statement may only appear in a script. }"
        ],
        "snippets": [
            "Untransform(",
            "\tObject { Required. Any expression which gives the object value for the",
            "\t\tinstance to be untransformed. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "UpdateCoordinates": {
        "comments": [
            "{ Description: Will update a graphic statement's coordinates to the",
            "\tdocument file in which it is specified. }",
            "{ It should be noted that after this graphic statement is recompiled",
            "\tthat any new instances of that statement will have the new coordinate",
            "\tinformation stored in them. }"
        ],
        "snippets": [
            "UpdateCoordinates(",
            "\tStatement { Required. Any expression which gives a statement pointer",
            "\t\tor code value for the graphic statement which is to be updated. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "UserCredChange": {
        "comments": [
            "{ Description: The return value will increment each time there is a",
            "\tchange in the user sessionâs logged-in user or their password. }",
            "{ Initially returns zero For VIC sessions, this additionally",
            "\tincrements its return value at twice the rate specified by the",
            "\tSessionTokenTimeout configuration setting. This is used by internal",
            "\tsystem components to refresh a VICâs security session token. }"
        ],
        "snippets": [
            "\\SecurityManager\\UserCredChange(",
            "\tSession { The object value of the user session. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "UserLogonDialog": {
        "comments": [
            "{ Description: Launches the Sign in dialog }",
            "{ None }"
        ],
        "snippets": [
            "\\SecurityManager\\UserLogonDialog(",
            "\tDevice, { Name of device signing in. }",
            "\tNameSpace, { Default setting for the realm name (optional) }",
            "\tCenter, { TRUE to center dialog on screen (default=0). }",
            "\tEmbed { TRUE to draw the dialog embedded in a page FALSE to show the",
            "\t\tdialog in a window (default) }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Valid": {
        "comments": [
            "{ Description: Returns true if the parameter is any value other than",
            "\tInvalid. }",
            "{ This function always returns a valid value. }"
        ],
        "snippets": [
            "Valid(",
            "\tX { Required. Any expression to be tested for validity. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ValidateEmailAddrs": {
        "comments": [
            "{ Description: This subroutine validates a string of email addresses,",
            "\tand returns TRUE if the email addresses in the string are",
            "\tsyntactically valid, or FALSE if they are not. }",
            "{ Multiple addresses are assumed to be separated by semi-colons in the",
            "\tinput string. This subroutine returns TRUE if the email addresses in",
            "\tthe string are syntactically valid, otherwise, FALSE is returned.",
            "\tValidateEmailAddrs checks that each address has an @ symbol that is",
            "\tnot the first or last character, and that each address has a dot",
            "\tappearing at least 2 characters after the @ symbol, with no dot",
            "\tappearing immediately after the @ sign, and no dot as last character.",
            "\t}"
        ],
        "snippets": [
            "\\ValidateEmailAddrs(",
            "\tEmailAddress { Required. The string of email addresses to check. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ValueType": {
        "comments": [
            "{ Description: Returns the type of value passed to it. }",
            "{ This returns the type of the value passed in the parameter }"
        ],
        "snippets": [
            "ValueType(",
            "\tVal { Required. Any expression. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "VarAttributes": {
        "comments": [
            "{ Description: Returns the attributes bit field of a variable. }"
        ],
        "snippets": [
            "VarAttributes(",
            "\tVariable { Required. Any variable value expression. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Variable": {
        "comments": [
            "{ Description: Accesses a variable by its text name. The return value",
            "\tis optional. }",
            "{ This function can be used on the left side of an assignment, in",
            "\twhich case the value will be assigned to the variable named in the",
            "\tName parameter. This function can be used for debugging, or to create",
            "\tsophisticated data logging and monitoring packages which access any",
            "\tvariable by its typed-in name. Note that the string containing the",
            "\tname may not contain leading or trailing spaces, or square brackets [",
            "\t]. This function is the same as the '\\' operator, when the '\\'",
            "\toperator is before a single operand. (\\Member). This function is able",
            "\tto resolve variables that have the PROTECTED attribute. LocalVariable",
            "\tA related function, LocalVariable() exists, but will be used rarely.",
            "\tNo documentation is provided beyond the following note:",
            "\tLocalVariable(Name) is the same as Scope(Self, Name, TRUE). This",
            "\texpression is useful only in the case that there is a value containing",
            "\tthe name of a variable, which is added after the module is compiled",
            "\tand is referenced within the local module. LocalVariable is the same",
            "\tas the '.' operator. .Member (i.e. without an object before the dot)",
            "\tcompiles to LocalVariable(\"Member\"), which is the equivalent of",
            "\tVariable(\"Member\", TRUE). }"
        ],
        "snippets": [
            "Variable(",
            "\tName { Required. Any text expression giving the name of the variable.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "VariableClass": {
        "comments": [
            "{ Description: Returns the class of a variable. }",
            "{ This function may only appear in a script. }"
        ],
        "snippets": [
            "VariableClass(",
            "\tVariable { Required. Any expression for the variable value. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Variance": {
        "comments": [
            "{ Description: Returns the statistical sample variance for a",
            "\tsubsection of an array. }",
            "{ The invalid parameters are not skipped over, but they are not",
            "\tincluded in the calculation. The function returns an invalid result if",
            "\teither of its parameters is invalid or if there are less than two",
            "\tvalid numerical array elements in the specified range. This function",
            "\tdoes calculations with double-precision floating point values and does",
            "\tnot support 64-bit integers computations. }"
        ],
        "snippets": [
            "Variance(",
            "\tArrayElem, { Required. Any numeric array element giving the starting",
            "\t\tpoint in the array for the computation. The subscript for the array",
            "\t\tmay be any numeric expression. If processing a multidimensional array,",
            "\t\tthe usual rules apply to decide which dimension should be examined. }",
            "\tN { Required. Any numeric expression giving the number of array",
            "\t\telements to compute. If N extends past the upper bound of the lowest",
            "\t\tarray dimension, this computation will \"wrap-around\" and resume at",
            "\t\telement 0, until N elements have been processed. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Version": {
        "comments": [
            "{ Description: Returns the version number of the copy of VTScada",
            "\tcurrently running. }",
            "{ This function can be used to perform various tasks based on the",
            "\tversion number of VTScada. }"
        ],
        "snippets": [
            "Version(",
            "\tMiniDumpHandle, { For advanced use only. If provided, will return",
            "\t\tinformation about the version number or bit-width of a mini dump file.",
            "\t\tData is stored in a MiniDumpHandle (value type: 42) It is recommended",
            "\t\tthat you simply use INVALID as a placeholder for this parameter when",
            "\t\tthe second parameter is required. }",
            "\tInfoType { If 0 or omitted, Version simply returns the VTScada version",
            "\t\tnumber. If 1, will return 32 for 32-bit VTScada or 64 for 64-bit",
            "\t\tVTScada, instead of the version number. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "VersionRequired": {
        "comments": [
            "{ Description: Returns the version number of VTScada that is required",
            "\tto execute any .RUN files loaded since the last execution of this",
            "\tstatement. }",
            "{ This function returns the minimum version of VTScada required to",
            "\texecute any and all modules (.RUN files) loaded since the last call to",
            "\tthis function, or if no other call was made, since startup. After the",
            "\tcall is made to this function, it will reset the version to invalid",
            "\tuntil another module is loaded. }"
        ],
        "snippets": [
            "VersionRequired();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Vertex": {
        "comments": [
            "{ Description: Returns a Vertex value, which is a collection of 3",
            "\tpoints and a mode. }",
            "{ A vertex describes a group of up to three point values. The first",
            "\tsets the location. The following two are used when drawing curves and",
            "\tshould be set invalid otherwise. Vertex values are grouped to form",
            "\tpaths. For each vertex, the center point defines a point on the path.",
            "\tEach line segment or Bezier curve along the path is defined by two",
            "\tvertices, one at each end. The vertices' center point is the end point",
            "\tof the Bezier curve. The OutHandlePoint of one vertex and the",
            "\tInHandlePoint of the other vertex define the Bezier curve shape",
            "\tpoints. So, each Bezier curve is defined by 4 points: the two end",
            "\tpoints, and two 'handle' points. Vertex values are also used in the",
            "\tgraphics functions GUIArc, GUIChord, and GUIPie to determine the start",
            "\tand end angles for those graphics functions. The angle from the center",
            "\tpoint to the InHandlePoint defines the starting angle. The angle from",
            "\tthe center point to the OutHandlePoint defines the ending angle }"
        ],
        "snippets": [
            "Vertex(",
            "\tMode { Required. Any numeric constant that specifies the behavior of",
            "\t\tthe handle points, as shown in the following table Mode Handle Point",
            "\t\tBehavior 0 Rectangular - handles are ignored 1 Cusp - no restrictions",
            "\t\ton handle points 2 Reserved for future use 3 Reserved for future use 4",
            "\t\tManhattan Meaning that all lines are horizontal or vertical. Inspired",
            "\t\tby a skyline of tall, rectangular buildings. - handles are ignored.",
            "\t\tRight angles between this vertex and neighboring vertices are",
            "\t\tpreserved, enforcing horizontal or vertical lines. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "VICInfo": {
        "comments": [
            "{ Description: Provides information about the VTScada Internet Clients",
            "\tconnected to the machine where this code is run. }",
            "{ The return value of VICInfo is an array of information. Each row",
            "\t[leftmost subscript] contains the information for one session, and",
            "\teach column within the row contains the fields of session information,",
            "\tas follows: [n][0] Object value of the root (BrowserClient) module",
            "\tinstance for this session. [n][1] VIC process session ID [a 16-byte",
            "\tbinary GUID]. This is guaranteed to be unique per VIC process. i.e.",
            "\ttwo sessions from the same VIC process will have the same VIC instance",
            "\tID. [n][2] IP of the remote computer, from the server's point of view",
            "\t[note this may be the IP of a gateway or proxy that the remote",
            "\tcomputer connects via]. [n][3] Total bytes transmitted to the VIC in",
            "\tthis session. [n][4] Total bytes received from the VIC in this",
            "\tsession. [n][5] Approximate round trip time to the VIC, in",
            "\tmilliseconds. [n][6] Uncompressed bytes transmitted to the VIC. [n][7]",
            "\tSession identifier for the connection to the server. }"
        ],
        "snippets": [
            "VICInfo();"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "VICMessage": {
        "comments": [
            "{ Description: Transmits a message to one or all currently connected",
            "\tVTScada Internet Client sessions. The message is displayed in a dialog",
            "\tbox on the VIC computer. }",
            "{ There is no return value for this statement. The Object value is",
            "\ttypically retrieved from the return value of a VICInfo statement. }"
        ],
        "snippets": [
            "VICMessage(",
            "\tObject, { Required. Object value of the root (BrowserClient) module",
            "\t\tinstance for the VIC session to receive the message. If this parameter",
            "\t\tis not a valid object value, the message is broadcast to all VIC",
            "\t\tsessions. }",
            "\tMessage { Required. The textual message to be sent to the VIC",
            "\t\trecipients. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "VICSmartcardMonitor": {
        "comments": [
            "{ Description: Enables and disables smart card monitoring on a VIC and",
            "\toutputs authentication information received from the VIC when a smart",
            "\tcard is used. }",
            "{ This is a reset-able function whose initial return value is FALSE.",
            "\tThe function will be triggered by a message from the VIC indicating",
            "\teither an attempt to sign in using a smart card or a removal of the",
            "\tsmart card and then the return value is TRUE. }"
        ],
        "snippets": [
            "VICSmartcardMonitor(",
            "\tSmartcardRemoved, { Required. A variable whose value is set to TRUE if",
            "\t\tthe smart card has been removed, else FALSE. }",
            "\tSecurityContext, { Required. A variable whose value is set to the",
            "\t\tKerberos Security Context for the user attempting to sign in on the",
            "\t\tVIC using a smart card. }",
            "\tUPN { Required. A variable whose value is set to the User Principal",
            "\t\tName (e.g. user@example.com) for the user attempting to sign in on the",
            "\t\tVIC using a Smartcard. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "VICSmartcardResponse": {
        "comments": [
            "{ Description: Returns the result of the Kerberos Security negotiation",
            "\tafter processing a sign in attempt on the VIC. }",
            "{ None }"
        ],
        "snippets": [
            "VICSmartcardResponse(",
            "\tNegotiateResponse { Required. The Kerberos Security Context return",
            "\t\tvalue, may be a null string, to be sent to the VIC in response to a",
            "\t\tlogin attempt. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "VoiceTalk": {
        "comments": [
            "{ Description: Opens and returns a handle to a SAPI text-to-speech",
            "\tstream. }",
            "{ This function returns the error code resulting from issuing the",
            "\tcommand to the speech engine, or zero if no error was encountered.",
            "\tThis function is not threaded, however, it creates a thread inside of",
            "\twhich the handle referring to the text-to-speech stream is accessed.",
            "\tAll other speech functions on this stream do not create their own",
            "\tthread, but will execute in the thread created by this function. This",
            "\tthread will exist for as long as the VoiceTalk statement remains",
            "\tactive (i.e. until a state change occurs). For this reason, the state",
            "\tcontaining the VoiceTalk call must remain active until all other",
            "\tspeech statements have finished executing. There can be multiple SAPI",
            "\ttext-to-speech streams open at any time. }"
        ],
        "snippets": [
            "\\VoiceTalk(",
            "\tSpeakCount, { An optional parameter that is any variable in which the",
            "\t\tnumber of outstanding VoiceTalk\\Speak requests (those that have not",
            "\t\tyet finished speaking) on this stream will be maintained. When this",
            "\t\tparameter is set to zero, this SAPI text-to-speech stream is not",
            "\t\tspeaking (i.e. it is initially set to zero). If this parameter is",
            "\t\tomitted or Invalid, no speak count will be maintained. Note that SAPI",
            "\t\tcould still be speaking on another stream when this count is zero on",
            "\t\tone stream. }",
            "\tBookmarkNum { An optional parameter that is any variable that will be",
            "\t\tset to the value of the last text bookmark encountered by the speech",
            "\t\tengine on this stream (a bookmark is denoted by the XML tag <BOOKMARK",
            "\t\tMARK=\"bookmark\"/>). It is initially set to Invalid. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "VScrollbar": {
        "comments": [
            "{ Description: Draws a vertical scroll bar and returns its position. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ Steps can be calculated by subtracting the number",
            "\tof visible items from the total number of scrollable items. PageLen is",
            "\tequal to the number of visible items. Items can be thought of as rows,",
            "\twhere a row will have a height of N pixels. As an example, consider an",
            "\tAlarm Page that is showing 50 alarms, where only 20 of them are",
            "\tvisible. The operator needs to click the down arrow on the scrollbar",
            "\t30 times to reach the bottom of the alarm list, so Steps would be set",
            "\tto 30. If the operator clicks on the scrollbar area other than the",
            "\ttab, they expect to see it scroll by a \"page\", which in this example",
            "\tis 20 rows. PageLen would therefore be set to 20. In some situations",
            "\tyou may want the down arrow to move more than one row at a time, say 3",
            "\trows, so you would set StepSize to 3. Note that there is no need to",
            "\tprovide the width of the row in pixels to VScrollbar. Custom script",
            "\tgraphics using the VScrollbar module directly need to pass in a window",
            "\tobject to serve as source for the mouse wheel messages. Typically this",
            "\twould be the window that the VScrollbar module is controlling. Note",
            "\tthat the VScrollbar module itself uses a native windows scrollbar,",
            "\twhich will therefore work automaticallywithout any script changes, so",
            "\tlong as the mouse pointer is over the actual scrollbar. }"
        ],
        "snippets": [
            "System.VScrollbar(",
            "\tLeft, { Required. Any numeric expression for the left side coordinate",
            "\t\tof the scrollbar. }",
            "\tBottom, { Required. Any numeric expression for the bottom coordinate",
            "\t\tof the scrollbar. }",
            "\tHeight, { Required. Any numeric expression for the height of the",
            "\t\tscrollbar in pixels. }",
            "\tSteps, { Required. Any numeric expression giving the number of steps",
            "\t\tin the scrollbar. }",
            "\tPageLen, { Required. Any numeric expression giving the number of steps",
            "\t\tin each page. }",
            "\tPosition, { Optional numeric. This variable may be used to monitor or",
            "\t\tset the current scroll position. }",
            "\tStepSize, { Optional. Any numeric expression giving the number of",
            "\t\tlines to scroll through when the user clicks on an arrow. Defaults to",
            "\t\t1 if not specified. }",
            "\tMouseWheelInputObj { The Window object that should capture mouse wheel",
            "\t\tmessages for this VScrollbar. Every VScrollbar module requires a",
            "\t\tunique source window in order for mouse wheel scrolling to function",
            "\t\tproperly. On the server and the VIC, this parameter is used so that",
            "\t\tscroll wheel events that happen over MouseWheelInputObj's window are",
            "\t\tredirected to the VScrollbar. On the Anywhere Client, in addition to",
            "\t\tredirecting scroll wheel events as above (if the client's platform",
            "\t\thappens to have a mouse), this parameter is also necessary to redirect",
            "\t\tvertical touch panning events over a given region to the VScrollbar.",
            "\t\tThis is of increased importance because on most touch screen devices,",
            "\t\tyou cannot touch and drag the scrollbar directly, so this kind of",
            "\t\ttouch redirection is often the only way to scroll a VScrollbar. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "VStatus": {
        "comments": [
            "{ Description: Returns the video board and screen characteristics for",
            "\tVTScada. }"
        ],
        "snippets": [
            "VStatus(",
            "\tWindow, { Required. The object value of the window to request",
            "\t\tinformation on. This may be invalid and is therefore ignored for",
            "\t\tOptions which do not depend upon a particular window. }",
            "\tOption { Required. Selects the video characteristic to return, as",
            "\t\tshown in the following table. Option Video Characteristic 0 Reserved",
            "\t\tfor future use 1 Reserved for future use 2 Reserved for future use 3 X",
            "\t\tCoordinate of left side of the window. This is the client area of the",
            "\t\twindow and does not include the title or borders. 4 Y Coordinate of",
            "\t\tbottom side of the window. This is the client area of the window and",
            "\t\tdoes not include the title or borders. 5 X Coordinate of right side of",
            "\t\tthe window. This is the client area of the window and does not include",
            "\t\tthe title or borders. 6 Y Coordinate of top side of the window. This",
            "\t\tis the client area of the window and does not include the title or",
            "\t\tborders. 7 Number of horizontal pixels of resolution of the virtual",
            "\t\tclient area of the window. This doesnât include the window border.",
            "\t\tShrinking the window to make scroll bars appear doesnât affect this",
            "\t\tnumber. 8 Number of vertical pixels of resolution of the virtual",
            "\t\tclient area of the window. This doesnât include the title or border of",
            "\t\tthe window. Shrinking the window to make scroll bars appear doesnât",
            "\t\taffect this number. 9 Number of color indexes available in the palette",
            "\t\tfor the window. This is always 256. 10 Background color of the window",
            "\t\tas an RGB color string. Any areas of the window which are not drawn",
            "\t\tappear as this color. 11 Number of horizontal pixels currently visible",
            "\t\tin the client area of the window. This doesnât include the window",
            "\t\tborders. Shrinking the window to make scroll bars appear decreases",
            "\t\tthis number. 12 Number of vertical pixels visible in the client area",
            "\t\tof the window. This doesnât include the window title bar or borders.",
            "\t\tShrinking the window to make scroll bars appear decreases this number.",
            "\t\t13 Window width in pixels including the window borders. 14 Window",
            "\t\theight in pixels including the title bar and borders. 15 Current",
            "\t\tcoordinates of left side of window on the screen. The coordinates used",
            "\t\tare in pixels and relative to the screen where 0, 0 represents the",
            "\t\tupper left corner of the screen. The position referred to is the upper",
            "\t\tleftmost corner of the window title bar. 16 Current coordinates of top",
            "\t\tside of window on the screen. The coordinates used are in pixels and",
            "\t\trelative to the screen where 0, 0 represents the upper left corner of",
            "\t\tthe screen. The position referred to is the upper leftmost corner of",
            "\t\tthe window title bar. 17 Current coordinates of left side of visible",
            "\t\tarea taking into account the position of the horizontal scroll bar. 18",
            "\t\tCurrent coordinates of top side of visible area taking into account",
            "\t\tthe position of the vertical scroll bar. 19 Window title bar height in",
            "\t\tpixels. 20 Horizontal scroll bar height in pixels. 21 Vertical scroll",
            "\t\tbar width in pixels. 22 Window thick border width in pixels. This",
            "\t\tborder type may or may not be used in the present window. This",
            "\t\tinformation is a general property of the desktop configuration of the",
            "\t\tuser and can be acquired without a valid first parameter to VStatus.",
            "\t\t23 Window thick border height in pixels. This border type may or may",
            "\t\tnot be used in the present window. This information is a general",
            "\t\tproperty of the desktop configuration of the user and can be acquired",
            "\t\twithout a valid first parameter to VStatus. 24 Window thin border",
            "\t\twidth in pixels. This border type may or may not be used in the",
            "\t\tpresent window. This information is a general property of the desktop",
            "\t\tconfiguration of the user and can be acquired without a valid first",
            "\t\tparameter to VStatus. 25 Window thin border height in pixels. This",
            "\t\tborder type may or may not be used in the present window. This",
            "\t\tinformation is a general property of the desktop configuration of the",
            "\t\tuser and can be acquired without a valid first parameter to VStatus.",
            "\t\t26 Width of full screen in pixels. Consider using option 35 instead.",
            "\t\t27 Height of full screen in pixels. Consider using option 35 instead.",
            "\t\t28 1 if window is minimized. 29 1 if window is maximized. 30 Maximum",
            "\t\thorizontal scroll position. 31 Maximum vertical scroll position. 32",
            "\t\tNumber of horizontal pixels offset from the left outside edge of the",
            "\t\twindow border and the first usable pixel in the client area of the",
            "\t\twindow. 33 Number of vertical pixels offset from the top of the window",
            "\t\ttitle bar and the first usable pixel in the client area of the window.",
            "\t\t34 Ribbon height 35 The dimensions of the display device, or monitor,",
            "\t\tof the window that WindowObj is running in. Returns an eight-member",
            "\t\tstructure with the following members: Left, the left co-ordinate of",
            "\t\tthe monitor, which can be negative Top, the top co-ordinate of the",
            "\t\tmonitor, which can be negative Bottom Right Width, for convenience,",
            "\t\tsince this can be calculated using Left and Right. Height CenterX, the",
            "\t\thorizontal center of the monitor, for convenience CenterY, the",
            "\t\tvertical center of the monitor. 36 The dimensions of the virtual",
            "\t\tdisplay. Returns a structure with the same members as option 35, but",
            "\t\twith values that reflect the entire Windows desktop. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Watch": {
        "comments": [
            "{ Description: Watches its parameters and returns true when any of",
            "\ttheir values change. }",
            "{ This is a reset-able function whose initial return value will be set",
            "\tby the first parameter. This parameter is ignored after the initial",
            "\tevaluation of the function. The Watch function will not be triggered",
            "\tby a variable whose value has been set to its existing value. That is",
            "\tto say, if a variable has a value of 3 and it is set in the code again",
            "\tto a value of 3, then there is no change and this function will not be",
            "\ttriggered. Only the first parameter (Start) is mandatory. Use Watch(1)",
            "\tto trigger a script once only on the first entry to a state. A change",
            "\tin type (from 5 to \"5\") will also trigger the Watch. In accordance",
            "\twith the VTScada Coding Standards, do not use Watch(0, ...). Either",
            "\tuse Watch(1, ...) or capture the values of the watched values before",
            "\tentering the state and check if they have changed. Watch(0, ...) has",
            "\tthe potential to miss a change that occurs after starting a state but",
            "\tbefore Watch(0, ...) runs. }"
        ],
        "snippets": [
            "Watch(",
            "\tStart, { Required. Any expression which evaluates to a false (0) or",
            "\t\ttrue (non-0) value. This will be the initial return value of the",
            "\t\tfunction. }",
            "\tParm1, Parm2, ... { Are any number of optional variables that are to",
            "\t\tbe monitored by this function. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "WatchArray": {
        "comments": [
            "{ Description: Watches an array and returns true if any of its",
            "\telements' types or values change. }",
            "{ This is a resettable function whose initial return value will be set",
            "\tby the first parameter. This parameter is ignored after the initial",
            "\tevaluation of the function. }"
        ],
        "snippets": [
            "WatchArray(",
            "\tStart, { Required. Any expression which evaluates to a false (0) or",
            "\t\ttrue (non-0) value. This will be the initial return value of the",
            "\t\tfunction. }",
            "\tArrayElem, { Required. Any numeric array element giving the starting",
            "\t\telement of the group of elements to watch. The subscript for the array",
            "\t\tmay be any numeric expression. If processing a multidimensional array,",
            "\t\tthe usual rules apply to decide which dimension should be examined. }",
            "\tNumElem { Required. Any numeric expression giving the number of array",
            "\t\telements to watch. If NumElem extends past the upper bound of the",
            "\t\tlowest array dimension, this computation will \"wrap-around\" and resume",
            "\t\tat element 0, until N elements have been located. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "WatchForTagChanges": {
        "comments": [
            "{ Description: Watches for tag changes, either external or local }"
        ],
        "snippets": [
            "\\WatchForTagChanges();"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "WatchTags": {
        "comments": [
            "{ Description: Watches for tag changes, either external or local }",
            "{ WatchTags() will trigger immediately, much like a Watch(1). }"
        ],
        "snippets": [
            "\\WatchTags(",
            "\tContext, { Optional. An instance of a container tag object. If",
            "\t\tprovided, WatchTags will trigger if the Context or any of its",
            "\t\tdescendents are refreshed, and will ignore changes to any other parts",
            "\t\tof the tag hierarchy. If not provided, WatchTags triggers on any tag",
            "\t\tchange. }",
            "\tTypeOrGroup { Optional. At present, only the group name \"Container\" is",
            "\t\tsupported. If provided, WatchTags will trigger only when a tag in the",
            "\t\tmatching group is changed. Type names are not supported. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "WCSubscribe": {
        "comments": [
            "{ Description: Working Copy Subscribe. After this function has been",
            "\tcalled, any configuration change will result in the specified callback",
            "\tsubroutine being called. }",
            "{ This function is commonly used in conjunction with",
            "\tReadConfiguration(). The callback() will be notified when a particular",
            "\tfile has changed and will trigger another module to call",
            "\tReadConfiguration() to read the changes from that file. \"ChangedFiles\"",
            "\tcontains absolute file paths. }"
        ],
        "snippets": [
            "\\WCSubscribe(",
            "\tSubscriberObj, { A required object, in which the callback module will",
            "\t\tbe called. Often, Self(). }",
            "\tCallbackModuleName { An optional text value which is the name of the",
            "\t\tcallback object to be launched into the subscriber object. If invalid",
            "\t\tor not provided, there must be a submodule in the code, named",
            "\t\tNotify(), which will be used by WCSubscribe. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WebBrowser": {
        "comments": [
            "{ Description: Displays a web browser at the given position in the",
            "\tcurrent VTScada window. }",
            "{ This is used by the Web Browser widget. To use this tool on either a",
            "\tthick client (workstation) or the VIC, the workstation requires the",
            "\toptional WebView2 component, which is built on the Edge browser from",
            "\tMicrosoft. (The Anywhere Client does not require WebView2 to be",
            "\tinstalled.) If WebView2 is not installed, it can be obtained by",
            "\trunning the VTScada or VIC installer and selecting the option to",
            "\tinstall WebView2. Alternatively it can be downloaded from Microsoft ,",
            "\tvia the Evergreen Bootstrapper Installer or via the Evergreen",
            "\tStandalone Installer for machines with restricted access to the",
            "\tInternet. }"
        ],
        "snippets": [
            "WebBrowser(",
            "\tLeft, { Required numeric. The left edge of the web browser window. }",
            "\tBottom, { Required numeric. The bottom edge of the web browser window.",
            "\t\t}",
            "\tRight, { Required numeric. The right edge of the web browser window. }",
            "\tTop, { Required numeric. The top edge of the web browser window. }",
            "\tInitialURL, { Optional text. The initial website address to display",
            "\t\twhen the browser is initialized. Not steady state responsive (the",
            "\t\tvalue is used only when the web browser is initialized). }",
            "\tProfileID, { Optional text. Data folder name for the current WebView2",
            "\t\tprofile. Defaults to \"Default\". Recommended setting is a combination",
            "\t\tof application GUID and account ID so each user has their own profile.",
            "\t\tNot steady state responsive. }",
            "\tPrivateMode, { Optional Boolean. Specifies whether a private WebView2",
            "\t\tprofile should be used. If ProfileID is invalid this is forced to",
            "\t\tTRUE. If ProfileID is valid, defaults to FALSE. A profile folder will",
            "\t\tbe created under the ID even if this parameter is set TRUE, but that",
            "\t\tprofile will not be used for the web browser instance. Has no effect",
            "\t\ton the Anywhere Client. Not steady state responsive. }",
            "\tEnableJavaScript, { Optional Boolean. Enables or disables JavaScript.",
            "\t\tDefaults to FALSE (disabled). Not steady state responsive. }",
            "\tEnableContextMenu, { Optional Boolean. Enables or disables the default",
            "\t\tcontext menu on the VIC or thick client. Defaults to FALSE (disabled).",
            "\t\tHas no effect on the Anywhere Client. Not steady state responsive. }",
            "\tAllowedURLs { Optional, a list of domains and paths that are permitted",
            "\t\tto be displayed in the web browser. The entries in the list must",
            "\t\tinclude the protocol, likely \"https://www.\" for most sites, and a",
            "\t\ttrailing '/' (ex: https://www.mysite.com/). The list is line-delimited",
            "\t\twith CRLF line endings. Any paths defined under the most general",
            "\t\tspecified entry will be allowed (ex: https://www.mysite.com/some/path/",
            "\t\twill be accepted if the earlier example allowing the root path is in",
            "\t\tthe Allowed URLs list). Not supported on the Anywhere Client. Updates",
            "\t\tin steady state. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "WebBrowserNavigate": {
        "comments": [
            "{ Description: Call this to cause a WebBrowser to change pages. }",
            "{ Returns TRUE if the browser is running and FALSE otherwise. }"
        ],
        "snippets": [
            "WebBrowserNavigate(",
            "\tBrowserHandle, { Required Web Browser Handle (#VTypeWebBrowser) - Web",
            "\t\tBrowser instance whose page you want to change. }",
            "\tURL { Required text. The URL that the Web Browser should navigate to.",
            "\t\t}",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WebSktSubscribe": {
        "comments": [
            "{ Description: Registers a module with the VTScada HTTPServer to",
            "\tlisten for WebSocket connections. }",
            "{ The account being used to authenticate the WebSocket request needs",
            "\tto have \"Thin Client Access\" privilege. Once registered, HTTPServer",
            "\twill call the NewRequest and NewWebSocket subroutines in the",
            "\tCallbackScope object every time a new request to create a WebSocket is",
            "\treceived. Templates for NewRequest and NewWebSocket follow. }"
        ],
        "snippets": [
            "System.HTTPServerInst.WebSktSubscribe(",
            "\tApplication-GUID, { Required text. The 36-byte textual GUID of the",
            "\t\tapplication registering with HTTPServer. }",
            "\tAddress, { Required text. The consumerâs addressing string defining",
            "\t\tthe tail of the Request-URI match, for which this consumer wishes to",
            "\t\tbe called-back. }",
            "\tAuthenticate, { Optional Boolean. If TRUE, VTScada's HTTP server will",
            "\t\tauthenticate the request. If FALSE or Invalid, HTTPServer performs no",
            "\t\tauthentication, leaving this to the consumer. Should be left Invalid",
            "\t\tif CallbackScope is also Invalid. }",
            "\tCallbackScope { Optional object reference. Specifies an object value,",
            "\t\timmediately subordinate to which are a set of subroutines that will",
            "\t\treceive various call-backs from HTTPServer, as follows. Providing",
            "\t\tInvalid for this parameter removes any previous registration for the",
            "\t\tApplication-GUID and Address. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WhileLoop": {
        "comments": [
            "{ Description: Repeatedly executes its parameters while a condition is",
            "\ttrue. }",
            "{ No other statement will execute as long as Condition is true. Care",
            "\tmust be taken that the statement terminates since it has the potential",
            "\tof locking up the system if it does not exit. }"
        ],
        "snippets": [
            "WhileLoop(",
            "\tCondition, { Required. An expression that will be evaluated to",
            "\t\tdetermine if the Function parameters should be executed. If it is",
            "\t\ttrue, the Function parameters will be executed and then Condition will",
            "\t\tbe re-evaluated and the process repeated until Condition is either",
            "\t\tfalse or invalid. }",
            "\tFunction1, Function2, ... { Required. These are any expressions that",
            "\t\tare to be executed while Condition is true. The Function parameters",
            "\t\tare executed in order. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WinButton": {
        "comments": [
            "{ Description: Windows native button. }",
            "{ None. }"
        ],
        "snippets": [
            "WinButton(",
            "\tX0, Y0, X1, Y1 { Required. Any four numeric values, locating the edges",
            "\t\tof the button in the window. To ensure consistent sizing, these",
            "\t\tparameters should be set using constants. A commonly-seen example",
            "\t\tfollows: WinWd-2*BtnWd-2*Space, WinHt-Space, WinWd-BtnWd-2*Space,",
            "\t\tWinHt-BtnHt-Space }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "WinComboCtrl": {
        "comments": [
            "{ Description: Windows native \"combo\" control. A \"combo\" control is an",
            "\tenhanced form of drop list. Displays a child window containing a",
            "\tWindows combo control. }",
            "{ The return value for WinComboCtrl can be one of the following",
            "\tvalues: Invalid- Nothing happened or there is a problem with the",
            "\tcontrol. 0Internal buffer changed 1Selection made from list or Enter",
            "\tkey pressed 2Focus has been lost. Data must be a one-dimensional array",
            "\tof text values. Index is a variable that receives the current",
            "\tselection array index, or the text value if the droplist has an",
            "\teditable selection and new text is entered that does not match any",
            "\titem in the array. If FocusID is Invalid or less than or equal to \"0\",",
            "\tthe current selection cannot be modified. VTScada's native WinCtrls do",
            "\tnot behave the same way that they do in other programming languages.",
            "\tThese events are only registered in conjunction with an internal",
            "\tbuffer change. ie. a <CR> press or a focus lost is only registered",
            "\tafter a change in the data parameter (internal buffer) }"
        ],
        "snippets": [
            "WinComboCtrl(",
            "\tX0, Y0, X1, Y1, { Required. Coordinates. }",
            "\tStyle, { Required. Comprised of a combination of bit values to yield",
            "\t\tthe desired effects. Bits 0 and 1 define mutually-exclusive styles of",
            "\t\toperation. They can be set to one of the following values. If neither",
            "\t\tis set, the result is a Listbox with selected item above it. (See:",
            "\t\tBitwise Parameters & Operations ) Bit Number Definition 0 Droplist.",
            "\t\tThe current droplist selection is editable. 1 Droplist. The current",
            "\t\tdroplist selection is not editable. Bits 2 and 3 define input",
            "\t\tcharacter handling. They can be set to one of the following values:",
            "\t\tBit Number Definition 2 Input is converted to all uppercase. 3 Input",
            "\t\tis converted to all lowercase. Bit 4 controls list sorting Bit Number",
            "\t\tDefinition 4 List is presented to the user in alphanumerically sorted",
            "\t\torder. Bits 5 through 8 are reserved. Bit 9 Specifies that the size of",
            "\t\tthe combo box is exactly the size specified by the application when it",
            "\t\tcreated the combo box. Normally, the system sizes a combo box so that",
            "\t\tit does not display partial items. Bit Number Definition 9 Enable",
            "\t\tapplication-defined geometry. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4,",
            "\t9",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Window": {
        "comments": [
            "{ Description: Opens a new window, starts a module inside, and",
            "\teventually returns the module's value. }",
            "{ This function returns the value returned by Module. When a window is",
            "\tmaximized, its maximized size is not based on the size of the screen,",
            "\talthough for many commercial applications the two are the same, but",
            "\trather, its full size is defined by the fifth and sixth parameters,",
            "\tnamely virtual width and height. If the view area and the virtual area",
            "\tof the window have been defined to be the same, selecting the maximize",
            "\tbutton will appear to have no effect. The minimum size of a window is",
            "\tbased on the operating system under which the application is running,",
            "\tas well as the attributes of the window itself as defined by the Style",
            "\tparameter. The width need only be greater than or equal to 0. Window",
            "\theights similarly need only be greater than or equal to 0.",
            "\tGUITransform functions may make use of VStatus to inquire about the",
            "\tboundaries of the window they are within. A window can be turned into",
            "\ta drag and drop target by adding the callback modules, OLEDrag and",
            "\tOLEDrop. Further details can be found in the chapter, Create Windows &",
            "\tUse Graphics Functions. If a ribbon is to be associated with this",
            "\twindow, then the ribbon must be instantiated at the same time that the",
            "\twindow is created, using the two optional parameters, RibbonName and",
            "\tRibbonState. Ribbons are compiled into resources, using Microsoft",
            "\tVisual Studio. The resources can then be linked directly into VTS.EXE",
            "\t(Trihedral use only) or into an external DLL. This allows multiple",
            "\tribbons to be provided in separate DLLs. You can have more than one",
            "\tribbon in VTS.EXE or a DLL. RibbonName is of the form",
            "\t\"dllname|ribbonname\", being the name of the DLL, a vertical pipe",
            "\tsymbol and the name of the ribbon resource within the DLL. If the",
            "\tribbon is compiled into VTS, the dllname and the pipe separator",
            "\tcharacter are omitted. If adding a ribbon to a window, and if there is",
            "\ta chance that the window will be maximized, you should use the",
            "\twindow's virtual width and virtual height as follows: Window(0, 0,",
            "\t1024, 768, VStatus(Self(), 26), VStatus(Self(), 27) + VSTatus(Self(),",
            "\t23), ... The virtual height in particular is important as otherwise",
            "\tthere will be a gap at the bottom of the window (normally, eight",
            "\tpixels) that is the size of the frame height. }"
        ],
        "snippets": [
            "Window(",
            "\tLeft, { Required. Any numeric expression that gives the left",
            "\t\tcoordinate of the new window. If the new window is a child window,",
            "\t\tLeft is the user coordinate within the window of the calling module.",
            "\t\tIf the new window is not a child window, Left is the number of pixels",
            "\t\tfrom the left of the screen. }",
            "\tTop, { Required. Any numeric expression that gives the top coordinate",
            "\t\tof the new window. If the new window is a child window, Top is the",
            "\t\tuser coordinate within the window of the calling module. If the new",
            "\t\twindow is not a child window, Top is the number of pixels from the top",
            "\t\tof the screen. }",
            "\tViewWidth, { Required. Any numeric expression that gives the window",
            "\t\twidth in pixels. The minimum width allowable is based on the operating",
            "\t\tsystem in use and the style options of the window (see the Comments",
            "\t\tsection for more details). }",
            "\tViewHeight, { Required. Any numeric expression that gives the window",
            "\t\theight in pixels. This value must be greater than or equal to 0. }",
            "\tVirtualWidth, { Required. Any numeric expression that gives the width",
            "\t\tinside the new window in user coordinates (which may be pixels). If",
            "\t\tVirtualWidth is larger than the client area specified, a horizontal",
            "\t\tscroll bar appears. }",
            "\tVirtualHeight, { Required. Any numeric expression that gives the",
            "\t\theight inside the new window in user coordinates (which may be",
            "\t\tpixels). If VirtualHeight is larger than the client area specified, a",
            "\t\tvertical scroll bar appears. If VirtualWidth and VirtualHeight are",
            "\t\tboth set to 0 (zero) the effective virtual size of the window becomes",
            "\t\tthe size of the monitor the window is within, varying dynamically. }",
            "\tModule, { Required. Any expression that uses a module call. The module",
            "\t\twill start, and all graphics in the module will draw in the new",
            "\t\twindow. }",
            "\tStyle, { Required. Any numeric expression that gives the style of the",
            "\t\twindow when it opens. This parameter has no effect after the window",
            "\t\thas opened. Style is formed by adding together bit values from the",
            "\t\ttable below. This parameter can be overridden by the variable",
            "\t\tPageWinOpt within a page's source code. (See: Bitwise Parameters &",
            "\t\tOperations ) Bit Number Description 0 Enable system close button (if",
            "\t\tbit 1 is set) 1 Show title bar 2 Thick border, not resizable 3 Thin",
            "\t\tborder, not resizable 4 Enable minimize button (if bit 1 is set ) 5",
            "\t\tEnable maximize button (if bit 1 is set) 6 Create window minimized 7",
            "\t\tCreate window maximized (full virtual size) 8 Disable scroll bars 9",
            "\t\tChild window 10 Always on top 11 Reserved for future use 12 Modal A",
            "\t\tmodal dialog is always displayed on top of the calling window and",
            "\t\tprevents further interaction with that window. window (like dialog",
            "\t\tbox) 13 Use pixel coordinates in window (otherwise user coordinates)",
            "\t\t14 Use Load statement to size window. Not supported by the Anywhere",
            "\t\tclient. 15 Owned window 16 Initially inactive window 17 Invokes",
            "\t\t\"automatic\" alpha blending, where the window is set to be 50%",
            "\t\ttranslucent when inactive and opaque when active. Not supported by the",
            "\t\tAnywhere client or on child windows (bit 9 is set). 18 Window is to be",
            "\t\trendered as transparent, with whatever color is specified as the",
            "\t\tbackground color being the transparent color. Not supported by the",
            "\t\tAnywhere client or on child windows (bit 9 is set) 19 Indicates that a",
            "\t\tWindowClose statement will be associated with this window. See",
            "\t\t\"WindowClose\" for more details. 20 Force the window to remain at a",
            "\t\tfixed aspect ratio 21 Reserved. 22 Window may serve as a drop target",
            "\t\tfor GUITransforms dragged from a palette. Not supported by the",
            "\t\tAnywhere client. 23 Window may serve as a palette, from which",
            "\t\tGUITransforms may be dragged. Not supported by the Anywhere client. 24",
            "\t\tIf set along with bit 23, the window that is the source of the object",
            "\t\tbeing dragged will hide itself automatically during the drag",
            "\t\toperation. 25 Hide horizontal scrollbar 26 Hide vertical scrollbar",
            "\t\t(Setting both bits 25 and 26 is the same as setting bit 8, disable",
            "\t\tscroll bars) Notes on the style settings: The default window (if Style",
            "\t\tis set to 0) has a thick border and is resizable. If bit 1 is not set,",
            "\t\tthe title bar is not shown, and bits 0, 4 and 5 have no effect. If",
            "\t\tbits 2 and 3 are both set, there will not be a border unless bit 1 is",
            "\t\tset, in which case there will be a thin border. If neither bit 2 nor",
            "\t\tbit 3 is set, the border will be a resizable thick border. Bits 4 and",
            "\t\t5 specify whether minimize and maximize buttons are disabled, rather",
            "\t\tthan specifying whether they are visible (both the minimize and",
            "\t\tmaximize buttons will be either visible or not visible). Furthermore,",
            "\t\tthese options have no effect without bit 0 being set (except under",
            "\t\tWindows NT 3.51). The system close button must be enabled for the user",
            "\t\tto have any control over the minimize and maximize buttons. Setting",
            "\t\tbit 8 disables the scroll bars that are normally shown if the window",
            "\t\thas been resized (smaller). In this case, the entire window must be",
            "\t\tenlarged to its original size if you wish to view its contents. Bit 9",
            "\t\t(child window) specifies a \"window within a window\". The new window is",
            "\t\tanother graphic object within the calling window and is truncated by",
            "\t\tthe borders of the parent window. This means that as the parent window",
            "\t\tis dragged, the child stays on top of the parent window in the same",
            "\t\tposition within and relative to the parent's borders. If the parent",
            "\t\twindow is minimized, then the child window is also minimized. Child",
            "\t\twindows do not produce status line title-windows. It is impossible to",
            "\t\tmake a window a child window if the Window statement is in a module",
            "\t\tthat isn't running in a window already. A child window is always an",
            "\t\towned window. Setting bit 12 means that the window will take all of",
            "\t\tthe input until closed. Care should be taken when using this option in",
            "\t\tconjunction with bit 14 (size based on load). A problem will occur if",
            "\t\tthe load file cannot be found, and the window will not show up but",
            "\t\twill still be modal. The result is that the system will take no input",
            "\t\tuntil the window is closed. Setting bit 14 hides the window until a",
            "\t\tLoad statement is executed in Module. The window is then opened in the",
            "\t\tsize required to display the loaded image. Bit 15 (owned window)",
            "\t\tcreates a window that is always in front of the calling window. Unlike",
            "\t\tchild windows, which are controlled by their parents, owned windows",
            "\t\tare not restricted by their owner's boundaries, nor does the movement",
            "\t\tof the parent window change their position. The exception to this,",
            "\t\thowever, is that if the owning window is minimized, the owned window",
            "\t\twill also be minimized. Owned windows do not produce status line",
            "\t\ttitle-windows. Although all child windows are owned, not all owned",
            "\t\twindows are child windows. Bit 17. An alpha-blended window is one that",
            "\t\thas an alpha channel set up in the final renderer, resulting in a",
            "\t\ttranslucent effect to the window (i.e. it behaves like a normal",
            "\t\twindow, except that you can see through the window to some degree. The",
            "\t\tdegree of translucency ranges from zero (invisible) to 255 (completely",
            "\t\topaque, just like a normal window). Setting bit 17 on your Window",
            "\t\tstatement invokes \"automatic\" alpha blending, where the window is set",
            "\t\tto be 50% translucent when inactive and opaque when active. This is",
            "\t\tuseful for dialogs that are non-modal and always on-top, so that when",
            "\t\tanother window is active, you can see through to the underlying",
            "\t\twindows. If you need a finer degree of control on this, do not set bit",
            "\t\t17, but use a new value for the \"Option\" parameter of WindowOptions",
            "\t\t(9) and set the WindowOptions \"OptValue\" parameter to the degree of",
            "\t\talpha-blending that you wish (0 to 255). Note that these effects DO",
            "\t\tNOT work with child windows. Also note that these effects are NOT",
            "\t\tdesigned for animation purposes are not sufficiently efficient for",
            "\t\tthis. The amount of processing power required to redraw one of these",
            "\t\twindows depends on the rating of the graphics card in your machine.",
            "\t\tThe newer and faster the better. Bit 18. A transparent window is one",
            "\t\tthat has a transparent background. The intended use for this is to",
            "\t\tallow the display of non-rectangular windows, by rendering the",
            "\t\tbackground as transparent and allowing mouse messages (movement and",
            "\t\tclicks) to \"drill-through\" the transparent area. The simplest way to",
            "\t\tcreate a transparent window is to specify a background color less than",
            "\t\tzero (-1, for example). The underlying implementation, however,",
            "\t\trequires that a specific color is used as a \"key\" color. All pixels of",
            "\t\tthat color in the otherwise rectangular screen area that the window",
            "\t\toccupies are rendered as transparent. Using a background color of < 0",
            "\t\tresults in the key color being black [i.e. RBG(0, 0, 0)] and the",
            "\t\twindow background being set to that color. It may well be that you",
            "\t\twish to have black as a color in your window, however. Therefore,",
            "\t\tsetting bit 18 in the Window statement also announces that this window",
            "\t\tis to be rendered as transparent, with whatever color is specified as",
            "\t\tthe background color being the transparent color. A WinXLoc/WinYLoc",
            "\t\tstatement for the new window registers the values for the parent",
            "\t\twindow when the mouse is over the parent and not itself, and will",
            "\t\tregister the values for itself when the mouse is over it. The same is",
            "\t\talso true for the parent (it will see the values for the child window",
            "\t\twhen the mouse is over the child). Bits 22 and 23 are mutually",
            "\t\texclusive. A window cannot be both a palette and a drop-target. }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10, { 11 }",
            "\t12, { 13 }",
            "\t14, { 15 }",
            "\t16, { 17 }",
            "\t18, { 19 }",
            "\t20, { 21 }",
            "\t22, { 23 }",
            "\t24, { 25 }",
            "\t26",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "WindowClose": {
        "comments": [
            "{ Description: Returns true if an attempt is made to close the window.",
            "\t}",
            "{ Only one WindowClose() should run with a window at a given time.",
            "\tWindowClose() can be used inside a window that you opened with a",
            "\tWindow() call. For any page or widget, or other window do not use",
            "\tWindowClose because you cannot know if WindowClose is already being",
            "\tused with that window (as is likely the case). If this function is",
            "\tactive when an attempt to close a window is made, the window will not",
            "\tclose, and the module(s) in that window will not stop. It is up to the",
            "\tcalling module to close the window and stop the module(s) by switching",
            "\tto another state. This function may be used to control what happens",
            "\twhen a window is closed (or to prevent it from being closed). When the",
            "\tattempt is made to close the window, an action (or actions) can be",
            "\ttriggered. For example, this might write some data to file. Then a",
            "\tvariable could be set (or a value could be returned by the module)",
            "\twhich signals the calling module to switch states, which closes the",
            "\twindow and stops the module(s) inside. Notes on closing a window: When",
            "\tWindowClose behavior is active, the typical way to close a window is",
            "\tby making one of the following happen: The Enable parameter to the",
            "\tWindow() function changes to false. The state where the Window()",
            "\tfunction is running in steady state stops. This is typically achieved",
            "\tby doing one of two things: The calling object's state changes away",
            "\tfrom the state containing the Window() function. The calling object is",
            "\tslain. Calling Slay on the root object of the window does not work.",
            "\t(For example, calling Slay(Self) from the window's root object.) The",
            "\troot object of the window is called in steady-state, from the Window",
            "\tfunction's 7th parameter. Slaying an object that has been called in",
            "\tsteady-state does nothing because it does not affect the calling",
            "\tobject: the calling object would still be in it's same state with that",
            "\tsame Window() call running, and therefore the called Window module",
            "\tcannot be permitted to stop. If the calling object is launched, then a",
            "\tcommon approach is to slay that calling object. For example,",
            "\tSlay(Caller(Self)) rather than Slay(Self) may work, depending on how",
            "\tthe object was launched. }"
        ],
        "snippets": [
            "WindowClose(",
            "\tObject { Required. Any expression that returns the object value of any",
            "\t\tmodule instance drawn in the window. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "WindowOptions": {
        "comments": [
            "{ Description: Alters the options on a window after it has been",
            "\topened. }",
            "{ This statement will alter the attributes of the window as it is",
            "\trunning. The values that the given options can be set to are from",
            "\t-32763 to 32763. When the option value is set to 15, the function",
            "\trequires four parameters, all of which must be valid. The last two set",
            "\tthe minimum width and height }"
        ],
        "snippets": [
            "WindowOptions(",
            "\tObject, { Required. Any expression that returns the object value of",
            "\t\tany module instance drawn in the window. }",
            "\tOption { Required. Any numeric expression that specifies which option",
            "\t\tfor the window to alter. Step options 1-4 should be used by advanced",
            "\t\tusers only as these should be used only by VScrollbar and HScrollbar.",
            "\t\tOption Attribute to alter 0 Visibility of the window 1 Horizontal",
            "\t\tscroll line step size 2 Horizontal scroll page step size 3 Vertical",
            "\t\tscroll line step size 4 Vertical scroll page step size 5 Set",
            "\t\tHorizontal Scroll position. Has no effect in an Anywhere client. 6 Set",
            "\t\tVertical Scroll position 7 Locator reporting rate from the VIC is",
            "\t\taccelerated. Typically this would be used when fast, dynamic feedback",
            "\t\tof mouse movement from the VIC is required for a rapid, interactive",
            "\t\tresponse. CAUTION: Unnecessary use of this option can seriously",
            "\t\tdegrade the VTScada window update rate on the VIC. Not supported by",
            "\t\tthe Anywhere client. 8 Locator reporting rate from the VIC is returned",
            "\t\tto normal. Locator position reports are only sent when the VIC",
            "\t\tconsiders them significant. This is the default mode of operation. Not",
            "\t\tsupported by the Anywhere client. 9 Sets the level of alpha-blending",
            "\t\t(window translucency) of the window. OptValue determines the level of",
            "\t\talpha-blending from 0 (completely transparent) to 255 (completely",
            "\t\topaque). An OptValue of 128 would give 50 percent translucency. Not",
            "\t\tsupported by the Anywhere client. 10 Set background color of tooltips.",
            "\t\tMust be provided as a palette color. You may set the option value to",
            "\t\t-1 to use default colors or -2 (the default) to use parent window",
            "\t\tsettings. Will work only when visual themes are disabled in Windows.",
            "\t\tNot supported if running in Windows 7 or later. Not supported by the",
            "\t\tAnywhere client. 11 Set tooltips text color. Must be provided as a",
            "\t\tpalette color. You may set the option value to -1 to use default",
            "\t\tcolors or -2 (the default) to use parent window settings. Will work",
            "\t\tonly when visual themes are disabled in Windows. Not supported if",
            "\t\trunning in Windows 7 or later. Not supported by the Anywhere client.",
            "\t\t12 Not supported if running in Windows 7 or later. Set tooltips show",
            "\t\tdelay. Will work only when visual themes are disabled in Windows. Not",
            "\t\tsupported by the Anywhere client. 13 Set tooltips show duration. This",
            "\t\tvalue is limited by the operating system to less than 33 seconds. Will",
            "\t\twork only when visual themes are disabled in Windows. Not supported if",
            "\t\trunning in Windows 7 or later. Not supported by the Anywhere client.",
            "\t\t14 Set tooltips neighbor re-show delay. Will work only when visual",
            "\t\tthemes are disabled in Windows. Not supported if running in Windows 7",
            "\t\tor later. Not supported by the Anywhere client. 15 Sets the minimum",
            "\t\twindow width and height, using two option value parameters instead of",
            "\t\tone, e.g. WindowOptions(Self(), 15, Width, Height); 16 The Source",
            "\t\twindow will redirect its mouse wheel messages to the Destination",
            "\t\twindow. A source window can only have one redirect at a given time. In",
            "\t\tan Anywhere Client with touch screen, this will redirect vertical",
            "\t\tpanning. For advanced users only. 17 Reserved. 18 Turn alignment cue",
            "\t\tdrawing and behavior on or off. Not supported by the Anywhere client.",
            "\t\t19 Set the color of the alignment snaps. Not supported by the Anywhere",
            "\t\tclient. 20 Set the color of the distance snaps. Not supported by the",
            "\t\tAnywhere client. 21 Set the color of the spacing snaps. Not supported",
            "\t\tby the Anywhere client. 22 Set the color of the sweep area border. Not",
            "\t\tsupported by the Anywhere client. 23 Set the color of the sweep area",
            "\t\tfill. Not supported by the Anywhere client. 24 Dark color of the",
            "\t\tbounding box edges in a selection. Not supported by the Anywhere",
            "\t\tclient. 25 Handle inner fill color. Not supported by the Anywhere",
            "\t\tclient. 26 Snap sensitivity in pixels. Not supported by the Anywhere",
            "\t\tclient. 27 Drag sensitivity in pixels. Not supported by the Anywhere",
            "\t\tclient. 28 X translation of the window. Not supported by the Anywhere",
            "\t\tclient. 29 Y translation of the window. Not supported by the Anywhere",
            "\t\tclient. 30 Set the size of distance snaps. Not supported by the",
            "\t\tAnywhere client. 31 Set the background color of the window. 32 In an",
            "\t\tAnywhere Client with touch screen, this will redirect horizontal",
            "\t\tpanning. For advanced users only. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "WindowsLogon": {
        "comments": [
            "{ Description: Authentication request to Windows Authentication",
            "\tservices. }",
            "{ This function should not be used for VTScada-based authentication.",
            "\tNote that this function may take some time to complete and will block",
            "\tthe caller until it does. Other threads in the VTScada system will",
            "\tcontinue to run while this function is executing. }"
        ],
        "snippets": [
            "WindowsLogon(",
            "\tUsername, { Required. The account name to authenticate. }",
            "\tPassword { Required. The password, required to authenticate the given",
            "\t\taccount. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "WindowSnapshot": {
        "comments": [
            "{ Description: Creates an image file containing a screen capture of",
            "\tthe specified window. }",
            "{ Available mime types include image/bmp, image/jpeg, image/gif,",
            "\timage/tiff, image/png. Note: Runs asynchronously from a VTScada",
            "\tInternet Client. In this case, the return value is meaningless. Within",
            "\tan Anywhere Client session, this function does nothing. }"
        ],
        "snippets": [
            "WindowSnapshot(",
            "\tFilename, { Required. Any expression that is a string, or an array of",
            "\t\tstrings containing the full filename(s) to which the screen capture",
            "\t\tshould be saved. }",
            "\tWindowObj, { Required. An object (often, \"Self()\") specifying the",
            "\t\twindow to be captured. }",
            "\tMimeType, { Required. Any expression that is a string, or an array of",
            "\t\tstrings specifying the mime type(s) to be used for the image. }",
            "\tLeft, Top, Right, Bottom { Optional. Short integer values, providing",
            "\t\tthe bounding area of the region to be captured within the window. If",
            "\t\tany one of these parameters is provided, all four must be provided. If",
            "\t\tnot provided, a snapshot will be taken of the entire window. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WinEditCtrl": {
        "comments": [
            "{ Description: Windows native edit control. This function returns a",
            "\tvalue indicating the status of an edit field. }"
        ],
        "snippets": [
            "WinEditCtrl(",
            "\tX0, Y0, X1, Y1, { Required. Coordinates. }",
            "\tStyle, { Optional. Default 0. Comprised of a combination of bit values",
            "\t\tto yield the desired effects. Note that some combinations should not",
            "\t\tbe used as they could be mutually exclusive. For example converting",
            "\t\tinput to all uppercase and to all lowercase (bits 2 and 3 both set).",
            "\t\tBits 0 and 1 are reserved for bit compatibility with WinComboCtrl, and",
            "\t\tshould be set to \"0\". Bits 2, 3 and 4 define input character handling.",
            "\t\tIt is reasonable to set bit 2 and 4 or 3 and 4, but not bits 2 and 3.",
            "\t\tIf not set, input is used exactly as typed. (See: Bitwise Parameters &",
            "\t\tOperations ) Bit Number Definition 0 Reserved for compatibility with",
            "\t\tWinComboCtrl, and should be set to \"0\" 1 Reserved for compatibility",
            "\t\twith WinComboCtrl, and should be set to \"0\" 2 Input is converted to",
            "\t\tall uppercase 3 Input is converted to all lowercase 4 Input is masked.",
            "\t\tAny characters typed will appear as asterisks. (useful for password",
            "\t\tfields) Will not work in combination with bit 5, multi-line editing. 5",
            "\t\tMulti-line editing. When set, this bit causes a typed Enter key to be",
            "\t\tinterpreted as \"move to the start of the next line\". Text that",
            "\t\tcontains carriage-return & line-feed characters has a line break",
            "\t\tinserted at each set. 6 Forces the background color to continue being",
            "\t\tused when the control is disabled, rather than allowing it to gray as",
            "\t\tit otherwise would. 7 Not used 8 Reserved 9 Reserved 10 Bits 10 and 11",
            "\t\tcontrol horizontal alignment as follows: Bit 10 Bit 11 Alignment 0 0",
            "\t\tLeft (default) 1 0 Center 0 1 Right 1 1 Do not use 11 }",
            "\t0, { 1 }",
            "\t2, { 3 }",
            "\t4, { 5 }",
            "\t6, { 7 }",
            "\t8, { 9 }",
            "\t10 { Bit 10 }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "WinLocSwitch": {
        "comments": [
            "{ Description: Returns the current status of the locator (mouse)",
            "\tbuttons in a certain window and its ancestors. }"
        ],
        "snippets": [
            "WinLocSwitch(",
            "\tObject { Required. Any expression that returns the object value of any",
            "\t\tmodule instance drawn in the window. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "WinLocWheel": {
        "comments": [
            "{ Description: WinLocWheel returns TRUE when the mouse wheel is rolled",
            "\twhile the mouse is over the specified window with the specified",
            "\tmodifier key held down. This allows it to be used within a predicate.",
            "\t}",
            "{ The function looks for mouse movements while the cursor is within",
            "\tthe bounds of the object window. The modifier key values come from the",
            "\tWin32 definitions of MK_SHIFTKEY(4) and MK_CTRLKEY(8). When the mouse",
            "\tis over the window and the modifier key is held down, one mouse wheel",
            "\t\"roll-click\" will cause ScrollChange to be set to -1 or 1, depending",
            "\ton the direction of the roll. On a very busy system, it is possible",
            "\tfor multiple wheel rolls to be captured in one trigger of the",
            "\tstatement, so ScrollChange may be any integral number but usually each",
            "\troll-click results in a single trigger with ScrollChange set to -1 or",
            "\t1. }"
        ],
        "snippets": [
            "WinLocWheel(",
            "\tObject, { Object is a module instance that is running inside a window.",
            "\t\t}",
            "\tModifierKey, { Defines the key that must be held down to activate the",
            "\t\tfunction. Either 4 (Shift) or 8 (Ctrl). }",
            "\tScrollChange { Set to the direction and magnitude of the wheel",
            "\t\tmovement. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "WinMatchKeys": {
        "comments": [
            "{ Description: Returns true if the specified keyboard keys have been",
            "\tpressed in the sequence given, in another window. }"
        ],
        "snippets": [
            "WinMatchKeys(",
            "\tObject, { Required. Any expression which gives the object value of any",
            "\t\tmodule instance which is running in the window. }",
            "\tEnable, { Required. Any numeric expression giving an enable for the",
            "\t\tfunction. Testing of keyboard input is enabled when this parameter is",
            "\t\ttrue (not 0). If this parameter is false(0), the function's value is",
            "\t\tfalse(0). In addition, the Enable parameter controls the type of",
            "\t\tcomparison done. If the Enable is 1, a case-sensitive match is made.",
            "\t\tIf the Enable is 2, then the match is not case-sensitive. (Any",
            "\t\tnon-zero value other than 2 will cause a case-sensitive match. The use",
            "\t\tof 1 and 2 is recommended for clarity.) }",
            "\tKeys { Required. A text expression giving the key sequence to watch",
            "\t\tfor. The case of individual letters may be significant, depending on",
            "\t\tthe Enable parameter. For example: PageUp = Concat(MakeBuff(1, 253),",
            "\t\tMakeBuff(1, 0x49)); F2 = Concat(MakeBuff(1,253), MakeBuff(1,60)); F3 =",
            "\t\tConcat(MakeBuff(1,253), MakeBuff(1,61)); CtrlZKey = MakeBuff(1, 26); }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "WinShiftKeys": {
        "comments": [
            "{ Description: Returns a value which contains the current status of",
            "\tthe Shift, Control and Alt control keys. }"
        ],
        "snippets": [
            "WinShiftKeys(",
            "\tObject { Required. Any expression that gives the object value of any",
            "\t\tmodule instance which is drawn in the window. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "WinTooltipCtrl": {
        "comments": [
            "{ Description: Windows native \"tooltip\" control. A \"tooltip\" is a",
            "\tpop-up text window that provides operational hints to users when the",
            "\tmouse pointer is rested over a tool or object. }",
            "{ This statement returns Invalid. The background color, text color,",
            "\tand delay timings are set on a per-window basis using the",
            "\tWindowOptions statement. }"
        ],
        "snippets": [
            "WinTooltipCtrl(",
            "\tX0, Y0, X1, and Y1, { Required. Coordinates of a rectangular screen",
            "\t\tarea. When the mouse enters that area (the \"hit area\"), and stops",
            "\t\tmoving for a time, the pop-up tooltip will be displayed. }",
            "\tStyle { Required. One or more of the following bit flags, used to",
            "\t\tcontrol the style of the tooltip: 1 - If set, the tooltip will respond",
            "\t\tto the mouse in the hit area regardless as to whether the containing",
            "\t\twindow is the active window. If clear (default), the tooltip only",
            "\t\tresponds if it is the active window. 32 - If set, fading of the",
            "\t\ttooltip is disabled. If clear (default), the tooltip fades in and",
            "\t\t(under some circumstances) out. 64 - If set, the tooltip is displayed",
            "\t\tas a balloon. If clear (default), the tooltip is displayed as a",
            "\t\trectangular window. 128 - If set, the tooltip is displayed in-place",
            "\t\t(i.e. over the top of the hit area). This is most useful when the hit",
            "\t\tarea is occupied by clipped text and the tooltip contains the full",
            "\t\ttext, so that hovering over the clipped text shows the full text in a",
            "\t\ttooltip window positioned over the top of the clipped text. Note:",
            "\t\tSystem.ListBox uses this ability. (See: Bitwise Parameters &",
            "\t\tOperations ) }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "WinXLoc": {
        "comments": [
            "{ Description: Returns the X coordinate of the locator (mouse) for a",
            "\twindow. }",
            "{ Returns the location of the mouse for a particular window. If the",
            "\tmouse is not over that window, it retains the value from the last time",
            "\tthat the mouse was over that window. If the window that the mouse is",
            "\tover is a child window, a WinXLoc/WinYLoc statement in the parent will",
            "\tregister the same values as one in the child. That is, the coordinate",
            "\tposition in the child window. Similarly, when the mouse is moved over",
            "\tthe parent, the values for WinXLoc/WinYLoc in both the parent and",
            "\tchild windows will be the same. That is, the location of the mouse in",
            "\tthe parent window. Note: This function is disabled when using a",
            "\tGUITransform as a GUIStrectch. }"
        ],
        "snippets": [
            "WinXLoc(",
            "\tObject { Required. Any expression that gives the object value of any",
            "\t\tmodule instance which is drawn in the window. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "WinYLoc": {
        "comments": [
            "{ Description: Returns the Y coordinate of the locator (mouse) in a",
            "\twindow. }"
        ],
        "snippets": [
            "WinYLoc(",
            "\tObject { Required. Any expression that gives the object value of any",
            "\t\tmodule instance which is drawn in the window. Note: This function is",
            "\t\tdisabled when using a GUITransform as a GUIStrectch. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "WKSList": {
        "comments": [
            "{ Description: Generates a list of sub-paths from the query returned",
            "\tby the WKSPath function. }",
            "{ Returns an array of sub-paths that are a refinement of the query",
            "\tpath returned from WKSPath. If the query path provided is a broad",
            "\tcategory, the resulting array may be quite large. Returns a Windowsâ¢",
            "\tPDH error code upon failure. This is a long integer containing a",
            "\t32-bit code. }"
        ],
        "snippets": [
            "WKSList(",
            "\tQueryPath { Required. A query path as generated by WKSPath. Due to the",
            "\t\tcomplexity of the included symbols and formatting rules, this path",
            "\t\tshould not be hand-coded. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WKSPath": {
        "comments": [
            "{ Description: Given set of path components, generates a query path",
            "\tfor use in the WKSStatus command. }",
            "{ If the optional parameters are to be included but not specifically",
            "\tset, then wildcard values must be provided. For text parameters, use",
            "\tthe asterisk *, and for numeric parameters, use -1. The output from",
            "\tWKSPath will usually be passed to WKSList for further processing, then",
            "\tto WKSStatus to use to query workstation status. The parameters to",
            "\tthis function and the resulting query path are best understood in the",
            "\tcontext of the Windowsâ¢ Performance Monitor. Returns a Windowsâ¢ PDH",
            "\terror code upon failure. This is a long integer containing a 32-bit",
            "\tcode. }"
        ],
        "snippets": [
            "WKSPath(",
            "\tMachineName, { Required. The name of the computer to query. Can be",
            "\t\tobtained dynamically using the function call, WkStaInfo(0); }",
            "\tObjectName, { Required. The system object to query. (corresponds to",
            "\t\tthe objects in the top list in the provided image). \"Processor\" is an",
            "\t\texample. The ObjectName must be in the locale language (the language",
            "\t\tthat the user account is in). For example, using an English string on",
            "\t\ta French user account will return an error. }",
            "\tInstanceName, { The name of the instance of the system object to",
            "\t\tquery. The wildcard, * may be used to query all instances. }",
            "\tParentInstance, { The name of the parent instance of the system",
            "\t\tobject. The wildcard, * may be used to query all parent instances. }",
            "\tInstanceIndex, { An integer assigned to the system object, if unnamed.",
            "\t\t}",
            "\tCounterName { The name of the data item to query from the system",
            "\t\tobject. The wildcard, * may be used to query all sub items of the",
            "\t\tsystem object. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WKSStatus": {
        "comments": [
            "{ Description: Sends a query to the Windowsâ¢ Performance Monitor",
            "\tinterface (see image in WKSPath) and returns the result as a query",
            "\thandle. }",
            "{ Returns a number of type double as a result of the query provided.",
            "\tUpon error, the result will be invalid. The operation type can be set",
            "\tto 1 to obtain the error code. Note that some queries must be checked",
            "\tmultiple times before a result will be produced, therefore not all",
            "\terror codes are critical. The WksStatus function can report values",
            "\tgreater than 100% for percentage counters such as \"\\\\@\\Process(VTS)\\%",
            "\tProcessor Time\" when (for example) a total of more than one CPU core",
            "\tis being used by the process. }"
        ],
        "snippets": [
            "WKSStatus(",
            "\tQuery, { Required. The query to be sent to the Performance Monitor.",
            "\t\tThe query path should be built using WKSPath, possibly refined by",
            "\t\tbeing passed through WKSList. }",
            "\tOperationType { Required. Controls the operation according to the",
            "\t\tfollowing values: OperationType Action 0 Get value 1 Get error value.",
            "\t\t2 Generate handle (QueryHandle must be a path) 3 Clear handle }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WKStaInfo": {
        "comments": [
            "{ Description: Returns the characteristic information about this",
            "\tworkstation. }",
            "{ If looking for the workstation name, it is more efficient to use the",
            "\t\\RPCManager variable WkStnName rather than call this function.",
            "\t(\\RPCManager.WkStnName) Variables available in \\RPCManager This",
            "\tfunction will only return a valid value if the machine has a",
            "\tworkstation name assigned to it (i.e. if network services have been",
            "\tinstalled). If network services have not been installed it will return",
            "\tinvalid. Option 3, the unique machine identifier, returns a 6-byte",
            "\tbinary buffer. Use the function System.BuffToHex on the returned value",
            "\tif you would like to use the MachineID as a Hex string. VTScada relies",
            "\ton a Windows function call to obtain the NetBios name of workstations.",
            "\tThat function will truncate names that are longer than 15 characters.",
            "\tYou are advised to limit workstation names to be 15 characters or",
            "\tless. }"
        ],
        "snippets": [
            "WKStaInfo(",
            "\tOption { Required. Selects the characteristic to return, as shown in",
            "\t\tthe following table Option Return characteristic 0 Workstation name 1",
            "\t\tUser name 2 Domain name 3 Unique Machine Identifier 4 Returns TRUE if",
            "\t\tthe local machine is configured to resolve names using DNS. 5 Returns",
            "\t\tthe domain name of the computer. 6 Returns the activation code if that",
            "\t\tcode can be validated to match the machine ID. 7 Returns the",
            "\t\tinstallation timestamp. 8 Returns the fully qualified distinguished",
            "\t\tname. example: \"CN=Jeff Smith, OU=Users, DC= Engineering, DC=Com\" }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WrapText": {
        "comments": [
            "{ Description: Breaks a text string based on given font and width and",
            "\treturns the text segments in an array. }",
            "{ Pixels are assumed to have a dpi size of 96. }"
        ],
        "snippets": [
            "WrapText(",
            "\tString, { Required. The text to be wrapped. }",
            "\tFont, { Required The font to use for the width calculation, as",
            "\t\treturned by a call to the Font function. }",
            "\tWidth, { Required numeric. The maximum number of pixels to be occupied",
            "\t\tby any line of the wrapped text. }",
            "\tGetSpaceLen { Optional Boolean. Set TRUE to return a 2D array, the",
            "\t\tfirst column (left-most) will contain wrapped text, and the second",
            "\t\t(right-most) will contain the trailing whitespace length. Set FALSE to",
            "\t\treturn a one-dimensional array that contains only the wrapped text.",
            "\t\tDefaults to FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "Write": {
        "comments": [
            "{ Description: Used by a tag to create a write request to a driver",
            "\taddress. }",
            "{ Allows the writing of a specific address on demand. The resulting",
            "\tdata will be sent only to the requesting machine. Write returns",
            "\tInvalid when called on the client. Only when running on the server",
            "\tdoes it return an object that can be used to tell if the write is",
            "\tdone. The object value of the underlying read module is returned from",
            "\tthe function. When the write finishes, the returned objectâs value",
            "\twill go to Invalid, signaling the end of the write operation. }"
        ],
        "snippets": [
            "â¦\\Driver\\Write(",
            "\tAddress, { Required. The starting address to write the data to. }",
            "\tN, { Required. The number of elements to write. }",
            "\tVal, { Required. The data to be written. If Val is a single value or a",
            "\t\tstatically-declared array, it should be preceded by a pointer",
            "\t\treference (&). Do not use the pointer reference if passing a",
            "\t\tdynamically-declared array of values. }",
            "\tDType, { No longer used. Was: the data type to be written to the I/O",
            "\t\tdevice. }",
            "\tTagName, { The name of the tag that is writing the data. }",
            "\tSuccess { Pointer to a Boolean, used to pass success/fail information.",
            "\t\tSuccess is not set if Write is called on a client. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WriteHistory": {
        "comments": [
            "{ Description: Interface to write tag history. }",
            "{ In order to ensure that the history is successfully written, this",
            "\tfunction must be called with the same data on all Historian-potential",
            "\tservers, (which can be done by calling it on all workstations,) unless",
            "\tBroadcastMode is TRUE, in which case it need only be called on exactly",
            "\tone workstation (any workstation). Possible return values are as",
            "\tfollows: -1 if the number of timestamps passed in does not match the",
            "\tnumber of data entries passed in. 0 otherwise. This does not indicate",
            "\tthat the data was written, just that the above condition on the",
            "\tparameters held true. }"
        ],
        "snippets": [
            "\\HistorianManager.WriteHistory(",
            "\tTagObj, { Required. The tag instance for which the data is to be",
            "\t\twritten }",
            "\tTimeStamp, { Optional UTC timestamp. If invalid, a timestamp will be",
            "\t\tgenerated using the current time. If the number of records to be",
            "\t\twritten is 1 then this should be a simple value. If several records",
            "\t\tare to be written, this should be a simple array having a size that",
            "\t\tmatches the number of records. }",
            "\tData { Optional data values to record. If invalid, current values from",
            "\t\tTagObj will be used. Otherwise, this may be: A simple value to log a",
            "\t\tsingle variable. A simple array, the size of which must match the",
            "\t\tnumber of records to write if the number of variables for each record",
            "\t\tis 1. Otherwise, this must match the number of logged variables for",
            "\t\teach record. If logging attribute data, this must be an array of Value",
            "\t\tand Value!, where Value! is a bitwise value specifying attributes such",
            "\t\tas Manual Data and Questionable. Refer to Data from an I/O and",
            "\t\tCalculations tag will always include attribute data and must always be",
            "\t\tprovided as an array of Value and Value!. An array of arrays - to be",
            "\t\tused only if the number of logged variables for each record",
            "\t\t(NumLogVars) is > 1 and the number of records to record (NumRecords)",
            "\t\tis > 1. The containing array size must match NumLog Vars and the",
            "\t\tnested array size must match NumRecords. See examples. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WriteINI": {
        "comments": [
            "{ Description: This subroutine writes a variable's value to a",
            "\tconfiguration file or a buffer containing one and returns its error",
            "\tcode. Will not access .Startup or .Dynamic files. }",
            "{ For developers the lock means that access to VTScada working copy",
            "\tfiles, both reading and writing, should not be done without having the",
            "\tlock. The lock is across all applications and system layer VTScada",
            "\tcode. The lock prevents two different piece of code from changing the",
            "\tsame code such that one piece of code sees inconsistent data while the",
            "\tother code is in the middle of changing it. This module is a member of",
            "\tthe System Library, and must therefore be prefaced by \\System. as",
            "\tshown in the \"Format\" section. If your application predates version",
            "\t11.2, use the backslash notation rather than dot: \\System\\ The",
            "\tsubroutine returns true (1) if the write was successful and invalid",
            "\totherwise. If the Settings file, the section, or the variable does not",
            "\texist, they will be created. Searches performed by this function are",
            "\tcase insensitive. Alignment of equal signs in the file is preserved. }"
        ],
        "snippets": [
            "System.WriteINI(",
            "\tFile, { Required. Any text expression giving the absolute path and",
            "\t\tfile name of the Settings file or a pointer to the buffer containing",
            "\t\tits contents, depending on parameter UseBuff. }",
            "\tSection, { Required. Any text expression giving the name of the",
            "\t\tsection in the file. This should not include the square brackets",
            "\t\tdelimiting the section. }",
            "\tVarName, { Required. Any text expression giving the name of the",
            "\t\tvariable for which the value is to be set. }",
            "\tValue, { Required. Any giving the value to be assigned to variable",
            "\t\tVarName. }",
            "\tUseBuff { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0) the value of File must be a pointer to a buffer, if false",
            "\t\t(0) it is a file that is to be used. The default used if this",
            "\t\tparameter is omitted is false. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WriteINIProperties": {
        "comments": [
            "{ Description: Writes properties to the local layer's various settings",
            "\tfiles in one operation. }",
            "{ This function is the opposite of ReadINIProperties. In nearly all",
            "\tcases, it is recommended that WritePropertiesFile be used in place of",
            "\tthis function. }"
        ],
        "snippets": [
            "Layer\\WriteINIProperties(",
            "\tINIProperties, { Required. A dictionary containing the properties and",
            "\t\tvalues to be written. This dictionary must have the same structure as",
            "\t\tthat returned by ReadINIProperties. }",
            "\tExternalLock { Optional Boolean. Set to TRUE if you do not want to",
            "\t\tacquire and release the lock. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WriteLock": {
        "comments": [
            "{ Description: This subroutine attempts to require a Write lock for",
            "\tthe specified service. Subroutine call only. }",
            "{ This subroutine is a member of the RPC Manager's Library, and must",
            "\ttherefore be prefaced by \\RPCManager\\, as shown in the \"Format\"",
            "\tsection. If the application you are developing is a script",
            "\tapplication, the subroutine call must be prefaced by",
            "\tSystem\\RPCManager\\, and the System variable must be declared in",
            "\tAppRoot.SRC. }"
        ],
        "snippets": [
            "\\RPCManager\\WriteLock(",
            "\tActivePtr, { Required. A reference to a variable that will be set to",
            "\t\t\"1\" when the Read lock is obtained. }",
            "\tService, { Required. The name by which the service is known. }",
            "\tOptGUID { An optional parameter indicating the GUID of the application",
            "\t\tin which the service instance is located. The default is the",
            "\t\tapplication to which the caller belongs. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WritePropertiesFile": {
        "comments": [
            "{ Description: Write a single Settings file according to the",
            "\tproperties in an INIFile structure. Replaces WriteINI and WriteSectINI",
            "\t}",
            "{ Many properties can be modified with a single call to",
            "\tWritePropertiesFile. The INIFile structure is as follows: INIFiles",
            "\tStruct [ FileName { File name to the settings file. Path may be",
            "\tincluded, but is better specified in the TargetDirectory parameter. };",
            "\tOEM { TRUE if an OEM layer file }; Workstation { Name of the",
            "\tworkstation or invalid if global }; Layer { Instance of application",
            "\tlayer owning the file }; Dynamic { TRUE if a dynamic property };",
            "\tSections { Dictionary of sections each element of which is an array of",
            "\tProperty structures }; Changed { User sets to true if the file has",
            "\tbeen changed, initialized to false }; ] The INIProperty structure isâ¦",
            "\tINIProperty Struct [ Name { Variable name in the .startup/.dynamic",
            "\tfile }; Value { Simple value }; Comment { Text comment if present in",
            "\tthe file }; Hidden { TRUE if not visible in Edit Properties GUI }; ];",
            "\tNote that if your intention is to write to a configuration file, this",
            "\tfunction should be called from within a ReadConfiguration callback or",
            "\ta ModifyConfiguration callback. }"
        ],
        "snippets": [
            "System.WritePropertiesFile(",
            "\tINIData, { Required. An INIFile data structure, containing the file",
            "\t\tname to write to and the application properties to be written. Created",
            "\t\tas follows... IniData = System.INIFiles(); See the Comments section",
            "\t\tfor a description of the INIFile data structure. }",
            "\tTargetDirectory, { A text expression providing a directory name to be",
            "\t\tconcatenated in front of the FileName provided by the INIData",
            "\t\tparameter. If left blank, a base path to the VTScada install directory",
            "\t\twill be appended to the what is in the FileName member of the INIFile",
            "\t\tstructure. }",
            "\tIsBuffer, { An optional logical expression. Set TRUE if the",
            "\t\tTargetDirectory parameter is a buffer, which will receive the output",
            "\t\tof the function. Defaults to FALSE (0). }",
            "\tFlushing { Optional Boolean. Set TRUE to force flushing of data to",
            "\t\tstorage immediately after the write This reduces the chance of data",
            "\t\tloss if the writing operation is interrupted. Defaults to FALSE. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "WriteSectINI": {
        "comments": [
            "{ Description: This subroutine writes an entire section to a",
            "\tconfiguration file or a buffer containing one and returns its error",
            "\tcode. Will not access .Startup or .Dynamic files. Access to",
            "\tconfiguration files is not reliable unless the caller holds the",
            "\tworking copy lock. Acquiring the lock is a steady-state only",
            "\toperation, and therefore similar legacy operations that used",
            "\tscript-mode access to these files are deprecated or no longer",
            "\tsupported (see comments) }",
            "{ WriteSectINI is a subroutine, and as such it needs to return",
            "\tquickly. It therefore cannot wait for a lock. For developers the lock",
            "\tmeans that access to VTScada working copy files, both reading and",
            "\twriting, should not be done without having the lock. The lock is",
            "\tacross all applications and system layer VTScada code. The lock",
            "\tprevents two different piece of code from changing the same code such",
            "\tthat one piece of code sees inconsistent data while the other code is",
            "\tin the middle of changing it. This module is a member of the System",
            "\tLibrary, and must therefore be prefaced by \\System. as shown in the",
            "\t\"Format\" section. If your application predates version 11.2, use the",
            "\tbackslash notation rather than dot: \\System\\ The subroutine returns",
            "\ttrue (1) if the write was successful and invalid otherwise. If the",
            "\tSettings file or the section does not exist, they will be created. If",
            "\tthe VarList parameter is invalid, a blank section will be created.",
            "\tThis is a destructive write. That is to say, the entire section of the",
            "\tfile is overwritten by the new section, regardless of the contents of",
            "\teither. Searches performed by this function are case insensitive.",
            "\tAlignment of equal signs in the file is preserved. }"
        ],
        "snippets": [
            "System.WriteSectINI(",
            "\tFile, { Required. Any text expression giving the absolute path and",
            "\t\tfile name of the Settings file or the name of the buffer containing",
            "\t\tits contents. }",
            "\tSection, { Required. Any text expression giving the name of the",
            "\t\tsection in the file. This should not include the square brackets",
            "\t\tdelimiting the section. }",
            "\tVarList, { Required. A 2 dimensional array containing the variables",
            "\t\tand their values to write to the file. The first row, VarList[0][N],",
            "\t\tcontains the variable names, while the second row, VarList[1][N]",
            "\t\tcontains their values. }",
            "\tUseBuff { An optional parameter that is any logical expression. If",
            "\t\ttrue (non-0) the value of File must be a pointer to a buffer, if false",
            "\t\t(0) it is a file that is to be used. The default used if this",
            "\t\tparameter is omitted is false. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "XLoc": {
        "comments": [
            "{ Description: Returns the X window coordinate of the locator (mouse).",
            "\t}"
        ],
        "snippets": [
            "XLoc();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "XMLAddSchema": {
        "comments": [
            "{ Description: Adds a schema to an XML Processor. }",
            "{ Each schema will be validated for standards conformance before being",
            "\tadded to the cache. Returns 0 if it succeeds, otherwise it returns a",
            "\tnumeric specifying a Windows error code and sets the variable named in",
            "\tthe optional ErrorMessageOut parameter to a text error message. If the",
            "\tschema load succeeds, the types identified by the schema are added to",
            "\tthe factory. }"
        ],
        "snippets": [
            "XMLAddSchema(",
            "\tXMLProcessorHandle, { Required. A valid processor, as returned by the",
            "\t\tfunction XMLProcessor. }",
            "\tNamespaceURI, { Required. A URI that specifies the namespace that the",
            "\t\tschema represents. }",
            "\tURL, { Required. The URL to fetch the schema from. }",
            "\tErrorMessageOut { An optional text parameter that allows an error",
            "\t\tmessage to be returned from the function. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "XMLCloneNode": {
        "comments": [
            "{ Description: Clones an existing XMLNode, optionally adding",
            "\tadditional members. }",
            "{ If the optional member dictionary parameter is supplied, any",
            "\tadditional members will be added to the cloned node in the same order",
            "\tthat they were added to the dictionary. }"
        ],
        "snippets": [
            "XMLCloneNode(",
            "\tXMLNode, { Required. A valid XMLNode. }",
            "\tMembersDictionary { An optional dictionary containing additional",
            "\t\tmembers to be added to the cloned node. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "XMLCreateNode": {
        "comments": [
            "{ Description: Creates a new XMLNode. }",
            "{ If the optional member dictionary parameter is supplied, any",
            "\tadditional members will be added to the XMLNode in the same order that",
            "\tthey were added to the dictionary. If the #comment or #cdata members",
            "\trequire values, they can be assigned after the node has been created.",
            "\t}"
        ],
        "snippets": [
            "XMLCreateNode(",
            "\tContents, { A text value to be placed in the #content member of the",
            "\t\tXMLNode. }",
            "\tAttributesDictionary, { A dictionary containing attributes for the",
            "\t\tXMLNode }",
            "\tNamespace, { A text value containing the namespace for the XMLNode. }",
            "\tMembersDictionary { A dictionary containing additional members to be",
            "\t\tadded to the XMLnode. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "XMLDeleteMember": {
        "comments": [
            "{ Description: Deletes a member from an XMLNode in-place. }",
            "{ The deletion of the member is done \"in-place\". }"
        ],
        "snippets": [
            "XMLDeleteMember(",
            "\tXMLNode, { Required. The XMLNode to delete the member from. }",
            "\tMemberName { Required. The name of the member to delete. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "XMLGetNode": {
        "comments": [
            "{ Description: Returns an XMLNode from a tree. }",
            "{ When isolating a particular XMLNode, to pass to a subroutine for",
            "\tinstance, the automatic subscripting of an XMLNode to provide the",
            "\tvalue in its #content member means that this is passed to the",
            "\tsubroutine. Thus, GoodXML = Valid(XMLGetNode(XMLData)); Is not",
            "\tequivalent to XMLObject = XMLGetNode(XMLData); GoodXML =",
            "\tValid(XMLObject); To defeat the automatic subscripting, use this",
            "\tfunction. See notes in VTScada Engine XML API for a discussion of how",
            "\tto address arrays within an XML node. }"
        ],
        "snippets": [
            "XMLGetNode(",
            "\tXMLNode { Required. The XMLNode to return. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "XMLParse": {
        "comments": [
            "{ Description: Parses the supplied XML using the specified XML",
            "\tProcessor. }",
            "{ The XML may be either a stream or a text value. Returns 0 if it",
            "\tsucceeds. Otherwise returns a numeric specifying a Windows error code",
            "\tand sets the variable named in the optional ErrorMessageOut parameter",
            "\tto a text error message. Passing a very large text value to the",
            "\tfunction will result in an error. To avoid this, convert the text",
            "\tvalue to a stream using BuffStream(). In versions of VTS prior to",
            "\trelease 10, it is necessary to explicitly slay the XMLNodeTree (the",
            "\tXMLNodeTreeOut parameter to XMLParse) when you are finished with it",
            "\tThe output parameter, XMLNodeTreeOut, will receive a valid XMLNode",
            "\ttree from a validating processor even if validation fails, so long as",
            "\tthe XML can be parsed. A valid \"XMLNodeTreeOut\" with a valid",
            "\t\"ErrorMessageOut\" indicates a parse-able message that fails",
            "\tvalidation. A helper function, GetXMLNodeArray, can be used on the",
            "\tresult to extract an array of XMLnodes matching a given type name. }"
        ],
        "snippets": [
            "XMLParse(",
            "\tXMLProcessorHandle, { Required. A valid processor, as returned by the",
            "\t\tXMLProcessor function. }",
            "\tXMLin, { Required. The XML text to be parsed. May be either text or a",
            "\t\tvalid stream. If the text supplied (either in the text value or the",
            "\t\tstream) is identifiable as a URL, the XML is fetched from that URL. }",
            "\tErrorMessageOut, { A text parameter into which a return error message",
            "\t\tmay be placed. }",
            "\tXMLNodeTreeOut, { Must be a variable into which the XMLNode tree,",
            "\t\tcreated by parsing the XML successfully, will be placed. }",
            "\tNamespaceDictionary { (Return value) A dictionary of namespaces and",
            "\t\tprefixes found in the parsing of the XML. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "XMLProcessor": {
        "comments": [
            "{ Description: Creates a new XML Processor. }",
            "{ If SchemaCacheDictionary is a valid variable, the XML Processor will",
            "\tbe a validating processor, otherwise it will be a non-validating",
            "\tprocessor. To destroy an XML Processor, invalidate the last reference",
            "\tto it. }"
        ],
        "snippets": [
            "XMLProcessor(",
            "\tSchemaCacheDictionary { Required. Must be a variable to hold the",
            "\t\tSchema Cache Dictionary. All the data types specified by the schemas",
            "\t\tin the cache will be added to this cache. Provide \"Invalid\" for a",
            "\t\tnon-validating processor. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "XMLWrite": {
        "comments": [
            "{ Description: Converts the instance of a type, as specified by",
            "\tXMLNodeTreeIn, into XML. }",
            "{ The XML is in the form of a stream and is inserted to the stream",
            "\tpassed in XMLOut, starting at its current position. If XMLOut does not",
            "\tcontain a stream, a new BufferStream is created and returned in",
            "\tXMLOut. Returns 0 if it succeeds. Otherwise returns a numeric",
            "\tspecifying a Windows error code and sets the variable named in the",
            "\toptional ErrorMessageOut parameter to a text error message. If",
            "\tXSLTString is not a valid XSLT transform, the XML out will not be",
            "\ttransformed, but ErrorMessageOut and the return value will be set to",
            "\tindicate the transform failure. }"
        ],
        "snippets": [
            "XMLWrite(",
            "\tXLProcessorHandle, { Required. A valid processor, as returned by the",
            "\t\tfunction XMLProcessor. }",
            "\tXMLNodeTreeIn, { Required. An XMLNodeTree such as would be created by",
            "\t\tXMLParse (XMLNodeTreeOut parameter). }",
            "\tXMLOut, { Required. A stream variable where the XML text will be",
            "\t\tplaced. See comments. }",
            "\tErrorMessageOut, { Required. A text parameter into which any return",
            "\t\terror message is placed. }",
            "\tNamespaceDictionary, { An optional dictionary of namespaces and",
            "\t\tprefixes such as would be created by XMLParse (NamespaceDictionary",
            "\t\tparameter). }",
            "\tXSLTString { An optional string containing an XSLT (extensible style",
            "\t\tsheet language transform) to be applied to the output XML. }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "XOr": {
        "comments": [
            "{ Description: Returns the bitwise exclusive OR of its parameters. }",
            "{ This function compares the corresponding bits of two values. The",
            "\tresult bit is 1 if exactly one of the two bits is 1. The result bit is",
            "\t0 if both bits are the same (either both 1 or both 0). This function",
            "\ttakes signed 64-bit integers values. If a number is passed outside the",
            "\trange of a signed 64-bit integer, then the function will return",
            "\tinvalid. If Value is invalid, the return value is invalid. (See:",
            "\tBitwise Parameters & Operations ) }"
        ],
        "snippets": [
            "XOr(",
            "\tParm1, Parm2 { Required. Any numeric expressions. If floating point",
            "\t\tvalues are supplied, they will be truncated to integers. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "Year": {
        "comments": [
            "{ Description: Returns the year for a given date number. }",
            "{ This function works in conjunction with the Day and Month functions",
            "\tto decompose a date number into the corresponding day, month and year.",
            "\t}"
        ],
        "snippets": [
            "Year(",
            "\tDate { Required. Any numeric expression giving the number of days",
            "\t\tsince January 1, 1970. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "YLoc": {
        "comments": [
            "{ Description: Returns the Y window coordinate of the locator (mouse).",
            "\t}"
        ],
        "snippets": [
            "YLoc();"
        ],
        "is_steady_state": true,
        "is_script": true
    },
    "ZBar": {
        "comments": [
            "{ Description: Draws a layered bar in a window. }",
            "{ Although this is a layered graphic, it cannot be edited using the",
            "\tIdea Studio. It is for use within text mode editing only. }"
        ],
        "snippets": [
            "ZBar(",
            "\tLeft, { Required. Any numeric expression for the left side coordinate",
            "\t\tof the bar. }",
            "\tBottom, { Required. Any numeric expression for the bottom side",
            "\t\tcoordinate of the bar. }",
            "\tRight, { Required. Any numeric expression for the right side",
            "\t\tcoordinate of the bar. }",
            "\tTop, { Required. Any numeric expression for the top side coordinate of",
            "\t\tthe bar. }",
            "\tColor { Required. May be any of the following: An RGB string in the",
            "\t\tform, \"<RRGGBB>\" A Constants for System Colors A VTScada Color Palette",
            "\t\tnumber from the palette. -1 (transparent) }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ZBox": {
        "comments": [
            "{ Description: Draws a layered box in a window. }",
            "{ Although this is a layered graphic, it cannot be edited using the",
            "\tIdea Studio. It is for use within text mode editing only. }"
        ],
        "snippets": [
            "ZBox(",
            "\tLeft, { Required. Any numeric expression for the left side coordinate",
            "\t\tof the box. }",
            "\tBottom, { Required. Any numeric expression for the bottom side",
            "\t\tcoordinate of the box. }",
            "\tRight, { Required. Any numeric expression for the right side",
            "\t\tcoordinate of the box. }",
            "\tTop, { Required. Any numeric expression for the top side coordinate of",
            "\t\tthe box. }",
            "\tColor { Required. May be any of the following: An RGB string in the",
            "\t\tform, \"<RRGGBB>\" A Constants for System Colors A VTScada Color Palette",
            "\t\tnumber from the palette. -1 (transparent) }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ZButton": {
        "comments": [
            "{ Description: Draws a layered button in a window and returns true",
            "\twhen selected. }",
            "{ Although this is a layered graphic, it cannot be edited using the",
            "\tIdea Studio. It is for use within text mode editing only. The colors",
            "\tfor this graphic are taken from Microsoft Windowsâ¢. This function",
            "\tbehaves like a Pick with the pressing of the left mouse button being",
            "\tthe button combination to be detected. It will return 1 on the",
            "\tpressing of the left mouse button. }"
        ],
        "snippets": [
            "ZButton(",
            "\tLeft, { Required. Any numeric expression for the left side coordinate",
            "\t\tof the button. }",
            "\tBottom, { Required. Any numeric expression for the bottom side",
            "\t\tcoordinate of the button. }",
            "\tRight, { Required. Any numeric expression for the right side",
            "\t\tcoordinate of the button. }",
            "\tTop, { Required. Any numeric expression for the top side coordinate of",
            "\t\tthe button. }",
            "\tLabel, { Required. Any text expression for the button label. Will not",
            "\t\tdisplay tab characters. }",
            "\tFocusID, { Required. Any numeric expression from 0 to 32767 for the",
            "\t\tfocus ID number. This is used to force the focus to this item. If this",
            "\t\tvalue is 0, the button text will be grayed, the button cannot be",
            "\t\tfocused and will not respond to mouse clicks. Values above or below",
            "\t\tzero allow the control to be used. This value is stored in a short. }",
            "\tFont { An optional parameter that is any expression for the font value",
            "\t\tto use. If this value is omitted, the default value of system font is",
            "\t\tused. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ZColorChange": {
        "comments": [
            "{ Description: Changes one color within a region to another color.",
            "\tThis is an older function, intended for use on objects that used a",
            "\tcolor range, such as pipes prior to release 11 of VTScada. }",
            "{ Although this is a layered graphic, it cannot be edited using the",
            "\tIdea Studio. It is for use within text mode editing only. A solid",
            "\tpattern should be used if you wish to change the color back to its",
            "\toriginal color. The order of graphics statements are an important",
            "\tfactor in determining which objects will have their color changed. The",
            "\tZColorChange function affects all objects underneath it, which means,",
            "\tany object whose graphic statement is before the ZColorChange",
            "\tstatement (including images that are displayed using a Load",
            "\tstatement). Any object whose statement follows the ZColorChange",
            "\tstatement will be unaffected. The background color will also be",
            "\taffected by ZColorChange. }"
        ],
        "snippets": [
            "ZColorChange(",
            "\tLeft, { Required. Any numeric expression for the left side coordinate",
            "\t\tof the change region. }",
            "\tBottom, { Required. Any numeric expression for the bottom side",
            "\t\tcoordinate of the change region. }",
            "\tRight, { Required. Any numeric expression for the right side",
            "\t\tcoordinate of the change region. }",
            "\tTop, { Required. Any numeric expression for the top side coordinate of",
            "\t\tthe change region. }",
            "\tOriginal, { Required. Any one of the colors of the existing region. }",
            "\tNew { Required. Any one of the colors which will replace the old. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ZEditField": {
        "comments": [
            "{ Description: Draws a layered text edit field in a window and returns",
            "\ta status value. Not editable when viewed on a VTScada Thin Client. }"
        ],
        "snippets": [
            "ZEditField(",
            "\tLeft, { Required. Any numeric expression for the left side coordinate",
            "\t\tof the field. }",
            "\tBottom, { Required. Any numeric expression for the bottom side",
            "\t\tcoordinate of the field. }",
            "\tRight, { Required. Any numeric expression for the right side",
            "\t\tcoordinate of the field. }",
            "\tTop, { Required. Any numeric expression for the top side coordinate of",
            "\t\tthe field. }",
            "\tTextVar, { Required. Must be a variable. The result of the text",
            "\t\tediting will be stored here. The value in this field will be",
            "\t\tautomatically inserted into the field. }",
            "\tLength, { Required. Any numeric expression for the number of",
            "\t\tcharacters allowed in this field. }",
            "\tFont, { Required. Any expression for the font value to use. }",
            "\tFocusID { Required. Any numeric expression from 0 to 32767 for the",
            "\t\tfocus ID number. This is used to force the focus to this item. Values",
            "\t\tbelow zero will render this control invisible. A value of zero makes",
            "\t\tthis control visible, but not editable. With values above zero, the",
            "\t\tcontrol will be editable. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ZGrid": {
        "comments": [
            "{ Description: Draws a layered point grid in a window. }",
            "{ Although this is a layered graphic, it cannot be edited using the",
            "\tIdea Studio. It is for use within text mode editing only. }"
        ],
        "snippets": [
            "ZGrid(",
            "\tLeft, { Required. Any numeric expression for the left side coordinate",
            "\t\tof the grid. }",
            "\tBottom, { Required. Any numeric expression for the bottom side",
            "\t\tcoordinate of the grid. }",
            "\tRight, { Required. Any numeric expression for the right side",
            "\t\tcoordinate of the grid. }",
            "\tTop, { Required. Any numeric expression for the top side coordinate of",
            "\t\tthe grid. }",
            "\tColor, { Required. May be any of the following: An RGB string in the",
            "\t\tform, \"<RRGGBB>\" A Constants for System Colors A VTScada Color Palette",
            "\t\tnumber from the palette. -1 (transparent) }",
            "\tXSpace, { Required. Any numeric expression giving a positive integer",
            "\t\tvalue for the spacing of the x-grid. }",
            "\tYSpace { Required. Any numeric expression giving a positive integer",
            "\t\tvalue for the spacing of the y-grid. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "Zip": {
        "comments": [
            "{ Description: Generates a zip archive of a file stream. }",
            "{ This module is a member of the System Library, and must therefore be",
            "\tprefaced by \\System. as shown in the \"Format\" section. If your",
            "\tapplication predates version 11.2, use the backslash notation rather",
            "\tthan dot: \\System\\ Work is done in-memory. This function can take",
            "\teither a file or a BuffStream as input. The output is generated in",
            "\tmemory and must be written to storage by your code. }"
        ],
        "snippets": [
            "\\System.Zip(",
            "\tFileDictionary, { Required Dictionary. This contains a key and one",
            "\t\tvalue: Key: The relative file path. May be a single value or an array",
            "\t\tof file paths. Value: An associated FileData structure for each key.",
            "\t\tFileData Struct [ FileStreamData { File Stream }; ];. }",
            "\tOutputStream { Required. A stream that will contain a zipped version",
            "\t\tof the specified file(s). }",
            ");"
        ],
        "is_steady_state": false,
        "is_script": true
    },
    "ZLine": {
        "comments": [
            "{ Description: Draws a line between given x and y coordinates in a",
            "\twindow. }",
            "{ Although this is a layered graphic, it cannot be edited using the",
            "\tIdea Studio. It is for use within text mode editing only. }"
        ],
        "snippets": [
            "ZLine(",
            "\tX1, Y1, { Required. Any numeric expressions for the X and Y",
            "\t\tcoordinates of the first endpoint of the line. }",
            "\tX2, Y2, { Required. Any numeric expressions for the X and Y",
            "\t\tcoordinates of the second endpoint of the line. }",
            "\tPen { Required. Any expression that returns the PEN object to use to",
            "\t\tdraw the line. A color value is also acceptable here, which may be any",
            "\t\tof the following: An RGB string in the form, \"<RRGGBB>\" A Constants",
            "\t\tfor System Colors A VTScada Color Palette number from the palette. -1",
            "\t\t(transparent) }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ZPipe": {
        "comments": [
            "{ Description: Draws a layered three-dimensional pipe in a window. }",
            "{ Although this is a layered graphic, it cannot be edited using the",
            "\tIdea Studio. It is for use within text mode editing only. The pipe",
            "\twill be drawn with a miter effect, such that pipe segments meet at",
            "\t45-degree angles. }"
        ],
        "snippets": [
            "ZPipe(",
            "\tXArrayElem, { Required. Any numeric expression that specifies the",
            "\t\tstarting array element. The array contains the X coordinates of the",
            "\t\tpath along which to draw the pipe. If processing a multidimensional",
            "\t\tarray, the usual rules apply to decide which dimension should be",
            "\t\texamined. }",
            "\tYArrayElem, { Required. Any numeric expression that specifies the",
            "\t\tstarting array element. The array contains the Y coordinates of the",
            "\t\tpath along which to draw the pipe. If processing a multidimensional",
            "\t\tarray, the usual rules apply to decide which dimension should be",
            "\t\texamined. }",
            "\tN, { Required. Any numeric expression giving the number of array",
            "\t\telements to use to define the path of the pipe. }",
            "\tLowIndex, { Required. Any numeric expression specifying the low index",
            "\t\tinto the current color palette. It is used in conjunction with the",
            "\t\tnext parameter to adjust the brightness and contrast of the shading. }",
            "\tHighIndex, { Required. Any numeric expression specifying the high",
            "\t\tindex into the current color palette. It is used in conjunction with",
            "\t\tthe previous parameter to adjust the brightness and contrast of the",
            "\t\tshading. }",
            "\tPixelWidth { Required. Any numeric expression specifying the width of",
            "\t\tthe shaded pipe in pixels and is subject to applicable scaling",
            "\t\tfactors. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    },
    "ZText": {
        "comments": [
            "{ Description: Draws a layered text label in a window. }",
            "{ Although this is a layered graphic, it cannot be edited using the",
            "\tIdea Studio. It is for use within text mode editing only. Will not",
            "\tdisplay tab characters. }"
        ],
        "snippets": [
            "ZText(",
            "\tLeft, { Required. Any numeric expression for the left side coordinate",
            "\t\tof the text. }",
            "\tBottom, { Required. Any numeric expression for the bottom side",
            "\t\tcoordinate of the text. }",
            "\tValue, { Required. Any text expression to display on the screen. }",
            "\tColor, { Required. May be any of the following: An RGB string in the",
            "\t\tform, \"<RRGGBB>\" A Constants for System Colors A VTScada Color Palette",
            "\t\tnumber from the palette. -1 (transparent) }",
            "\tFont { Required. Any expression for the font value to use. A numeric",
            "\t\tzero (0) may be used to get the default system font. }",
            ");"
        ],
        "is_steady_state": true,
        "is_script": false
    }
}